Optimizing: s000
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.022 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 51
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s000
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %9 = zext i8 %8 to i64
Closing BINOP
Gen:   %10 = or i64 %indvars.iv, %9
Operands done!
Generated:   %11 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %10
Gen:   %11 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %10
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %12 = load float, float* %11, align 1
Gen:   %12 = load float, float* %11, align 1
Generating MATCH
Match: 
  %add = fadd float %0, 1.000000e+00
  %add.1 = fadd float %1, 1.000000e+00
  %add.2 = fadd float %2, 1.000000e+00
  %add.3 = fadd float %3, 1.000000e+00
  %add.4 = fadd float %4, 1.000000e+00
  %add.5 = fadd float %5, 1.000000e+00
  %add.6 = fadd float %6, 1.000000e+00
  %add.7 = fadd float %7, 1.000000e+00
Generating IDENTICAL
Operands done!
Generated:   %13 = fadd float %12, 1.000000e+00
Gen:   %13 = fadd float %12, 1.000000e+00
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %14 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
Gen:   %14 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
Generating MATCH
Match: 
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   store float %13, float* %14, align 1
Gen:   store float %13, float* %14, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="1.000000e+00", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
11->10 
5->10 
6->10 
}

Gains: 93 - 13 = 80; Width: 8; Profitable; s000
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 5
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s111
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.025 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 75
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 16
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx.2, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx.4, align 4, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx.6, align 4, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx7.2, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx7.4, align 4, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx7.6, align 4, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx9.2, align 4, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx9.4, align 4, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx9.6, align 4, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s111
Generating tree
Generating MATCH
Match: 
  %0 = add nsw i64 %indvars.iv, -1
  %3 = add nuw nsw i64 %indvars.iv, 1
  %6 = add nuw nsw i64 %indvars.iv, 3
  %9 = add nuw nsw i64 %indvars.iv, 5
  %12 = add nuw nsw i64 %indvars.iv, 7
  %15 = add nuw nsw i64 %indvars.iv, 9
  %18 = add nuw nsw i64 %indvars.iv, 11
  %21 = add nuw nsw i64 %indvars.iv, 13
Generating IDENTICAL
Generating INTSEQ
Gen:   %27 = add i64 %26, -1
Operands done!
Generated:   %28 = add nsw i64 %indvars.iv, %27
Gen:   %28 = add nsw i64 %indvars.iv, %27
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %0
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %3
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %6
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %9
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %12
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %15
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %21
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
Gen:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %13 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %19 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %22 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %32 = add i64 %31, 0
Closing BINOP
Gen:   %33 = add nuw nsw i64 %indvars.iv, %32
Operands done!
Generated:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %33
Gen:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %33
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx7, align 4, !tbaa !4
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %14 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %17 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %20 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %23 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %35 = load float, float* %34, align 1
Gen:   %35 = load float, float* %34, align 1
Generating MATCH
Match: 
  %add = fadd float %1, %2
  %add.1 = fadd float %4, %5
  %add.2 = fadd float %7, %8
  %add.3 = fadd float %10, %11
  %add.4 = fadd float %13, %14
  %add.5 = fadd float %16, %17
  %add.6 = fadd float %19, %20
  %add.7 = fadd float %22, %23
Operands done!
Generated:   %36 = fadd float %30, %35
Gen:   %36 = fadd float %30, %35
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %33
Gen:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %33
Generating MATCH
Match: 
  store float %add, float* %arrayidx9, align 4, !tbaa !4
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx9.2, align 4, !tbaa !4
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx9.4, align 4, !tbaa !4
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx9.6, align 4, !tbaa !4
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   store float %36, float* %37, align 1
Gen:   store float %36, float* %37, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx9, align 4, !tbaa !4
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx9.2, align 4, !tbaa !4
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx9.4, align 4, !tbaa !4
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx9.6, align 4, !tbaa !4
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="-1..13, 2", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="0..14, 2", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
12->10 
7->12 
13->12 
4->14 
5->14 
12->14 
}

Gains: 149 - 30 = 119; Width: 8; Profitable; s111
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s1111
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.057 = phi i32 [ 0, %entry ], [ %inc36, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 147
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %25 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %29 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx9.2, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx9.3, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx9.4, align 16, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx9.5, align 4, !tbaa !4
Hit: load
  %26 = load float, float* %arrayidx9.6, align 8, !tbaa !4
Hit: load
  %30 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Hit: store
  store float %add30.1, float* %arrayidx33.1, align 8, !tbaa !4
Hit: store
  store float %add30.2, float* %arrayidx33.2, align 16, !tbaa !4
Hit: store
  store float %add30.3, float* %arrayidx33.3, align 8, !tbaa !4
Hit: store
  store float %add30.4, float* %arrayidx33.4, align 32, !tbaa !4
Hit: store
  store float %add30.5, float* %arrayidx33.5, align 8, !tbaa !4
Hit: store
  store float %add30.6, float* %arrayidx33.6, align 16, !tbaa !4
Hit: store
  store float %add30.7, float* %arrayidx33.7, align 8, !tbaa !4
Schedulable: 1
Loop Rolling: s1111
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %33 = zext i8 %32 to i64
Closing BINOP
Gen:   %34 = or i64 %indvars.iv, %33
Operands done!
Generated:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %34
Gen:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %34
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %36 = load float, float* %35, align 1
Gen:   %36 = load float, float* %35, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %34
Gen:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %34
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %17 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %25 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %29 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %38 = load float, float* %37, align 1
Gen:   %38 = load float, float* %37, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul.1 = fmul float %4, %5
  %mul.2 = fmul float %8, %9
  %mul.3 = fmul float %12, %13
  %mul.4 = fmul float %16, %17
  %mul.5 = fmul float %20, %21
  %mul.6 = fmul float %24, %25
  %mul.7 = fmul float %28, %29
Operands done!
Generated:   %39 = fmul float %36, %38
Gen:   %39 = fmul float %36, %38
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %34
Gen:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %34
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %10 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %14 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %18 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %22 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %26 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %30 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   %41 = load float, float* %40, align 1
Gen:   %41 = load float, float* %40, align 1
Generating MATCH
Match: 
  %mul12 = fmul float %1, %2
  %mul12.1 = fmul float %5, %6
  %mul12.2 = fmul float %9, %10
  %mul12.3 = fmul float %13, %14
  %mul12.4 = fmul float %17, %18
  %mul12.5 = fmul float %21, %22
  %mul12.6 = fmul float %25, %26
  %mul12.7 = fmul float %29, %30
Operands done!
Generated:   %42 = fmul float %38, %41
Gen:   %42 = fmul float %38, %41
Generating MATCH
Match: 
  %add = fadd float %mul, %mul12
  %add.1 = fadd float %mul.1, %mul12.1
  %add.2 = fadd float %mul.2, %mul12.2
  %add.3 = fadd float %mul.3, %mul12.3
  %add.4 = fadd float %mul.4, %mul12.4
  %add.5 = fadd float %mul.5, %mul12.5
  %add.6 = fadd float %mul.6, %mul12.6
  %add.7 = fadd float %mul.7, %mul12.7
Operands done!
Generated:   %43 = fadd float %39, %42
Gen:   %43 = fadd float %39, %42
Generating MATCH
Match: 
  %mul17 = fmul float %0, %0
  %mul17.1 = fmul float %4, %4
  %mul17.2 = fmul float %8, %8
  %mul17.3 = fmul float %12, %12
  %mul17.4 = fmul float %16, %16
  %mul17.5 = fmul float %20, %20
  %mul17.6 = fmul float %24, %24
  %mul17.7 = fmul float %28, %28
Operands done!
Generated:   %44 = fmul float %36, %36
Gen:   %44 = fmul float %36, %36
Generating MATCH
Match: 
  %add18 = fadd float %mul17, %add
  %add18.1 = fadd float %mul17.1, %add.1
  %add18.2 = fadd float %mul17.2, %add.2
  %add18.3 = fadd float %mul17.3, %add.3
  %add18.4 = fadd float %mul17.4, %add.4
  %add18.5 = fadd float %mul17.5, %add.5
  %add18.6 = fadd float %mul17.6, %add.6
  %add18.7 = fadd float %mul17.7, %add.7
Operands done!
Generated:   %45 = fadd float %44, %43
Gen:   %45 = fadd float %44, %43
Generating MATCH
Match: 
  %add24 = fadd float %mul12, %add18
  %add24.1 = fadd float %mul12.1, %add18.1
  %add24.2 = fadd float %mul12.2, %add18.2
  %add24.3 = fadd float %mul12.3, %add18.3
  %add24.4 = fadd float %mul12.4, %add18.4
  %add24.5 = fadd float %mul12.5, %add18.5
  %add24.6 = fadd float %mul12.6, %add18.6
  %add24.7 = fadd float %mul12.7, %add18.7
Operands done!
Generated:   %46 = fadd float %42, %45
Gen:   %46 = fadd float %42, %45
Generating MATCH
Match: 
  %mul29 = fmul float %0, %2
  %mul29.1 = fmul float %4, %6
  %mul29.2 = fmul float %8, %10
  %mul29.3 = fmul float %12, %14
  %mul29.4 = fmul float %16, %18
  %mul29.5 = fmul float %20, %22
  %mul29.6 = fmul float %24, %26
  %mul29.7 = fmul float %28, %30
Operands done!
Generated:   %47 = fmul float %36, %41
Gen:   %47 = fmul float %36, %41
Generating MATCH
Match: 
  %add30 = fadd float %mul29, %add24
  %add30.1 = fadd float %mul29.1, %add24.1
  %add30.2 = fadd float %mul29.2, %add24.2
  %add30.3 = fadd float %mul29.3, %add24.3
  %add30.4 = fadd float %mul29.4, %add24.4
  %add30.5 = fadd float %mul29.5, %add24.5
  %add30.6 = fadd float %mul29.6, %add24.6
  %add30.7 = fadd float %mul29.7, %add24.7
Operands done!
Generated:   %48 = fadd float %47, %46
Gen:   %48 = fadd float %47, %46
Generating MATCH
Match: 
  %3 = shl nuw nsw i64 %indvars.iv, 1
  %7 = shl nuw nsw i64 %indvars.iv.next, 1
  %11 = shl nuw nsw i64 %indvars.iv.next.1, 1
  %15 = shl nuw nsw i64 %indvars.iv.next.2, 1
  %19 = shl nuw nsw i64 %indvars.iv.next.3, 1
  %23 = shl nuw nsw i64 %indvars.iv.next.4, 1
  %27 = shl nuw nsw i64 %indvars.iv.next.5, 1
  %31 = shl nuw nsw i64 %indvars.iv.next.6, 1
Generating IDENTICAL
Operands done!
Generated:   %49 = shl nuw nsw i64 %34, 1
Gen:   %49 = shl nuw nsw i64 %34, 1
Generating MATCH
Match: 
  %arrayidx33 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %3
  %arrayidx33.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %7
  %arrayidx33.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %11
  %arrayidx33.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %15
  %arrayidx33.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %19
  %arrayidx33.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %23
  %arrayidx33.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %27
  %arrayidx33.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %31
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %50 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %49
Gen:   %50 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %49
Generating MATCH
Match: 
  store float %add30, float* %arrayidx33, align 64, !tbaa !4
  store float %add30.1, float* %arrayidx33.1, align 8, !tbaa !4
  store float %add30.2, float* %arrayidx33.2, align 16, !tbaa !4
  store float %add30.3, float* %arrayidx33.3, align 8, !tbaa !4
  store float %add30.4, float* %arrayidx33.4, align 32, !tbaa !4
  store float %add30.5, float* %arrayidx33.5, align 8, !tbaa !4
  store float %add30.6, float* %arrayidx33.6, align 16, !tbaa !4
  store float %add30.7, float* %arrayidx33.7, align 8, !tbaa !4
Operands done!
Generated:   store float %48, float* %50, align 1
Gen:   store float %48, float* %50, align 1
Graph code generated!
Root:
  store float %add30, float* %arrayidx33, align 64, !tbaa !4
  store float %add30.1, float* %arrayidx33.1, align 8, !tbaa !4
  store float %add30.2, float* %arrayidx33.2, align 16, !tbaa !4
  store float %add30.3, float* %arrayidx33.3, align 8, !tbaa !4
  store float %add30.4, float* %arrayidx33.4, align 32, !tbaa !4
  store float %add30.5, float* %arrayidx33.5, align 8, !tbaa !4
  store float %add30.6, float* %arrayidx33.6, align 16, !tbaa !4
  store float %add30.7, float* %arrayidx33.7, align 8, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
24 [label="shl", style="filled" , fillcolor="#8ae18a", shape=box];
25 [label="1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
22->0 
2->1 
13->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->11 
6->11 
7->11 
14->13 
18->13 
15->14 
10->14 
16->15 
17->16 
6->16 
7->16 
19->18 
20->18 
3->19 
3->19 
21->20 
14->20 
3->21 
15->21 
23->22 
6->22 
24->22 
7->24 
25->24 
}

Gains: 237 - 31 = 206; Width: 8; Profitable; s1111
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 17
IDENTICAL: 7
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s112
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.026 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 54
  %indvars.iv = phi i64 [ 31998, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Is Addition
BinOp Seq
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.4, align 8, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx7.4, align 8, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx, align 8, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx.1, align 4, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx.2, align 8, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx.3, align 4, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx.4, align 8, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx.5, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s112
Generating tree
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 8, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %5 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %9 = load float, float* %arrayidx.4, align 8, !tbaa !4
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %13 = load float, float* %arrayidx.6, align 8, !tbaa !4
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %20 = add i64 %19, 0
Closing BINOP
Found use: 6:   %cmp3.6.not = icmp eq i64 %indvars.iv.next.5, 0
Extracting:   %21 = add nsw i64 %indvars.iv, %20
Gen:   %22 = add nsw i64 %indvars.iv, %21
Operands done!
Generated:   %24 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %22
Found use: 6:   store float %add.7, float* %arrayidx.6, align 8, !tbaa !4
Extracting:   %24 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %22
Gen:   %25 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %23
Operands done!
Generated:   %27 = load float, float* %25, align 1
Gen:   %27 = load float, float* %25, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %28 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %23
Gen:   %28 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %23
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx7, align 8, !tbaa !4
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %12 = load float, float* %arrayidx7.4, align 8, !tbaa !4
  %14 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %16 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Operands done!
Generated:   %29 = load float, float* %28, align 1
Gen:   %29 = load float, float* %28, align 1
Generating MATCH
Match: 
  %add = fadd float %2, %3
  %add.1 = fadd float %5, %6
  %add.2 = fadd float %7, %8
  %add.3 = fadd float %9, %10
  %add.4 = fadd float %11, %12
  %add.5 = fadd float %13, %14
  %add.6 = fadd float %15, %16
Operands done!
Generated:   %30 = fadd float %27, %29
Gen:   %30 = fadd float %27, %29
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %4
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %32 = add i64 %31, 1
Closing BINOP
Gen:   %33 = add nsw i64 %indvars.iv, %32
Operands done!
Generated:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %33
Gen:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %33
Generating MATCH
Match: 
  store float %add, float* %arrayidx10, align 4, !tbaa !4
  store float %add.1, float* %arrayidx, align 8, !tbaa !4
  store float %add.2, float* %arrayidx.1, align 4, !tbaa !4
  store float %add.3, float* %arrayidx.2, align 8, !tbaa !4
  store float %add.4, float* %arrayidx.3, align 4, !tbaa !4
  store float %add.5, float* %arrayidx.4, align 8, !tbaa !4
  store float %add.6, float* %arrayidx.5, align 4, !tbaa !4
Operands done!
Generated:   store float %30, float* %34, align 1
Gen:   store float %30, float* %34, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx10, align 4, !tbaa !4
  store float %add.1, float* %arrayidx, align 8, !tbaa !4
  store float %add.2, float* %arrayidx.1, align 4, !tbaa !4
  store float %add.3, float* %arrayidx.2, align 8, !tbaa !4
  store float %add.4, float* %arrayidx.3, align 4, !tbaa !4
  store float %add.5, float* %arrayidx.4, align 8, !tbaa !4
  store float %add.6, float* %arrayidx.5, align 4, !tbaa !4
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..-6, -1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="1..-5, -1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
12->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
4->12 
5->12 
13->12 
7->13 
14->13 
15 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->15
16 [label="icmp", style="filled" , fillcolor="#f2eb5c", shape=box];
6->16
}

Gains: 97 - 48 = 49; Width: 7; Profitable; s112
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 7
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 2
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 8
Done Loop Roller: 1/1
Optimizing: s1112
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.022 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 51
  %indvars.iv = phi i64 [ 31999, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nsw i64 %indvars.iv, -8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %2 = load float, float* %arrayidx.2, align 4, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.4, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.6, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s1112
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %11 = add i64 %10, 0
Closing BINOP
Found use: 7:   %cmp3.7.not = icmp eq i64 %indvars.iv.next.6, 0
Extracting:   %12 = add nsw i64 %indvars.iv, %11
Gen:   %13 = add nsw i64 %indvars.iv, %12
Operands done!
Generated:   %15 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %13
Gen:   %15 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %13
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %3 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %5 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %7 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %8 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %16 = load float, float* %15, align 1
Gen:   %16 = load float, float* %15, align 1
Generating MATCH
Match: 
  %add = fadd float %1, 1.000000e+00
  %add.1 = fadd float %2, 1.000000e+00
  %add.2 = fadd float %3, 1.000000e+00
  %add.3 = fadd float %4, 1.000000e+00
  %add.4 = fadd float %5, 1.000000e+00
  %add.5 = fadd float %6, 1.000000e+00
  %add.6 = fadd float %7, 1.000000e+00
  %add.7 = fadd float %8, 1.000000e+00
Generating IDENTICAL
Operands done!
Generated:   %17 = fadd float %16, 1.000000e+00
Gen:   %17 = fadd float %16, 1.000000e+00
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %18 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %13
Gen:   %18 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %13
Generating MATCH
Match: 
  store float %add, float* %arrayidx7, align 4, !tbaa !4
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !4
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !4
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   store float %17, float* %18, align 1
Gen:   store float %17, float* %18, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx7, align 4, !tbaa !4
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !4
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !4
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..-7, -1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="1.000000e+00", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
11->10 
5->10 
6->10 
12 [label="icmp", style="filled" , fillcolor="#f2eb5c", shape=box];
6->12
}

Gains: 93 - 28 = 65; Width: 8; Profitable; s1112
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 5
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s113
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.022 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 52
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
Hit: load
  %4 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
Hit: load
  %6 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
Hit: load
  %8 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
Hit: load
  %10 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
Hit: load
  %12 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx.2, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.4, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx.6, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s113
Generating tree
Generating MATCH
Match: 
  %0 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %2 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %4 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %6 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %8 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %10 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %12 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
Generating IDENTICAL
Operands done!
Generated:   %17 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 1
Gen:   %17 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 1
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %18 = zext i8 %16 to i64
Closing BINOP
Gen:   %19 = add nuw nsw i64 %indvars.iv, %18
Operands done!
Generated:   %20 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %19
Gen:   %20 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %19
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %5 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %9 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %13 = load float, float* %arrayidx.6, align 4, !tbaa !4
Operands done!
Generated:   %21 = load float, float* %20, align 1
Gen:   %21 = load float, float* %20, align 1
Generating MATCH
Match: 
  %add = fadd float %0, %1
  %add.1 = fadd float %2, %3
  %add.2 = fadd float %4, %5
  %add.3 = fadd float %6, %7
  %add.4 = fadd float %8, %9
  %add.5 = fadd float %10, %11
  %add.6 = fadd float %12, %13
Operands done!
Generated:   %22 = fadd float %17, %21
Gen:   %22 = fadd float %17, %21
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %23 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %19
Gen:   %23 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %19
Generating MATCH
Match: 
  store float %add, float* %arrayidx7, align 4, !tbaa !4
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !4
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !4
Operands done!
Generated:   store float %22, float* %23, align 1
Gen:   store float %22, float* %23, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx7, align 4, !tbaa !4
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !4
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !4
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
11->0 
2->1 
4->1 
3->2 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
7->11 
8->11 
}

Gains: 95 - 15 = 80; Width: 7; Profitable; s113
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 6
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 8
Done Loop Roller: 1/1
Optimizing: s1113
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.022 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 59
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
Hit: load
  %4 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
Hit: load
  %6 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
Hit: load
  %8 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
Hit: load
  %10 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
Hit: load
  %12 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
Hit: load
  %14 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s1113
Generating tree
Generating MATCH
Match: 
  %0 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
  %2 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
  %4 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
  %6 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
  %8 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
  %10 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
  %12 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
  %14 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
Generating IDENTICAL
Operands done!
Generated:   %17 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 1
Gen:   %17 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 1
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %18 = zext i8 %16 to i64
Closing BINOP
Gen:   %19 = or i64 %indvars.iv, %18
Operands done!
Generated:   %20 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %19
Gen:   %20 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %19
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 32, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %5 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %9 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %13 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %21 = load float, float* %20, align 1
Gen:   %21 = load float, float* %20, align 1
Generating MATCH
Match: 
  %add = fadd float %0, %1
  %add.1 = fadd float %2, %3
  %add.2 = fadd float %4, %5
  %add.3 = fadd float %6, %7
  %add.4 = fadd float %8, %9
  %add.5 = fadd float %10, %11
  %add.6 = fadd float %12, %13
  %add.7 = fadd float %14, %15
Operands done!
Generated:   %22 = fadd float %17, %21
Gen:   %22 = fadd float %17, %21
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %23 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %19
Gen:   %23 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %19
Generating MATCH
Match: 
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   store float %22, float* %23, align 1
Gen:   store float %22, float* %23, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
11->0 
2->1 
4->1 
3->2 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
7->11 
8->11 
}

Gains: 109 - 15 = 94; Width: 8; Profitable; s1113
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 6
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s114
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.047 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %indvars.iv48 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next49, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 3
BlockSize: 11
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body9 ], [ 0, %for.cond6.preheader ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s114
Optimizing: s115
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.040 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv43 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next44, %for.cond2.loopexit ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next, %for.cond2.loopexit ]
BlockSize: 6
BlockSize: 14
  %indvars.iv41.prol = phi i64 [ %indvars.iv.next42.prol, %for.body9.prol ], [ %indvars.iv, %for.body9.lr.ph ]
  %indvars.iv.next42.prol = add nuw nsw i64 %indvars.iv41.prol, 1
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body9.prol ], [ %xtraiter, %for.body9.lr.ph ]
  %prol.iter.sub = add i32 %prol.iter, -1
Attempting Group:
BlockSize: 5
  %indvars.iv41.unr = phi i64 [ %indvars.iv, %for.body9.lr.ph ], [ %indvars.iv.next42.prol, %for.body9.prol ]
BlockSize: 75
  %indvars.iv41 = phi i64 [ %indvars.iv.next42.7, %for.body9 ], [ %indvars.iv41.unr, %for.body9.prol.loopexit ]
  %indvars.iv.next42.7 = add nuw nsw i64 %indvars.iv41, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %11 = load float, float* %arrayidx11.1, align 4, !tbaa !5
Hit: load
  %14 = load float, float* %arrayidx11.2, align 4, !tbaa !5
Hit: load
  %17 = load float, float* %arrayidx11.3, align 4, !tbaa !5
Hit: load
  %20 = load float, float* %arrayidx11.4, align 4, !tbaa !5
Hit: load
  %23 = load float, float* %arrayidx11.5, align 4, !tbaa !5
Hit: load
  %26 = load float, float* %arrayidx11.6, align 4, !tbaa !5
Hit: load
  %29 = load float, float* %arrayidx11.7, align 4, !tbaa !5
Hit: load
  %12 = load float, float* %arrayidx13, align 4, !tbaa !5
Hit: load
  %15 = load float, float* %arrayidx13, align 4, !tbaa !5
Hit: load
  %18 = load float, float* %arrayidx13, align 4, !tbaa !5
Hit: load
  %21 = load float, float* %arrayidx13, align 4, !tbaa !5
Hit: load
  %24 = load float, float* %arrayidx13, align 4, !tbaa !5
Hit: load
  %27 = load float, float* %arrayidx13, align 4, !tbaa !5
Hit: load
  %30 = load float, float* %arrayidx13, align 4, !tbaa !5
Hit: load
  %13 = load float, float* %arrayidx15.1, align 4, !tbaa !5
Hit: load
  %16 = load float, float* %arrayidx15.2, align 4, !tbaa !5
Hit: load
  %19 = load float, float* %arrayidx15.3, align 4, !tbaa !5
Hit: load
  %22 = load float, float* %arrayidx15.4, align 4, !tbaa !5
Hit: load
  %25 = load float, float* %arrayidx15.5, align 4, !tbaa !5
Hit: load
  %28 = load float, float* %arrayidx15.6, align 4, !tbaa !5
Hit: load
  %31 = load float, float* %arrayidx15.7, align 4, !tbaa !5
Hit: store
  store float %sub.1, float* %arrayidx15.1, align 4, !tbaa !5
Hit: store
  store float %sub.2, float* %arrayidx15.2, align 4, !tbaa !5
Hit: store
  store float %sub.3, float* %arrayidx15.3, align 4, !tbaa !5
Hit: store
  store float %sub.4, float* %arrayidx15.4, align 4, !tbaa !5
Hit: store
  store float %sub.5, float* %arrayidx15.5, align 4, !tbaa !5
Hit: store
  store float %sub.6, float* %arrayidx15.6, align 4, !tbaa !5
Hit: store
  store float %sub.7, float* %arrayidx15.7, align 4, !tbaa !5
Schedulable: 1
Loop Rolling: s115
Generating tree
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv43, i64 %indvars.iv41
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv43, i64 %indvars.iv.next42
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv43, i64 %indvars.iv.next42.1
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv43, i64 %indvars.iv.next42.2
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv43, i64 %indvars.iv.next42.3
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv43, i64 %indvars.iv.next42.4
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv43, i64 %indvars.iv.next42.5
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv43, i64 %indvars.iv.next42.6
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %33 = zext i8 %32 to i64
Closing BINOP
Gen:   %34 = add nuw nsw i64 %indvars.iv41, %33
Operands done!
Generated:   %35 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv43, i64 %34
Gen:   %35 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv43, i64 %34
Generating MATCH
Match: 
  %8 = load float, float* %arrayidx11, align 4, !tbaa !5
  %11 = load float, float* %arrayidx11.1, align 4, !tbaa !5
  %14 = load float, float* %arrayidx11.2, align 4, !tbaa !5
  %17 = load float, float* %arrayidx11.3, align 4, !tbaa !5
  %20 = load float, float* %arrayidx11.4, align 4, !tbaa !5
  %23 = load float, float* %arrayidx11.5, align 4, !tbaa !5
  %26 = load float, float* %arrayidx11.6, align 4, !tbaa !5
  %29 = load float, float* %arrayidx11.7, align 4, !tbaa !5
Operands done!
Generated:   %36 = load float, float* %35, align 1
Gen:   %36 = load float, float* %35, align 1
Generating MATCH
Match: 
  %9 = load float, float* %arrayidx13, align 4, !tbaa !5
  %12 = load float, float* %arrayidx13, align 4, !tbaa !5
  %15 = load float, float* %arrayidx13, align 4, !tbaa !5
  %18 = load float, float* %arrayidx13, align 4, !tbaa !5
  %21 = load float, float* %arrayidx13, align 4, !tbaa !5
  %24 = load float, float* %arrayidx13, align 4, !tbaa !5
  %27 = load float, float* %arrayidx13, align 4, !tbaa !5
  %30 = load float, float* %arrayidx13, align 4, !tbaa !5
Generating IDENTICAL
Operands done!
Generated:   %37 = load float, float* %arrayidx13, align 1
Gen:   %37 = load float, float* %arrayidx13, align 1
Generating MATCH
Match: 
  %mul = fmul float %8, %9
  %mul.1 = fmul float %11, %12
  %mul.2 = fmul float %14, %15
  %mul.3 = fmul float %17, %18
  %mul.4 = fmul float %20, %21
  %mul.5 = fmul float %23, %24
  %mul.6 = fmul float %26, %27
  %mul.7 = fmul float %29, %30
Operands done!
Generated:   %38 = fmul float %36, %37
Gen:   %38 = fmul float %36, %37
Generating MATCH
Match: 
  %arrayidx15 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv41
  %arrayidx15.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next42
  %arrayidx15.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next42.1
  %arrayidx15.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next42.2
  %arrayidx15.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next42.3
  %arrayidx15.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next42.4
  %arrayidx15.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next42.5
  %arrayidx15.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next42.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %39 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %34
Gen:   %39 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %34
Generating MATCH
Match: 
  %10 = load float, float* %arrayidx15, align 4, !tbaa !5
  %13 = load float, float* %arrayidx15.1, align 4, !tbaa !5
  %16 = load float, float* %arrayidx15.2, align 4, !tbaa !5
  %19 = load float, float* %arrayidx15.3, align 4, !tbaa !5
  %22 = load float, float* %arrayidx15.4, align 4, !tbaa !5
  %25 = load float, float* %arrayidx15.5, align 4, !tbaa !5
  %28 = load float, float* %arrayidx15.6, align 4, !tbaa !5
  %31 = load float, float* %arrayidx15.7, align 4, !tbaa !5
Operands done!
Generated:   %40 = load float, float* %39, align 1
Gen:   %40 = load float, float* %39, align 1
Generating MATCH
Match: 
  %sub = fsub float %10, %mul
  %sub.1 = fsub float %13, %mul.1
  %sub.2 = fsub float %16, %mul.2
  %sub.3 = fsub float %19, %mul.3
  %sub.4 = fsub float %22, %mul.4
  %sub.5 = fsub float %25, %mul.5
  %sub.6 = fsub float %28, %mul.6
  %sub.7 = fsub float %31, %mul.7
Operands done!
Generated:   %41 = fsub float %40, %38
Gen:   %41 = fsub float %40, %38
Generating MATCH
Match: 
  store float %sub, float* %arrayidx15, align 4, !tbaa !5
  store float %sub.1, float* %arrayidx15.1, align 4, !tbaa !5
  store float %sub.2, float* %arrayidx15.2, align 4, !tbaa !5
  store float %sub.3, float* %arrayidx15.3, align 4, !tbaa !5
  store float %sub.4, float* %arrayidx15.4, align 4, !tbaa !5
  store float %sub.5, float* %arrayidx15.5, align 4, !tbaa !5
  store float %sub.6, float* %arrayidx15.6, align 4, !tbaa !5
  store float %sub.7, float* %arrayidx15.7, align 4, !tbaa !5
Operands done!
Generated:   store float %41, float* %39, align 1
Gen:   store float %41, float* %39, align 1
Graph code generated!
Root:
  store float %sub, float* %arrayidx15, align 4, !tbaa !5
  store float %sub.1, float* %arrayidx15.1, align 4, !tbaa !5
  store float %sub.2, float* %arrayidx15.2, align 4, !tbaa !5
  store float %sub.3, float* %arrayidx15.3, align 4, !tbaa !5
  store float %sub.4, float* %arrayidx15.4, align 4, !tbaa !5
  store float %sub.5, float* %arrayidx15.5, align 4, !tbaa !5
  store float %sub.6, float* %arrayidx15.6, align 4, !tbaa !5
  store float %sub.7, float* %arrayidx15.7, align 4, !tbaa !5
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fsub", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
14->9 
11->10 
12->11 
5->11 
13->11 
6->11 
15->14 
}

Gains: 133 - 18 = 115; Width: 8; Profitable; s115
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s1115
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.050 = phi i32 [ 0, %entry ], [ %inc29, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %indvars.iv51 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next52, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 3
BlockSize: 83
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx11.1, align 4, !tbaa !5
Hit: load
  %6 = load float, float* %arrayidx11.2, align 8, !tbaa !5
Hit: load
  %9 = load float, float* %arrayidx11.3, align 4, !tbaa !5
Hit: load
  %12 = load float, float* %arrayidx11.4, align 16, !tbaa !5
Hit: load
  %15 = load float, float* %arrayidx11.5, align 4, !tbaa !5
Hit: load
  %18 = load float, float* %arrayidx11.6, align 8, !tbaa !5
Hit: load
  %21 = load float, float* %arrayidx11.7, align 4, !tbaa !5
Hit: load
  %4 = load float, float* %arrayidx15.1, align 4, !tbaa !5
Hit: load
  %7 = load float, float* %arrayidx15.2, align 4, !tbaa !5
Hit: load
  %10 = load float, float* %arrayidx15.3, align 4, !tbaa !5
Hit: load
  %13 = load float, float* %arrayidx15.4, align 4, !tbaa !5
Hit: load
  %16 = load float, float* %arrayidx15.5, align 4, !tbaa !5
Hit: load
  %19 = load float, float* %arrayidx15.6, align 4, !tbaa !5
Hit: load
  %22 = load float, float* %arrayidx15.7, align 4, !tbaa !5
Hit: load
  %5 = load float, float* %arrayidx19.1, align 4, !tbaa !5
Hit: load
  %8 = load float, float* %arrayidx19.2, align 8, !tbaa !5
Hit: load
  %11 = load float, float* %arrayidx19.3, align 4, !tbaa !5
Hit: load
  %14 = load float, float* %arrayidx19.4, align 16, !tbaa !5
Hit: load
  %17 = load float, float* %arrayidx19.5, align 4, !tbaa !5
Hit: load
  %20 = load float, float* %arrayidx19.6, align 8, !tbaa !5
Hit: load
  %23 = load float, float* %arrayidx19.7, align 4, !tbaa !5
Hit: store
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !5
Hit: store
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !5
Hit: store
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !5
Hit: store
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !5
Hit: store
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !5
Hit: store
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !5
Hit: store
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !5
Schedulable: 1
Loop Rolling: s1115
Generating tree
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv51, i64 %indvars.iv
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next.1
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next.2
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next.3
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next.4
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next.5
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = zext i8 %24 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %25
Operands done!
Generated:   %27 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv51, i64 %26
Gen:   %27 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv51, i64 %26
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx11, align 32, !tbaa !5
  %3 = load float, float* %arrayidx11.1, align 4, !tbaa !5
  %6 = load float, float* %arrayidx11.2, align 8, !tbaa !5
  %9 = load float, float* %arrayidx11.3, align 4, !tbaa !5
  %12 = load float, float* %arrayidx11.4, align 16, !tbaa !5
  %15 = load float, float* %arrayidx11.5, align 4, !tbaa !5
  %18 = load float, float* %arrayidx11.6, align 8, !tbaa !5
  %21 = load float, float* %arrayidx11.7, align 4, !tbaa !5
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv, i64 %indvars.iv51
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next, i64 %indvars.iv51
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv51
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv51
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv51
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv51
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv51
  %arrayidx15.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv51
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %26, i64 %indvars.iv51
Gen:   %29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %26, i64 %indvars.iv51
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx15, align 4, !tbaa !5
  %4 = load float, float* %arrayidx15.1, align 4, !tbaa !5
  %7 = load float, float* %arrayidx15.2, align 4, !tbaa !5
  %10 = load float, float* %arrayidx15.3, align 4, !tbaa !5
  %13 = load float, float* %arrayidx15.4, align 4, !tbaa !5
  %16 = load float, float* %arrayidx15.5, align 4, !tbaa !5
  %19 = load float, float* %arrayidx15.6, align 4, !tbaa !5
  %22 = load float, float* %arrayidx15.7, align 4, !tbaa !5
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul.1 = fmul float %3, %4
  %mul.2 = fmul float %6, %7
  %mul.3 = fmul float %9, %10
  %mul.4 = fmul float %12, %13
  %mul.5 = fmul float %15, %16
  %mul.6 = fmul float %18, %19
  %mul.7 = fmul float %21, %22
Operands done!
Generated:   %31 = fmul float %28, %30
Gen:   %31 = fmul float %28, %30
Generating MATCH
Match: 
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51, i64 %indvars.iv
  %arrayidx19.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next
  %arrayidx19.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next.1
  %arrayidx19.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next.2
  %arrayidx19.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next.3
  %arrayidx19.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next.4
  %arrayidx19.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next.5
  %arrayidx19.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %32 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51, i64 %26
Gen:   %32 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51, i64 %26
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx19, align 32, !tbaa !5
  %5 = load float, float* %arrayidx19.1, align 4, !tbaa !5
  %8 = load float, float* %arrayidx19.2, align 8, !tbaa !5
  %11 = load float, float* %arrayidx19.3, align 4, !tbaa !5
  %14 = load float, float* %arrayidx19.4, align 16, !tbaa !5
  %17 = load float, float* %arrayidx19.5, align 4, !tbaa !5
  %20 = load float, float* %arrayidx19.6, align 8, !tbaa !5
  %23 = load float, float* %arrayidx19.7, align 4, !tbaa !5
Operands done!
Generated:   %33 = load float, float* %32, align 1
Gen:   %33 = load float, float* %32, align 1
Generating MATCH
Match: 
  %add = fadd float %mul, %2
  %add.1 = fadd float %mul.1, %5
  %add.2 = fadd float %mul.2, %8
  %add.3 = fadd float %mul.3, %11
  %add.4 = fadd float %mul.4, %14
  %add.5 = fadd float %mul.5, %17
  %add.6 = fadd float %mul.6, %20
  %add.7 = fadd float %mul.7, %23
Operands done!
Generated:   %34 = fadd float %31, %33
Gen:   %34 = fadd float %31, %33
Generating MATCH
Match: 
  store float %add, float* %arrayidx11, align 32, !tbaa !5
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !5
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !5
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !5
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !5
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !5
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !5
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !5
Operands done!
Generated:   store float %34, float* %27, align 1
Gen:   store float %34, float* %27, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx11, align 32, !tbaa !5
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !5
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !5
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !5
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !5
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !5
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !5
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !5
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
4->0 
2->1 
14->1 
3->2 
11->2 
4->3 
5->4 
6->4 
7->4 
8->4 
9->8 
10->8 
12->11 
13->12 
6->12 
8->12 
7->12 
15->14 
16->15 
6->15 
7->15 
8->15 
}

Gains: 149 - 20 = 129; Width: 8; Profitable; s1115
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 9
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s116
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.077 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 30
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %9, %for.body5 ]
  %9 = load float, float* %arrayidx42, align 4, !tbaa !2
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body5 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 5
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
4 x 5
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 5
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 5
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
5 x 5
Final Match: 0
Int Seq
Invalid:   %arrayidx32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %7
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..4, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
4->0 
2->1 
3->1 
5->4 
6->4 
7->4 
8->7 
9->7 
10 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
4->10
11 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
4->11
12 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
4->12
13 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
4->13
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
4 x 5
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 5
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 5
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
5 x 5
Final Match: 0
Int Seq
Invalid:   %arrayidx32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %7
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..4, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
4->0 
2->1 
3->1 
5->4 
6->4 
7->4 
8->7 
9->7 
10 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
4->10
11 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
4->11
12 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
4->12
13 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
4->13
}

Done Loop Roller: 0/0
Nothing found in: s116
Optimizing: s118
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.042 = phi i32 [ 0, %entry ], [ %inc23, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
  %indvars.iv44 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next45, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 3
BlockSize: 14
  %0 = phi float [ %.pre, %for.cond6.preheader ], [ %add, %for.body9 ]
  %add = fadd float %0, %mul
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next, %for.body9 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s118
Optimizing: s119
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.045 = phi i32 [ 0, %entry ], [ %inc26, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %indvars.iv47 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next48, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 3
BlockSize: 60
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx12.1, align 4, !tbaa !5
Hit: load
  %6 = load float, float* %arrayidx12.2, align 4, !tbaa !5
Hit: load
  %8 = load float, float* %arrayidx12.3, align 4, !tbaa !5
Hit: load
  %10 = load float, float* %arrayidx12.4, align 4, !tbaa !5
Hit: load
  %12 = load float, float* %arrayidx12.5, align 4, !tbaa !5
Hit: load
  %14 = load float, float* %arrayidx12.6, align 4, !tbaa !5
Hit: load
  %5 = load float, float* %arrayidx16.1, align 4, !tbaa !5
Hit: load
  %7 = load float, float* %arrayidx16.2, align 4, !tbaa !5
Hit: load
  %9 = load float, float* %arrayidx16.3, align 4, !tbaa !5
Hit: load
  %11 = load float, float* %arrayidx16.4, align 4, !tbaa !5
Hit: load
  %13 = load float, float* %arrayidx16.5, align 4, !tbaa !5
Hit: load
  %15 = load float, float* %arrayidx16.6, align 4, !tbaa !5
Hit: store
  store float %add.1, float* %arrayidx20.1, align 4, !tbaa !5
Hit: store
  store float %add.2, float* %arrayidx20.2, align 4, !tbaa !5
Hit: store
  store float %add.3, float* %arrayidx20.3, align 4, !tbaa !5
Hit: store
  store float %add.4, float* %arrayidx20.4, align 4, !tbaa !5
Hit: store
  store float %add.5, float* %arrayidx20.5, align 4, !tbaa !5
Hit: store
  store float %add.6, float* %arrayidx20.6, align 4, !tbaa !5
Schedulable: 1
Loop Rolling: s119
Generating tree
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %20 = add i64 %19, -1
Closing BINOP
Gen:   %21 = add nsw i64 %indvars.iv, %20
Generating MATCH
Match: 
  %arrayidx12 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %1
  %arrayidx12.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv
  %arrayidx12.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next
  %arrayidx12.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.1
  %arrayidx12.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.2
  %arrayidx12.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.3
  %arrayidx12.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.4
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %21
Gen:   %22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %21
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx12, align 4, !tbaa !5
  %4 = load float, float* %arrayidx12.1, align 4, !tbaa !5
  %6 = load float, float* %arrayidx12.2, align 4, !tbaa !5
  %8 = load float, float* %arrayidx12.3, align 4, !tbaa !5
  %10 = load float, float* %arrayidx12.4, align 4, !tbaa !5
  %12 = load float, float* %arrayidx12.5, align 4, !tbaa !5
  %14 = load float, float* %arrayidx12.6, align 4, !tbaa !5
Operands done!
Generated:   %23 = load float, float* %22, align 1
Gen:   %23 = load float, float* %22, align 1
Generating MATCH
Match: 
  %arrayidx16 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv
  %arrayidx16.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next
  %arrayidx16.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.1
  %arrayidx16.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.2
  %arrayidx16.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.3
  %arrayidx16.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.4
  %arrayidx16.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %19 = zext i8 %18 to i64
Closing BINOP
Found use: 6:   %arrayidx12.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.5
Extracting:   %24 = add nuw nsw i64 %indvars.iv, %19
Gen:   %25 = add nuw nsw i64 %indvars.iv, %20
Operands done!
Generated:   %27 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %25
Gen:   %27 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %25
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx16, align 4, !tbaa !5
  %6 = load float, float* %arrayidx16.1, align 4, !tbaa !5
  %8 = load float, float* %arrayidx16.2, align 4, !tbaa !5
  %10 = load float, float* %arrayidx16.3, align 4, !tbaa !5
  %12 = load float, float* %arrayidx16.4, align 4, !tbaa !5
  %14 = load float, float* %arrayidx16.5, align 4, !tbaa !5
  %16 = load float, float* %arrayidx16.6, align 4, !tbaa !5
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %add = fadd float %3, %4
  %add.1 = fadd float %5, %6
  %add.2 = fadd float %7, %8
  %add.3 = fadd float %9, %10
  %add.4 = fadd float %11, %12
  %add.5 = fadd float %13, %14
  %add.6 = fadd float %15, %16
Operands done!
Generated:   %29 = fadd float %24, %28
Gen:   %29 = fadd float %24, %28
Generating MATCH
Match: 
  %arrayidx20 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv
  %arrayidx20.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next
  %arrayidx20.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.1
  %arrayidx20.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.2
  %arrayidx20.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.3
  %arrayidx20.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.4
  %arrayidx20.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %30 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %25
Gen:   %30 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %25
Generating MATCH
Match: 
  store float %add, float* %arrayidx20, align 4, !tbaa !5
  store float %add.1, float* %arrayidx20.1, align 4, !tbaa !5
  store float %add.2, float* %arrayidx20.2, align 4, !tbaa !5
  store float %add.3, float* %arrayidx20.3, align 4, !tbaa !5
  store float %add.4, float* %arrayidx20.4, align 4, !tbaa !5
  store float %add.5, float* %arrayidx20.5, align 4, !tbaa !5
  store float %add.6, float* %arrayidx20.6, align 4, !tbaa !5
Operands done!
Generated:   store float %29, float* %30, align 1
Gen:   store float %29, float* %30, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx20, align 4, !tbaa !5
  store float %add.1, float* %arrayidx20.1, align 4, !tbaa !5
  store float %add.2, float* %arrayidx20.2, align 4, !tbaa !5
  store float %add.3, float* %arrayidx20.3, align 4, !tbaa !5
  store float %add.4, float* %arrayidx20.4, align 4, !tbaa !5
  store float %add.5, float* %arrayidx20.5, align 4, !tbaa !5
  store float %add.6, float* %arrayidx20.6, align 4, !tbaa !5
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="-1..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
16->0 
2->1 
10->1 
3->2 
4->3 
5->3 
6->3 
7->3 
8->7 
9->7 
11->10 
12->11 
5->11 
13->11 
14->11 
8->14 
15->14 
4->16 
5->16 
13->16 
14->16 
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
14->17
}

Gains: 112 - 30 = 82; Width: 7; Profitable; s119
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 7
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 2
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 9
Done Loop Roller: 1/1
Optimizing: s1119
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.044 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %indvars.iv45 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next46, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 3
BlockSize: 67
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx11.1, align 4, !tbaa !5
Hit: load
  %5 = load float, float* %arrayidx11.2, align 8, !tbaa !5
Hit: load
  %7 = load float, float* %arrayidx11.3, align 4, !tbaa !5
Hit: load
  %9 = load float, float* %arrayidx11.4, align 16, !tbaa !5
Hit: load
  %11 = load float, float* %arrayidx11.5, align 4, !tbaa !5
Hit: load
  %13 = load float, float* %arrayidx11.6, align 8, !tbaa !5
Hit: load
  %15 = load float, float* %arrayidx11.7, align 4, !tbaa !5
Hit: load
  %4 = load float, float* %arrayidx15.1, align 4, !tbaa !5
Hit: load
  %6 = load float, float* %arrayidx15.2, align 8, !tbaa !5
Hit: load
  %8 = load float, float* %arrayidx15.3, align 4, !tbaa !5
Hit: load
  %10 = load float, float* %arrayidx15.4, align 16, !tbaa !5
Hit: load
  %12 = load float, float* %arrayidx15.5, align 4, !tbaa !5
Hit: load
  %14 = load float, float* %arrayidx15.6, align 8, !tbaa !5
Hit: load
  %16 = load float, float* %arrayidx15.7, align 4, !tbaa !5
Hit: store
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !5
Hit: store
  store float %add.2, float* %arrayidx19.2, align 8, !tbaa !5
Hit: store
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !5
Hit: store
  store float %add.4, float* %arrayidx19.4, align 16, !tbaa !5
Hit: store
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !5
Hit: store
  store float %add.6, float* %arrayidx19.6, align 8, !tbaa !5
Hit: store
  store float %add.7, float* %arrayidx19.7, align 4, !tbaa !5
Schedulable: 1
Loop Rolling: s1119
Generating tree
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.1
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.2
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.3
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.4
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.5
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %18 = zext i8 %17 to i64
Closing BINOP
Gen:   %19 = or i64 %indvars.iv, %18
Operands done!
Generated:   %20 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %19
Gen:   %20 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %19
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx11, align 32, !tbaa !5
  %3 = load float, float* %arrayidx11.1, align 4, !tbaa !5
  %5 = load float, float* %arrayidx11.2, align 8, !tbaa !5
  %7 = load float, float* %arrayidx11.3, align 4, !tbaa !5
  %9 = load float, float* %arrayidx11.4, align 16, !tbaa !5
  %11 = load float, float* %arrayidx11.5, align 4, !tbaa !5
  %13 = load float, float* %arrayidx11.6, align 8, !tbaa !5
  %15 = load float, float* %arrayidx11.7, align 4, !tbaa !5
Operands done!
Generated:   %21 = load float, float* %20, align 1
Gen:   %21 = load float, float* %20, align 1
Generating MATCH
Match: 
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv45, i64 %indvars.iv
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next.1
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next.2
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next.3
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next.4
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next.5
  %arrayidx15.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv45, i64 %19
Gen:   %22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv45, i64 %19
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx15, align 32, !tbaa !5
  %4 = load float, float* %arrayidx15.1, align 4, !tbaa !5
  %6 = load float, float* %arrayidx15.2, align 8, !tbaa !5
  %8 = load float, float* %arrayidx15.3, align 4, !tbaa !5
  %10 = load float, float* %arrayidx15.4, align 16, !tbaa !5
  %12 = load float, float* %arrayidx15.5, align 4, !tbaa !5
  %14 = load float, float* %arrayidx15.6, align 8, !tbaa !5
  %16 = load float, float* %arrayidx15.7, align 4, !tbaa !5
Operands done!
Generated:   %23 = load float, float* %22, align 1
Gen:   %23 = load float, float* %22, align 1
Generating MATCH
Match: 
  %add = fadd float %1, %2
  %add.1 = fadd float %3, %4
  %add.2 = fadd float %5, %6
  %add.3 = fadd float %7, %8
  %add.4 = fadd float %9, %10
  %add.5 = fadd float %11, %12
  %add.6 = fadd float %13, %14
  %add.7 = fadd float %15, %16
Operands done!
Generated:   %24 = fadd float %21, %23
Gen:   %24 = fadd float %21, %23
Generating MATCH
Match: 
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv45, i64 %indvars.iv
  %arrayidx19.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next
  %arrayidx19.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next.1
  %arrayidx19.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next.2
  %arrayidx19.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next.3
  %arrayidx19.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next.4
  %arrayidx19.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next.5
  %arrayidx19.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv45, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %25 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv45, i64 %19
Gen:   %25 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv45, i64 %19
Generating MATCH
Match: 
  store float %add, float* %arrayidx19, align 32, !tbaa !5
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !5
  store float %add.2, float* %arrayidx19.2, align 8, !tbaa !5
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !5
  store float %add.4, float* %arrayidx19.4, align 16, !tbaa !5
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !5
  store float %add.6, float* %arrayidx19.6, align 8, !tbaa !5
  store float %add.7, float* %arrayidx19.7, align 4, !tbaa !5
Operands done!
Generated:   store float %24, float* %25, align 1
Gen:   store float %24, float* %25, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx19, align 32, !tbaa !5
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !5
  store float %add.2, float* %arrayidx19.2, align 8, !tbaa !5
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !5
  store float %add.4, float* %arrayidx19.4, align 16, !tbaa !5
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !5
  store float %add.6, float* %arrayidx19.6, align 8, !tbaa !5
  store float %add.7, float* %arrayidx19.7, align 4, !tbaa !5
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
10->1 
3->2 
4->3 
5->3 
6->3 
7->3 
8->7 
9->7 
11->10 
12->11 
5->11 
13->11 
7->11 
4->14 
5->14 
13->14 
7->14 
}

Gains: 125 - 17 = 108; Width: 8; Profitable; s1119
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 7
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s121
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.027 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 53
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* %arrayidx.1, align 8, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.2, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.3, align 16, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.4, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.5, align 8, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.6, align 4, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: store
  store float %add8.1, float* %arrayidx, align 4, !tbaa !4
Hit: store
  store float %add8.2, float* %arrayidx.1, align 8, !tbaa !4
Hit: store
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !4
Hit: store
  store float %add8.4, float* %arrayidx.3, align 16, !tbaa !4
Hit: store
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !4
Hit: store
  store float %add8.6, float* %arrayidx.5, align 8, !tbaa !4
Schedulable: 1
Loop Rolling: s121
Generating tree
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.1, align 8, !tbaa !4
  %4 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.3, align 16, !tbaa !4
  %8 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %10 = load float, float* %arrayidx.5, align 8, !tbaa !4
  %12 = load float, float* %arrayidx.6, align 4, !tbaa !4
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating MATCH
Match: 
  %indvars.iv.next = or i64 %indvars.iv, 1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
Generating IDENTICAL
Generating INTSEQ
Gen:   %18 = add i64 %17, 1
Operands done!
Generated:   %19 = or i64 %indvars.iv, %18
Found use: 6:   %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Extracting:   %19 = or i64 %indvars.iv, %18
Gen:   %20 = or i64 %indvars.iv, %19
Operands done!
Generated:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
Found use: 6:   store float %add8.7, float* %arrayidx.6, align 4, !tbaa !4
Extracting:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
Gen:   %23 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %21
Operands done!
Generated:   %25 = load float, float* %23, align 1
Gen:   %25 = load float, float* %23, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %19 = zext i8 %18 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %19
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx7, align 32, !tbaa !4
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %11 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %13 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %15 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %add8 = fadd float %2, %3
  %add8.1 = fadd float %4, %5
  %add8.2 = fadd float %6, %7
  %add8.3 = fadd float %8, %9
  %add8.4 = fadd float %10, %11
  %add8.5 = fadd float %12, %13
  %add8.6 = fadd float %14, %15
Operands done!
Generated:   %29 = fadd float %25, %28
Gen:   %29 = fadd float %25, %28
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %30 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Gen:   %30 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Generating MATCH
Match: 
  store float %add8, float* %arrayidx10, align 32, !tbaa !4
  store float %add8.1, float* %arrayidx, align 4, !tbaa !4
  store float %add8.2, float* %arrayidx.1, align 8, !tbaa !4
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !4
  store float %add8.4, float* %arrayidx.3, align 16, !tbaa !4
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !4
  store float %add8.6, float* %arrayidx.5, align 8, !tbaa !4
Operands done!
Generated:   store float %29, float* %30, align 1
Gen:   store float %29, float* %30, align 1
Graph code generated!
Root:
  store float %add8, float* %arrayidx10, align 32, !tbaa !4
  store float %add8.1, float* %arrayidx, align 4, !tbaa !4
  store float %add8.2, float* %arrayidx.1, align 8, !tbaa !4
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !4
  store float %add8.4, float* %arrayidx.3, align 16, !tbaa !4
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !4
  store float %add8.6, float* %arrayidx.5, align 8, !tbaa !4
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="1..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
12->10 
7->12 
13->12 
4->14 
5->14 
12->14 
15 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->16
}

Gains: 100 - 39 = 61; Width: 7; Profitable; s121
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 8
Done Loop Roller: 1/1
Optimizing: s122
BlockSize: 20
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.033 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
BlockSize: 5
BlockSize: 2
BlockSize: 4
  %indvars.iv34.unr = phi i64 [ 0, %for.body5.preheader ], [ %indvars.iv.next35.7, %for.body5 ]
  %indvars.iv.unr = phi i64 [ %5, %for.body5.preheader ], [ %indvars.iv.next.7, %for.body5 ]
BlockSize: 15
  %indvars.iv34.epil = phi i64 [ %indvars.iv.next35.epil, %for.body5.epil ], [ %indvars.iv34.unr, %for.cond.cleanup4.loopexit.unr-lcssa ]
  %indvars.iv.next35.epil = add nuw nsw i64 %indvars.iv34.epil, 1
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body5.epil ], [ %indvars.iv.unr, %for.cond.cleanup4.loopexit.unr-lcssa ]
  %indvars.iv.next.epil = add i64 %indvars.iv.epil, %6
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body5.epil ], [ %xtraiter, %for.cond.cleanup4.loopexit.unr-lcssa ]
  %epil.iter.sub = add i32 %epil.iter, -1
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 72
  %indvars.iv34 = phi i64 [ 0, %for.body5.preheader.new ], [ %indvars.iv.next35.7, %for.body5 ]
  %indvars.iv.next35.7 = add nuw nsw i64 %indvars.iv34, 8
  %indvars.iv = phi i64 [ %5, %for.body5.preheader.new ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %6
Possible reduction
  %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %6
  %niter = phi i32 [ %unroll_iter, %for.body5.preheader.new ], [ %niter.nsub.7, %for.body5 ]
  %niter.nsub.7 = add i32 %niter, -8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
7 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
4 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Computing order of nodes for each lane
Hit: load
  %21 = load float, float* %arrayidx.1, align 8, !tbaa !13
Hit: load
  %24 = load float, float* %arrayidx.2, align 4, !tbaa !13
Hit: load
  %27 = load float, float* %arrayidx.3, align 16, !tbaa !13
Hit: load
  %30 = load float, float* %arrayidx.4, align 4, !tbaa !13
Hit: load
  %33 = load float, float* %arrayidx.5, align 8, !tbaa !13
Hit: load
  %36 = load float, float* %arrayidx.6, align 4, !tbaa !13
Hit: load
  %39 = load float, float* %arrayidx.7, align 32, !tbaa !13
Hit: load
  %22 = load float, float* %arrayidx8.1, align 4, !tbaa !13
Hit: load
  %25 = load float, float* %arrayidx8.2, align 4, !tbaa !13
Hit: load
  %28 = load float, float* %arrayidx8.3, align 4, !tbaa !13
Hit: load
  %31 = load float, float* %arrayidx8.4, align 4, !tbaa !13
Hit: load
  %34 = load float, float* %arrayidx8.5, align 4, !tbaa !13
Hit: load
  %37 = load float, float* %arrayidx8.6, align 4, !tbaa !13
Hit: load
  %40 = load float, float* %arrayidx8.7, align 4, !tbaa !13
Hit: store
  store float %add9.1, float* %arrayidx8.1, align 4, !tbaa !13
Hit: store
  store float %add9.2, float* %arrayidx8.2, align 4, !tbaa !13
Hit: store
  store float %add9.3, float* %arrayidx8.3, align 4, !tbaa !13
Hit: store
  store float %add9.4, float* %arrayidx8.4, align 4, !tbaa !13
Hit: store
  store float %add9.5, float* %arrayidx8.5, align 4, !tbaa !13
Hit: store
  store float %add9.6, float* %arrayidx8.6, align 4, !tbaa !13
Hit: store
  store float %add9.7, float* %arrayidx8.7, align 4, !tbaa !13
Schedulable: 1
Loop Rolling: s122
Generating tree
Generating MATCH
Match: 
  %17 = sub nsw i64 31999, %indvars.iv34
  %20 = sub nsw i64 31998, %indvars.iv34
  %23 = sub nsw i64 31997, %indvars.iv34
  %26 = sub nsw i64 31996, %indvars.iv34
  %29 = sub nsw i64 31995, %indvars.iv34
  %32 = sub nsw i64 31994, %indvars.iv34
  %35 = sub nsw i64 31993, %indvars.iv34
  %38 = sub nsw i64 31999, %indvars.iv.next35.6
Generating Mismatch
Mismatched Values:
int: i64 31999
int: i64 31998
int: i64 31997
int: i64 31996
int: i64 31995
int: i64 31994
int: i64 31993
int: i64 31999
All constants
Created array: @0 = private constant [8 x i64] [i64 31999, i64 31998, i64 31997, i64 31996, i64 31995, i64 31994, i64 31993, i64 31999]
Gen:   %43 = load i64, i64* %42, align 8
Generating BINOP
Generating IDENTICAL
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 7
All constants
Found Array: @0 = private constant [8 x i64] [i64 31999, i64 31998, i64 31997, i64 31996, i64 31995, i64 31994, i64 31993, i64 31999]
Gen:   %43 = load i64, i64* %42, align 8
Closing BINOP
Gen:   %44 = or i64 %indvars.iv34, %43
Operands done!
Generated:   %45 = sub nsw i64 %43, %44
Gen:   %45 = sub nsw i64 %43, %44
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %17
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %20
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %23
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %29
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %32
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %35
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %38
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %46 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %45
Gen:   %46 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %45
Generating MATCH
Match: 
  %18 = load float, float* %arrayidx, align 4, !tbaa !13
  %21 = load float, float* %arrayidx.1, align 8, !tbaa !13
  %24 = load float, float* %arrayidx.2, align 4, !tbaa !13
  %27 = load float, float* %arrayidx.3, align 16, !tbaa !13
  %30 = load float, float* %arrayidx.4, align 4, !tbaa !13
  %33 = load float, float* %arrayidx.5, align 8, !tbaa !13
  %36 = load float, float* %arrayidx.6, align 4, !tbaa !13
  %39 = load float, float* %arrayidx.7, align 32, !tbaa !13
Operands done!
Generated:   %47 = load float, float* %46, align 1
Gen:   %47 = load float, float* %46, align 1
Generating MATCH
Match: 
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating IDENTICAL
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %41 = alloca i64, i8 8, align 8
Gen:   %58 = load i64, i64* %57, align 8
Closing BINOP
Gen:   %59 = add i64 %indvars.iv, %58
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %50 = alloca i64, i8 8, align 8
Gen:   %70 = load i64, i64* %69, align 8
Closing BINOP
Gen:   %71 = add i64 %68, %70
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %59 = alloca i64, i8 8, align 8
Gen:   %82 = load i64, i64* %81, align 8
Closing BINOP
Gen:   %83 = add i64 %80, %82
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %68 = alloca i64, i8 8, align 8
Gen:   %94 = load i64, i64* %93, align 8
Closing BINOP
Gen:   %95 = add i64 %92, %94
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %77 = alloca i64, i8 8, align 8
Gen:   %106 = load i64, i64* %105, align 8
Closing BINOP
Gen:   %107 = add i64 %104, %106
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %86 = alloca i64, i8 8, align 8
Gen:   %118 = load i64, i64* %117, align 8
Closing BINOP
Gen:   %119 = add i64 %116, %118
Generating Mismatch
Mismatched Values:
int: i64 0
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %95 = alloca i64, i8 8, align 8
Gen:   %130 = load i64, i64* %129, align 8
Closing BINOP
Found use: 7:   %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %6
Extracting:   %131 = add i64 %128, %130
Gen:   %132 = add i64 %129, %131
Operands done!
Generated:   %134 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %132
Gen:   %134 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %132
Generating MATCH
Match: 
  %20 = load float, float* %arrayidx8, align 4, !tbaa !13
  %23 = load float, float* %arrayidx8.1, align 4, !tbaa !13
  %26 = load float, float* %arrayidx8.2, align 4, !tbaa !13
  %29 = load float, float* %arrayidx8.3, align 4, !tbaa !13
  %32 = load float, float* %arrayidx8.4, align 4, !tbaa !13
  %35 = load float, float* %arrayidx8.5, align 4, !tbaa !13
  %38 = load float, float* %arrayidx8.6, align 4, !tbaa !13
  %41 = load float, float* %arrayidx8.7, align 4, !tbaa !13
Operands done!
Generated:   %135 = load float, float* %134, align 1
Gen:   %135 = load float, float* %134, align 1
Generating MATCH
Match: 
  %add9 = fadd float %19, %20
  %add9.1 = fadd float %22, %23
  %add9.2 = fadd float %25, %26
  %add9.3 = fadd float %28, %29
  %add9.4 = fadd float %31, %32
  %add9.5 = fadd float %34, %35
  %add9.6 = fadd float %37, %38
  %add9.7 = fadd float %40, %41
Operands done!
Generated:   %136 = fadd float %111, %135
Gen:   %136 = fadd float %111, %135
Generating MATCH
Match: 
  store float %add9, float* %arrayidx8, align 4, !tbaa !13
  store float %add9.1, float* %arrayidx8.1, align 4, !tbaa !13
  store float %add9.2, float* %arrayidx8.2, align 4, !tbaa !13
  store float %add9.3, float* %arrayidx8.3, align 4, !tbaa !13
  store float %add9.4, float* %arrayidx8.4, align 4, !tbaa !13
  store float %add9.5, float* %arrayidx8.5, align 4, !tbaa !13
  store float %add9.6, float* %arrayidx8.6, align 4, !tbaa !13
  store float %add9.7, float* %arrayidx8.7, align 4, !tbaa !13
Operands done!
Generated:   store float %136, float* %134, align 1
Gen:   store float %136, float* %134, align 1
Graph code generated!
Root:
  store float %add9, float* %arrayidx8, align 4, !tbaa !13
  store float %add9.1, float* %arrayidx8.1, align 4, !tbaa !13
  store float %add9.2, float* %arrayidx8.2, align 4, !tbaa !13
  store float %add9.3, float* %arrayidx8.3, align 4, !tbaa !13
  store float %add9.4, float* %arrayidx8.4, align 4, !tbaa !13
  store float %add9.5, float* %arrayidx8.5, align 4, !tbaa !13
  store float %add9.6, float* %arrayidx8.6, align 4, !tbaa !13
  store float %add9.7, float* %arrayidx8.7, align 4, !tbaa !13
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="sub", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
23 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
24 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
25 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
26 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
27 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
28 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
12->0 
2->1 
11->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
9->8 
10->8 
12->11 
13->12 
5->12 
14->12 
15->14 
28->14 
16->15 
27->15 
17->16 
26->16 
18->17 
25->17 
19->18 
24->18 
20->19 
23->19 
21->20 
22->20 
29 [label="add", style="filled" , fillcolor="#f2eb5c", shape=box];
14->29
}

Gains: 122 - 728 = -606; Width: 8; Unprofitable; s122
Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
7 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
4 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Computing order of nodes for each lane
Hit: load
  %22 = load float, float* %arrayidx.1, align 8, !tbaa !13
Hit: load
  %25 = load float, float* %arrayidx.2, align 4, !tbaa !13
Hit: load
  %28 = load float, float* %arrayidx.3, align 16, !tbaa !13
Hit: load
  %31 = load float, float* %arrayidx.4, align 4, !tbaa !13
Hit: load
  %34 = load float, float* %arrayidx.5, align 8, !tbaa !13
Hit: load
  %37 = load float, float* %arrayidx.6, align 4, !tbaa !13
Hit: load
  %40 = load float, float* %arrayidx.7, align 32, !tbaa !13
Hit: load
  %23 = load float, float* %arrayidx8.1, align 4, !tbaa !13
Hit: load
  %26 = load float, float* %arrayidx8.2, align 4, !tbaa !13
Hit: load
  %29 = load float, float* %arrayidx8.3, align 4, !tbaa !13
Hit: load
  %32 = load float, float* %arrayidx8.4, align 4, !tbaa !13
Hit: load
  %35 = load float, float* %arrayidx8.5, align 4, !tbaa !13
Hit: load
  %38 = load float, float* %arrayidx8.6, align 4, !tbaa !13
Hit: load
  %41 = load float, float* %arrayidx8.7, align 4, !tbaa !13
Hit: store
  store float %add9.1, float* %arrayidx8.1, align 4, !tbaa !13
Hit: store
  store float %add9.2, float* %arrayidx8.2, align 4, !tbaa !13
Hit: store
  store float %add9.3, float* %arrayidx8.3, align 4, !tbaa !13
Hit: store
  store float %add9.4, float* %arrayidx8.4, align 4, !tbaa !13
Hit: store
  store float %add9.5, float* %arrayidx8.5, align 4, !tbaa !13
Hit: store
  store float %add9.6, float* %arrayidx8.6, align 4, !tbaa !13
Hit: store
  store float %add9.7, float* %arrayidx8.7, align 4, !tbaa !13
Schedulable: 1
Loop Rolling: s122
Generating tree
Generating MATCH
Match: 
  %18 = sub nsw i64 31999, %indvars.iv34
  %21 = sub nsw i64 31998, %indvars.iv34
  %24 = sub nsw i64 31997, %indvars.iv34
  %27 = sub nsw i64 31996, %indvars.iv34
  %30 = sub nsw i64 31995, %indvars.iv34
  %33 = sub nsw i64 31994, %indvars.iv34
  %36 = sub nsw i64 31993, %indvars.iv34
  %39 = sub nsw i64 31999, %indvars.iv.next35.6
Generating Mismatch
Mismatched Values:
int: i64 31999
int: i64 31998
int: i64 31997
int: i64 31996
int: i64 31995
int: i64 31994
int: i64 31993
int: i64 31999
All constants
Created array: @1 = private constant [8 x i64] [i64 31999, i64 31998, i64 31997, i64 31996, i64 31995, i64 31994, i64 31993, i64 31999]
Gen:   %44 = load i64, i64* %43, align 8
Generating BINOP
Generating IDENTICAL
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 7
All constants
Found Array: @1 = private constant [8 x i64] [i64 31999, i64 31998, i64 31997, i64 31996, i64 31995, i64 31994, i64 31993, i64 31999]
Gen:   %44 = load i64, i64* %43, align 8
Closing BINOP
Gen:   %45 = or i64 %indvars.iv34, %44
Operands done!
Generated:   %46 = sub nsw i64 %44, %45
Gen:   %46 = sub nsw i64 %44, %45
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %21
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %24
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %27
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %30
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %33
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %36
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %39
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %47 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %46
Gen:   %47 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %46
Generating MATCH
Match: 
  %19 = load float, float* %arrayidx, align 4, !tbaa !13
  %22 = load float, float* %arrayidx.1, align 8, !tbaa !13
  %25 = load float, float* %arrayidx.2, align 4, !tbaa !13
  %28 = load float, float* %arrayidx.3, align 16, !tbaa !13
  %31 = load float, float* %arrayidx.4, align 4, !tbaa !13
  %34 = load float, float* %arrayidx.5, align 8, !tbaa !13
  %37 = load float, float* %arrayidx.6, align 4, !tbaa !13
  %40 = load float, float* %arrayidx.7, align 32, !tbaa !13
Operands done!
Generated:   %48 = load float, float* %47, align 1
Gen:   %48 = load float, float* %47, align 1
Generating MATCH
Match: 
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating IDENTICAL
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %42 = alloca i64, i8 8, align 8
Gen:   %59 = load i64, i64* %58, align 8
Closing BINOP
Gen:   %60 = add i64 %indvars.iv, %59
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %51 = alloca i64, i8 8, align 8
Gen:   %71 = load i64, i64* %70, align 8
Closing BINOP
Gen:   %72 = add i64 %69, %71
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %60 = alloca i64, i8 8, align 8
Gen:   %83 = load i64, i64* %82, align 8
Closing BINOP
Gen:   %84 = add i64 %81, %83
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %69 = alloca i64, i8 8, align 8
Gen:   %95 = load i64, i64* %94, align 8
Closing BINOP
Gen:   %96 = add i64 %93, %95
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %78 = alloca i64, i8 8, align 8
Gen:   %107 = load i64, i64* %106, align 8
Closing BINOP
Gen:   %108 = add i64 %105, %107
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %87 = alloca i64, i8 8, align 8
Gen:   %119 = load i64, i64* %118, align 8
Closing BINOP
Gen:   %120 = add i64 %117, %119
Generating Mismatch
Mismatched Values:
int: i64 0
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %96 = alloca i64, i8 8, align 8
Gen:   %131 = load i64, i64* %130, align 8
Closing BINOP
Found use: 7:   %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %7
Extracting:   %132 = add i64 %129, %131
Gen:   %133 = add i64 %130, %132
Operands done!
Generated:   %135 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %133
Gen:   %135 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %133
Generating MATCH
Match: 
  %21 = load float, float* %arrayidx8, align 4, !tbaa !13
  %24 = load float, float* %arrayidx8.1, align 4, !tbaa !13
  %27 = load float, float* %arrayidx8.2, align 4, !tbaa !13
  %30 = load float, float* %arrayidx8.3, align 4, !tbaa !13
  %33 = load float, float* %arrayidx8.4, align 4, !tbaa !13
  %36 = load float, float* %arrayidx8.5, align 4, !tbaa !13
  %39 = load float, float* %arrayidx8.6, align 4, !tbaa !13
  %42 = load float, float* %arrayidx8.7, align 4, !tbaa !13
Operands done!
Generated:   %136 = load float, float* %135, align 1
Gen:   %136 = load float, float* %135, align 1
Generating MATCH
Match: 
  %add9 = fadd float %20, %21
  %add9.1 = fadd float %23, %24
  %add9.2 = fadd float %26, %27
  %add9.3 = fadd float %29, %30
  %add9.4 = fadd float %32, %33
  %add9.5 = fadd float %35, %36
  %add9.6 = fadd float %38, %39
  %add9.7 = fadd float %41, %42
Operands done!
Generated:   %137 = fadd float %112, %136
Gen:   %137 = fadd float %112, %136
Generating MATCH
Match: 
  store float %add9, float* %arrayidx8, align 4, !tbaa !13
  store float %add9.1, float* %arrayidx8.1, align 4, !tbaa !13
  store float %add9.2, float* %arrayidx8.2, align 4, !tbaa !13
  store float %add9.3, float* %arrayidx8.3, align 4, !tbaa !13
  store float %add9.4, float* %arrayidx8.4, align 4, !tbaa !13
  store float %add9.5, float* %arrayidx8.5, align 4, !tbaa !13
  store float %add9.6, float* %arrayidx8.6, align 4, !tbaa !13
  store float %add9.7, float* %arrayidx8.7, align 4, !tbaa !13
Operands done!
Generated:   store float %137, float* %135, align 1
Gen:   store float %137, float* %135, align 1
Graph code generated!
Root:
  store float %add9, float* %arrayidx8, align 4, !tbaa !13
  store float %add9.1, float* %arrayidx8.1, align 4, !tbaa !13
  store float %add9.2, float* %arrayidx8.2, align 4, !tbaa !13
  store float %add9.3, float* %arrayidx8.3, align 4, !tbaa !13
  store float %add9.4, float* %arrayidx8.4, align 4, !tbaa !13
  store float %add9.5, float* %arrayidx8.5, align 4, !tbaa !13
  store float %add9.6, float* %arrayidx8.6, align 4, !tbaa !13
  store float %add9.7, float* %arrayidx8.7, align 4, !tbaa !13
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="sub", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
23 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
24 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
25 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
26 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
27 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
28 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
12->0 
2->1 
11->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
9->8 
10->8 
12->11 
13->12 
5->12 
14->12 
15->14 
28->14 
16->15 
27->15 
17->16 
26->16 
18->17 
25->17 
19->18 
24->18 
20->19 
23->19 
21->20 
22->20 
29 [label="add", style="filled" , fillcolor="#f2eb5c", shape=box];
14->29
}

Gains: 122 - 728 = -606; Width: 8; Unprofitable; s122
Building reduction
  %indvars.iv = phi i64 [ %7, %for.body5.preheader.new ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %8
BOs:
  %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %8
  %indvars.iv.next.6 = add i64 %indvars.iv.next.5, %8
  %indvars.iv.next.5 = add i64 %indvars.iv.next.4, %8
  %indvars.iv.next.4 = add i64 %indvars.iv.next.3, %8
  %indvars.iv.next.3 = add i64 %indvars.iv.next.2, %8
  %indvars.iv.next.2 = add i64 %indvars.iv.next.1, %8
  %indvars.iv.next.1 = add i64 %indvars.iv.next, %8
  %indvars.iv.next = add i64 %indvars.iv, %8
Operands:
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
Operands:
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
ReductionNode
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %23 = load float, float* %arrayidx.1, align 8, !tbaa !13
Done Loop Roller: 0/2
Optimizing: s123
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.051 = phi i32 [ 0, %entry ], [ %inc29, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 18
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %j.049 = phi i32 [ -1, %for.cond2.preheader ], [ %j.1.7, %for.inc.7 ]
Attempting Group:
BlockSize: 6
Attempting Group:
BlockSize: 18
  %j.1 = phi i32 [ %inc15, %if.then ], [ %inc, %for.body5 ]
Attempting Group:
BlockSize: 6
Attempting Group:
BlockSize: 18
  %j.1.1 = phi i32 [ %inc15.1, %if.then.1 ], [ %inc.1, %for.inc ]
Attempting Group:
BlockSize: 6
Attempting Group:
BlockSize: 18
  %j.1.2 = phi i32 [ %inc15.2, %if.then.2 ], [ %inc.2, %for.inc.1 ]
Attempting Group:
BlockSize: 6
Attempting Group:
BlockSize: 18
  %j.1.3 = phi i32 [ %inc15.3, %if.then.3 ], [ %inc.3, %for.inc.2 ]
Attempting Group:
BlockSize: 6
Attempting Group:
BlockSize: 18
  %j.1.4 = phi i32 [ %inc15.4, %if.then.4 ], [ %inc.4, %for.inc.3 ]
Attempting Group:
BlockSize: 6
Attempting Group:
BlockSize: 18
  %j.1.5 = phi i32 [ %inc15.5, %if.then.5 ], [ %inc.5, %for.inc.4 ]
Attempting Group:
BlockSize: 6
Attempting Group:
BlockSize: 18
  %j.1.6 = phi i32 [ %inc15.6, %if.then.6 ], [ %inc.6, %for.inc.5 ]
Attempting Group:
BlockSize: 6
Attempting Group:
BlockSize: 4
  %j.1.7 = phi i32 [ %inc15.7, %if.then.7 ], [ %inc.7, %for.inc.6 ]
Done Loop Roller: 0/0
Nothing found in: s123
Optimizing: s124
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.051 = phi i32 [ 0, %entry ], [ %inc29, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 7
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %j.049 = phi i32 [ -1, %for.cond2.preheader ], [ %inc.7, %for.inc.7 ]
BlockSize: 3
BlockSize: 16
  %.sink = phi float [ %1, %if.else ], [ %0, %for.body5 ]
Attempting Group:
BlockSize: 3
BlockSize: 16
  %.sink54 = phi float [ %5, %if.else.1 ], [ %4, %for.inc ]
Attempting Group:
BlockSize: 3
BlockSize: 16
  %.sink57 = phi float [ %9, %if.else.2 ], [ %8, %for.inc.1 ]
Attempting Group:
BlockSize: 3
BlockSize: 16
  %.sink60 = phi float [ %13, %if.else.3 ], [ %12, %for.inc.2 ]
Attempting Group:
BlockSize: 3
BlockSize: 16
  %.sink63 = phi float [ %17, %if.else.4 ], [ %16, %for.inc.3 ]
Attempting Group:
BlockSize: 3
BlockSize: 16
  %.sink66 = phi float [ %21, %if.else.5 ], [ %20, %for.inc.4 ]
Attempting Group:
BlockSize: 3
BlockSize: 16
  %.sink69 = phi float [ %25, %if.else.6 ], [ %24, %for.inc.5 ]
Attempting Group:
BlockSize: 3
BlockSize: 13
  %.sink72 = phi float [ %29, %if.else.7 ], [ %28, %for.inc.6 ]
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s124
Optimizing: s125
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.051 = phi i32 [ 0, %entry ], [ %inc28, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 5
  %indvars.iv54 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next55, %for.cond.cleanup8 ]
  %k.049 = phi i64 [ -1, %for.cond2.preheader ], [ %indvars.iv.next53.7, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 3
BlockSize: 100
  %indvars.iv52 = phi i64 [ %0, %for.cond6.preheader ], [ %indvars.iv.next53.7, %for.body9 ]
  %indvars.iv.next53.7 = add nsw i64 %indvars.iv52, 8
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx11.1, align 4, !tbaa !5
Hit: load
  %7 = load float, float* %arrayidx11.2, align 8, !tbaa !5
Hit: load
  %10 = load float, float* %arrayidx11.3, align 4, !tbaa !5
Hit: load
  %13 = load float, float* %arrayidx11.4, align 16, !tbaa !5
Hit: load
  %16 = load float, float* %arrayidx11.5, align 4, !tbaa !5
Hit: load
  %19 = load float, float* %arrayidx11.6, align 8, !tbaa !5
Hit: load
  %22 = load float, float* %arrayidx11.7, align 4, !tbaa !5
Hit: load
  %5 = load float, float* %arrayidx15.1, align 4, !tbaa !5
Hit: load
  %8 = load float, float* %arrayidx15.2, align 8, !tbaa !5
Hit: load
  %11 = load float, float* %arrayidx15.3, align 4, !tbaa !5
Hit: load
  %14 = load float, float* %arrayidx15.4, align 16, !tbaa !5
Hit: load
  %17 = load float, float* %arrayidx15.5, align 4, !tbaa !5
Hit: load
  %20 = load float, float* %arrayidx15.6, align 8, !tbaa !5
Hit: load
  %23 = load float, float* %arrayidx15.7, align 4, !tbaa !5
Hit: load
  %6 = load float, float* %arrayidx19.1, align 4, !tbaa !5
Hit: load
  %9 = load float, float* %arrayidx19.2, align 8, !tbaa !5
Hit: load
  %12 = load float, float* %arrayidx19.3, align 4, !tbaa !5
Hit: load
  %15 = load float, float* %arrayidx19.4, align 16, !tbaa !5
Hit: load
  %18 = load float, float* %arrayidx19.5, align 4, !tbaa !5
Hit: load
  %21 = load float, float* %arrayidx19.6, align 8, !tbaa !5
Hit: load
  %24 = load float, float* %arrayidx19.7, align 4, !tbaa !5
Hit: store
  store float %add.1, float* %arrayidx21.1, align 4, !tbaa !5
Hit: store
  store float %add.2, float* %arrayidx21.2, align 4, !tbaa !5
Hit: store
  store float %add.3, float* %arrayidx21.3, align 4, !tbaa !5
Hit: store
  store float %add.4, float* %arrayidx21.4, align 4, !tbaa !5
Hit: store
  store float %add.5, float* %arrayidx21.5, align 4, !tbaa !5
Hit: store
  store float %add.6, float* %arrayidx21.6, align 4, !tbaa !5
Hit: store
  store float %add.7, float* %arrayidx21.7, align 4, !tbaa !5
Schedulable: 1
Loop Rolling: s125
Generating tree
Generating MATCH
Match: 
  %indvars.iv.next53 = add nsw i64 %indvars.iv52, 1
  %indvars.iv.next53.1 = add nsw i64 %indvars.iv52, 2
  %indvars.iv.next53.2 = add nsw i64 %indvars.iv52, 3
  %indvars.iv.next53.3 = add nsw i64 %indvars.iv52, 4
  %indvars.iv.next53.4 = add nsw i64 %indvars.iv52, 5
  %indvars.iv.next53.5 = add nsw i64 %indvars.iv52, 6
  %indvars.iv.next53.6 = add nsw i64 %indvars.iv52, 7
  %indvars.iv.next53.7 = add nsw i64 %indvars.iv52, 8
Generating IDENTICAL
Generating INTSEQ
Gen:   %27 = add i64 %26, 1
Operands done!
Generated:   %28 = add nsw i64 %indvars.iv52, %27
Found use: 7:   %k.049 = phi i64 [ -1, %for.cond2.preheader ], [ %indvars.iv.next53.7, %for.cond.cleanup8 ]
Extracting:   %28 = add nsw i64 %indvars.iv52, %27
Gen:   %29 = add nsw i64 %indvars.iv52, %28
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.1
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.2
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.3
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.4
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.5
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %27 = zext i8 %26 to i64
Closing BINOP
Gen:   %31 = or i64 %indvars.iv, %27
Operands done!
Generated:   %32 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %31
Gen:   %32 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %31
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx11, align 32, !tbaa !5
  %5 = load float, float* %arrayidx11.1, align 4, !tbaa !5
  %8 = load float, float* %arrayidx11.2, align 8, !tbaa !5
  %11 = load float, float* %arrayidx11.3, align 4, !tbaa !5
  %14 = load float, float* %arrayidx11.4, align 16, !tbaa !5
  %17 = load float, float* %arrayidx11.5, align 4, !tbaa !5
  %20 = load float, float* %arrayidx11.6, align 8, !tbaa !5
  %23 = load float, float* %arrayidx11.7, align 4, !tbaa !5
Operands done!
Generated:   %33 = load float, float* %32, align 1
Gen:   %33 = load float, float* %32, align 1
Generating MATCH
Match: 
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.1
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.2
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.3
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.4
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.5
  %arrayidx15.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %34 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %31
Gen:   %34 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %31
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx15, align 32, !tbaa !5
  %6 = load float, float* %arrayidx15.1, align 4, !tbaa !5
  %9 = load float, float* %arrayidx15.2, align 8, !tbaa !5
  %12 = load float, float* %arrayidx15.3, align 4, !tbaa !5
  %15 = load float, float* %arrayidx15.4, align 16, !tbaa !5
  %18 = load float, float* %arrayidx15.5, align 4, !tbaa !5
  %21 = load float, float* %arrayidx15.6, align 8, !tbaa !5
  %24 = load float, float* %arrayidx15.7, align 4, !tbaa !5
Operands done!
Generated:   %35 = load float, float* %34, align 1
Gen:   %35 = load float, float* %34, align 1
Generating MATCH
Match: 
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv
  %arrayidx19.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next
  %arrayidx19.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.1
  %arrayidx19.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.2
  %arrayidx19.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.3
  %arrayidx19.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.4
  %arrayidx19.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.5
  %arrayidx19.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %36 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %31
Gen:   %36 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %31
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx19, align 32, !tbaa !5
  %7 = load float, float* %arrayidx19.1, align 4, !tbaa !5
  %10 = load float, float* %arrayidx19.2, align 8, !tbaa !5
  %13 = load float, float* %arrayidx19.3, align 4, !tbaa !5
  %16 = load float, float* %arrayidx19.4, align 16, !tbaa !5
  %19 = load float, float* %arrayidx19.5, align 4, !tbaa !5
  %22 = load float, float* %arrayidx19.6, align 8, !tbaa !5
  %25 = load float, float* %arrayidx19.7, align 4, !tbaa !5
Operands done!
Generated:   %37 = load float, float* %36, align 1
Gen:   %37 = load float, float* %36, align 1
Generating MATCH
Match: 
  %mul = fmul float %3, %4
  %mul.1 = fmul float %6, %7
  %mul.2 = fmul float %9, %10
  %mul.3 = fmul float %12, %13
  %mul.4 = fmul float %15, %16
  %mul.5 = fmul float %18, %19
  %mul.6 = fmul float %21, %22
  %mul.7 = fmul float %24, %25
Operands done!
Generated:   %38 = fmul float %35, %37
Gen:   %38 = fmul float %35, %37
Generating MATCH
Match: 
  %add = fadd float %2, %mul
  %add.1 = fadd float %5, %mul.1
  %add.2 = fadd float %8, %mul.2
  %add.3 = fadd float %11, %mul.3
  %add.4 = fadd float %14, %mul.4
  %add.5 = fadd float %17, %mul.5
  %add.6 = fadd float %20, %mul.6
  %add.7 = fadd float %23, %mul.7
Operands done!
Generated:   %39 = fadd float %33, %38
Gen:   %39 = fadd float %33, %38
Generating MATCH
Match: 
  %arrayidx21 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53
  %arrayidx21.1 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.1
  %arrayidx21.2 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.2
  %arrayidx21.3 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.3
  %arrayidx21.4 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.4
  %arrayidx21.5 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.5
  %arrayidx21.6 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.6
  %arrayidx21.7 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.7
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %40 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %29
Gen:   %40 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %29
Generating MATCH
Match: 
  store float %add, float* %arrayidx21, align 4, !tbaa !5
  store float %add.1, float* %arrayidx21.1, align 4, !tbaa !5
  store float %add.2, float* %arrayidx21.2, align 4, !tbaa !5
  store float %add.3, float* %arrayidx21.3, align 4, !tbaa !5
  store float %add.4, float* %arrayidx21.4, align 4, !tbaa !5
  store float %add.5, float* %arrayidx21.5, align 4, !tbaa !5
  store float %add.6, float* %arrayidx21.6, align 4, !tbaa !5
  store float %add.7, float* %arrayidx21.7, align 4, !tbaa !5
Operands done!
Generated:   store float %39, float* %40, align 1
Gen:   store float %39, float* %40, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx21, align 4, !tbaa !5
  store float %add.1, float* %arrayidx21.1, align 4, !tbaa !5
  store float %add.2, float* %arrayidx21.2, align 4, !tbaa !5
  store float %add.3, float* %arrayidx21.3, align 4, !tbaa !5
  store float %add.4, float* %arrayidx21.4, align 4, !tbaa !5
  store float %add.5, float* %arrayidx21.5, align 4, !tbaa !5
  store float %add.6, float* %arrayidx21.6, align 4, !tbaa !5
  store float %add.7, float* %arrayidx21.7, align 4, !tbaa !5
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="1..8, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
17->0 
2->1 
10->1 
3->2 
4->3 
5->3 
6->3 
7->3 
8->7 
9->7 
11->10 
14->10 
12->11 
13->12 
5->12 
6->12 
7->12 
15->14 
16->15 
5->15 
6->15 
7->15 
18->17 
5->17 
19->17 
20->19 
21->19 
22 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
19->22
}

Gains: 189 - 35 = 154; Width: 8; Profitable; s125
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 11
IDENTICAL: 8
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s126
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.054 = phi i32 [ 0, %entry ], [ %inc30, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 7
  %indvars.iv59 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next60, %for.cond.cleanup8 ]
  %k.052 = phi i32 [ 1, %for.cond2.preheader ], [ %inc24, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 5
BlockSize: 76
  %3 = phi float [ %.pre, %for.cond6.preheader ], [ %add.7, %for.body9.7 ]
  %indvars.iv56 = phi i64 [ %0, %for.cond6.preheader ], [ %indvars.iv.next57.7, %for.body9.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %3 = phi float [ %.pre, %for.cond6.preheader ], [ %add.7, %for.body9.7 ]
  %add = fadd float %3, %mul
  %add.1 = fadd float %add, %mul.1
  %add.2 = fadd float %add.1, %mul.2
  %add.3 = fadd float %add.2, %mul.3
  %add.4 = fadd float %add.3, %mul.4
  %add.5 = fadd float %add.4, %mul.5
  %add.6 = fadd float %add.5, %mul.6
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %7 = load float, float* %arrayidx14.1, align 4, !tbaa !2
Hit: load
  %9 = load float, float* %arrayidx14.2, align 4, !tbaa !2
Hit: load
  %11 = load float, float* %arrayidx14.3, align 4, !tbaa !2
Hit: load
  %13 = load float, float* %arrayidx14.4, align 4, !tbaa !2
Hit: load
  %15 = load float, float* %arrayidx14.5, align 4, !tbaa !2
Hit: load
  %17 = load float, float* %arrayidx14.6, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx18.1, align 4, !tbaa !2
Hit: load
  %10 = load float, float* %arrayidx18.2, align 4, !tbaa !2
Hit: load
  %12 = load float, float* %arrayidx18.3, align 4, !tbaa !2
Hit: load
  %14 = load float, float* %arrayidx18.4, align 4, !tbaa !2
Hit: load
  %16 = load float, float* %arrayidx18.5, align 4, !tbaa !2
Hit: load
  %18 = load float, float* %arrayidx18.6, align 4, !tbaa !2
Hit: store
  store float %add.1, float* %arrayidx22.1, align 4, !tbaa !2
Hit: store
  store float %add.2, float* %arrayidx22.2, align 4, !tbaa !2
Hit: store
  store float %add.3, float* %arrayidx22.3, align 4, !tbaa !2
Hit: store
  store float %add.4, float* %arrayidx22.4, align 4, !tbaa !2
Hit: store
  store float %add.5, float* %arrayidx22.5, align 4, !tbaa !2
Hit: store
  store float %add.6, float* %arrayidx22.6, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s126
Generating tree
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %24 = add i64 %23, -1
Closing BINOP
Gen:   %25 = add nsw i64 %indvars.iv56, %24
Generating MATCH
Match: 
  %arrayidx14 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %4
  %arrayidx14.1 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv56
  %arrayidx14.2 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next57
  %arrayidx14.3 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next57.1
  %arrayidx14.4 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next57.2
  %arrayidx14.5 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next57.3
  %arrayidx14.6 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next57.4
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %26 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %25
Gen:   %26 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %25
Generating MATCH
Match: 
  %5 = load float, float* %arrayidx14, align 4, !tbaa !2
  %7 = load float, float* %arrayidx14.1, align 4, !tbaa !2
  %9 = load float, float* %arrayidx14.2, align 4, !tbaa !2
  %11 = load float, float* %arrayidx14.3, align 4, !tbaa !2
  %13 = load float, float* %arrayidx14.4, align 4, !tbaa !2
  %15 = load float, float* %arrayidx14.5, align 4, !tbaa !2
  %17 = load float, float* %arrayidx14.6, align 4, !tbaa !2
Operands done!
Generated:   %27 = load float, float* %26, align 1
Gen:   %27 = load float, float* %26, align 1
Generating MATCH
Match: 
  %arrayidx18 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv, i64 %indvars.iv59
  %arrayidx18.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next, i64 %indvars.iv59
  %arrayidx18.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv59
  %arrayidx18.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv59
  %arrayidx18.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv59
  %arrayidx18.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv59
  %arrayidx18.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv59
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %23 = zext i8 %22 to i64
Closing BINOP
Gen:   %28 = add nuw nsw i64 %indvars.iv, %23
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %28, i64 %indvars.iv59
Gen:   %29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %28, i64 %indvars.iv59
Generating MATCH
Match: 
  %6 = load float, float* %arrayidx18, align 4, !tbaa !2
  %8 = load float, float* %arrayidx18.1, align 4, !tbaa !2
  %10 = load float, float* %arrayidx18.2, align 4, !tbaa !2
  %12 = load float, float* %arrayidx18.3, align 4, !tbaa !2
  %14 = load float, float* %arrayidx18.4, align 4, !tbaa !2
  %16 = load float, float* %arrayidx18.5, align 4, !tbaa !2
  %18 = load float, float* %arrayidx18.6, align 4, !tbaa !2
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %mul = fmul float %5, %6
  %mul.1 = fmul float %7, %8
  %mul.2 = fmul float %9, %10
  %mul.3 = fmul float %11, %12
  %mul.4 = fmul float %13, %14
  %mul.5 = fmul float %15, %16
  %mul.6 = fmul float %17, %18
Operands done!
Generated:   %31 = fmul float %27, %30
Gen:   %31 = fmul float %27, %30
Generating MATCH
Match: 
  %add = fadd float %3, %mul
  %add.1 = fadd float %add, %mul.1
  %add.2 = fadd float %add.1, %mul.2
  %add.3 = fadd float %add.2, %mul.3
  %add.4 = fadd float %add.3, %mul.4
  %add.5 = fadd float %add.4, %mul.5
  %add.6 = fadd float %add.5, %mul.6
Generating RECURRENCE
Gen:   %23 = phi float [ %3, %rolled.pre ]
Operands done!
Generated:   %33 = fadd float %23, %32
Found use: 6:   %add.7 = fadd float %add.6, %mul.7
Extracting:   %33 = fadd float %23, %32
Gen:   %34 = fadd float %24, %33
Generating MATCH
Match: 
  %arrayidx22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv59
  %arrayidx22.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv59
  %arrayidx22.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv59
  %arrayidx22.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv59
  %arrayidx22.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv59
  %arrayidx22.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv59
  %arrayidx22.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv59
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %36 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %30, i64 %indvars.iv59
Gen:   %36 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %30, i64 %indvars.iv59
Generating MATCH
Match: 
  store float %add, float* %arrayidx22, align 4, !tbaa !2
  store float %add.1, float* %arrayidx22.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx22.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx22.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx22.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx22.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx22.6, align 4, !tbaa !2
Operands done!
Generated:   store float %34, float* %36, align 1
Gen:   store float %34, float* %36, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %34 = fadd float %24, %33
Root:
  store float %add, float* %arrayidx22, align 4, !tbaa !2
  store float %add.1, float* %arrayidx22.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx22.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx22.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx22.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx22.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx22.6, align 4, !tbaa !2
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="-1..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
18->0 
2->1 
3->1 
1->2 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
14->12 
17->12 
15->14 
16->14 
19->18 
7->18 
14->18 
17->18 
20 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
}

Gains: 134 - 31 = 103; Width: 7; Recurrence Profitable; s126
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 7
CONSTEXPR: 0
BINOP: 2
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 0
BlockSize: 11
Done Loop Roller: 1/1
Optimizing: s127
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.047 = phi i32 [ 0, %entry ], [ %inc26, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 156
  %indvars.iv48 = phi i64 [ -1, %for.cond2.preheader ], [ %indvars.iv.next49.7, %for.body5 ]
  %indvars.iv.next49.7 = add nsw i64 %indvars.iv48, 16
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 16
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 16
Final Match: 0
Alt Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 16
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
match analysis
Match: 0
8 x 16
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 16
Final Match: 0
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
16 x 16
Final Match: 0
Int Seq
Invalid:   %indvars.iv.next = or i64 %indvars.iv, 1
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="alt: @c, @d", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="alt: @d, @e", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="1..16, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
3->1 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
7->14 
16->14 
17->16 
18->16 
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->19
8->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->20
8->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->21
8->21
22 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->22
8->22
23 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->23
8->23
24 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->24
8->24
25 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->25
8->25
26 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
16->26
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 16
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 16
Final Match: 0
Alt Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 16
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
match analysis
Match: 0
8 x 16
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 16
Final Match: 0
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
16 x 16
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
16 x 16
Final Match: 0
Int Seq
Invalid:   %indvars.iv.next = or i64 %indvars.iv, 1
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="alt: @c, @d", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="alt: @d, @e", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="1..16, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
3->1 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
7->14 
16->14 
17->16 
18->16 
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->19
8->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->20
8->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->21
8->21
22 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->22
8->22
23 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->23
8->23
24 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->24
8->24
25 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->25
8->25
26 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
16->26
}

Done Loop Roller: 0/0
Nothing found in: s127
Optimizing: s128
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.039 = phi i32 [ 0, %entry ], [ %inc20, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 109
  %indvars.iv40 = phi i64 [ -1, %for.cond2.preheader ], [ %indvars.iv.next41.7, %for.body5 ]
  %indvars.iv.next41.7 = add nsw i64 %indvars.iv40, 16
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.2, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx.4, align 4, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %25 = load float, float* %arrayidx.6, align 4, !tbaa !4
Hit: load
  %29 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %26 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %30 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: store
  store float %sub.1, float* %arrayidx9.1, align 4, !tbaa !4
Hit: store
  store float %sub.2, float* %arrayidx9.2, align 8, !tbaa !4
Hit: store
  store float %sub.3, float* %arrayidx9.3, align 4, !tbaa !4
Hit: store
  store float %sub.4, float* %arrayidx9.4, align 16, !tbaa !4
Hit: store
  store float %sub.5, float* %arrayidx9.5, align 4, !tbaa !4
Hit: store
  store float %sub.6, float* %arrayidx9.6, align 8, !tbaa !4
Hit: store
  store float %sub.7, float* %arrayidx9.7, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx14.1, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx14.2, align 4, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx14.3, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx14.4, align 4, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx14.5, align 4, !tbaa !4
Hit: load
  %27 = load float, float* %arrayidx14.6, align 4, !tbaa !4
Hit: load
  %31 = load float, float* %arrayidx14.7, align 4, !tbaa !4
Hit: store
  store float %add15.1, float* %arrayidx.1, align 4, !tbaa !4
Hit: store
  store float %add15.2, float* %arrayidx.2, align 4, !tbaa !4
Hit: store
  store float %add15.3, float* %arrayidx.3, align 4, !tbaa !4
Hit: store
  store float %add15.4, float* %arrayidx.4, align 4, !tbaa !4
Hit: store
  store float %add15.5, float* %arrayidx.5, align 4, !tbaa !4
Hit: store
  store float %add15.6, float* %arrayidx.6, align 4, !tbaa !4
Hit: store
  store float %add15.7, float* %arrayidx.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s128
Generating tree
Generating MATCH
Match: 
  %0 = add nsw i64 %indvars.iv40, 1
  %4 = add nsw i64 %indvars.iv40, 3
  %8 = add nsw i64 %indvars.iv40, 5
  %12 = add nsw i64 %indvars.iv40, 7
  %16 = add nsw i64 %indvars.iv40, 9
  %20 = add nsw i64 %indvars.iv40, 11
  %24 = add nsw i64 %indvars.iv40, 13
  %28 = add nsw i64 %indvars.iv40, 15
Generating IDENTICAL
Generating INTSEQ
Gen:   %35 = add i64 %34, 1
Operands done!
Generated:   %36 = add nsw i64 %indvars.iv40, %35
Gen:   %36 = add nsw i64 %indvars.iv40, %35
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %0
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %4
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %8
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %12
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %16
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %20
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %24
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %28
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %36
Gen:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %36
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %9 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %17 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %21 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %25 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %29 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %38 = load float, float* %37, align 1
Gen:   %38 = load float, float* %37, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %33 = zext i8 %32 to i64
Closing BINOP
Gen:   %39 = or i64 %indvars.iv, %33
Operands done!
Generated:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %39
Gen:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %39
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx7, align 32, !tbaa !4
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %10 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %14 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %18 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %22 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %26 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %30 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %41 = load float, float* %40, align 1
Gen:   %41 = load float, float* %40, align 1
Generating MATCH
Match: 
  %sub = fsub float %1, %2
  %sub.1 = fsub float %5, %6
  %sub.2 = fsub float %9, %10
  %sub.3 = fsub float %13, %14
  %sub.4 = fsub float %17, %18
  %sub.5 = fsub float %21, %22
  %sub.6 = fsub float %25, %26
  %sub.7 = fsub float %29, %30
Operands done!
Generated:   %42 = fsub float %38, %41
Gen:   %42 = fsub float %38, %41
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %43 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %39
Gen:   %43 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %39
Generating MATCH
Match: 
  store float %sub, float* %arrayidx9, align 32, !tbaa !4
  store float %sub.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %sub.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %sub.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %sub.4, float* %arrayidx9.4, align 16, !tbaa !4
  store float %sub.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %sub.6, float* %arrayidx9.6, align 8, !tbaa !4
  store float %sub.7, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   store float %42, float* %43, align 1
Gen:   store float %42, float* %43, align 1
Generating MATCH
Match: 
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %0
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %4
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %8
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %12
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %16
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %20
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %24
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %28
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %44 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %36
Gen:   %44 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %36
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx14, align 4, !tbaa !4
  %7 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %11 = load float, float* %arrayidx14.2, align 4, !tbaa !4
  %15 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %19 = load float, float* %arrayidx14.4, align 4, !tbaa !4
  %23 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %27 = load float, float* %arrayidx14.6, align 4, !tbaa !4
  %31 = load float, float* %arrayidx14.7, align 4, !tbaa !4
Operands done!
Generated:   %45 = load float, float* %44, align 1
Gen:   %45 = load float, float* %44, align 1
Generating MATCH
Match: 
  %add15 = fadd float %sub, %3
  %add15.1 = fadd float %sub.1, %7
  %add15.2 = fadd float %sub.2, %11
  %add15.3 = fadd float %sub.3, %15
  %add15.4 = fadd float %sub.4, %19
  %add15.5 = fadd float %sub.5, %23
  %add15.6 = fadd float %sub.6, %27
  %add15.7 = fadd float %sub.7, %31
Operands done!
Generated:   %46 = fadd float %42, %45
Gen:   %46 = fadd float %42, %45
Generating MATCH
Match: 
  store float %add15, float* %arrayidx, align 4, !tbaa !4
  store float %add15.1, float* %arrayidx.1, align 4, !tbaa !4
  store float %add15.2, float* %arrayidx.2, align 4, !tbaa !4
  store float %add15.3, float* %arrayidx.3, align 4, !tbaa !4
  store float %add15.4, float* %arrayidx.4, align 4, !tbaa !4
  store float %add15.5, float* %arrayidx.5, align 4, !tbaa !4
  store float %add15.6, float* %arrayidx.6, align 4, !tbaa !4
  store float %add15.7, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   store float %46, float* %37, align 1
Gen:   store float %46, float* %37, align 1
Generating MULTI
Graph code generated!
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fsub", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="1..15, 2", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
18->0 
2->1 
16->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->11 
6->11 
13->11 
14->13 
15->13 
17->16 
6->16 
13->16 
19->18 
4->18 
2->19 
20->19 
21->20 
22->21 
6->21 
7->21 
}

Gains: 205 - 31 = 174; Width: 0; Profitable; s128
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 12
IDENTICAL: 7
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 1
Done Loop Roller: 1/1
Optimizing: s131
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.027 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 53
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* %arrayidx.1, align 8, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.2, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.3, align 16, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.4, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.5, align 8, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.6, align 4, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: store
  store float %add8.1, float* %arrayidx, align 4, !tbaa !4
Hit: store
  store float %add8.2, float* %arrayidx.1, align 8, !tbaa !4
Hit: store
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !4
Hit: store
  store float %add8.4, float* %arrayidx.3, align 16, !tbaa !4
Hit: store
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !4
Hit: store
  store float %add8.6, float* %arrayidx.5, align 8, !tbaa !4
Schedulable: 1
Loop Rolling: s131
Generating tree
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.1, align 8, !tbaa !4
  %4 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.3, align 16, !tbaa !4
  %8 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %10 = load float, float* %arrayidx.5, align 8, !tbaa !4
  %12 = load float, float* %arrayidx.6, align 4, !tbaa !4
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating MATCH
Match: 
  %indvars.iv.next = or i64 %indvars.iv, 1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
Generating IDENTICAL
Generating INTSEQ
Gen:   %18 = add i64 %17, 1
Operands done!
Generated:   %19 = or i64 %indvars.iv, %18
Found use: 6:   %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Extracting:   %19 = or i64 %indvars.iv, %18
Gen:   %20 = or i64 %indvars.iv, %19
Operands done!
Generated:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
Found use: 6:   store float %add8.7, float* %arrayidx.6, align 4, !tbaa !4
Extracting:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
Gen:   %23 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %21
Operands done!
Generated:   %25 = load float, float* %23, align 1
Gen:   %25 = load float, float* %23, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %19 = zext i8 %18 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %19
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx7, align 32, !tbaa !4
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %11 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %13 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %15 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %add8 = fadd float %2, %3
  %add8.1 = fadd float %4, %5
  %add8.2 = fadd float %6, %7
  %add8.3 = fadd float %8, %9
  %add8.4 = fadd float %10, %11
  %add8.5 = fadd float %12, %13
  %add8.6 = fadd float %14, %15
Operands done!
Generated:   %29 = fadd float %25, %28
Gen:   %29 = fadd float %25, %28
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %30 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Gen:   %30 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Generating MATCH
Match: 
  store float %add8, float* %arrayidx10, align 32, !tbaa !4
  store float %add8.1, float* %arrayidx, align 4, !tbaa !4
  store float %add8.2, float* %arrayidx.1, align 8, !tbaa !4
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !4
  store float %add8.4, float* %arrayidx.3, align 16, !tbaa !4
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !4
  store float %add8.6, float* %arrayidx.5, align 8, !tbaa !4
Operands done!
Generated:   store float %29, float* %30, align 1
Gen:   store float %29, float* %30, align 1
Graph code generated!
Root:
  store float %add8, float* %arrayidx10, align 32, !tbaa !4
  store float %add8.1, float* %arrayidx, align 4, !tbaa !4
  store float %add8.2, float* %arrayidx.1, align 8, !tbaa !4
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !4
  store float %add8.4, float* %arrayidx.3, align 16, !tbaa !4
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !4
  store float %add8.6, float* %arrayidx.5, align 8, !tbaa !4
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="1..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
12->10 
7->12 
13->12 
4->14 
5->14 
12->14 
15 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->16
}

Gains: 100 - 39 = 61; Width: 7; Profitable; s131
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 8
Done Loop Roller: 1/1
Optimizing: s132
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.034 = phi i32 [ 0, %entry ], [ %inc17, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 67
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !2
Hit: load
  %6 = load float, float* %arrayidx7.2, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !2
Hit: load
  %10 = load float, float* %arrayidx7.4, align 4, !tbaa !2
Hit: load
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !2
Hit: load
  %14 = load float, float* %arrayidx7.6, align 4, !tbaa !2
Hit: load
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx9.2, align 4, !tbaa !2
Hit: load
  %9 = load float, float* %arrayidx9.3, align 4, !tbaa !2
Hit: load
  %11 = load float, float* %arrayidx9.4, align 4, !tbaa !2
Hit: load
  %13 = load float, float* %arrayidx9.5, align 4, !tbaa !2
Hit: load
  %15 = load float, float* %arrayidx9.6, align 4, !tbaa !2
Hit: store
  store float %add10.1, float* %arrayidx14.1, align 4, !tbaa !2
Hit: store
  store float %add10.2, float* %arrayidx14.2, align 4, !tbaa !2
Hit: store
  store float %add10.3, float* %arrayidx14.3, align 4, !tbaa !2
Hit: store
  store float %add10.4, float* %arrayidx14.4, align 4, !tbaa !2
Hit: store
  store float %add10.5, float* %arrayidx14.5, align 4, !tbaa !2
Hit: store
  store float %add10.6, float* %arrayidx14.6, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s132
Generating tree
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %20 = add i64 %19, -1
Closing BINOP
Gen:   %21 = add nsw i64 %indvars.iv, %20
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %1
  %arrayidx7.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv
  %arrayidx7.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv.next
  %arrayidx7.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv.next.1
  %arrayidx7.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv.next.2
  %arrayidx7.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv.next.3
  %arrayidx7.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv.next.4
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %21
Gen:   %22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %21
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx7, align 4, !tbaa !2
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !2
  %6 = load float, float* %arrayidx7.2, align 4, !tbaa !2
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !2
  %10 = load float, float* %arrayidx7.4, align 4, !tbaa !2
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !2
  %14 = load float, float* %arrayidx7.6, align 4, !tbaa !2
Operands done!
Generated:   %23 = load float, float* %22, align 1
Gen:   %23 = load float, float* %22, align 1
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %19 = zext i8 %18 to i64
Closing BINOP
Found use: 6:   %arrayidx7.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv.next.5
Extracting:   %24 = add nuw nsw i64 %indvars.iv, %19
Gen:   %25 = add nuw nsw i64 %indvars.iv, %20
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %25
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %25
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx9, align 4, !tbaa !2
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !2
  %8 = load float, float* %arrayidx9.2, align 4, !tbaa !2
  %10 = load float, float* %arrayidx9.3, align 4, !tbaa !2
  %12 = load float, float* %arrayidx9.4, align 4, !tbaa !2
  %14 = load float, float* %arrayidx9.5, align 4, !tbaa !2
  %16 = load float, float* %arrayidx9.6, align 4, !tbaa !2
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %mul = fmul float %4, %1
  %mul.1 = fmul float %6, %1
  %mul.2 = fmul float %8, %1
  %mul.3 = fmul float %10, %1
  %mul.4 = fmul float %12, %1
  %mul.5 = fmul float %14, %1
  %mul.6 = fmul float %16, %1
Generating IDENTICAL
Operands done!
Generated:   %29 = fmul float %28, %1
Gen:   %29 = fmul float %28, %1
Generating MATCH
Match: 
  %add10 = fadd float %3, %mul
  %add10.1 = fadd float %5, %mul.1
  %add10.2 = fadd float %7, %mul.2
  %add10.3 = fadd float %9, %mul.3
  %add10.4 = fadd float %11, %mul.4
  %add10.5 = fadd float %13, %mul.5
  %add10.6 = fadd float %15, %mul.6
Operands done!
Generated:   %30 = fadd float %24, %29
Gen:   %30 = fadd float %24, %29
Generating MATCH
Match: 
  %arrayidx14 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv
  %arrayidx14.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next
  %arrayidx14.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.1
  %arrayidx14.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.2
  %arrayidx14.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.3
  %arrayidx14.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.4
  %arrayidx14.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %31 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %25
Gen:   %31 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %25
Generating MATCH
Match: 
  store float %add10, float* %arrayidx14, align 4, !tbaa !2
  store float %add10.1, float* %arrayidx14.1, align 4, !tbaa !2
  store float %add10.2, float* %arrayidx14.2, align 4, !tbaa !2
  store float %add10.3, float* %arrayidx14.3, align 4, !tbaa !2
  store float %add10.4, float* %arrayidx14.4, align 4, !tbaa !2
  store float %add10.5, float* %arrayidx14.5, align 4, !tbaa !2
  store float %add10.6, float* %arrayidx14.6, align 4, !tbaa !2
Operands done!
Generated:   store float %30, float* %31, align 1
Gen:   store float %30, float* %31, align 1
Graph code generated!
Root:
  store float %add10, float* %arrayidx14, align 4, !tbaa !2
  store float %add10.1, float* %arrayidx14.1, align 4, !tbaa !2
  store float %add10.2, float* %arrayidx14.2, align 4, !tbaa !2
  store float %add10.3, float* %arrayidx14.3, align 4, !tbaa !2
  store float %add10.4, float* %arrayidx14.4, align 4, !tbaa !2
  store float %add10.5, float* %arrayidx14.5, align 4, !tbaa !2
  store float %add10.6, float* %arrayidx14.6, align 4, !tbaa !2
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="1", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="-1..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
17->0 
2->1 
10->1 
3->2 
4->3 
5->3 
6->3 
7->3 
8->7 
9->7 
11->10 
16->10 
12->11 
13->12 
5->12 
14->12 
8->14 
15->14 
4->17 
5->17 
5->17 
14->17 
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
14->18
}

Gains: 119 - 31 = 88; Width: 7; Profitable; s132
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 2
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 10
Done Loop Roller: 1/1
Optimizing: s141
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.050 = phi i32 [ 0, %entry ], [ %inc26, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
BlockSize: 4
Attempting Group:
BlockSize: 15
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.cond2.loopexit ]
  %i.049 = phi i32 [ 0, %for.cond2.preheader ], [ %add, %for.cond2.loopexit ]
BlockSize: 16
  %indvars.iv51.prol = phi i64 [ %indvars.iv.next52.prol, %for.body13.prol ], [ %indvars.iv, %for.body13.lr.ph ]
  %indvars.iv.next52.prol = add nuw nsw i64 %indvars.iv51.prol, 1
  %k.047.prol = phi i32 [ %add20.prol, %for.body13.prol ], [ %sub9, %for.body13.lr.ph ]
  %add20.prol = add nuw nsw i32 %k.047.prol, %8
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body13.prol ], [ %xtraiter, %for.body13.lr.ph ]
  %prol.iter.sub = add i32 %prol.iter, -1
Attempting Group:
BlockSize: 4
  %indvars.iv51.unr = phi i64 [ %indvars.iv, %for.body13.lr.ph ], [ %indvars.iv.next52.prol, %for.body13.prol ]
  %k.047.unr = phi i32 [ %sub9, %for.body13.lr.ph ], [ %add20.prol, %for.body13.prol ]
BlockSize: 84
  %indvars.iv51 = phi i64 [ %indvars.iv.next52.7, %for.body13 ], [ %indvars.iv51.unr, %for.body13.prol.loopexit ]
  %indvars.iv.next52.7 = add nuw nsw i64 %indvars.iv51, 8
  %k.047 = phi i32 [ %add20.7, %for.body13 ], [ %k.047.unr, %for.body13.prol.loopexit ]
  %add20.7 = add nuw nsw i32 %add20.6, %33
Possible reduction
  %add20.7 = add nuw nsw i32 %add20.6, %33
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
4 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
3 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
4 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
match analysis
match analysis
Match: 0
5 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
match analysis
Match: 0
6 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
Match: 0
7 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Mismatching
Invalid:   %indvars.iv.next52.2 = add nuw nsw i64 %indvars.iv51, 3
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="zext", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
23 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
24 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
25 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
26 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
27 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
28 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
11->0 
2->1 
10->1 
3->2 
4->3 
5->3 
6->3 
9->3 
7->6 
8->6 
11->10 
12->11 
5->11 
13->11 
14->13 
15->14 
28->14 
16->15 
27->15 
17->16 
26->16 
18->17 
25->17 
19->18 
24->18 
20->19 
23->19 
21->20 
22->20 
29 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->29
30 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->30
31 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->31
32 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->32
33 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->33
34 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->34
35 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->35
36 [label="add", style="filled" , fillcolor="#f2eb5c", shape=box];
14->36
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
4 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
3 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
4 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
match analysis
match analysis
Match: 0
5 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
match analysis
Match: 0
6 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
Match: 0
7 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Mismatching
Invalid:   %indvars.iv.next52.2 = add nuw nsw i64 %indvars.iv51, 3
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="zext", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
23 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
24 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
25 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
26 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
27 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
28 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
11->0 
2->1 
10->1 
3->2 
4->3 
5->3 
6->3 
9->3 
7->6 
8->6 
11->10 
12->11 
5->11 
13->11 
14->13 
15->14 
28->14 
16->15 
27->15 
17->16 
26->16 
18->17 
25->17 
19->18 
24->18 
20->19 
23->19 
21->20 
22->20 
29 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->29
30 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->30
31 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->31
32 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->32
33 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->33
34 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->34
35 [label="trunc", style="filled" , fillcolor="#f2eb5c", shape=box];
6->35
36 [label="add", style="filled" , fillcolor="#f2eb5c", shape=box];
14->36
}

Building reduction
  %k.047 = phi i32 [ %add20.7, %for.body13 ], [ %k.047.unr, %for.body13.prol.loopexit ]
  %add20.7 = add nuw nsw i32 %add20.6, %33
BOs:
  %add20.7 = add nuw nsw i32 %add20.6, %33
  %add20.6 = add nuw nsw i32 %add20.5, %30
  %add20.5 = add nuw nsw i32 %add20.4, %27
  %add20.4 = add nuw nsw i32 %add20.3, %24
  %add20.3 = add nuw nsw i32 %add20.2, %21
  %add20.2 = add nuw nsw i32 %add20.1, %18
  %add20.1 = add nuw nsw i32 %add20, %15
  %add20 = add nuw nsw i32 %k.047, %12
Operands:
  %12 = trunc i64 %indvars.iv.next52 to i32
  %15 = trunc i64 %indvars.iv.next52.1 to i32
  %18 = trunc i64 %indvars.iv.next52.2 to i32
  %21 = trunc i64 %indvars.iv.next52.3 to i32
  %24 = trunc i64 %indvars.iv.next52.4 to i32
  %27 = trunc i64 %indvars.iv.next52.5 to i32
  %30 = trunc i64 %indvars.iv.next52.6 to i32
  %33 = trunc i64 %indvars.iv.next52.7 to i32
Operands:
  %12 = trunc i64 %indvars.iv.next52 to i32
  %15 = trunc i64 %indvars.iv.next52.1 to i32
  %18 = trunc i64 %indvars.iv.next52.2 to i32
  %21 = trunc i64 %indvars.iv.next52.3 to i32
  %24 = trunc i64 %indvars.iv.next52.4 to i32
  %27 = trunc i64 %indvars.iv.next52.5 to i32
  %30 = trunc i64 %indvars.iv.next52.6 to i32
  %33 = trunc i64 %indvars.iv.next52.7 to i32
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Computing order of nodes for each lane
Read/Write memory found in between
  %13 = load float, float* %arrayidx15.1, align 4, !tbaa !5
Done Loop Roller: 0/0
Nothing found in: s141
Optimizing: s151s
BlockSize: 2
BlockSize: 1
BlockSize: 66
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx.2, align 4, !tbaa !2
Hit: load
  %11 = load float, float* %arrayidx.3, align 4, !tbaa !2
Hit: load
  %14 = load float, float* %arrayidx.4, align 4, !tbaa !2
Hit: load
  %17 = load float, float* %arrayidx.5, align 4, !tbaa !2
Hit: load
  %20 = load float, float* %arrayidx.6, align 4, !tbaa !2
Hit: load
  %6 = load float, float* %arrayidx2.1, align 4, !tbaa !2
Hit: load
  %9 = load float, float* %arrayidx2.2, align 4, !tbaa !2
Hit: load
  %12 = load float, float* %arrayidx2.3, align 4, !tbaa !2
Hit: load
  %15 = load float, float* %arrayidx2.4, align 4, !tbaa !2
Hit: load
  %18 = load float, float* %arrayidx2.5, align 4, !tbaa !2
Hit: load
  %21 = load float, float* %arrayidx2.6, align 4, !tbaa !2
Hit: store
  store float %add3.1, float* %arrayidx5.1, align 4, !tbaa !2
Hit: store
  store float %add3.2, float* %arrayidx5.2, align 4, !tbaa !2
Hit: store
  store float %add3.3, float* %arrayidx5.3, align 4, !tbaa !2
Hit: store
  store float %add3.4, float* %arrayidx5.4, align 4, !tbaa !2
Hit: store
  store float %add3.5, float* %arrayidx5.5, align 4, !tbaa !2
Hit: store
  store float %add3.6, float* %arrayidx5.6, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s151s
Generating tree
Generating MATCH
Match: 
  %1 = add nsw i64 %indvars.iv, %0
  %4 = add nsw i64 %indvars.iv.next, %0
  %7 = add nsw i64 %indvars.iv.next.1, %0
  %10 = add nsw i64 %indvars.iv.next.2, %0
  %13 = add nsw i64 %indvars.iv.next.3, %0
  %16 = add nsw i64 %indvars.iv.next.4, %0
  %19 = add nsw i64 %indvars.iv.next.5, %0
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %26 = zext i8 %25 to i64
Closing BINOP
Gen:   %27 = or i64 %indvars.iv, %26
Generating IDENTICAL
Operands done!
Generated:   %28 = add nsw i64 %27, %0
Gen:   %28 = add nsw i64 %27, %0
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds float, float* %a, i64 %1
  %arrayidx.1 = getelementptr inbounds float, float* %a, i64 %4
  %arrayidx.2 = getelementptr inbounds float, float* %a, i64 %7
  %arrayidx.3 = getelementptr inbounds float, float* %a, i64 %10
  %arrayidx.4 = getelementptr inbounds float, float* %a, i64 %13
  %arrayidx.5 = getelementptr inbounds float, float* %a, i64 %16
  %arrayidx.6 = getelementptr inbounds float, float* %a, i64 %19
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds float, float* %a, i64 %28
Gen:   %29 = getelementptr inbounds float, float* %a, i64 %28
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx, align 4, !tbaa !2
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !2
  %8 = load float, float* %arrayidx.2, align 4, !tbaa !2
  %11 = load float, float* %arrayidx.3, align 4, !tbaa !2
  %14 = load float, float* %arrayidx.4, align 4, !tbaa !2
  %17 = load float, float* %arrayidx.5, align 4, !tbaa !2
  %20 = load float, float* %arrayidx.6, align 4, !tbaa !2
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %arrayidx2 = getelementptr inbounds float, float* %b, i64 %indvars.iv
  %arrayidx2.1 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next
  %arrayidx2.2 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next.1
  %arrayidx2.3 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next.2
  %arrayidx2.4 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next.3
  %arrayidx2.5 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next.4
  %arrayidx2.6 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next.5
Generating IDENTICAL
Operands done!
Generated:   %31 = getelementptr inbounds float, float* %b, i64 %27
Gen:   %31 = getelementptr inbounds float, float* %b, i64 %27
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx2, align 4, !tbaa !2
  %6 = load float, float* %arrayidx2.1, align 4, !tbaa !2
  %9 = load float, float* %arrayidx2.2, align 4, !tbaa !2
  %12 = load float, float* %arrayidx2.3, align 4, !tbaa !2
  %15 = load float, float* %arrayidx2.4, align 4, !tbaa !2
  %18 = load float, float* %arrayidx2.5, align 4, !tbaa !2
  %21 = load float, float* %arrayidx2.6, align 4, !tbaa !2
Operands done!
Generated:   %32 = load float, float* %31, align 1
Gen:   %32 = load float, float* %31, align 1
Generating MATCH
Match: 
  %add3 = fadd float %2, %3
  %add3.1 = fadd float %5, %6
  %add3.2 = fadd float %8, %9
  %add3.3 = fadd float %11, %12
  %add3.4 = fadd float %14, %15
  %add3.5 = fadd float %17, %18
  %add3.6 = fadd float %20, %21
Operands done!
Generated:   %33 = fadd float %30, %32
Gen:   %33 = fadd float %30, %32
Generating MATCH
Match: 
  %arrayidx5 = getelementptr inbounds float, float* %a, i64 %indvars.iv
  %arrayidx5.1 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next
  %arrayidx5.2 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next.1
  %arrayidx5.3 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next.2
  %arrayidx5.4 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next.3
  %arrayidx5.5 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next.4
  %arrayidx5.6 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next.5
Generating IDENTICAL
Operands done!
Generated:   %34 = getelementptr inbounds float, float* %a, i64 %27
Gen:   %34 = getelementptr inbounds float, float* %a, i64 %27
Generating MATCH
Match: 
  store float %add3, float* %arrayidx5, align 4, !tbaa !2
  store float %add3.1, float* %arrayidx5.1, align 4, !tbaa !2
  store float %add3.2, float* %arrayidx5.2, align 4, !tbaa !2
  store float %add3.3, float* %arrayidx5.3, align 4, !tbaa !2
  store float %add3.4, float* %arrayidx5.4, align 4, !tbaa !2
  store float %add3.5, float* %arrayidx5.5, align 4, !tbaa !2
  store float %add3.6, float* %arrayidx5.6, align 4, !tbaa !2
Operands done!
Generated:   store float %33, float* %34, align 1
Gen:   store float %33, float* %34, align 1
Graph code generated!
Root:
  store float %add3, float* %arrayidx5, align 4, !tbaa !2
  store float %add3.1, float* %arrayidx5.1, align 4, !tbaa !2
  store float %add3.2, float* %arrayidx5.2, align 4, !tbaa !2
  store float %add3.3, float* %arrayidx5.3, align 4, !tbaa !2
  store float %add3.4, float* %arrayidx5.4, align 4, !tbaa !2
  store float %add3.5, float* %arrayidx5.5, align 4, !tbaa !2
  store float %add3.6, float* %arrayidx5.6, align 4, !tbaa !2
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="arg", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="arg", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
13->0 
2->1 
10->1 
3->2 
4->3 
5->3 
6->5 
9->5 
7->6 
8->6 
11->10 
12->11 
6->11 
4->13 
6->13 
}

Gains: 95 - 15 = 80; Width: 7; Profitable; s151s
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 10
Done Loop Roller: 1/1
Optimizing: s151
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 6
  %nl.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %inc = add nuw nsw i32 %nl.08, 1
Attempting Group:
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s151
Optimizing: s152s
BlockSize: 11
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s152s
Optimizing: s152
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.027 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 123
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %25 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %29 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: store
  store float %mul.1, float* %arrayidx9.1, align 4, !tbaa !4
Hit: store
  store float %mul.2, float* %arrayidx9.2, align 8, !tbaa !4
Hit: store
  store float %mul.3, float* %arrayidx9.3, align 4, !tbaa !4
Hit: store
  store float %mul.4, float* %arrayidx9.4, align 16, !tbaa !4
Hit: store
  store float %mul.5, float* %arrayidx9.5, align 4, !tbaa !4
Hit: store
  store float %mul.6, float* %arrayidx9.6, align 8, !tbaa !4
Hit: store
  store float %mul.7, float* %arrayidx9.7, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx2.i.1, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx2.i.2, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx2.i.3, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx2.i.4, align 16, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx2.i.5, align 4, !tbaa !4
Hit: load
  %26 = load float, float* %arrayidx2.i.6, align 8, !tbaa !4
Hit: load
  %30 = load float, float* %arrayidx2.i.7, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx4.i.1, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx4.i.2, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx4.i.3, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx4.i.4, align 16, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx4.i.5, align 4, !tbaa !4
Hit: load
  %27 = load float, float* %arrayidx4.i.6, align 8, !tbaa !4
Hit: load
  %31 = load float, float* %arrayidx4.i.7, align 4, !tbaa !4
Hit: store
  store float %add.i.1, float* %arrayidx4.i.1, align 4, !tbaa !4
Hit: store
  store float %add.i.2, float* %arrayidx4.i.2, align 8, !tbaa !4
Hit: store
  store float %add.i.3, float* %arrayidx4.i.3, align 4, !tbaa !4
Hit: store
  store float %add.i.4, float* %arrayidx4.i.4, align 16, !tbaa !4
Hit: store
  store float %add.i.5, float* %arrayidx4.i.5, align 4, !tbaa !4
Hit: store
  store float %add.i.6, float* %arrayidx4.i.6, align 8, !tbaa !4
Hit: store
  store float %add.i.7, float* %arrayidx4.i.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s152
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %33 = zext i8 %32 to i64
Closing BINOP
Gen:   %34 = or i64 %indvars.iv, %33
Operands done!
Generated:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %34
Gen:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %34
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %36 = load float, float* %35, align 1
Gen:   %36 = load float, float* %35, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %34
Gen:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %34
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %17 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %25 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %29 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %38 = load float, float* %37, align 1
Gen:   %38 = load float, float* %37, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul.1 = fmul float %4, %5
  %mul.2 = fmul float %8, %9
  %mul.3 = fmul float %12, %13
  %mul.4 = fmul float %16, %17
  %mul.5 = fmul float %20, %21
  %mul.6 = fmul float %24, %25
  %mul.7 = fmul float %28, %29
Operands done!
Generated:   %39 = fmul float %36, %38
Gen:   %39 = fmul float %36, %38
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %34
Gen:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %34
Generating MATCH
Match: 
  store float %mul, float* %arrayidx9, align 32, !tbaa !4
  store float %mul.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %mul.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %mul.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %mul.4, float* %arrayidx9.4, align 16, !tbaa !4
  store float %mul.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %mul.6, float* %arrayidx9.6, align 8, !tbaa !4
  store float %mul.7, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   store float %39, float* %40, align 1
Gen:   store float %39, float* %40, align 1
Generating MATCH
Match: 
  %arrayidx2.i = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx2.i.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx2.i.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx2.i.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx2.i.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx2.i.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx2.i.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx2.i.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %34
Gen:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %34
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx2.i, align 32, !tbaa !4
  %6 = load float, float* %arrayidx2.i.1, align 4, !tbaa !4
  %10 = load float, float* %arrayidx2.i.2, align 8, !tbaa !4
  %14 = load float, float* %arrayidx2.i.3, align 4, !tbaa !4
  %18 = load float, float* %arrayidx2.i.4, align 16, !tbaa !4
  %22 = load float, float* %arrayidx2.i.5, align 4, !tbaa !4
  %26 = load float, float* %arrayidx2.i.6, align 8, !tbaa !4
  %30 = load float, float* %arrayidx2.i.7, align 4, !tbaa !4
Operands done!
Generated:   %42 = load float, float* %41, align 1
Gen:   %42 = load float, float* %41, align 1
Generating MATCH
Match: 
  %mul.i = fmul float %mul, %2
  %mul.i.1 = fmul float %mul.1, %6
  %mul.i.2 = fmul float %mul.2, %10
  %mul.i.3 = fmul float %mul.3, %14
  %mul.i.4 = fmul float %mul.4, %18
  %mul.i.5 = fmul float %mul.5, %22
  %mul.i.6 = fmul float %mul.6, %26
  %mul.i.7 = fmul float %mul.7, %30
Operands done!
Generated:   %43 = fmul float %39, %42
Gen:   %43 = fmul float %39, %42
Generating MATCH
Match: 
  %arrayidx4.i = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx4.i.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx4.i.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx4.i.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx4.i.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx4.i.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx4.i.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx4.i.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %44 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %34
Gen:   %44 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %34
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx4.i, align 32, !tbaa !4
  %7 = load float, float* %arrayidx4.i.1, align 4, !tbaa !4
  %11 = load float, float* %arrayidx4.i.2, align 8, !tbaa !4
  %15 = load float, float* %arrayidx4.i.3, align 4, !tbaa !4
  %19 = load float, float* %arrayidx4.i.4, align 16, !tbaa !4
  %23 = load float, float* %arrayidx4.i.5, align 4, !tbaa !4
  %27 = load float, float* %arrayidx4.i.6, align 8, !tbaa !4
  %31 = load float, float* %arrayidx4.i.7, align 4, !tbaa !4
Operands done!
Generated:   %45 = load float, float* %44, align 1
Gen:   %45 = load float, float* %44, align 1
Generating MATCH
Match: 
  %add.i = fadd float %3, %mul.i
  %add.i.1 = fadd float %7, %mul.i.1
  %add.i.2 = fadd float %11, %mul.i.2
  %add.i.3 = fadd float %15, %mul.i.3
  %add.i.4 = fadd float %19, %mul.i.4
  %add.i.5 = fadd float %23, %mul.i.5
  %add.i.6 = fadd float %27, %mul.i.6
  %add.i.7 = fadd float %31, %mul.i.7
Operands done!
Generated:   %46 = fadd float %45, %43
Gen:   %46 = fadd float %45, %43
Generating MATCH
Match: 
  store float %add.i, float* %arrayidx4.i, align 32, !tbaa !4
  store float %add.i.1, float* %arrayidx4.i.1, align 4, !tbaa !4
  store float %add.i.2, float* %arrayidx4.i.2, align 8, !tbaa !4
  store float %add.i.3, float* %arrayidx4.i.3, align 4, !tbaa !4
  store float %add.i.4, float* %arrayidx4.i.4, align 16, !tbaa !4
  store float %add.i.5, float* %arrayidx4.i.5, align 4, !tbaa !4
  store float %add.i.6, float* %arrayidx4.i.6, align 8, !tbaa !4
  store float %add.i.7, float* %arrayidx4.i.7, align 4, !tbaa !4
Operands done!
Generated:   store float %46, float* %44, align 1
Gen:   store float %46, float* %44, align 1
Generating MULTI
Graph code generated!
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
15->0 
2->1 
13->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->11 
6->11 
7->11 
14->13 
6->13 
7->13 
16->15 
18->15 
17->16 
20->16 
18->17 
19->18 
6->18 
7->18 
2->20 
21->20 
22->21 
23->22 
6->22 
7->22 
}

Gains: 221 - 29 = 192; Width: 0; Profitable; s152
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 14
IDENTICAL: 7
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 1
Done Loop Roller: 1/1
Optimizing: s161
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.048 = phi i32 [ 0, %entry ], [ %inc28, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.be, %for.body5.backedge ]
BlockSize: 12
Attempting Group:
BlockSize: 10
Attempting Group:
BlockSize: 5
  %indvars.iv.next.pre-phi = phi i64 [ %.pre, %if.end ], [ %6, %L20 ]
BlockSize: 12
Attempting Group:
BlockSize: 10
Attempting Group:
BlockSize: 5
  %indvars.iv.next.1.pre-phi = phi i64 [ %13, %L20.1 ], [ %.pre50, %if.end.1 ]
BlockSize: 12
Attempting Group:
BlockSize: 10
Attempting Group:
BlockSize: 5
  %indvars.iv.next.2.pre-phi = phi i64 [ %20, %L20.2 ], [ %.pre51, %if.end.2 ]
BlockSize: 12
Attempting Group:
BlockSize: 10
Attempting Group:
BlockSize: 5
  %indvars.iv.next.3.pre-phi = phi i64 [ %27, %L20.3 ], [ %.pre52, %if.end.3 ]
BlockSize: 12
Attempting Group:
BlockSize: 10
Attempting Group:
BlockSize: 5
  %indvars.iv.next.4.pre-phi = phi i64 [ %34, %L20.4 ], [ %.pre53, %if.end.4 ]
BlockSize: 12
Attempting Group:
BlockSize: 10
Attempting Group:
BlockSize: 5
  %indvars.iv.next.5.pre-phi = phi i64 [ %41, %L20.5 ], [ %.pre54, %if.end.5 ]
BlockSize: 12
Attempting Group:
BlockSize: 10
Attempting Group:
BlockSize: 3
  %indvars.iv.next.6.pre-phi = phi i64 [ %48, %L20.6 ], [ %.pre55, %if.end.6 ]
BlockSize: 4
BlockSize: 12
Attempting Group:
BlockSize: 10
Attempting Group:
BlockSize: 2
  %indvars.iv.be = phi i64 [ %55, %L20.7 ], [ %.pre56, %if.end.7 ]
Done Loop Roller: 0/0
Nothing found in: s161
Optimizing: s1161
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.046 = phi i32 [ 0, %entry ], [ %inc27, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 6
BlockSize: 6
BlockSize: 11
  %mul.sink = phi float [ %mul, %if.end ], [ %mul21, %L20 ]
  %.sink = phi float [ %0, %if.end ], [ %3, %L20 ]
  %a.sink = phi [32000 x float]* [ @a, %if.end ], [ @b, %L20 ]
Attempting Group:
BlockSize: 6
BlockSize: 6
BlockSize: 11
  %mul21.1.sink = phi float [ %mul21.1, %L20.1 ], [ %mul.1, %if.end.1 ]
  %.sink47 = phi float [ %8, %L20.1 ], [ %5, %if.end.1 ]
  %b.sink = phi [32000 x float]* [ @b, %L20.1 ], [ @a, %if.end.1 ]
Attempting Group:
BlockSize: 6
BlockSize: 6
BlockSize: 11
  %mul21.2.sink = phi float [ %mul21.2, %L20.2 ], [ %mul.2, %if.end.2 ]
  %.sink49 = phi float [ %13, %L20.2 ], [ %10, %if.end.2 ]
  %b.sink48 = phi [32000 x float]* [ @b, %L20.2 ], [ @a, %if.end.2 ]
Attempting Group:
BlockSize: 6
BlockSize: 6
BlockSize: 11
  %mul21.3.sink = phi float [ %mul21.3, %L20.3 ], [ %mul.3, %if.end.3 ]
  %.sink51 = phi float [ %18, %L20.3 ], [ %15, %if.end.3 ]
  %b.sink50 = phi [32000 x float]* [ @b, %L20.3 ], [ @a, %if.end.3 ]
Attempting Group:
BlockSize: 6
BlockSize: 6
BlockSize: 11
  %mul21.4.sink = phi float [ %mul21.4, %L20.4 ], [ %mul.4, %if.end.4 ]
  %.sink53 = phi float [ %23, %L20.4 ], [ %20, %if.end.4 ]
  %b.sink52 = phi [32000 x float]* [ @b, %L20.4 ], [ @a, %if.end.4 ]
Attempting Group:
BlockSize: 6
BlockSize: 6
BlockSize: 11
  %mul21.5.sink = phi float [ %mul21.5, %L20.5 ], [ %mul.5, %if.end.5 ]
  %.sink55 = phi float [ %28, %L20.5 ], [ %25, %if.end.5 ]
  %b.sink54 = phi [32000 x float]* [ @b, %L20.5 ], [ @a, %if.end.5 ]
Attempting Group:
BlockSize: 6
BlockSize: 6
BlockSize: 9
  %mul21.6.sink = phi float [ %mul21.6, %L20.6 ], [ %mul.6, %if.end.6 ]
  %.sink57 = phi float [ %33, %L20.6 ], [ %30, %if.end.6 ]
  %b.sink56 = phi [32000 x float]* [ @b, %L20.6 ], [ @a, %if.end.6 ]
Attempting Group:
BlockSize: 4
BlockSize: 6
BlockSize: 6
BlockSize: 8
  %mul21.7.sink = phi float [ %mul21.7, %L20.7 ], [ %mul.7, %if.end.7 ]
  %.sink59 = phi float [ %38, %L20.7 ], [ %35, %if.end.7 ]
  %b.sink58 = phi [32000 x float]* [ @b, %L20.7 ], [ @a, %if.end.7 ]
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s1161
Optimizing: s162
BlockSize: 10
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.033 = phi i32 [ 0, %entry ], [ %inc16, %if.end ]
BlockSize: 87
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body6.7 ], [ 0, %for.body ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %9 = load float, float* %arrayidx.1, align 4, !tbaa !11
Hit: load
  %13 = load float, float* %arrayidx.2, align 4, !tbaa !11
Hit: load
  %17 = load float, float* %arrayidx.3, align 4, !tbaa !11
Hit: load
  %21 = load float, float* %arrayidx.4, align 4, !tbaa !11
Hit: load
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !11
Hit: load
  %29 = load float, float* %arrayidx.6, align 4, !tbaa !11
Hit: load
  %10 = load float, float* %arrayidx8.1, align 4, !tbaa !11
Hit: load
  %14 = load float, float* %arrayidx8.2, align 8, !tbaa !11
Hit: load
  %18 = load float, float* %arrayidx8.3, align 4, !tbaa !11
Hit: load
  %22 = load float, float* %arrayidx8.4, align 16, !tbaa !11
Hit: load
  %26 = load float, float* %arrayidx8.5, align 4, !tbaa !11
Hit: load
  %30 = load float, float* %arrayidx8.6, align 8, !tbaa !11
Hit: load
  %11 = load float, float* %arrayidx10.1, align 4, !tbaa !11
Hit: load
  %15 = load float, float* %arrayidx10.2, align 8, !tbaa !11
Hit: load
  %19 = load float, float* %arrayidx10.3, align 4, !tbaa !11
Hit: load
  %23 = load float, float* %arrayidx10.4, align 16, !tbaa !11
Hit: load
  %27 = load float, float* %arrayidx10.5, align 4, !tbaa !11
Hit: load
  %31 = load float, float* %arrayidx10.6, align 8, !tbaa !11
Hit: store
  store float %add11.1, float* %arrayidx13.1, align 4, !tbaa !11
Hit: store
  store float %add11.2, float* %arrayidx13.2, align 8, !tbaa !11
Hit: store
  store float %add11.3, float* %arrayidx13.3, align 4, !tbaa !11
Hit: store
  store float %add11.4, float* %arrayidx13.4, align 16, !tbaa !11
Hit: store
  store float %add11.5, float* %arrayidx13.5, align 4, !tbaa !11
Hit: store
  store float %add11.6, float* %arrayidx13.6, align 8, !tbaa !11
Schedulable: 1
Loop Rolling: s162
Generating tree
Generating MATCH
Match: 
  %4 = add nsw i64 %indvars.iv, %3
  %8 = add nsw i64 %indvars.iv.next, %3
  %12 = add nsw i64 %indvars.iv.next.1, %3
  %16 = add nsw i64 %indvars.iv.next.2, %3
  %20 = add nsw i64 %indvars.iv.next.3, %3
  %24 = add nsw i64 %indvars.iv.next.4, %3
  %28 = add nsw i64 %indvars.iv.next.5, %3
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %37 = zext i8 %36 to i64
Closing BINOP
Gen:   %38 = or i64 %indvars.iv, %37
Generating IDENTICAL
Operands done!
Generated:   %39 = add nsw i64 %38, %3
Gen:   %39 = add nsw i64 %38, %3
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %4
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %8
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %12
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %16
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %24
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %39
Gen:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %39
Generating MATCH
Match: 
  %5 = load float, float* %arrayidx, align 4, !tbaa !11
  %9 = load float, float* %arrayidx.1, align 4, !tbaa !11
  %13 = load float, float* %arrayidx.2, align 4, !tbaa !11
  %17 = load float, float* %arrayidx.3, align 4, !tbaa !11
  %21 = load float, float* %arrayidx.4, align 4, !tbaa !11
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !11
  %29 = load float, float* %arrayidx.6, align 4, !tbaa !11
Operands done!
Generated:   %41 = load float, float* %40, align 1
Gen:   %41 = load float, float* %40, align 1
Generating MATCH
Match: 
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %42 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %38
Gen:   %42 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %38
Generating MATCH
Match: 
  %6 = load float, float* %arrayidx8, align 32, !tbaa !11
  %10 = load float, float* %arrayidx8.1, align 4, !tbaa !11
  %14 = load float, float* %arrayidx8.2, align 8, !tbaa !11
  %18 = load float, float* %arrayidx8.3, align 4, !tbaa !11
  %22 = load float, float* %arrayidx8.4, align 16, !tbaa !11
  %26 = load float, float* %arrayidx8.5, align 4, !tbaa !11
  %30 = load float, float* %arrayidx8.6, align 8, !tbaa !11
Operands done!
Generated:   %43 = load float, float* %42, align 1
Gen:   %43 = load float, float* %42, align 1
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %44 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %38
Gen:   %44 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %38
Generating MATCH
Match: 
  %7 = load float, float* %arrayidx10, align 32, !tbaa !11
  %11 = load float, float* %arrayidx10.1, align 4, !tbaa !11
  %15 = load float, float* %arrayidx10.2, align 8, !tbaa !11
  %19 = load float, float* %arrayidx10.3, align 4, !tbaa !11
  %23 = load float, float* %arrayidx10.4, align 16, !tbaa !11
  %27 = load float, float* %arrayidx10.5, align 4, !tbaa !11
  %31 = load float, float* %arrayidx10.6, align 8, !tbaa !11
Operands done!
Generated:   %45 = load float, float* %44, align 1
Gen:   %45 = load float, float* %44, align 1
Generating MATCH
Match: 
  %mul = fmul float %6, %7
  %mul.1 = fmul float %10, %11
  %mul.2 = fmul float %14, %15
  %mul.3 = fmul float %18, %19
  %mul.4 = fmul float %22, %23
  %mul.5 = fmul float %26, %27
  %mul.6 = fmul float %30, %31
Operands done!
Generated:   %46 = fmul float %43, %45
Gen:   %46 = fmul float %43, %45
Generating MATCH
Match: 
  %add11 = fadd float %5, %mul
  %add11.1 = fadd float %9, %mul.1
  %add11.2 = fadd float %13, %mul.2
  %add11.3 = fadd float %17, %mul.3
  %add11.4 = fadd float %21, %mul.4
  %add11.5 = fadd float %25, %mul.5
  %add11.6 = fadd float %29, %mul.6
Operands done!
Generated:   %47 = fadd float %41, %46
Gen:   %47 = fadd float %41, %46
Generating MATCH
Match: 
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx13.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %38
Gen:   %48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %38
Generating MATCH
Match: 
  store float %add11, float* %arrayidx13, align 32, !tbaa !11
  store float %add11.1, float* %arrayidx13.1, align 4, !tbaa !11
  store float %add11.2, float* %arrayidx13.2, align 8, !tbaa !11
  store float %add11.3, float* %arrayidx13.3, align 4, !tbaa !11
  store float %add11.4, float* %arrayidx13.4, align 16, !tbaa !11
  store float %add11.5, float* %arrayidx13.5, align 4, !tbaa !11
  store float %add11.6, float* %arrayidx13.6, align 8, !tbaa !11
Operands done!
Generated:   store float %47, float* %48, align 1
Gen:   store float %47, float* %48, align 1
Graph code generated!
Root:
  store float %add11, float* %arrayidx13, align 32, !tbaa !11
  store float %add11.1, float* %arrayidx13.1, align 4, !tbaa !11
  store float %add11.2, float* %arrayidx13.2, align 8, !tbaa !11
  store float %add11.3, float* %arrayidx13.3, align 4, !tbaa !11
  store float %add11.4, float* %arrayidx13.4, align 16, !tbaa !11
  store float %add11.5, float* %arrayidx13.5, align 4, !tbaa !11
  store float %add11.6, float* %arrayidx13.6, align 8, !tbaa !11
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
18->0 
2->1 
11->1 
3->2 
4->3 
5->3 
6->3 
7->6 
10->6 
8->7 
9->7 
12->11 
15->11 
13->12 
14->13 
5->13 
7->13 
16->15 
17->16 
5->16 
7->16 
4->18 
5->18 
7->18 
}

Gains: 151 - 23 = 128; Width: 7; Profitable; s162
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 11
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 4
BlockSize: 13
Done Loop Roller: 1/1
Optimizing: s171
BlockSize: 9
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.025 = phi i32 [ 0, %entry ], [ %inc11, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 67
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %7 = load float, float* %arrayidx.1, align 4, !tbaa !13
Hit: load
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !13
Hit: load
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !13
Hit: load
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !13
Hit: load
  %19 = load float, float* %arrayidx.5, align 4, !tbaa !13
Hit: load
  %22 = load float, float* %arrayidx.6, align 8, !tbaa !13
Hit: load
  %25 = load float, float* %arrayidx.7, align 4, !tbaa !13
Hit: load
  %9 = load float, float* %arrayidx7.1, align 4, !tbaa !13
Hit: load
  %12 = load float, float* %arrayidx7.2, align 8, !tbaa !13
Hit: load
  %15 = load float, float* %arrayidx7.3, align 4, !tbaa !13
Hit: load
  %18 = load float, float* %arrayidx7.4, align 16, !tbaa !13
Hit: load
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !13
Hit: load
  %24 = load float, float* %arrayidx7.6, align 8, !tbaa !13
Hit: load
  %27 = load float, float* %arrayidx7.7, align 4, !tbaa !13
Hit: store
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !13
Hit: store
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !13
Hit: store
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !13
Hit: store
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !13
Hit: store
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !13
Hit: store
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !13
Hit: store
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !13
Schedulable: 1
Loop Rolling: s171
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %29 = zext i8 %28 to i64
Closing BINOP
Gen:   %30 = or i64 %indvars.iv, %29
Operands done!
Generated:   %31 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %30
Gen:   %31 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %30
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx, align 32, !tbaa !13
  %7 = load float, float* %arrayidx.1, align 4, !tbaa !13
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !13
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !13
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !13
  %19 = load float, float* %arrayidx.5, align 4, !tbaa !13
  %22 = load float, float* %arrayidx.6, align 8, !tbaa !13
  %25 = load float, float* %arrayidx.7, align 4, !tbaa !13
Operands done!
Generated:   %32 = load float, float* %31, align 1
Gen:   %32 = load float, float* %31, align 1
Generating MATCH
Match: 
  %5 = mul nsw i64 %indvars.iv, %3
  %8 = mul nsw i64 %indvars.iv.next, %3
  %11 = mul nsw i64 %indvars.iv.next.1, %3
  %14 = mul nsw i64 %indvars.iv.next.2, %3
  %17 = mul nsw i64 %indvars.iv.next.3, %3
  %20 = mul nsw i64 %indvars.iv.next.4, %3
  %23 = mul nsw i64 %indvars.iv.next.5, %3
  %26 = mul nsw i64 %indvars.iv.next.6, %3
Generating IDENTICAL
Operands done!
Generated:   %33 = mul nsw i64 %30, %3
Gen:   %33 = mul nsw i64 %30, %3
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %5
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %8
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %11
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %14
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %17
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %23
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %33
Gen:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %33
Generating MATCH
Match: 
  %6 = load float, float* %arrayidx7, align 32, !tbaa !13
  %9 = load float, float* %arrayidx7.1, align 4, !tbaa !13
  %12 = load float, float* %arrayidx7.2, align 8, !tbaa !13
  %15 = load float, float* %arrayidx7.3, align 4, !tbaa !13
  %18 = load float, float* %arrayidx7.4, align 16, !tbaa !13
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !13
  %24 = load float, float* %arrayidx7.6, align 8, !tbaa !13
  %27 = load float, float* %arrayidx7.7, align 4, !tbaa !13
Operands done!
Generated:   %35 = load float, float* %34, align 1
Gen:   %35 = load float, float* %34, align 1
Generating MATCH
Match: 
  %add = fadd float %4, %6
  %add.1 = fadd float %7, %9
  %add.2 = fadd float %10, %12
  %add.3 = fadd float %13, %15
  %add.4 = fadd float %16, %18
  %add.5 = fadd float %19, %21
  %add.6 = fadd float %22, %24
  %add.7 = fadd float %25, %27
Operands done!
Generated:   %36 = fadd float %32, %35
Gen:   %36 = fadd float %32, %35
Generating MATCH
Match: 
  store float %add, float* %arrayidx7, align 32, !tbaa !13
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !13
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !13
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !13
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !13
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !13
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !13
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !13
Operands done!
Generated:   store float %36, float* %34, align 1
Gen:   store float %36, float* %34, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx7, align 32, !tbaa !13
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !13
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !13
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !13
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !13
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !13
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !13
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !13
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="mul", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
12->10 
6->12 
13->12 
}

Gains: 117 - 16 = 101; Width: 8; Profitable; s171
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 7
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s172
BlockSize: 20
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.028 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
BlockSize: 5
BlockSize: 12
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %for.body5.prol ], [ %5, %for.body5.preheader ]
  %indvars.iv.next.prol = add i64 %indvars.iv.prol, %6
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body5.prol ], [ %xtraiter, %for.body5.preheader ]
  %prol.iter.sub = add i32 %prol.iter, -1
Attempting Group:
BlockSize: 3
  %indvars.iv.unr = phi i64 [ %5, %for.body5.preheader ], [ %indvars.iv.next.prol, %for.body5.prol ]
BlockSize: 4
Attempting Group:
BlockSize: 59
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body5 ], [ %indvars.iv.unr, %for.body5.prol.loopexit ]
  %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %6
Possible reduction
  %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %6
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
4 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %18 = load float, float* %arrayidx.1, align 4, !tbaa !13
Hit: load
  %20 = load float, float* %arrayidx.2, align 4, !tbaa !13
Hit: load
  %22 = load float, float* %arrayidx.3, align 4, !tbaa !13
Hit: load
  %24 = load float, float* %arrayidx.4, align 4, !tbaa !13
Hit: load
  %26 = load float, float* %arrayidx.5, align 4, !tbaa !13
Hit: load
  %28 = load float, float* %arrayidx.6, align 4, !tbaa !13
Hit: load
  %30 = load float, float* %arrayidx.7, align 4, !tbaa !13
Hit: load
  %19 = load float, float* %arrayidx7.1, align 4, !tbaa !13
Hit: load
  %21 = load float, float* %arrayidx7.2, align 4, !tbaa !13
Hit: load
  %23 = load float, float* %arrayidx7.3, align 4, !tbaa !13
Hit: load
  %25 = load float, float* %arrayidx7.4, align 4, !tbaa !13
Hit: load
  %27 = load float, float* %arrayidx7.5, align 4, !tbaa !13
Hit: load
  %29 = load float, float* %arrayidx7.6, align 4, !tbaa !13
Hit: load
  %31 = load float, float* %arrayidx7.7, align 4, !tbaa !13
Hit: store
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !13
Hit: store
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !13
Hit: store
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !13
Hit: store
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !13
Hit: store
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !13
Hit: store
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !13
Hit: store
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !13
Schedulable: 1
Loop Rolling: s172
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating IDENTICAL
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %32 = alloca i64, i8 8, align 8
Gen:   %43 = load i64, i64* %42, align 8
Closing BINOP
Gen:   %44 = add i64 %indvars.iv, %43
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %41 = alloca i64, i8 8, align 8
Gen:   %55 = load i64, i64* %54, align 8
Closing BINOP
Gen:   %56 = add i64 %53, %55
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %50 = alloca i64, i8 8, align 8
Gen:   %67 = load i64, i64* %66, align 8
Closing BINOP
Gen:   %68 = add i64 %65, %67
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %59 = alloca i64, i8 8, align 8
Gen:   %79 = load i64, i64* %78, align 8
Closing BINOP
Gen:   %80 = add i64 %77, %79
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %68 = alloca i64, i8 8, align 8
Gen:   %91 = load i64, i64* %90, align 8
Closing BINOP
Gen:   %92 = add i64 %89, %91
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %77 = alloca i64, i8 8, align 8
Gen:   %103 = load i64, i64* %102, align 8
Closing BINOP
Gen:   %104 = add i64 %101, %103
Generating Mismatch
Mismatched Values:
int: i64 0
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
inst:   %6 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %86 = alloca i64, i8 8, align 8
Gen:   %115 = load i64, i64* %114, align 8
Closing BINOP
Found use: 7:   %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %6
Extracting:   %116 = add i64 %113, %115
Gen:   %117 = add i64 %114, %116
Operands done!
Generated:   %119 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %117
Gen:   %119 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %117
Generating MATCH
Match: 
  %17 = load float, float* %arrayidx, align 4, !tbaa !13
  %19 = load float, float* %arrayidx.1, align 4, !tbaa !13
  %21 = load float, float* %arrayidx.2, align 4, !tbaa !13
  %23 = load float, float* %arrayidx.3, align 4, !tbaa !13
  %25 = load float, float* %arrayidx.4, align 4, !tbaa !13
  %27 = load float, float* %arrayidx.5, align 4, !tbaa !13
  %29 = load float, float* %arrayidx.6, align 4, !tbaa !13
  %31 = load float, float* %arrayidx.7, align 4, !tbaa !13
Operands done!
Generated:   %120 = load float, float* %119, align 1
Gen:   %120 = load float, float* %119, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %121 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %117
Gen:   %121 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %117
Generating MATCH
Match: 
  %18 = load float, float* %arrayidx7, align 4, !tbaa !13
  %20 = load float, float* %arrayidx7.1, align 4, !tbaa !13
  %22 = load float, float* %arrayidx7.2, align 4, !tbaa !13
  %24 = load float, float* %arrayidx7.3, align 4, !tbaa !13
  %26 = load float, float* %arrayidx7.4, align 4, !tbaa !13
  %28 = load float, float* %arrayidx7.5, align 4, !tbaa !13
  %30 = load float, float* %arrayidx7.6, align 4, !tbaa !13
  %32 = load float, float* %arrayidx7.7, align 4, !tbaa !13
Operands done!
Generated:   %122 = load float, float* %121, align 1
Gen:   %122 = load float, float* %121, align 1
Generating MATCH
Match: 
  %add = fadd float %17, %18
  %add.1 = fadd float %19, %20
  %add.2 = fadd float %21, %22
  %add.3 = fadd float %23, %24
  %add.4 = fadd float %25, %26
  %add.5 = fadd float %27, %28
  %add.6 = fadd float %29, %30
  %add.7 = fadd float %31, %32
Operands done!
Generated:   %123 = fadd float %120, %122
Gen:   %123 = fadd float %120, %122
Generating MATCH
Match: 
  store float %add, float* %arrayidx7, align 4, !tbaa !13
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !13
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !13
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !13
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !13
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !13
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !13
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !13
Operands done!
Generated:   store float %123, float* %121, align 1
Gen:   store float %123, float* %121, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx7, align 4, !tbaa !13
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !13
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !13
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !13
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !13
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !13
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !13
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !13
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
15 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
16 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
17 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
18 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
19 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
20 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
21 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
22->0 
2->1 
21->1 
3->2 
4->3 
5->3 
6->3 
7->6 
20->6 
8->7 
19->7 
9->8 
18->8 
10->9 
17->9 
11->10 
16->10 
12->11 
15->11 
13->12 
14->12 
22->21 
23->22 
5->22 
6->22 
24 [label="add", style="filled" , fillcolor="#f2eb5c", shape=box];
6->24
}

Gains: 95 - 722 = -627; Width: 8; Unprofitable; s172
Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
4 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %19 = load float, float* %arrayidx.1, align 4, !tbaa !13
Hit: load
  %21 = load float, float* %arrayidx.2, align 4, !tbaa !13
Hit: load
  %23 = load float, float* %arrayidx.3, align 4, !tbaa !13
Hit: load
  %25 = load float, float* %arrayidx.4, align 4, !tbaa !13
Hit: load
  %27 = load float, float* %arrayidx.5, align 4, !tbaa !13
Hit: load
  %29 = load float, float* %arrayidx.6, align 4, !tbaa !13
Hit: load
  %31 = load float, float* %arrayidx.7, align 4, !tbaa !13
Hit: load
  %20 = load float, float* %arrayidx7.1, align 4, !tbaa !13
Hit: load
  %22 = load float, float* %arrayidx7.2, align 4, !tbaa !13
Hit: load
  %24 = load float, float* %arrayidx7.3, align 4, !tbaa !13
Hit: load
  %26 = load float, float* %arrayidx7.4, align 4, !tbaa !13
Hit: load
  %28 = load float, float* %arrayidx7.5, align 4, !tbaa !13
Hit: load
  %30 = load float, float* %arrayidx7.6, align 4, !tbaa !13
Hit: load
  %32 = load float, float* %arrayidx7.7, align 4, !tbaa !13
Hit: store
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !13
Hit: store
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !13
Hit: store
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !13
Hit: store
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !13
Hit: store
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !13
Hit: store
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !13
Hit: store
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !13
Schedulable: 1
Loop Rolling: s172
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating IDENTICAL
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %33 = alloca i64, i8 8, align 8
Gen:   %44 = load i64, i64* %43, align 8
Closing BINOP
Gen:   %45 = add i64 %indvars.iv, %44
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %42 = alloca i64, i8 8, align 8
Gen:   %56 = load i64, i64* %55, align 8
Closing BINOP
Gen:   %57 = add i64 %54, %56
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %51 = alloca i64, i8 8, align 8
Gen:   %68 = load i64, i64* %67, align 8
Closing BINOP
Gen:   %69 = add i64 %66, %68
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %60 = alloca i64, i8 8, align 8
Gen:   %80 = load i64, i64* %79, align 8
Closing BINOP
Gen:   %81 = add i64 %78, %80
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %69 = alloca i64, i8 8, align 8
Gen:   %92 = load i64, i64* %91, align 8
Closing BINOP
Gen:   %93 = add i64 %90, %92
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %78 = alloca i64, i8 8, align 8
Gen:   %104 = load i64, i64* %103, align 8
Closing BINOP
Gen:   %105 = add i64 %102, %104
Generating Mismatch
Mismatched Values:
int: i64 0
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
inst:   %7 = sext i32 %4 to i64
Non constants
Array Type: 8:i64
Created array:   %87 = alloca i64, i8 8, align 8
Gen:   %116 = load i64, i64* %115, align 8
Closing BINOP
Found use: 7:   %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %7
Extracting:   %117 = add i64 %114, %116
Gen:   %118 = add i64 %115, %117
Operands done!
Generated:   %120 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %118
Gen:   %120 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %118
Generating MATCH
Match: 
  %18 = load float, float* %arrayidx, align 4, !tbaa !13
  %20 = load float, float* %arrayidx.1, align 4, !tbaa !13
  %22 = load float, float* %arrayidx.2, align 4, !tbaa !13
  %24 = load float, float* %arrayidx.3, align 4, !tbaa !13
  %26 = load float, float* %arrayidx.4, align 4, !tbaa !13
  %28 = load float, float* %arrayidx.5, align 4, !tbaa !13
  %30 = load float, float* %arrayidx.6, align 4, !tbaa !13
  %32 = load float, float* %arrayidx.7, align 4, !tbaa !13
Operands done!
Generated:   %121 = load float, float* %120, align 1
Gen:   %121 = load float, float* %120, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %122 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %118
Gen:   %122 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %118
Generating MATCH
Match: 
  %19 = load float, float* %arrayidx7, align 4, !tbaa !13
  %21 = load float, float* %arrayidx7.1, align 4, !tbaa !13
  %23 = load float, float* %arrayidx7.2, align 4, !tbaa !13
  %25 = load float, float* %arrayidx7.3, align 4, !tbaa !13
  %27 = load float, float* %arrayidx7.4, align 4, !tbaa !13
  %29 = load float, float* %arrayidx7.5, align 4, !tbaa !13
  %31 = load float, float* %arrayidx7.6, align 4, !tbaa !13
  %33 = load float, float* %arrayidx7.7, align 4, !tbaa !13
Operands done!
Generated:   %123 = load float, float* %122, align 1
Gen:   %123 = load float, float* %122, align 1
Generating MATCH
Match: 
  %add = fadd float %18, %19
  %add.1 = fadd float %20, %21
  %add.2 = fadd float %22, %23
  %add.3 = fadd float %24, %25
  %add.4 = fadd float %26, %27
  %add.5 = fadd float %28, %29
  %add.6 = fadd float %30, %31
  %add.7 = fadd float %32, %33
Operands done!
Generated:   %124 = fadd float %121, %123
Gen:   %124 = fadd float %121, %123
Generating MATCH
Match: 
  store float %add, float* %arrayidx7, align 4, !tbaa !13
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !13
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !13
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !13
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !13
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !13
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !13
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !13
Operands done!
Generated:   store float %124, float* %122, align 1
Gen:   store float %124, float* %122, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx7, align 4, !tbaa !13
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !13
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !13
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !13
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !13
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !13
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !13
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !13
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
15 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
16 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
17 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
18 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
19 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
20 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
21 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
22->0 
2->1 
21->1 
3->2 
4->3 
5->3 
6->3 
7->6 
20->6 
8->7 
19->7 
9->8 
18->8 
10->9 
17->9 
11->10 
16->10 
12->11 
15->11 
13->12 
14->12 
22->21 
23->22 
5->22 
6->22 
24 [label="add", style="filled" , fillcolor="#f2eb5c", shape=box];
6->24
}

Gains: 95 - 722 = -627; Width: 8; Unprofitable; s172
Building reduction
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body5 ], [ %indvars.iv.unr, %for.body5.prol.loopexit ]
  %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %8
BOs:
  %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %8
  %indvars.iv.next.6 = add i64 %indvars.iv.next.5, %8
  %indvars.iv.next.5 = add i64 %indvars.iv.next.4, %8
  %indvars.iv.next.4 = add i64 %indvars.iv.next.3, %8
  %indvars.iv.next.3 = add i64 %indvars.iv.next.2, %8
  %indvars.iv.next.2 = add i64 %indvars.iv.next.1, %8
  %indvars.iv.next.1 = add i64 %indvars.iv.next, %8
  %indvars.iv.next = add i64 %indvars.iv, %8
Operands:
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
Operands:
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
  %8 = sext i32 %5 to i64
ReductionNode
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %20 = load float, float* %arrayidx.1, align 4, !tbaa !13
Done Loop Roller: 0/2
Optimizing: s173
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.027 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 75
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx10.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx10.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx10.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx10.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx10.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx10.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx10.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s173
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = zext i8 %24 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %25
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Gen:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %add = fadd float %0, %1
  %add.1 = fadd float %3, %4
  %add.2 = fadd float %6, %7
  %add.3 = fadd float %9, %10
  %add.4 = fadd float %12, %13
  %add.5 = fadd float %15, %16
  %add.6 = fadd float %18, %19
  %add.7 = fadd float %21, %22
Operands done!
Generated:   %31 = fadd float %28, %30
Gen:   %31 = fadd float %28, %30
Generating MATCH
Match: 
  %2 = add nuw nsw i64 %indvars.iv, 16000
  %5 = add nuw nsw i64 %indvars.iv, 16001
  %8 = add nuw nsw i64 %indvars.iv, 16002
  %11 = add nuw nsw i64 %indvars.iv, 16003
  %14 = add nuw nsw i64 %indvars.iv, 16004
  %17 = add nuw nsw i64 %indvars.iv, 16005
  %20 = add nuw nsw i64 %indvars.iv, 16006
  %23 = add nuw nsw i64 %indvars.iv, 16007
Generating IDENTICAL
Generating INTSEQ
Gen:   %32 = add i64 %25, 16000
Operands done!
Generated:   %33 = add nuw nsw i64 %indvars.iv, %32
Gen:   %33 = add nuw nsw i64 %indvars.iv, %32
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %2
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %5
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %8
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %11
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %14
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %17
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %23
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %33
Gen:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %33
Generating MATCH
Match: 
  store float %add, float* %arrayidx10, align 32, !tbaa !4
  store float %add.1, float* %arrayidx10.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx10.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx10.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx10.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx10.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx10.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx10.7, align 4, !tbaa !4
Operands done!
Generated:   store float %31, float* %34, align 1
Gen:   store float %31, float* %34, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx10, align 32, !tbaa !4
  store float %add.1, float* %arrayidx10.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx10.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx10.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx10.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx10.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx10.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx10.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="16000..16007, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
12->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
4->12 
5->12 
13->12 
7->13 
14->13 
}

Gains: 149 - 21 = 128; Width: 8; Profitable; s173
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s174
BlockSize: 11
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.030 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 12
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s174
Optimizing: s175
BlockSize: 15
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.030 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %indvars.iv.unr = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
BlockSize: 13
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body5.epil ], [ %indvars.iv.unr, %for.cond.cleanup4.unr-lcssa ]
  %indvars.iv.next.epil = add nsw i64 %indvars.iv.epil, %3
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body5.epil ], [ %xtraiter, %for.cond.cleanup4.unr-lcssa ]
  %epil.iter.sub = add i32 %epil.iter, -1
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 62
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body5 ], [ 0, %for.cond2.preheader ]
  %indvars.iv.next.7 = add nsw i64 %indvars.iv.next.6, %3
Possible reduction
  %indvars.iv.next.7 = add nsw i64 %indvars.iv.next.6, %3
  %niter = phi i32 [ %niter.nsub.7, %for.body5 ], [ %unroll_iter, %for.cond2.preheader ]
  %niter.nsub.7 = add i32 %niter, -8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
4 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %11 = load float, float* %arrayidx.1, align 4, !tbaa !11
Hit: load
  %13 = load float, float* %arrayidx.2, align 4, !tbaa !11
Hit: load
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !11
Hit: load
  %17 = load float, float* %arrayidx.4, align 4, !tbaa !11
Hit: load
  %19 = load float, float* %arrayidx.5, align 4, !tbaa !11
Hit: load
  %21 = load float, float* %arrayidx.6, align 4, !tbaa !11
Hit: load
  %23 = load float, float* %arrayidx.7, align 4, !tbaa !11
Hit: load
  %12 = load float, float* %arrayidx7.1, align 4, !tbaa !11
Hit: load
  %14 = load float, float* %arrayidx7.2, align 4, !tbaa !11
Hit: load
  %16 = load float, float* %arrayidx7.3, align 4, !tbaa !11
Hit: load
  %18 = load float, float* %arrayidx7.4, align 4, !tbaa !11
Hit: load
  %20 = load float, float* %arrayidx7.5, align 4, !tbaa !11
Hit: load
  %22 = load float, float* %arrayidx7.6, align 4, !tbaa !11
Hit: load
  %24 = load float, float* %arrayidx7.7, align 4, !tbaa !11
Hit: store
  store float %add8.1, float* %arrayidx, align 4, !tbaa !11
Hit: store
  store float %add8.2, float* %arrayidx.1, align 4, !tbaa !11
Hit: store
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !11
Hit: store
  store float %add8.4, float* %arrayidx.3, align 4, !tbaa !11
Hit: store
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !11
Hit: store
  store float %add8.6, float* %arrayidx.5, align 4, !tbaa !11
Hit: store
  store float %add8.7, float* %arrayidx.6, align 4, !tbaa !11
Schedulable: 1
Loop Rolling: s175
Generating tree
Generating MATCH
Match: 
  %9 = load float, float* %arrayidx, align 4, !tbaa !11
  %11 = load float, float* %arrayidx.1, align 4, !tbaa !11
  %13 = load float, float* %arrayidx.2, align 4, !tbaa !11
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !11
  %17 = load float, float* %arrayidx.4, align 4, !tbaa !11
  %19 = load float, float* %arrayidx.5, align 4, !tbaa !11
  %21 = load float, float* %arrayidx.6, align 4, !tbaa !11
  %23 = load float, float* %arrayidx.7, align 4, !tbaa !11
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
Generating IDENTICAL
Generating IDENTICAL
Generating MATCH
Match: 
  %indvars.iv.next = add nsw i64 %indvars.iv, %3
  %indvars.iv.next.1 = add nsw i64 %indvars.iv.next, %3
  %indvars.iv.next.2 = add nsw i64 %indvars.iv.next.1, %3
  %indvars.iv.next.3 = add nsw i64 %indvars.iv.next.2, %3
  %indvars.iv.next.4 = add nsw i64 %indvars.iv.next.3, %3
  %indvars.iv.next.5 = add nsw i64 %indvars.iv.next.4, %3
  %indvars.iv.next.6 = add nsw i64 %indvars.iv.next.5, %3
  %indvars.iv.next.7 = add nsw i64 %indvars.iv.next.6, %3
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating IDENTICAL
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 8:i64
Created array:   %25 = alloca i64, i8 8, align 8
Gen:   %36 = load i64, i64* %35, align 8
Closing BINOP
Gen:   %37 = add nsw i64 %indvars.iv, %36
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 8:i64
Created array:   %34 = alloca i64, i8 8, align 8
Gen:   %48 = load i64, i64* %47, align 8
Closing BINOP
Gen:   %49 = add nsw i64 %46, %48
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 8:i64
Created array:   %43 = alloca i64, i8 8, align 8
Gen:   %60 = load i64, i64* %59, align 8
Closing BINOP
Gen:   %61 = add nsw i64 %58, %60
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 8:i64
Created array:   %52 = alloca i64, i8 8, align 8
Gen:   %72 = load i64, i64* %71, align 8
Closing BINOP
Gen:   %73 = add nsw i64 %70, %72
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 8:i64
Created array:   %61 = alloca i64, i8 8, align 8
Gen:   %84 = load i64, i64* %83, align 8
Closing BINOP
Gen:   %85 = add nsw i64 %82, %84
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 8:i64
Created array:   %70 = alloca i64, i8 8, align 8
Gen:   %96 = load i64, i64* %95, align 8
Closing BINOP
Gen:   %97 = add nsw i64 %94, %96
Generating Mismatch
Mismatched Values:
int: i64 0
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 8:i64
Created array:   %79 = alloca i64, i8 8, align 8
Gen:   %108 = load i64, i64* %107, align 8
Closing BINOP
Gen:   %109 = add nsw i64 %106, %108
Generating IDENTICAL
Operands done!
Generated:   %110 = add nsw i64 %109, %3
Found use: 7:   %indvars.iv.unr = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
Extracting:   %110 = add nsw i64 %109, %3
Gen:   %111 = add nsw i64 %110, %4
Operands done!
Generated:   %113 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %111
Gen:   %113 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %111
Operands done!
Generated:   %114 = load float, float* %113, align 1
Gen:   %114 = load float, float* %113, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %115 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %110
Gen:   %115 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %110
Generating MATCH
Match: 
  %11 = load float, float* %arrayidx7, align 4, !tbaa !11
  %13 = load float, float* %arrayidx7.1, align 4, !tbaa !11
  %15 = load float, float* %arrayidx7.2, align 4, !tbaa !11
  %17 = load float, float* %arrayidx7.3, align 4, !tbaa !11
  %19 = load float, float* %arrayidx7.4, align 4, !tbaa !11
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !11
  %23 = load float, float* %arrayidx7.6, align 4, !tbaa !11
  %25 = load float, float* %arrayidx7.7, align 4, !tbaa !11
Operands done!
Generated:   %116 = load float, float* %115, align 1
Gen:   %116 = load float, float* %115, align 1
Generating MATCH
Match: 
  %add8 = fadd float %10, %11
  %add8.1 = fadd float %12, %13
  %add8.2 = fadd float %14, %15
  %add8.3 = fadd float %16, %17
  %add8.4 = fadd float %18, %19
  %add8.5 = fadd float %20, %21
  %add8.6 = fadd float %22, %23
  %add8.7 = fadd float %24, %25
Operands done!
Generated:   %117 = fadd float %114, %116
Gen:   %117 = fadd float %114, %116
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %118 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %110
Gen:   %118 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %110
Generating MATCH
Match: 
  store float %add8, float* %arrayidx10, align 4, !tbaa !11
  store float %add8.1, float* %arrayidx, align 4, !tbaa !11
  store float %add8.2, float* %arrayidx.1, align 4, !tbaa !11
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !11
  store float %add8.4, float* %arrayidx.3, align 4, !tbaa !11
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !11
  store float %add8.6, float* %arrayidx.5, align 4, !tbaa !11
  store float %add8.7, float* %arrayidx.6, align 4, !tbaa !11
Operands done!
Generated:   store float %117, float* %118, align 1
Gen:   store float %117, float* %118, align 1
Graph code generated!
Root:
  store float %add8, float* %arrayidx10, align 4, !tbaa !11
  store float %add8.1, float* %arrayidx, align 4, !tbaa !11
  store float %add8.2, float* %arrayidx.1, align 4, !tbaa !11
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !11
  store float %add8.4, float* %arrayidx.3, align 4, !tbaa !11
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !11
  store float %add8.6, float* %arrayidx.5, align 4, !tbaa !11
  store float %add8.7, float* %arrayidx.6, align 4, !tbaa !11
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
16 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
17 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
18 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
19 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
20 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
21 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
22 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
24 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
25 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
26 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
26->0 
2->1 
23->1 
3->2 
4->3 
5->3 
6->3 
7->6 
22->6 
8->7 
21->7 
9->8 
20->8 
10->9 
19->9 
11->10 
18->10 
12->11 
17->11 
13->12 
16->12 
14->13 
15->13 
24->23 
25->24 
5->24 
7->24 
4->26 
5->26 
7->26 
27 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
6->27
}

Gains: 98 - 725 = -627; Width: 8; Unprofitable; s175
Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
4 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %12 = load float, float* %arrayidx.1, align 4, !tbaa !11
Hit: load
  %14 = load float, float* %arrayidx.2, align 4, !tbaa !11
Hit: load
  %16 = load float, float* %arrayidx.3, align 4, !tbaa !11
Hit: load
  %18 = load float, float* %arrayidx.4, align 4, !tbaa !11
Hit: load
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !11
Hit: load
  %22 = load float, float* %arrayidx.6, align 4, !tbaa !11
Hit: load
  %24 = load float, float* %arrayidx.7, align 4, !tbaa !11
Hit: load
  %13 = load float, float* %arrayidx7.1, align 4, !tbaa !11
Hit: load
  %15 = load float, float* %arrayidx7.2, align 4, !tbaa !11
Hit: load
  %17 = load float, float* %arrayidx7.3, align 4, !tbaa !11
Hit: load
  %19 = load float, float* %arrayidx7.4, align 4, !tbaa !11
Hit: load
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !11
Hit: load
  %23 = load float, float* %arrayidx7.6, align 4, !tbaa !11
Hit: load
  %25 = load float, float* %arrayidx7.7, align 4, !tbaa !11
Hit: store
  store float %add8.1, float* %arrayidx, align 4, !tbaa !11
Hit: store
  store float %add8.2, float* %arrayidx.1, align 4, !tbaa !11
Hit: store
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !11
Hit: store
  store float %add8.4, float* %arrayidx.3, align 4, !tbaa !11
Hit: store
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !11
Hit: store
  store float %add8.6, float* %arrayidx.5, align 4, !tbaa !11
Hit: store
  store float %add8.7, float* %arrayidx.6, align 4, !tbaa !11
Schedulable: 1
Loop Rolling: s175
Generating tree
Generating MATCH
Match: 
  %10 = load float, float* %arrayidx, align 4, !tbaa !11
  %12 = load float, float* %arrayidx.1, align 4, !tbaa !11
  %14 = load float, float* %arrayidx.2, align 4, !tbaa !11
  %16 = load float, float* %arrayidx.3, align 4, !tbaa !11
  %18 = load float, float* %arrayidx.4, align 4, !tbaa !11
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !11
  %22 = load float, float* %arrayidx.6, align 4, !tbaa !11
  %24 = load float, float* %arrayidx.7, align 4, !tbaa !11
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
Generating IDENTICAL
Generating IDENTICAL
Generating MATCH
Match: 
  %indvars.iv.next = add nsw i64 %indvars.iv, %4
  %indvars.iv.next.1 = add nsw i64 %indvars.iv.next, %4
  %indvars.iv.next.2 = add nsw i64 %indvars.iv.next.1, %4
  %indvars.iv.next.3 = add nsw i64 %indvars.iv.next.2, %4
  %indvars.iv.next.4 = add nsw i64 %indvars.iv.next.3, %4
  %indvars.iv.next.5 = add nsw i64 %indvars.iv.next.4, %4
  %indvars.iv.next.6 = add nsw i64 %indvars.iv.next.5, %4
  %indvars.iv.next.7 = add nsw i64 %indvars.iv.next.6, %4
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating IDENTICAL
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %4 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %26 = alloca i64, i8 8, align 8
Gen:   %37 = load i64, i64* %36, align 8
Closing BINOP
Gen:   %38 = add nsw i64 %indvars.iv, %37
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %35 = alloca i64, i8 8, align 8
Gen:   %49 = load i64, i64* %48, align 8
Closing BINOP
Gen:   %50 = add nsw i64 %47, %49
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %44 = alloca i64, i8 8, align 8
Gen:   %61 = load i64, i64* %60, align 8
Closing BINOP
Gen:   %62 = add nsw i64 %59, %61
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %53 = alloca i64, i8 8, align 8
Gen:   %73 = load i64, i64* %72, align 8
Closing BINOP
Gen:   %74 = add nsw i64 %71, %73
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %62 = alloca i64, i8 8, align 8
Gen:   %85 = load i64, i64* %84, align 8
Closing BINOP
Gen:   %86 = add nsw i64 %83, %85
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %71 = alloca i64, i8 8, align 8
Gen:   %97 = load i64, i64* %96, align 8
Closing BINOP
Gen:   %98 = add nsw i64 %95, %97
Generating Mismatch
Mismatched Values:
int: i64 0
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
inst:   %4 = sext i32 %3 to i64
Non constants
Array Type: 8:i64
Created array:   %80 = alloca i64, i8 8, align 8
Gen:   %109 = load i64, i64* %108, align 8
Closing BINOP
Gen:   %110 = add nsw i64 %107, %109
Generating IDENTICAL
Operands done!
Generated:   %111 = add nsw i64 %110, %4
Found use: 7:   %indvars.iv.unr = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
Extracting:   %111 = add nsw i64 %110, %4
Gen:   %112 = add nsw i64 %111, %5
Operands done!
Generated:   %114 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %112
Gen:   %114 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %112
Operands done!
Generated:   %115 = load float, float* %114, align 1
Gen:   %115 = load float, float* %114, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %116 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %111
Gen:   %116 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %111
Generating MATCH
Match: 
  %12 = load float, float* %arrayidx7, align 4, !tbaa !11
  %14 = load float, float* %arrayidx7.1, align 4, !tbaa !11
  %16 = load float, float* %arrayidx7.2, align 4, !tbaa !11
  %18 = load float, float* %arrayidx7.3, align 4, !tbaa !11
  %20 = load float, float* %arrayidx7.4, align 4, !tbaa !11
  %22 = load float, float* %arrayidx7.5, align 4, !tbaa !11
  %24 = load float, float* %arrayidx7.6, align 4, !tbaa !11
  %26 = load float, float* %arrayidx7.7, align 4, !tbaa !11
Operands done!
Generated:   %117 = load float, float* %116, align 1
Gen:   %117 = load float, float* %116, align 1
Generating MATCH
Match: 
  %add8 = fadd float %11, %12
  %add8.1 = fadd float %13, %14
  %add8.2 = fadd float %15, %16
  %add8.3 = fadd float %17, %18
  %add8.4 = fadd float %19, %20
  %add8.5 = fadd float %21, %22
  %add8.6 = fadd float %23, %24
  %add8.7 = fadd float %25, %26
Operands done!
Generated:   %118 = fadd float %115, %117
Gen:   %118 = fadd float %115, %117
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %119 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %111
Gen:   %119 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %111
Generating MATCH
Match: 
  store float %add8, float* %arrayidx10, align 4, !tbaa !11
  store float %add8.1, float* %arrayidx, align 4, !tbaa !11
  store float %add8.2, float* %arrayidx.1, align 4, !tbaa !11
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !11
  store float %add8.4, float* %arrayidx.3, align 4, !tbaa !11
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !11
  store float %add8.6, float* %arrayidx.5, align 4, !tbaa !11
  store float %add8.7, float* %arrayidx.6, align 4, !tbaa !11
Operands done!
Generated:   store float %118, float* %119, align 1
Gen:   store float %118, float* %119, align 1
Graph code generated!
Root:
  store float %add8, float* %arrayidx10, align 4, !tbaa !11
  store float %add8.1, float* %arrayidx, align 4, !tbaa !11
  store float %add8.2, float* %arrayidx.1, align 4, !tbaa !11
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !11
  store float %add8.4, float* %arrayidx.3, align 4, !tbaa !11
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !11
  store float %add8.6, float* %arrayidx.5, align 4, !tbaa !11
  store float %add8.7, float* %arrayidx.6, align 4, !tbaa !11
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
16 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
17 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
18 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
19 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
20 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
21 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
22 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
24 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
25 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
26 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
26->0 
2->1 
23->1 
3->2 
4->3 
5->3 
6->3 
7->6 
22->6 
8->7 
21->7 
9->8 
20->8 
10->9 
19->9 
11->10 
18->10 
12->11 
17->11 
13->12 
16->12 
14->13 
15->13 
24->23 
25->24 
5->24 
7->24 
4->26 
5->26 
7->26 
27 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
6->27
}

Gains: 98 - 725 = -627; Width: 8; Unprofitable; s175
Building reduction
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body5 ], [ 0, %for.cond2.preheader ]
  %indvars.iv.next.7 = add nsw i64 %indvars.iv.next.6, %5
BOs:
  %indvars.iv.next.7 = add nsw i64 %indvars.iv.next.6, %5
  %indvars.iv.next.6 = add nsw i64 %indvars.iv.next.5, %5
  %indvars.iv.next.5 = add nsw i64 %indvars.iv.next.4, %5
  %indvars.iv.next.4 = add nsw i64 %indvars.iv.next.3, %5
  %indvars.iv.next.3 = add nsw i64 %indvars.iv.next.2, %5
  %indvars.iv.next.2 = add nsw i64 %indvars.iv.next.1, %5
  %indvars.iv.next.1 = add nsw i64 %indvars.iv.next, %5
  %indvars.iv.next = add nsw i64 %indvars.iv, %5
Operands:
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
Operands:
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
  %5 = sext i32 %4 to i64
ReductionNode
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %11 = load float, float* %arrayidx, align 4, !tbaa !11
Done Loop Roller: 0/2
Optimizing: s176
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.040 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 5
  %indvars.iv42 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next43, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 3
BlockSize: 75
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %6 = load float, float* %arrayidx.1, align 4, !tbaa !2
Hit: load
  %9 = load float, float* %arrayidx.2, align 4, !tbaa !2
Hit: load
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !2
Hit: load
  %15 = load float, float* %arrayidx.4, align 4, !tbaa !2
Hit: load
  %18 = load float, float* %arrayidx.5, align 4, !tbaa !2
Hit: load
  %21 = load float, float* %arrayidx.6, align 4, !tbaa !2
Hit: load
  %24 = load float, float* %arrayidx.7, align 4, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx14.1, align 4, !tbaa !2
Hit: load
  %10 = load float, float* %arrayidx14.2, align 8, !tbaa !2
Hit: load
  %13 = load float, float* %arrayidx14.3, align 4, !tbaa !2
Hit: load
  %16 = load float, float* %arrayidx14.4, align 16, !tbaa !2
Hit: load
  %19 = load float, float* %arrayidx14.5, align 4, !tbaa !2
Hit: load
  %22 = load float, float* %arrayidx14.6, align 8, !tbaa !2
Hit: load
  %25 = load float, float* %arrayidx14.7, align 4, !tbaa !2
Hit: store
  store float %add15.1, float* %arrayidx14.1, align 4, !tbaa !2
Hit: store
  store float %add15.2, float* %arrayidx14.2, align 8, !tbaa !2
Hit: store
  store float %add15.3, float* %arrayidx14.3, align 4, !tbaa !2
Hit: store
  store float %add15.4, float* %arrayidx14.4, align 16, !tbaa !2
Hit: store
  store float %add15.5, float* %arrayidx14.5, align 4, !tbaa !2
Hit: store
  store float %add15.6, float* %arrayidx14.6, align 8, !tbaa !2
Hit: store
  store float %add15.7, float* %arrayidx14.7, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s176
Generating tree
Generating MATCH
Match: 
  %2 = add nuw nsw i64 %0, %indvars.iv
  %5 = add nuw nsw i64 %0, %indvars.iv.next
  %8 = add nuw nsw i64 %0, %indvars.iv.next.1
  %11 = add nuw nsw i64 %0, %indvars.iv.next.2
  %14 = add nuw nsw i64 %0, %indvars.iv.next.3
  %17 = add nuw nsw i64 %0, %indvars.iv.next.4
  %20 = add nuw nsw i64 %0, %indvars.iv.next.5
  %23 = add nuw nsw i64 %0, %indvars.iv.next.6
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %27 = zext i8 %26 to i64
Closing BINOP
Gen:   %28 = or i64 %indvars.iv, %27
Operands done!
Generated:   %29 = add nuw nsw i64 %0, %28
Gen:   %29 = add nuw nsw i64 %0, %28
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %2
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %5
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %8
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %11
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %14
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %17
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %20
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %23
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %30 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %29
Gen:   %30 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %29
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx, align 4, !tbaa !2
  %6 = load float, float* %arrayidx.1, align 4, !tbaa !2
  %9 = load float, float* %arrayidx.2, align 4, !tbaa !2
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !2
  %15 = load float, float* %arrayidx.4, align 4, !tbaa !2
  %18 = load float, float* %arrayidx.5, align 4, !tbaa !2
  %21 = load float, float* %arrayidx.6, align 4, !tbaa !2
  %24 = load float, float* %arrayidx.7, align 4, !tbaa !2
Operands done!
Generated:   %31 = load float, float* %30, align 1
Gen:   %31 = load float, float* %30, align 1
Generating MATCH
Match: 
  %mul = fmul float %3, %1
  %mul.1 = fmul float %6, %1
  %mul.2 = fmul float %9, %1
  %mul.3 = fmul float %12, %1
  %mul.4 = fmul float %15, %1
  %mul.5 = fmul float %18, %1
  %mul.6 = fmul float %21, %1
  %mul.7 = fmul float %24, %1
Generating IDENTICAL
Operands done!
Generated:   %32 = fmul float %31, %1
Gen:   %32 = fmul float %31, %1
Generating MATCH
Match: 
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %33 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
Gen:   %33 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx14, align 32, !tbaa !2
  %7 = load float, float* %arrayidx14.1, align 4, !tbaa !2
  %10 = load float, float* %arrayidx14.2, align 8, !tbaa !2
  %13 = load float, float* %arrayidx14.3, align 4, !tbaa !2
  %16 = load float, float* %arrayidx14.4, align 16, !tbaa !2
  %19 = load float, float* %arrayidx14.5, align 4, !tbaa !2
  %22 = load float, float* %arrayidx14.6, align 8, !tbaa !2
  %25 = load float, float* %arrayidx14.7, align 4, !tbaa !2
Operands done!
Generated:   %34 = load float, float* %33, align 1
Gen:   %34 = load float, float* %33, align 1
Generating MATCH
Match: 
  %add15 = fadd float %4, %mul
  %add15.1 = fadd float %7, %mul.1
  %add15.2 = fadd float %10, %mul.2
  %add15.3 = fadd float %13, %mul.3
  %add15.4 = fadd float %16, %mul.4
  %add15.5 = fadd float %19, %mul.5
  %add15.6 = fadd float %22, %mul.6
  %add15.7 = fadd float %25, %mul.7
Operands done!
Generated:   %35 = fadd float %34, %32
Gen:   %35 = fadd float %34, %32
Generating MATCH
Match: 
  store float %add15, float* %arrayidx14, align 32, !tbaa !2
  store float %add15.1, float* %arrayidx14.1, align 4, !tbaa !2
  store float %add15.2, float* %arrayidx14.2, align 8, !tbaa !2
  store float %add15.3, float* %arrayidx14.3, align 4, !tbaa !2
  store float %add15.4, float* %arrayidx14.4, align 16, !tbaa !2
  store float %add15.5, float* %arrayidx14.5, align 4, !tbaa !2
  store float %add15.6, float* %arrayidx14.6, align 8, !tbaa !2
  store float %add15.7, float* %arrayidx14.7, align 4, !tbaa !2
Operands done!
Generated:   store float %35, float* %33, align 1
Gen:   store float %35, float* %33, align 1
Graph code generated!
Root:
  store float %add15, float* %arrayidx14, align 32, !tbaa !2
  store float %add15.1, float* %arrayidx14.1, align 4, !tbaa !2
  store float %add15.2, float* %arrayidx14.2, align 8, !tbaa !2
  store float %add15.3, float* %arrayidx14.3, align 4, !tbaa !2
  store float %add15.4, float* %arrayidx14.4, align 16, !tbaa !2
  store float %add15.5, float* %arrayidx14.5, align 4, !tbaa !2
  store float %add15.6, float* %arrayidx14.6, align 8, !tbaa !2
  store float %add15.7, float* %arrayidx14.7, align 4, !tbaa !2
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="sub", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
15->9 
11->10 
12->11 
5->11 
13->11 
14->13 
6->13 
}

Gains: 125 - 17 = 108; Width: 8; Profitable; s176
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s211
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.043 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 101
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %sub20.7, %for.body5.6 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.6 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Invalid:   %sub20.4 = fsub float %19, %mul19.4
Invalid dependence found!
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fsub", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="1..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="0..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
18->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
15->9 
11->10 
12->11 
5->11 
13->11 
7->13 
14->13 
16->15 
17->16 
5->16 
13->16 
4->18 
5->18 
13->18 
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->19
20 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
21 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->21
22 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->22
23 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->23
24 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->24
25 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->25
26 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->26
27 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->27
28 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->28
29 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->29
30 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->30
31 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->31
32 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->32
33 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->33
34 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->34
35 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->35
36 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->36
37 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->37
13->26
13->27
13->28
13->29
13->30
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fsub", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="1..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="0..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
18->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
15->9 
11->10 
12->11 
5->11 
13->11 
7->13 
14->13 
16->15 
17->16 
5->16 
13->16 
4->18 
5->18 
13->18 
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->19
20 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
21 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->21
22 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->22
23 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->23
24 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->24
25 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->25
26 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->26
27 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->27
28 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->28
29 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->29
30 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->30
31 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->31
32 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->32
33 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->33
34 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->34
35 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->35
36 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->36
37 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->37
13->26
13->27
13->28
13->29
13->30
}

Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
3->1 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
7->14 
8->14 
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->17
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->20
21 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->21
22 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->22
23 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->23
24 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->24
25 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->25
26 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->26
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
3->1 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
7->14 
8->14 
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->17
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->20
21 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->21
22 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->22
23 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->23
24 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->24
25 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->25
26 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->26
}

BlockSize: 33
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
[32000 x float]
Indices:
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
GEP Seq
GEP Seq
Invalid:   %sub20.6 = fsub float %27, %mul19.6
Invalid dependence found!
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
[32000 x float]
Indices:
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
GEP Seq
GEP Seq
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fsub", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="7..8, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="6..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
18->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
15->9 
11->10 
12->11 
5->11 
13->11 
7->13 
14->13 
16->15 
17->16 
5->16 
13->16 
13->18 
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->19
20 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->21
22 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
6->22
23 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->23
24 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->24
25 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
13->25
13->21
26 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
18->26
}

Trying AGAIN
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
[32000 x float]
Indices:
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
GEP Seq
GEP Seq
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fsub", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="7..8, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="6..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
18->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
15->9 
11->10 
12->11 
5->11 
13->11 
7->13 
14->13 
16->15 
17->16 
5->16 
13->16 
13->18 
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->19
20 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->21
22 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
6->22
23 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->23
24 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->24
25 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
13->25
13->21
26 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
18->26
}

Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="alt: %sub20.5, %sub20.6", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="6..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
3->1 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
7->14 
8->14 
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->17
18 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->18
19 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->19
}

Trying AGAIN
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="alt: %sub20.5, %sub20.6", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="6..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
3->1 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
7->14 
8->14 
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->17
18 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->18
19 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
11->19
}

Done Loop Roller: 0/0
Nothing found in: s211
Optimizing: s212
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.033 = phi i32 [ 0, %entry ], [ %inc18, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 103
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %30, %for.body5.7 ]
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %22 = load float, float* %arrayidx9.5, align 8, !tbaa !2
Invalid dependence found!
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="1..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
15->9 
11->10 
12->11 
5->11 
13->11 
7->13 
14->13 
16->15 
17->16 
5->16 
6->16 
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->21
22 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->22
23 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->23
24 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->24
25 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->25
26 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->26
27 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->27
28 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->28
29 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->29
30 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->30
31 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->31
32 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->32
33 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->33
34 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->34
35 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->35
36 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->36
37 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->37
13->18
13->19
13->20
13->21
13->22
13->23
38 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
13->38
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="1..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
15->9 
11->10 
12->11 
5->11 
13->11 
7->13 
14->13 
16->15 
17->16 
5->16 
6->16 
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->21
22 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->22
23 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->23
24 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->24
25 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->25
26 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->26
27 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->27
28 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->28
29 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->29
30 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
10->30
31 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->31
32 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->32
33 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->33
34 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->34
35 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->35
36 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->36
37 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
11->37
13->18
13->19
13->20
13->21
13->22
13->23
38 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
13->38
}

Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
11->10 
5->10 
6->10 
12 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->12
13 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->13
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->14
15 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->17
18 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->18
19 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->19
20 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->20
21 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->21
22 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->22
23 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->23
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
11->10 
5->10 
6->10 
12 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->12
13 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->13
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->14
15 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->17
18 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->18
19 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->19
20 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->20
21 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->21
22 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->22
23 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->23
}

BlockSize: 15
Attempting Group:
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s212
Optimizing: s1213
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.035 = phi i32 [ 0, %entry ], [ %inc19, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 77
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %mul.7, %for.body5.6 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.6 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %mul.4 = fmul float %14, %15
Invalid dependence found!
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="1..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="0..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
12->10 
7->12 
13->12 
15->14 
5->14 
12->14 
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->16
17 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->17
18 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->18
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->19
20 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
21 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->21
22 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->22
23 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->23
24 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->24
25 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->25
26 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->26
27 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->27
28 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->28
29 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->29
30 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->30
31 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->31
32 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->32
33 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->33
12->28
12->29
12->30
12->31
12->32
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="1..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="0..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
12->10 
7->12 
13->12 
15->14 
5->14 
12->14 
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->16
17 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->17
18 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->18
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->19
20 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
21 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->21
22 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->22
23 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->23
24 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->24
25 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->25
26 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->26
27 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->27
28 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->28
29 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->29
30 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->30
31 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->31
32 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->32
33 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->33
12->28
12->29
12->30
12->31
12->32
}

Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
3->1 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
6->10 
7->10 
12 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->12
13 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->13
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->14
15 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->16
17 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->17
18 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->18
19 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->19
20 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->20
21 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->21
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
3->1 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
6->10 
7->10 
12 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->12
13 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->13
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->14
15 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->16
17 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->17
18 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->18
19 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->19
20 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->20
21 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->21
}

BlockSize: 25
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
[32000 x float]
Indices:
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
GEP Seq
GEP Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %mul.6 = fmul float %20, %21
Invalid dependence found!
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="7..8, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="6..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
12->10 
7->12 
13->12 
15->14 
5->14 
12->14 
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->16
17 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
1->17
18 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->19
20 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
6->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->21
12->19
}

Trying AGAIN
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="7..8, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="6..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
12->10 
7->12 
13->12 
15->14 
5->14 
12->14 
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->16
17 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
1->17
18 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->19
20 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
6->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->21
12->19
}

Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
[32000 x float]
Indices:
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
GEP Seq
GEP Seq
Invalid:   %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="alt: %mul.5, %mul.6", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="6..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
3->1 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
7->10 
11 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->11
12 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->12
13 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->13
14 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->14
}

Trying AGAIN
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
[32000 x float]
Indices:
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
GEP Seq
GEP Seq
Invalid:   %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="alt: %mul.5, %mul.6", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="6..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
3->1 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
7->10 
11 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->11
12 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->12
13 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->13
14 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
10->14
}

Done Loop Roller: 0/0
Nothing found in: s1213
Optimizing: s221
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.039 = phi i32 [ 0, %entry ], [ %inc22, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 102
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add17.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add17.7, %for.body5.7 ]
  %add17 = fadd float %2, %add14
  %add17.1 = fadd float %5, %add14.1
  %add17.2 = fadd float %8, %add14.2
  %add17.3 = fadd float %11, %add14.3
  %add17.4 = fadd float %14, %add14.4
  %add17.5 = fadd float %17, %add14.5
  %add17.6 = fadd float %20, %add14.6
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx.2, align 4, !tbaa !2
Hit: load
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !2
Hit: load
  %13 = load float, float* %arrayidx.4, align 4, !tbaa !2
Hit: load
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !2
Hit: load
  %19 = load float, float* %arrayidx.6, align 4, !tbaa !2
Hit: load
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx7.2, align 4, !tbaa !2
Hit: load
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !2
Hit: load
  %14 = load float, float* %arrayidx7.4, align 4, !tbaa !2
Hit: load
  %17 = load float, float* %arrayidx7.5, align 4, !tbaa !2
Hit: load
  %20 = load float, float* %arrayidx7.6, align 4, !tbaa !2
Hit: load
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !2
Hit: load
  %9 = load float, float* %arrayidx9.2, align 4, !tbaa !2
Hit: load
  %12 = load float, float* %arrayidx9.3, align 4, !tbaa !2
Hit: load
  %15 = load float, float* %arrayidx9.4, align 4, !tbaa !2
Hit: load
  %18 = load float, float* %arrayidx9.5, align 4, !tbaa !2
Hit: load
  %21 = load float, float* %arrayidx9.6, align 4, !tbaa !2
Hit: store
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !2
Hit: store
  store float %add.2, float* %arrayidx9.2, align 4, !tbaa !2
Hit: store
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !2
Hit: store
  store float %add.4, float* %arrayidx9.4, align 4, !tbaa !2
Hit: store
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !2
Hit: store
  store float %add.6, float* %arrayidx9.6, align 4, !tbaa !2
Hit: store
  store float %add17.1, float* %arrayidx19.1, align 4, !tbaa !2
Hit: store
  store float %add17.2, float* %arrayidx19.2, align 4, !tbaa !2
Hit: store
  store float %add17.3, float* %arrayidx19.3, align 4, !tbaa !2
Hit: store
  store float %add17.4, float* %arrayidx19.4, align 4, !tbaa !2
Hit: store
  store float %add17.5, float* %arrayidx19.5, align 4, !tbaa !2
Hit: store
  store float %add17.6, float* %arrayidx19.6, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s221
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %26 = zext i8 %25 to i64
Closing BINOP
Gen:   %27 = add nuw nsw i64 %indvars.iv, %26
Operands done!
Generated:   %28 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %27
Gen:   %28 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %27
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 4, !tbaa !2
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !2
  %7 = load float, float* %arrayidx.2, align 4, !tbaa !2
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !2
  %13 = load float, float* %arrayidx.4, align 4, !tbaa !2
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !2
  %19 = load float, float* %arrayidx.6, align 4, !tbaa !2
Operands done!
Generated:   %29 = load float, float* %28, align 1
Gen:   %29 = load float, float* %28, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %30 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %27
Gen:   %30 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %27
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx7, align 4, !tbaa !2
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !2
  %8 = load float, float* %arrayidx7.2, align 4, !tbaa !2
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !2
  %14 = load float, float* %arrayidx7.4, align 4, !tbaa !2
  %17 = load float, float* %arrayidx7.5, align 4, !tbaa !2
  %20 = load float, float* %arrayidx7.6, align 4, !tbaa !2
Operands done!
Generated:   %31 = load float, float* %30, align 1
Gen:   %31 = load float, float* %30, align 1
Generating MATCH
Match: 
  %mul = fmul float %1, %2
  %mul.1 = fmul float %4, %5
  %mul.2 = fmul float %7, %8
  %mul.3 = fmul float %10, %11
  %mul.4 = fmul float %13, %14
  %mul.5 = fmul float %16, %17
  %mul.6 = fmul float %19, %20
Operands done!
Generated:   %32 = fmul float %29, %31
Gen:   %32 = fmul float %29, %31
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %33 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %27
Gen:   %33 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %27
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx9, align 4, !tbaa !2
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !2
  %9 = load float, float* %arrayidx9.2, align 4, !tbaa !2
  %12 = load float, float* %arrayidx9.3, align 4, !tbaa !2
  %15 = load float, float* %arrayidx9.4, align 4, !tbaa !2
  %18 = load float, float* %arrayidx9.5, align 4, !tbaa !2
  %21 = load float, float* %arrayidx9.6, align 4, !tbaa !2
Operands done!
Generated:   %34 = load float, float* %33, align 1
Gen:   %34 = load float, float* %33, align 1
Generating MATCH
Match: 
  %add = fadd float %3, %mul
  %add.1 = fadd float %6, %mul.1
  %add.2 = fadd float %9, %mul.2
  %add.3 = fadd float %12, %mul.3
  %add.4 = fadd float %15, %mul.4
  %add.5 = fadd float %18, %mul.5
  %add.6 = fadd float %21, %mul.6
Operands done!
Generated:   %35 = fadd float %34, %32
Gen:   %35 = fadd float %34, %32
Generating MATCH
Match: 
  store float %add, float* %arrayidx9, align 4, !tbaa !2
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx9.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx9.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx9.6, align 4, !tbaa !2
Operands done!
Generated:   store float %35, float* %33, align 1
Gen:   store float %35, float* %33, align 1
Generating MATCH
Match: 
  %add14 = fadd float %add, %0
  %add14.1 = fadd float %add.1, %add17
  %add14.2 = fadd float %add.2, %add17.1
  %add14.3 = fadd float %add.3, %add17.2
  %add14.4 = fadd float %add.4, %add17.3
  %add14.5 = fadd float %add.5, %add17.4
  %add14.6 = fadd float %add.6, %add17.5
Generating RECURRENCE
Gen:   %26 = phi float [ %0, %rolled.pre ]
Operands done!
Generated:   %37 = fadd float %36, %26
Gen:   %37 = fadd float %36, %26
Generating MATCH
Match: 
  %add17 = fadd float %2, %add14
  %add17.1 = fadd float %5, %add14.1
  %add17.2 = fadd float %8, %add14.2
  %add17.3 = fadd float %11, %add14.3
  %add17.4 = fadd float %14, %add14.4
  %add17.5 = fadd float %17, %add14.5
  %add17.6 = fadd float %20, %add14.6
Operands done!
Generated:   %38 = fadd float %32, %37
Found use: 6:   %add14.7 = fadd float %add.7, %add17.6
Extracting:   %38 = fadd float %32, %37
Gen:   %39 = fadd float %33, %38
Generating MATCH
Match: 
  %arrayidx19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx19.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx19.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx19.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx19.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx19.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx19.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %29
Gen:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %29
Generating MATCH
Match: 
  store float %add17, float* %arrayidx19, align 4, !tbaa !2
  store float %add17.1, float* %arrayidx19.1, align 4, !tbaa !2
  store float %add17.2, float* %arrayidx19.2, align 4, !tbaa !2
  store float %add17.3, float* %arrayidx19.3, align 4, !tbaa !2
  store float %add17.4, float* %arrayidx19.4, align 4, !tbaa !2
  store float %add17.5, float* %arrayidx19.5, align 4, !tbaa !2
  store float %add17.6, float* %arrayidx19.6, align 4, !tbaa !2
Operands done!
Generated:   store float %39, float* %41, align 1
Gen:   store float %39, float* %41, align 1
Generating MULTI
Graph code generated!
PHI: recurrence rolled.loop,  %39 = fadd float %33, %38
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
17->0 
2->1 
4->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
14->10 
12->11 
13->12 
6->12 
7->12 
15->14 
16->15 
6->15 
7->15 
18->17 
21->17 
14->18 
19->18 
2->19 
20->19 
18->20 
22->21 
6->21 
7->21 
23 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
18->23
}

Gains: 172 - 35 = 137; Width: 0; Recurrence Profitable; s221
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 13
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 1
BlockSize: 15
Done Loop Roller: 1/1
Optimizing: s1221
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.025 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 39
  %indvars.iv = phi i64 [ 4, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.4 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
4 x 4
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
4 x 4
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
4 x 4
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
4 x 4
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
4 x 4
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
4 x 4
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
4 x 4
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
4 x 4
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
4 x 4
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
4 x 4
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
4 x 4
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s1221
Generating tree
Generating MATCH
Match: 
  %0 = add nsw i64 %indvars.iv, -4
  %3 = add nsw i64 %indvars.iv, -3
  %6 = add nsw i64 %indvars.iv, -2
  %9 = add nsw i64 %indvars.iv, -1
Generating IDENTICAL
Generating INTSEQ
Gen:   %24 = add i64 %23, -4
Operands done!
Generated:   %25 = add nsw i64 %indvars.iv, %24
Gen:   %25 = add nsw i64 %indvars.iv, %24
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %0
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %3
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %6
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %9
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %26 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %25
Gen:   %26 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %25
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 16, !tbaa !4
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !4
Operands done!
Generated:   %27 = load float, float* %26, align 1
Gen:   %27 = load float, float* %26, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %23 = zext i8 %22 to i64
Closing BINOP
Gen:   %28 = or i64 %indvars.iv, %23
Operands done!
Generated:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
Gen:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx7, align 16, !tbaa !4
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %add = fadd float %1, %2
  %add.1 = fadd float %4, %5
  %add.2 = fadd float %7, %8
  %add.3 = fadd float %10, %11
Operands done!
Generated:   %31 = fadd float %27, %30
Found use: 0:   %add.4 = fadd float %add, %12
Extracting:   %31 = fadd float %27, %30
Gen:   %32 = fadd float %28, %31
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %29
Gen:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %29
Generating MATCH
Match: 
  store float %add, float* %arrayidx9, align 16, !tbaa !4
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
Operands done!
Generated:   store float %32, float* %34, align 1
Gen:   store float %32, float* %34, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx9, align 16, !tbaa !4
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
Root size: 4
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="-4..-1, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="0..3, 1", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
12->10 
7->12 
13->12 
4->14 
5->14 
12->14 
15 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->15
}

Gains: 73 - 30 = 43; Width: 4; Profitable; s1221
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 34
Done Loop Roller: 1/1
Optimizing: s222
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.047 = phi i32 [ 0, %entry ], [ %inc28, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 102
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %mul15.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %0 = phi float [ %.pre, %for.cond2.preheader ], [ %mul15.7, %for.body5.7 ]
  %mul15 = fmul float %0, %0
  %mul15.1 = fmul float %mul15, %mul15
  %mul15.2 = fmul float %mul15.1, %mul15.1
  %mul15.3 = fmul float %mul15.2, %mul15.2
  %mul15.4 = fmul float %mul15.3, %mul15.3
  %mul15.5 = fmul float %mul15.4, %mul15.4
  %mul15.6 = fmul float %mul15.5, %mul15.5
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx.2, align 4, !tbaa !2
Hit: load
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !2
Hit: load
  %13 = load float, float* %arrayidx.4, align 4, !tbaa !2
Hit: load
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !2
Hit: load
  %19 = load float, float* %arrayidx.6, align 4, !tbaa !2
Hit: load
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx7.2, align 4, !tbaa !2
Hit: load
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !2
Hit: load
  %14 = load float, float* %arrayidx7.4, align 4, !tbaa !2
Hit: load
  %17 = load float, float* %arrayidx7.5, align 4, !tbaa !2
Hit: load
  %20 = load float, float* %arrayidx7.6, align 4, !tbaa !2
Hit: load
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !2
Hit: load
  %9 = load float, float* %arrayidx9.2, align 4, !tbaa !2
Hit: load
  %12 = load float, float* %arrayidx9.3, align 4, !tbaa !2
Hit: load
  %15 = load float, float* %arrayidx9.4, align 4, !tbaa !2
Hit: load
  %18 = load float, float* %arrayidx9.5, align 4, !tbaa !2
Hit: load
  %21 = load float, float* %arrayidx9.6, align 4, !tbaa !2
Hit: store
  store float %mul15.1, float* %arrayidx17.1, align 4, !tbaa !2
Hit: store
  store float %mul15.2, float* %arrayidx17.2, align 4, !tbaa !2
Hit: store
  store float %mul15.3, float* %arrayidx17.3, align 4, !tbaa !2
Hit: store
  store float %mul15.4, float* %arrayidx17.4, align 4, !tbaa !2
Hit: store
  store float %mul15.5, float* %arrayidx17.5, align 4, !tbaa !2
Hit: store
  store float %mul15.6, float* %arrayidx17.6, align 4, !tbaa !2
Hit: store
  store float %sub25.1, float* %arrayidx9.1, align 4, !tbaa !2
Hit: store
  store float %sub25.2, float* %arrayidx9.2, align 4, !tbaa !2
Hit: store
  store float %sub25.3, float* %arrayidx9.3, align 4, !tbaa !2
Hit: store
  store float %sub25.4, float* %arrayidx9.4, align 4, !tbaa !2
Hit: store
  store float %sub25.5, float* %arrayidx9.5, align 4, !tbaa !2
Hit: store
  store float %sub25.6, float* %arrayidx9.6, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s222
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %26 = zext i8 %25 to i64
Closing BINOP
Gen:   %27 = add nuw nsw i64 %indvars.iv, %26
Operands done!
Generated:   %28 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %27
Gen:   %28 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %27
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 4, !tbaa !2
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !2
  %7 = load float, float* %arrayidx.2, align 4, !tbaa !2
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !2
  %13 = load float, float* %arrayidx.4, align 4, !tbaa !2
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !2
  %19 = load float, float* %arrayidx.6, align 4, !tbaa !2
Operands done!
Generated:   %29 = load float, float* %28, align 1
Gen:   %29 = load float, float* %28, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %30 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %27
Gen:   %30 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %27
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx7, align 4, !tbaa !2
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !2
  %8 = load float, float* %arrayidx7.2, align 4, !tbaa !2
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !2
  %14 = load float, float* %arrayidx7.4, align 4, !tbaa !2
  %17 = load float, float* %arrayidx7.5, align 4, !tbaa !2
  %20 = load float, float* %arrayidx7.6, align 4, !tbaa !2
Operands done!
Generated:   %31 = load float, float* %30, align 1
Gen:   %31 = load float, float* %30, align 1
Generating MATCH
Match: 
  %mul = fmul float %1, %2
  %mul.1 = fmul float %4, %5
  %mul.2 = fmul float %7, %8
  %mul.3 = fmul float %10, %11
  %mul.4 = fmul float %13, %14
  %mul.5 = fmul float %16, %17
  %mul.6 = fmul float %19, %20
Operands done!
Generated:   %32 = fmul float %29, %31
Gen:   %32 = fmul float %29, %31
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %33 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %27
Gen:   %33 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %27
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx9, align 4, !tbaa !2
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !2
  %9 = load float, float* %arrayidx9.2, align 4, !tbaa !2
  %12 = load float, float* %arrayidx9.3, align 4, !tbaa !2
  %15 = load float, float* %arrayidx9.4, align 4, !tbaa !2
  %18 = load float, float* %arrayidx9.5, align 4, !tbaa !2
  %21 = load float, float* %arrayidx9.6, align 4, !tbaa !2
Operands done!
Generated:   %34 = load float, float* %33, align 1
Gen:   %34 = load float, float* %33, align 1
Generating MATCH
Match: 
  %add = fadd float %3, %mul
  %add.1 = fadd float %6, %mul.1
  %add.2 = fadd float %9, %mul.2
  %add.3 = fadd float %12, %mul.3
  %add.4 = fadd float %15, %mul.4
  %add.5 = fadd float %18, %mul.5
  %add.6 = fadd float %21, %mul.6
Operands done!
Generated:   %35 = fadd float %34, %32
Gen:   %35 = fadd float %34, %32
Generating MATCH
Match: 
  %mul15 = fmul float %0, %0
  %mul15.1 = fmul float %mul15, %mul15
  %mul15.2 = fmul float %mul15.1, %mul15.1
  %mul15.3 = fmul float %mul15.2, %mul15.2
  %mul15.4 = fmul float %mul15.3, %mul15.3
  %mul15.5 = fmul float %mul15.4, %mul15.4
  %mul15.6 = fmul float %mul15.5, %mul15.5
Generating RECURRENCE
Gen:   %26 = phi float [ %0, %rolled.pre ]
Operands done!
Generated:   %37 = fmul float %26, %26
Found use: 6:   %mul15.7 = fmul float %mul15.6, %mul15.6
Extracting:   %37 = fmul float %26, %26
Gen:   %38 = fmul float %27, %27
Generating MATCH
Match: 
  %arrayidx17 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %arrayidx17.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %arrayidx17.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %arrayidx17.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %arrayidx17.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %arrayidx17.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %arrayidx17.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %29
Gen:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %29
Generating MATCH
Match: 
  store float %mul15, float* %arrayidx17, align 4, !tbaa !2
  store float %mul15.1, float* %arrayidx17.1, align 4, !tbaa !2
  store float %mul15.2, float* %arrayidx17.2, align 4, !tbaa !2
  store float %mul15.3, float* %arrayidx17.3, align 4, !tbaa !2
  store float %mul15.4, float* %arrayidx17.4, align 4, !tbaa !2
  store float %mul15.5, float* %arrayidx17.5, align 4, !tbaa !2
  store float %mul15.6, float* %arrayidx17.6, align 4, !tbaa !2
Operands done!
Generated:   store float %38, float* %40, align 1
Gen:   store float %38, float* %40, align 1
Generating MATCH
Match: 
  %sub25 = fsub float %add, %mul
  %sub25.1 = fsub float %add.1, %mul.1
  %sub25.2 = fsub float %add.2, %mul.2
  %sub25.3 = fsub float %add.3, %mul.3
  %sub25.4 = fsub float %add.4, %mul.4
  %sub25.5 = fsub float %add.5, %mul.5
  %sub25.6 = fsub float %add.6, %mul.6
Operands done!
Generated:   %41 = fsub float %37, %34
Gen:   %41 = fsub float %37, %34
Generating MATCH
Match: 
  store float %sub25, float* %arrayidx9, align 4, !tbaa !2
  store float %sub25.1, float* %arrayidx9.1, align 4, !tbaa !2
  store float %sub25.2, float* %arrayidx9.2, align 4, !tbaa !2
  store float %sub25.3, float* %arrayidx9.3, align 4, !tbaa !2
  store float %sub25.4, float* %arrayidx9.4, align 4, !tbaa !2
  store float %sub25.5, float* %arrayidx9.5, align 4, !tbaa !2
  store float %sub25.6, float* %arrayidx9.6, align 4, !tbaa !2
Operands done!
Generated:   store float %41, float* %35, align 1
Gen:   store float %41, float* %35, align 1
Generating MULTI
Graph code generated!
PHI: recurrence rolled.loop,  %38 = fmul float %27, %27
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="fsub", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
4->1 
3->2 
3->2 
2->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
14->10 
12->11 
16->11 
13->12 
16->12 
14->13 
15->14 
6->14 
7->14 
17->16 
20->16 
18->17 
19->18 
6->18 
7->18 
21->20 
22->21 
6->21 
7->21 
23 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
2->23
}

Gains: 172 - 35 = 137; Width: 0; Recurrence Profitable; s222
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 13
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 1
BlockSize: 15
Done Loop Roller: 1/1
Optimizing: s231
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.044 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
  %indvars.iv46 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next47, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 3
BlockSize: 46
  %0 = phi float [ %.pre, %for.cond6.preheader ], [ %add.7, %for.body9.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %0 = phi float [ %.pre, %for.cond6.preheader ], [ %add.7, %for.body9.7 ]
  %add = fadd float %0, %1
  %add.1 = fadd float %add, %2
  %add.2 = fadd float %add.1, %3
  %add.3 = fadd float %add.2, %4
  %add.4 = fadd float %add.3, %5
  %add.5 = fadd float %add.4, %6
  %add.6 = fadd float %add.5, %7
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* %arrayidx15.1, align 4, !tbaa !2
Hit: load
  %3 = load float, float* %arrayidx15.2, align 4, !tbaa !2
Hit: load
  %4 = load float, float* %arrayidx15.3, align 4, !tbaa !2
Hit: load
  %5 = load float, float* %arrayidx15.4, align 4, !tbaa !2
Hit: load
  %6 = load float, float* %arrayidx15.5, align 4, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx15.6, align 4, !tbaa !2
Hit: store
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !2
Hit: store
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !2
Hit: store
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !2
Hit: store
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !2
Hit: store
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !2
Hit: store
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s231
Generating tree
Generating MATCH
Match: 
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv46
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv46
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv46
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv46
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv46
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv46
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv46
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %10 = zext i8 %9 to i64
Closing BINOP
Gen:   %11 = add nuw nsw i64 %indvars.iv, %10
Generating IDENTICAL
Operands done!
Generated:   %12 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %11, i64 %indvars.iv46
Gen:   %12 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %11, i64 %indvars.iv46
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx15, align 4, !tbaa !2
  %2 = load float, float* %arrayidx15.1, align 4, !tbaa !2
  %3 = load float, float* %arrayidx15.2, align 4, !tbaa !2
  %4 = load float, float* %arrayidx15.3, align 4, !tbaa !2
  %5 = load float, float* %arrayidx15.4, align 4, !tbaa !2
  %6 = load float, float* %arrayidx15.5, align 4, !tbaa !2
  %7 = load float, float* %arrayidx15.6, align 4, !tbaa !2
Operands done!
Generated:   %13 = load float, float* %12, align 1
Gen:   %13 = load float, float* %12, align 1
Generating MATCH
Match: 
  %add = fadd float %0, %1
  %add.1 = fadd float %add, %2
  %add.2 = fadd float %add.1, %3
  %add.3 = fadd float %add.2, %4
  %add.4 = fadd float %add.3, %5
  %add.5 = fadd float %add.4, %6
  %add.6 = fadd float %add.5, %7
Generating RECURRENCE
Gen:   %10 = phi float [ %0, %rolled.pre ]
Operands done!
Generated:   %15 = fadd float %10, %14
Found use: 6:   %add.7 = fadd float %add.6, %8
Extracting:   %15 = fadd float %10, %14
Gen:   %16 = fadd float %11, %15
Generating MATCH
Match: 
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv46
  %arrayidx19.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv46
  %arrayidx19.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv46
  %arrayidx19.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv46
  %arrayidx19.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv46
  %arrayidx19.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv46
  %arrayidx19.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv46
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %18 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %13, i64 %indvars.iv46
Gen:   %18 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %13, i64 %indvars.iv46
Generating MATCH
Match: 
  store float %add, float* %arrayidx19, align 4, !tbaa !2
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !2
Operands done!
Generated:   store float %16, float* %18, align 1
Gen:   store float %16, float* %18, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %16 = fadd float %11, %15
Root:
  store float %add, float* %arrayidx19, align 4, !tbaa !2
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !2
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
11->0 
2->1 
3->1 
1->2 
4->3 
5->4 
6->4 
7->4 
10->4 
8->7 
9->7 
12->11 
6->11 
7->11 
10->11 
13 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->13
}

Gains: 81 - 22 = 59; Width: 7; Recurrence Profitable; s231
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 5
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 0
BlockSize: 7
Done Loop Roller: 1/1
Optimizing: s232
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.052 = phi i32 [ 0, %entry ], [ %inc30, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 5
  %indvars.iv58 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next59, %for.cond.cleanup8 ]
  %indvars.iv56 = phi i64 [ 2, %for.cond2.preheader ], [ %indvars.iv.next57, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 4
BlockSize: 11
  %0 = phi float [ %.pre, %for.cond6.preheader ], [ %add, %for.body9 ]
  %add = fadd float %mul, %1
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next, %for.body9 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s232
Optimizing: s1232
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.047 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 7
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.cond.cleanup8 ]
BlockSize: 13
  %indvars.iv48.prol = phi i64 [ %indvars.iv.next49.prol, %for.body9.prol ], [ %indvars.iv, %for.body9.lr.ph ]
  %indvars.iv.next49.prol = add nuw nsw i64 %indvars.iv48.prol, 1
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body9.prol ], [ %xtraiter, %for.body9.lr.ph ]
  %prol.iter.sub = add i32 %prol.iter, -1
Attempting Group:
BlockSize: 3
  %indvars.iv48.unr = phi i64 [ %indvars.iv, %for.body9.lr.ph ], [ %indvars.iv.next49.prol, %for.body9.prol ]
BlockSize: 4
Attempting Group:
BlockSize: 3
BlockSize: 67
  %indvars.iv48 = phi i64 [ %indvars.iv.next49.7, %for.body9 ], [ %indvars.iv48.unr, %for.body9.prol.loopexit ]
  %indvars.iv.next49.7 = add nuw nsw i64 %indvars.iv48, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %8 = load float, float* %arrayidx11.1, align 4, !tbaa !2
Hit: load
  %10 = load float, float* %arrayidx11.2, align 4, !tbaa !2
Hit: load
  %12 = load float, float* %arrayidx11.3, align 4, !tbaa !2
Hit: load
  %14 = load float, float* %arrayidx11.4, align 4, !tbaa !2
Hit: load
  %16 = load float, float* %arrayidx11.5, align 4, !tbaa !2
Hit: load
  %18 = load float, float* %arrayidx11.6, align 4, !tbaa !2
Hit: load
  %20 = load float, float* %arrayidx11.7, align 4, !tbaa !2
Hit: load
  %9 = load float, float* %arrayidx15.1, align 4, !tbaa !2
Hit: load
  %11 = load float, float* %arrayidx15.2, align 4, !tbaa !2
Hit: load
  %13 = load float, float* %arrayidx15.3, align 4, !tbaa !2
Hit: load
  %15 = load float, float* %arrayidx15.4, align 4, !tbaa !2
Hit: load
  %17 = load float, float* %arrayidx15.5, align 4, !tbaa !2
Hit: load
  %19 = load float, float* %arrayidx15.6, align 4, !tbaa !2
Hit: load
  %21 = load float, float* %arrayidx15.7, align 4, !tbaa !2
Hit: store
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !2
Hit: store
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !2
Hit: store
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !2
Hit: store
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !2
Hit: store
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !2
Hit: store
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !2
Hit: store
  store float %add.7, float* %arrayidx19.7, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s1232
Generating tree
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv48, i64 %indvars.iv
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next49, i64 %indvars.iv
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next49.1, i64 %indvars.iv
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next49.2, i64 %indvars.iv
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next49.3, i64 %indvars.iv
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next49.4, i64 %indvars.iv
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next49.5, i64 %indvars.iv
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next49.6, i64 %indvars.iv
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %23 = zext i8 %22 to i64
Closing BINOP
Gen:   %24 = add nuw nsw i64 %indvars.iv48, %23
Generating IDENTICAL
Operands done!
Generated:   %25 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %24, i64 %indvars.iv
Gen:   %25 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %24, i64 %indvars.iv
Generating MATCH
Match: 
  %6 = load float, float* %arrayidx11, align 4, !tbaa !2
  %8 = load float, float* %arrayidx11.1, align 4, !tbaa !2
  %10 = load float, float* %arrayidx11.2, align 4, !tbaa !2
  %12 = load float, float* %arrayidx11.3, align 4, !tbaa !2
  %14 = load float, float* %arrayidx11.4, align 4, !tbaa !2
  %16 = load float, float* %arrayidx11.5, align 4, !tbaa !2
  %18 = load float, float* %arrayidx11.6, align 4, !tbaa !2
  %20 = load float, float* %arrayidx11.7, align 4, !tbaa !2
Operands done!
Generated:   %26 = load float, float* %25, align 1
Gen:   %26 = load float, float* %25, align 1
Generating MATCH
Match: 
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv48, i64 %indvars.iv
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next49, i64 %indvars.iv
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next49.1, i64 %indvars.iv
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next49.2, i64 %indvars.iv
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next49.3, i64 %indvars.iv
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next49.4, i64 %indvars.iv
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next49.5, i64 %indvars.iv
  %arrayidx15.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next49.6, i64 %indvars.iv
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %27 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %24, i64 %indvars.iv
Gen:   %27 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %24, i64 %indvars.iv
Generating MATCH
Match: 
  %7 = load float, float* %arrayidx15, align 4, !tbaa !2
  %9 = load float, float* %arrayidx15.1, align 4, !tbaa !2
  %11 = load float, float* %arrayidx15.2, align 4, !tbaa !2
  %13 = load float, float* %arrayidx15.3, align 4, !tbaa !2
  %15 = load float, float* %arrayidx15.4, align 4, !tbaa !2
  %17 = load float, float* %arrayidx15.5, align 4, !tbaa !2
  %19 = load float, float* %arrayidx15.6, align 4, !tbaa !2
  %21 = load float, float* %arrayidx15.7, align 4, !tbaa !2
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %add = fadd float %6, %7
  %add.1 = fadd float %8, %9
  %add.2 = fadd float %10, %11
  %add.3 = fadd float %12, %13
  %add.4 = fadd float %14, %15
  %add.5 = fadd float %16, %17
  %add.6 = fadd float %18, %19
  %add.7 = fadd float %20, %21
Operands done!
Generated:   %29 = fadd float %26, %28
Gen:   %29 = fadd float %26, %28
Generating MATCH
Match: 
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv48, i64 %indvars.iv
  %arrayidx19.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next49, i64 %indvars.iv
  %arrayidx19.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next49.1, i64 %indvars.iv
  %arrayidx19.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next49.2, i64 %indvars.iv
  %arrayidx19.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next49.3, i64 %indvars.iv
  %arrayidx19.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next49.4, i64 %indvars.iv
  %arrayidx19.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next49.5, i64 %indvars.iv
  %arrayidx19.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next49.6, i64 %indvars.iv
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %30 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %24, i64 %indvars.iv
Gen:   %30 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %24, i64 %indvars.iv
Generating MATCH
Match: 
  store float %add, float* %arrayidx19, align 4, !tbaa !2
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !2
  store float %add.7, float* %arrayidx19.7, align 4, !tbaa !2
Operands done!
Generated:   store float %29, float* %30, align 1
Gen:   store float %29, float* %30, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx19, align 4, !tbaa !2
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !2
  store float %add.7, float* %arrayidx19.7, align 4, !tbaa !2
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
13->0 
2->1 
10->1 
3->2 
4->3 
5->3 
6->3 
9->3 
7->6 
8->6 
11->10 
12->11 
5->11 
6->11 
9->11 
14->13 
5->13 
6->13 
9->13 
}

Gains: 125 - 17 = 108; Width: 8; Profitable; s1232
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 7
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s233
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.075 = phi i32 [ 0, %entry ], [ %inc47, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
  %indvars.iv80 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next81, %for.cond.cleanup23 ]
BlockSize: 4
Attempting Group:
BlockSize: 2
BlockSize: 46
  %1 = phi float [ %.pre, %for.cond6.preheader ], [ %add.7, %for.body9.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %1 = phi float [ %.pre, %for.cond6.preheader ], [ %add.7, %for.body9.7 ]
  %add = fadd float %1, %2
  %add.1 = fadd float %add, %3
  %add.2 = fadd float %add.1, %4
  %add.3 = fadd float %add.2, %5
  %add.4 = fadd float %add.3, %6
  %add.5 = fadd float %add.4, %7
  %add.6 = fadd float %add.5, %8
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx15.1, align 4, !tbaa !2
Hit: load
  %4 = load float, float* %arrayidx15.2, align 4, !tbaa !2
Hit: load
  %5 = load float, float* %arrayidx15.3, align 4, !tbaa !2
Hit: load
  %6 = load float, float* %arrayidx15.4, align 4, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx15.5, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx15.6, align 4, !tbaa !2
Hit: store
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !2
Hit: store
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !2
Hit: store
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !2
Hit: store
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !2
Hit: store
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !2
Hit: store
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s233
Generating tree
Generating MATCH
Match: 
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv, i64 %indvars.iv80
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next, i64 %indvars.iv80
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv80
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv80
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv80
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv80
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv80
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %27 = zext i8 %26 to i64
Closing BINOP
Gen:   %28 = add nuw nsw i64 %indvars.iv, %27
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %28, i64 %indvars.iv80
Gen:   %29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %28, i64 %indvars.iv80
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx15, align 4, !tbaa !2
  %3 = load float, float* %arrayidx15.1, align 4, !tbaa !2
  %4 = load float, float* %arrayidx15.2, align 4, !tbaa !2
  %5 = load float, float* %arrayidx15.3, align 4, !tbaa !2
  %6 = load float, float* %arrayidx15.4, align 4, !tbaa !2
  %7 = load float, float* %arrayidx15.5, align 4, !tbaa !2
  %8 = load float, float* %arrayidx15.6, align 4, !tbaa !2
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %add = fadd float %1, %2
  %add.1 = fadd float %add, %3
  %add.2 = fadd float %add.1, %4
  %add.3 = fadd float %add.2, %5
  %add.4 = fadd float %add.3, %6
  %add.5 = fadd float %add.4, %7
  %add.6 = fadd float %add.5, %8
Generating RECURRENCE
Gen:   %27 = phi float [ %1, %rolled.pre ]
Operands done!
Generated:   %32 = fadd float %27, %31
Found use: 6:   %add.7 = fadd float %add.6, %23
Extracting:   %32 = fadd float %27, %31
Gen:   %33 = fadd float %28, %32
Generating MATCH
Match: 
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv80
  %arrayidx19.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv80
  %arrayidx19.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv80
  %arrayidx19.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv80
  %arrayidx19.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv80
  %arrayidx19.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv80
  %arrayidx19.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv80
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %35 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %30, i64 %indvars.iv80
Gen:   %35 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %30, i64 %indvars.iv80
Generating MATCH
Match: 
  store float %add, float* %arrayidx19, align 4, !tbaa !2
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !2
Operands done!
Generated:   store float %33, float* %35, align 1
Gen:   store float %33, float* %35, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %33 = fadd float %28, %32
Root:
  store float %add, float* %arrayidx19, align 4, !tbaa !2
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !2
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
11->0 
2->1 
3->1 
1->2 
4->3 
5->4 
6->4 
7->4 
10->4 
8->7 
9->7 
12->11 
6->11 
7->11 
10->11 
13 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->13
}

Gains: 81 - 22 = 59; Width: 7; Recurrence Profitable; s233
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 5
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 0
BlockSize: 3
BlockSize: 59
  %indvars.iv77 = phi i64 [ 1, %for.cond21.preheader ], [ %indvars.iv.next78.7, %for.body24.7 ]
BlockSize: 7
BlockSize: 9
Done Loop Roller: 1/1
Optimizing: s2233
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.075 = phi i32 [ 0, %entry ], [ %inc47, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
  %indvars.iv80 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next81, %for.cond.cleanup23 ]
BlockSize: 4
Attempting Group:
BlockSize: 2
BlockSize: 46
  %1 = phi float [ %.pre, %for.cond6.preheader ], [ %add.7, %for.body9.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %1 = phi float [ %.pre, %for.cond6.preheader ], [ %add.7, %for.body9.7 ]
  %add = fadd float %1, %2
  %add.1 = fadd float %add, %3
  %add.2 = fadd float %add.1, %4
  %add.3 = fadd float %add.2, %5
  %add.4 = fadd float %add.3, %6
  %add.5 = fadd float %add.4, %7
  %add.6 = fadd float %add.5, %8
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx15.1, align 4, !tbaa !2
Hit: load
  %4 = load float, float* %arrayidx15.2, align 4, !tbaa !2
Hit: load
  %5 = load float, float* %arrayidx15.3, align 4, !tbaa !2
Hit: load
  %6 = load float, float* %arrayidx15.4, align 4, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx15.5, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx15.6, align 4, !tbaa !2
Hit: store
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !2
Hit: store
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !2
Hit: store
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !2
Hit: store
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !2
Hit: store
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !2
Hit: store
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s2233
Generating tree
Generating MATCH
Match: 
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv, i64 %indvars.iv80
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next, i64 %indvars.iv80
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv80
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv80
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv80
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv80
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv80
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %27 = zext i8 %26 to i64
Closing BINOP
Gen:   %28 = add nuw nsw i64 %indvars.iv, %27
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %28, i64 %indvars.iv80
Gen:   %29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %28, i64 %indvars.iv80
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx15, align 4, !tbaa !2
  %3 = load float, float* %arrayidx15.1, align 4, !tbaa !2
  %4 = load float, float* %arrayidx15.2, align 4, !tbaa !2
  %5 = load float, float* %arrayidx15.3, align 4, !tbaa !2
  %6 = load float, float* %arrayidx15.4, align 4, !tbaa !2
  %7 = load float, float* %arrayidx15.5, align 4, !tbaa !2
  %8 = load float, float* %arrayidx15.6, align 4, !tbaa !2
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %add = fadd float %1, %2
  %add.1 = fadd float %add, %3
  %add.2 = fadd float %add.1, %4
  %add.3 = fadd float %add.2, %5
  %add.4 = fadd float %add.3, %6
  %add.5 = fadd float %add.4, %7
  %add.6 = fadd float %add.5, %8
Generating RECURRENCE
Gen:   %27 = phi float [ %1, %rolled.pre ]
Operands done!
Generated:   %32 = fadd float %27, %31
Found use: 6:   %add.7 = fadd float %add.6, %23
Extracting:   %32 = fadd float %27, %31
Gen:   %33 = fadd float %28, %32
Generating MATCH
Match: 
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv80
  %arrayidx19.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv80
  %arrayidx19.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv80
  %arrayidx19.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv80
  %arrayidx19.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv80
  %arrayidx19.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv80
  %arrayidx19.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv80
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %35 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %30, i64 %indvars.iv80
Gen:   %35 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %30, i64 %indvars.iv80
Generating MATCH
Match: 
  store float %add, float* %arrayidx19, align 4, !tbaa !2
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !2
Operands done!
Generated:   store float %33, float* %35, align 1
Gen:   store float %33, float* %35, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %33 = fadd float %28, %32
Root:
  store float %add, float* %arrayidx19, align 4, !tbaa !2
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !2
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
11->0 
2->1 
3->1 
1->2 
4->3 
5->4 
6->4 
7->4 
10->4 
8->7 
9->7 
12->11 
6->11 
7->11 
10->11 
13 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->13
}

Gains: 81 - 22 = 59; Width: 7; Recurrence Profitable; s2233
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 5
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 0
BlockSize: 3
BlockSize: 59
  %indvars.iv77 = phi i64 [ 1, %for.cond21.preheader ], [ %indvars.iv.next78.7, %for.body24.7 ]
BlockSize: 7
BlockSize: 9
Done Loop Roller: 1/1
Optimizing: s235
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.058 = phi i32 [ 0, %entry ], [ %inc35, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 13
  %indvars.iv60 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next61, %for.cond.cleanup12 ]
Attempting Group:
BlockSize: 3
BlockSize: 53
  %3 = phi float [ %.pre, %for.body5 ], [ %add25.7, %for.body13.7 ]
  %indvars.iv = phi i64 [ 1, %for.body5 ], [ %indvars.iv.next.7, %for.body13.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %3 = phi float [ %.pre, %for.body5 ], [ %add25.7, %for.body13.7 ]
  %add25 = fadd float %3, %mul24
  %add25.1 = fadd float %add25, %mul24.1
  %add25.2 = fadd float %add25.1, %mul24.2
  %add25.3 = fadd float %add25.2, %mul24.3
  %add25.4 = fadd float %add25.3, %mul24.4
  %add25.5 = fadd float %add25.4, %mul24.5
  %add25.6 = fadd float %add25.5, %mul24.6
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %5 = load float, float* %arrayidx21.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx21.2, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx21.3, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx21.4, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx21.5, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx21.6, align 4, !tbaa !4
Hit: store
  store float %add25.1, float* %arrayidx29.1, align 4, !tbaa !4
Hit: store
  store float %add25.2, float* %arrayidx29.2, align 4, !tbaa !4
Hit: store
  store float %add25.3, float* %arrayidx29.3, align 4, !tbaa !4
Hit: store
  store float %add25.4, float* %arrayidx29.4, align 4, !tbaa !4
Hit: store
  store float %add25.5, float* %arrayidx29.5, align 4, !tbaa !4
Hit: store
  store float %add25.6, float* %arrayidx29.6, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s235
Generating tree
Generating MATCH
Match: 
  %arrayidx21 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv60
  %arrayidx21.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv60
  %arrayidx21.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv60
  %arrayidx21.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv60
  %arrayidx21.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv60
  %arrayidx21.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv60
  %arrayidx21.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv60
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %13 = zext i8 %12 to i64
Closing BINOP
Gen:   %14 = add nuw nsw i64 %indvars.iv, %13
Generating IDENTICAL
Operands done!
Generated:   %15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %14, i64 %indvars.iv60
Gen:   %15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %14, i64 %indvars.iv60
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx21, align 4, !tbaa !4
  %5 = load float, float* %arrayidx21.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx21.2, align 4, !tbaa !4
  %7 = load float, float* %arrayidx21.3, align 4, !tbaa !4
  %8 = load float, float* %arrayidx21.4, align 4, !tbaa !4
  %9 = load float, float* %arrayidx21.5, align 4, !tbaa !4
  %10 = load float, float* %arrayidx21.6, align 4, !tbaa !4
Operands done!
Generated:   %16 = load float, float* %15, align 1
Gen:   %16 = load float, float* %15, align 1
Generating MATCH
Match: 
  %mul24 = fmul float %add, %4
  %mul24.1 = fmul float %add, %5
  %mul24.2 = fmul float %add, %6
  %mul24.3 = fmul float %add, %7
  %mul24.4 = fmul float %add, %8
  %mul24.5 = fmul float %add, %9
  %mul24.6 = fmul float %add, %10
Generating IDENTICAL
Operands done!
Generated:   %17 = fmul float %add, %16
Gen:   %17 = fmul float %add, %16
Generating MATCH
Match: 
  %add25 = fadd float %3, %mul24
  %add25.1 = fadd float %add25, %mul24.1
  %add25.2 = fadd float %add25.1, %mul24.2
  %add25.3 = fadd float %add25.2, %mul24.3
  %add25.4 = fadd float %add25.3, %mul24.4
  %add25.5 = fadd float %add25.4, %mul24.5
  %add25.6 = fadd float %add25.5, %mul24.6
Generating RECURRENCE
Gen:   %13 = phi float [ %3, %rolled.pre ]
Operands done!
Generated:   %19 = fadd float %13, %18
Found use: 6:   %add25.7 = fadd float %add25.6, %mul24.7
Extracting:   %19 = fadd float %13, %18
Gen:   %20 = fadd float %14, %19
Generating MATCH
Match: 
  %arrayidx29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv60
  %arrayidx29.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv60
  %arrayidx29.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv60
  %arrayidx29.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv60
  %arrayidx29.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv60
  %arrayidx29.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv60
  %arrayidx29.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv60
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %16, i64 %indvars.iv60
Gen:   %22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %16, i64 %indvars.iv60
Generating MATCH
Match: 
  store float %add25, float* %arrayidx29, align 4, !tbaa !4
  store float %add25.1, float* %arrayidx29.1, align 4, !tbaa !4
  store float %add25.2, float* %arrayidx29.2, align 4, !tbaa !4
  store float %add25.3, float* %arrayidx29.3, align 4, !tbaa !4
  store float %add25.4, float* %arrayidx29.4, align 4, !tbaa !4
  store float %add25.5, float* %arrayidx29.5, align 4, !tbaa !4
  store float %add25.6, float* %arrayidx29.6, align 4, !tbaa !4
Operands done!
Generated:   store float %20, float* %22, align 1
Gen:   store float %20, float* %22, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %20 = fadd float %14, %19
Root:
  store float %add25, float* %arrayidx29, align 4, !tbaa !4
  store float %add25.1, float* %arrayidx29.1, align 4, !tbaa !4
  store float %add25.2, float* %arrayidx29.2, align 4, !tbaa !4
  store float %add25.3, float* %arrayidx29.3, align 4, !tbaa !4
  store float %add25.4, float* %arrayidx29.4, align 4, !tbaa !4
  store float %add25.5, float* %arrayidx29.5, align 4, !tbaa !4
  store float %add25.6, float* %arrayidx29.6, align 4, !tbaa !4
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
13->0 
2->1 
3->1 
1->2 
4->3 
5->3 
6->5 
7->6 
8->6 
9->6 
12->6 
10->9 
11->9 
14->13 
8->13 
9->13 
12->13 
15 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->15
}

Gains: 88 - 23 = 65; Width: 7; Recurrence Profitable; s235
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 6
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 0
BlockSize: 8
Done Loop Roller: 1/1
Optimizing: s241
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.043 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 109
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %25 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx9.2, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx9.3, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx9.4, align 16, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx9.5, align 4, !tbaa !4
Hit: load
  %26 = load float, float* %arrayidx9.6, align 8, !tbaa !4
Hit: store
  store float %mul10.1, float* %arrayidx16, align 4, !tbaa !4
Hit: store
  store float %mul10.2, float* %arrayidx16.1, align 8, !tbaa !4
Hit: store
  store float %mul10.3, float* %arrayidx16.2, align 4, !tbaa !4
Hit: store
  store float %mul10.4, float* %arrayidx16.3, align 16, !tbaa !4
Hit: store
  store float %mul10.5, float* %arrayidx16.4, align 4, !tbaa !4
Hit: store
  store float %mul10.6, float* %arrayidx16.5, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx16.1, align 8, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx16.2, align 4, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx16.3, align 16, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx16.4, align 4, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx16.5, align 8, !tbaa !4
Hit: load
  %27 = load float, float* %arrayidx16.6, align 4, !tbaa !4
Hit: store
  store float %mul20.1, float* %arrayidx.1, align 4, !tbaa !4
Hit: store
  store float %mul20.2, float* %arrayidx.2, align 8, !tbaa !4
Hit: store
  store float %mul20.3, float* %arrayidx.3, align 4, !tbaa !4
Hit: store
  store float %mul20.4, float* %arrayidx.4, align 16, !tbaa !4
Hit: store
  store float %mul20.5, float* %arrayidx.5, align 4, !tbaa !4
Hit: store
  store float %mul20.6, float* %arrayidx.6, align 8, !tbaa !4
Schedulable: 1
Loop Rolling: s241
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %33 = zext i8 %32 to i64
Closing BINOP
Gen:   %34 = or i64 %indvars.iv, %33
Operands done!
Generated:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %34
Gen:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %34
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
Operands done!
Generated:   %36 = load float, float* %35, align 1
Gen:   %36 = load float, float* %35, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %34
Gen:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %34
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %17 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %25 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Operands done!
Generated:   %38 = load float, float* %37, align 1
Gen:   %38 = load float, float* %37, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul.1 = fmul float %4, %5
  %mul.2 = fmul float %8, %9
  %mul.3 = fmul float %12, %13
  %mul.4 = fmul float %16, %17
  %mul.5 = fmul float %20, %21
  %mul.6 = fmul float %24, %25
Operands done!
Generated:   %39 = fmul float %36, %38
Gen:   %39 = fmul float %36, %38
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %34
Gen:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %34
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %10 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %14 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %18 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %22 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %26 = load float, float* %arrayidx9.6, align 8, !tbaa !4
Operands done!
Generated:   %41 = load float, float* %40, align 1
Gen:   %41 = load float, float* %40, align 1
Generating MATCH
Match: 
  %mul10 = fmul float %mul, %2
  %mul10.1 = fmul float %mul.1, %6
  %mul10.2 = fmul float %mul.2, %10
  %mul10.3 = fmul float %mul.3, %14
  %mul10.4 = fmul float %mul.4, %18
  %mul10.5 = fmul float %mul.5, %22
  %mul10.6 = fmul float %mul.6, %26
Operands done!
Generated:   %42 = fmul float %39, %41
Gen:   %42 = fmul float %39, %41
Generating MATCH
Match: 
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %43 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %34
Gen:   %43 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %34
Generating MATCH
Match: 
  store float %mul10, float* %arrayidx12, align 32, !tbaa !4
  store float %mul10.1, float* %arrayidx16, align 4, !tbaa !4
  store float %mul10.2, float* %arrayidx16.1, align 8, !tbaa !4
  store float %mul10.3, float* %arrayidx16.2, align 4, !tbaa !4
  store float %mul10.4, float* %arrayidx16.3, align 16, !tbaa !4
  store float %mul10.5, float* %arrayidx16.4, align 4, !tbaa !4
  store float %mul10.6, float* %arrayidx16.5, align 8, !tbaa !4
Operands done!
Generated:   store float %42, float* %43, align 1
Gen:   store float %42, float* %43, align 1
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx16, align 4, !tbaa !4
  %7 = load float, float* %arrayidx16.1, align 8, !tbaa !4
  %11 = load float, float* %arrayidx16.2, align 4, !tbaa !4
  %15 = load float, float* %arrayidx16.3, align 16, !tbaa !4
  %19 = load float, float* %arrayidx16.4, align 4, !tbaa !4
  %23 = load float, float* %arrayidx16.5, align 8, !tbaa !4
  %27 = load float, float* %arrayidx16.6, align 4, !tbaa !4
Generating MATCH
Match: 
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating MATCH
Match: 
  %indvars.iv.next = or i64 %indvars.iv, 1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
Generating IDENTICAL
Generating INTSEQ
Gen:   %44 = add i64 %33, 1
Operands done!
Generated:   %45 = or i64 %indvars.iv, %44
Found use: 6:   %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Extracting:   %45 = or i64 %indvars.iv, %44
Gen:   %46 = or i64 %indvars.iv, %45
Operands done!
Generated:   %48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %46
Found use: 6:   store float %mul10.7, float* %arrayidx16.6, align 4, !tbaa !4
Extracting:   %48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %46
Gen:   %49 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %47
Operands done!
Generated:   %51 = load float, float* %49, align 1
Gen:   %51 = load float, float* %49, align 1
Generating MATCH
Match: 
  %mul17 = fmul float %mul10, %5
  %mul17.1 = fmul float %mul10.1, %9
  %mul17.2 = fmul float %mul10.2, %13
  %mul17.3 = fmul float %mul10.3, %17
  %mul17.4 = fmul float %mul10.4, %21
  %mul17.5 = fmul float %mul10.5, %25
  %mul17.6 = fmul float %mul10.6, %29
Operands done!
Generated:   %52 = fmul float %44, %51
Gen:   %52 = fmul float %44, %51
Generating MATCH
Match: 
  %mul20 = fmul float %4, %mul17
  %mul20.1 = fmul float %8, %mul17.1
  %mul20.2 = fmul float %12, %mul17.2
  %mul20.3 = fmul float %16, %mul17.3
  %mul20.4 = fmul float %20, %mul17.4
  %mul20.5 = fmul float %24, %mul17.5
  %mul20.6 = fmul float %28, %mul17.6
Operands done!
Generated:   %53 = fmul float %43, %52
Gen:   %53 = fmul float %43, %52
Generating MATCH
Match: 
  store float %mul20, float* %arrayidx, align 32, !tbaa !4
  store float %mul20.1, float* %arrayidx.1, align 4, !tbaa !4
  store float %mul20.2, float* %arrayidx.2, align 8, !tbaa !4
  store float %mul20.3, float* %arrayidx.3, align 4, !tbaa !4
  store float %mul20.4, float* %arrayidx.4, align 16, !tbaa !4
  store float %mul20.5, float* %arrayidx.5, align 4, !tbaa !4
  store float %mul20.6, float* %arrayidx.6, align 8, !tbaa !4
Operands done!
Generated:   store float %53, float* %37, align 1
Gen:   store float %53, float* %37, align 1
Generating MULTI
Graph code generated!
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
24 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
25 [label="1..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
19->0 
2->1 
17->1 
3->2 
14->2 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
16->15 
7->15 
8->15 
18->17 
7->17 
8->17 
20->19 
5->19 
14->20 
21->20 
2->21 
22->21 
23->22 
18->23 
7->23 
24->23 
9->24 
25->24 
26 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
23->26
27 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
24->27
}

Gains: 191 - 52 = 139; Width: 0; Profitable; s241
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 16
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 1
BlockSize: 16
Done Loop Roller: 1/1
Optimizing: s242
BlockSize: 11
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.040 = phi i32 [ 0, %entry ], [ %inc20, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 102
  %4 = phi float [ %.pre, %for.cond2.preheader ], [ %add15.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %4 = phi float [ %.pre, %for.cond2.preheader ], [ %add15.7, %for.body5.7 ]
  %add15 = fadd float %7, %add12
  %add15.1 = fadd float %10, %add12.1
  %add15.2 = fadd float %13, %add12.2
  %add15.3 = fadd float %16, %add12.3
  %add15.4 = fadd float %19, %add12.4
  %add15.5 = fadd float %22, %add12.5
  %add15.6 = fadd float %25, %add12.6
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %8 = load float, float* %arrayidx8.1, align 4, !tbaa !13
Hit: load
  %11 = load float, float* %arrayidx8.2, align 4, !tbaa !13
Hit: load
  %14 = load float, float* %arrayidx8.3, align 4, !tbaa !13
Hit: load
  %17 = load float, float* %arrayidx8.4, align 4, !tbaa !13
Hit: load
  %20 = load float, float* %arrayidx8.5, align 4, !tbaa !13
Hit: load
  %23 = load float, float* %arrayidx8.6, align 4, !tbaa !13
Hit: load
  %9 = load float, float* %arrayidx11.1, align 4, !tbaa !13
Hit: load
  %12 = load float, float* %arrayidx11.2, align 4, !tbaa !13
Hit: load
  %15 = load float, float* %arrayidx11.3, align 4, !tbaa !13
Hit: load
  %18 = load float, float* %arrayidx11.4, align 4, !tbaa !13
Hit: load
  %21 = load float, float* %arrayidx11.5, align 4, !tbaa !13
Hit: load
  %24 = load float, float* %arrayidx11.6, align 4, !tbaa !13
Hit: load
  %10 = load float, float* %arrayidx14.1, align 4, !tbaa !13
Hit: load
  %13 = load float, float* %arrayidx14.2, align 4, !tbaa !13
Hit: load
  %16 = load float, float* %arrayidx14.3, align 4, !tbaa !13
Hit: load
  %19 = load float, float* %arrayidx14.4, align 4, !tbaa !13
Hit: load
  %22 = load float, float* %arrayidx14.5, align 4, !tbaa !13
Hit: load
  %25 = load float, float* %arrayidx14.6, align 4, !tbaa !13
Hit: store
  store float %add15.1, float* %arrayidx17.1, align 4, !tbaa !13
Hit: store
  store float %add15.2, float* %arrayidx17.2, align 4, !tbaa !13
Hit: store
  store float %add15.3, float* %arrayidx17.3, align 4, !tbaa !13
Hit: store
  store float %add15.4, float* %arrayidx17.4, align 4, !tbaa !13
Hit: store
  store float %add15.5, float* %arrayidx17.5, align 4, !tbaa !13
Hit: store
  store float %add15.6, float* %arrayidx17.6, align 4, !tbaa !13
Schedulable: 1
Loop Rolling: s242
Generating tree
Generating MATCH
Match: 
  %add = fadd float %2, %4
  %add.1 = fadd float %2, %add15
  %add.2 = fadd float %2, %add15.1
  %add.3 = fadd float %2, %add15.2
  %add.4 = fadd float %2, %add15.3
  %add.5 = fadd float %2, %add15.4
  %add.6 = fadd float %2, %add15.5
Generating IDENTICAL
Generating RECURRENCE
Gen:   %30 = phi float [ %4, %rolled.pre ]
Operands done!
Generated:   %31 = fadd float %2, %30
Gen:   %31 = fadd float %2, %30
Generating MATCH
Match: 
  %add6 = fadd float %3, %add
  %add6.1 = fadd float %3, %add.1
  %add6.2 = fadd float %3, %add.2
  %add6.3 = fadd float %3, %add.3
  %add6.4 = fadd float %3, %add.4
  %add6.5 = fadd float %3, %add.5
  %add6.6 = fadd float %3, %add.6
Generating IDENTICAL
Operands done!
Generated:   %32 = fadd float %3, %31
Gen:   %32 = fadd float %3, %31
Generating MATCH
Match: 
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %33 = zext i8 %29 to i64
Closing BINOP
Gen:   %34 = add nuw nsw i64 %indvars.iv, %33
Operands done!
Generated:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %34
Gen:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %34
Generating MATCH
Match: 
  %5 = load float, float* %arrayidx8, align 4, !tbaa !13
  %8 = load float, float* %arrayidx8.1, align 4, !tbaa !13
  %11 = load float, float* %arrayidx8.2, align 4, !tbaa !13
  %14 = load float, float* %arrayidx8.3, align 4, !tbaa !13
  %17 = load float, float* %arrayidx8.4, align 4, !tbaa !13
  %20 = load float, float* %arrayidx8.5, align 4, !tbaa !13
  %23 = load float, float* %arrayidx8.6, align 4, !tbaa !13
Operands done!
Generated:   %36 = load float, float* %35, align 1
Gen:   %36 = load float, float* %35, align 1
Generating MATCH
Match: 
  %add9 = fadd float %5, %add6
  %add9.1 = fadd float %8, %add6.1
  %add9.2 = fadd float %11, %add6.2
  %add9.3 = fadd float %14, %add6.3
  %add9.4 = fadd float %17, %add6.4
  %add9.5 = fadd float %20, %add6.5
  %add9.6 = fadd float %23, %add6.6
Operands done!
Generated:   %37 = fadd float %36, %32
Gen:   %37 = fadd float %36, %32
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %38 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %34
Gen:   %38 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %34
Generating MATCH
Match: 
  %6 = load float, float* %arrayidx11, align 4, !tbaa !13
  %9 = load float, float* %arrayidx11.1, align 4, !tbaa !13
  %12 = load float, float* %arrayidx11.2, align 4, !tbaa !13
  %15 = load float, float* %arrayidx11.3, align 4, !tbaa !13
  %18 = load float, float* %arrayidx11.4, align 4, !tbaa !13
  %21 = load float, float* %arrayidx11.5, align 4, !tbaa !13
  %24 = load float, float* %arrayidx11.6, align 4, !tbaa !13
Operands done!
Generated:   %39 = load float, float* %38, align 1
Gen:   %39 = load float, float* %38, align 1
Generating MATCH
Match: 
  %add12 = fadd float %6, %add9
  %add12.1 = fadd float %9, %add9.1
  %add12.2 = fadd float %12, %add9.2
  %add12.3 = fadd float %15, %add9.3
  %add12.4 = fadd float %18, %add9.4
  %add12.5 = fadd float %21, %add9.5
  %add12.6 = fadd float %24, %add9.6
Operands done!
Generated:   %40 = fadd float %39, %37
Gen:   %40 = fadd float %39, %37
Generating MATCH
Match: 
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %34
Gen:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %34
Generating MATCH
Match: 
  %7 = load float, float* %arrayidx14, align 4, !tbaa !13
  %10 = load float, float* %arrayidx14.1, align 4, !tbaa !13
  %13 = load float, float* %arrayidx14.2, align 4, !tbaa !13
  %16 = load float, float* %arrayidx14.3, align 4, !tbaa !13
  %19 = load float, float* %arrayidx14.4, align 4, !tbaa !13
  %22 = load float, float* %arrayidx14.5, align 4, !tbaa !13
  %25 = load float, float* %arrayidx14.6, align 4, !tbaa !13
Operands done!
Generated:   %42 = load float, float* %41, align 1
Gen:   %42 = load float, float* %41, align 1
Generating MATCH
Match: 
  %add15 = fadd float %7, %add12
  %add15.1 = fadd float %10, %add12.1
  %add15.2 = fadd float %13, %add12.2
  %add15.3 = fadd float %16, %add12.3
  %add15.4 = fadd float %19, %add12.4
  %add15.5 = fadd float %22, %add12.5
  %add15.6 = fadd float %25, %add12.6
Operands done!
Generated:   %43 = fadd float %42, %40
Found use: 6:   %add.7 = fadd float %2, %add15.6
Extracting:   %43 = fadd float %42, %40
Gen:   %44 = fadd float %43, %41
Generating MATCH
Match: 
  %arrayidx17 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx17.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx17.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx17.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx17.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx17.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx17.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %46 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %35
Gen:   %46 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %35
Generating MATCH
Match: 
  store float %add15, float* %arrayidx17, align 4, !tbaa !13
  store float %add15.1, float* %arrayidx17.1, align 4, !tbaa !13
  store float %add15.2, float* %arrayidx17.2, align 4, !tbaa !13
  store float %add15.3, float* %arrayidx17.3, align 4, !tbaa !13
  store float %add15.4, float* %arrayidx17.4, align 4, !tbaa !13
  store float %add15.5, float* %arrayidx17.5, align 4, !tbaa !13
  store float %add15.6, float* %arrayidx17.6, align 4, !tbaa !13
Operands done!
Generated:   store float %44, float* %46, align 1
Gen:   store float %44, float* %46, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %44 = fadd float %43, %41
Root:
  store float %add15, float* %arrayidx17, align 4, !tbaa !13
  store float %add15.1, float* %arrayidx17.1, align 4, !tbaa !13
  store float %add15.2, float* %arrayidx17.2, align 4, !tbaa !13
  store float %add15.3, float* %arrayidx17.3, align 4, !tbaa !13
  store float %add15.4, float* %arrayidx17.4, align 4, !tbaa !13
  store float %add15.5, float* %arrayidx17.5, align 4, !tbaa !13
  store float %add15.6, float* %arrayidx17.6, align 4, !tbaa !13
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
22->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
13->9 
11->10 
12->11 
5->11 
6->11 
14->13 
17->13 
15->14 
16->15 
5->15 
6->15 
18->17 
19->17 
20->19 
21->19 
1->21 
23->22 
5->22 
6->22 
24 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->24
}

Gains: 165 - 34 = 131; Width: 7; Recurrence Profitable; s242
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 13
IDENTICAL: 8
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 0
BlockSize: 15
Done Loop Roller: 1/1
Optimizing: s243
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.057 = phi i32 [ 0, %entry ], [ %inc35, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 137
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %30 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %26 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %31 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx9.1, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx9.2, align 8, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx9.3, align 4, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx9.4, align 16, !tbaa !4
Hit: load
  %27 = load float, float* %arrayidx9.5, align 4, !tbaa !4
Hit: load
  %32 = load float, float* %arrayidx9.6, align 8, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx17.1, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx17.2, align 8, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx17.3, align 4, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx17.4, align 16, !tbaa !4
Hit: load
  %28 = load float, float* %arrayidx17.5, align 4, !tbaa !4
Hit: load
  %33 = load float, float* %arrayidx17.6, align 8, !tbaa !4
Hit: store
  store float %add19.1, float* %arrayidx.1, align 4, !tbaa !4
Hit: store
  store float %add19.2, float* %arrayidx.2, align 8, !tbaa !4
Hit: store
  store float %add19.3, float* %arrayidx.3, align 4, !tbaa !4
Hit: store
  store float %add19.4, float* %arrayidx.4, align 16, !tbaa !4
Hit: store
  store float %add19.5, float* %arrayidx.5, align 4, !tbaa !4
Hit: store
  store float %add19.6, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx26.1, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx26.2, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx26.3, align 16, !tbaa !4
Hit: load
  %24 = load float, float* %arrayidx26.4, align 4, !tbaa !4
Hit: load
  %29 = load float, float* %arrayidx26.5, align 8, !tbaa !4
Hit: load
  %34 = load float, float* %arrayidx26.6, align 4, !tbaa !4
Hit: store
  store float %add30.1, float* %arrayidx26, align 4, !tbaa !4
Hit: store
  store float %add30.2, float* %arrayidx26.1, align 8, !tbaa !4
Hit: store
  store float %add30.3, float* %arrayidx26.2, align 4, !tbaa !4
Hit: store
  store float %add30.4, float* %arrayidx26.3, align 16, !tbaa !4
Hit: store
  store float %add30.5, float* %arrayidx26.4, align 4, !tbaa !4
Hit: store
  store float %add30.6, float* %arrayidx26.5, align 8, !tbaa !4
Schedulable: 1
Loop Rolling: s243
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %41 = zext i8 %40 to i64
Closing BINOP
Gen:   %42 = or i64 %indvars.iv, %41
Operands done!
Generated:   %43 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %42
Gen:   %43 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %42
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %20 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %30 = load float, float* %arrayidx.6, align 8, !tbaa !4
Operands done!
Generated:   %44 = load float, float* %43, align 1
Gen:   %44 = load float, float* %43, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %45 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %42
Gen:   %45 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %42
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %11 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %16 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %21 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %26 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %31 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Operands done!
Generated:   %46 = load float, float* %45, align 1
Gen:   %46 = load float, float* %45, align 1
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %47 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %42
Gen:   %47 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %42
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %7 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %12 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %17 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %22 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %27 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %32 = load float, float* %arrayidx9.6, align 8, !tbaa !4
Operands done!
Generated:   %48 = load float, float* %47, align 1
Gen:   %48 = load float, float* %47, align 1
Generating MATCH
Match: 
  %mul = fmul float %1, %2
  %mul.1 = fmul float %6, %7
  %mul.2 = fmul float %11, %12
  %mul.3 = fmul float %16, %17
  %mul.4 = fmul float %21, %22
  %mul.5 = fmul float %26, %27
  %mul.6 = fmul float %31, %32
Operands done!
Generated:   %49 = fmul float %46, %48
Gen:   %49 = fmul float %46, %48
Generating MATCH
Match: 
  %add = fadd float %0, %mul
  %add.1 = fadd float %5, %mul.1
  %add.2 = fadd float %10, %mul.2
  %add.3 = fadd float %15, %mul.3
  %add.4 = fadd float %20, %mul.4
  %add.5 = fadd float %25, %mul.5
  %add.6 = fadd float %30, %mul.6
Operands done!
Generated:   %50 = fadd float %44, %49
Gen:   %50 = fadd float %44, %49
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx26 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx26.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx26.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx26.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx26.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx26.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %51 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %42
Gen:   %51 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %42
Generating MATCH
Match: 
  %arrayidx17 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %arrayidx17.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %arrayidx17.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %arrayidx17.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %arrayidx17.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %arrayidx17.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %arrayidx17.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %52 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %42
Gen:   %52 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %42
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx17, align 32, !tbaa !4
  %8 = load float, float* %arrayidx17.1, align 4, !tbaa !4
  %13 = load float, float* %arrayidx17.2, align 8, !tbaa !4
  %18 = load float, float* %arrayidx17.3, align 4, !tbaa !4
  %23 = load float, float* %arrayidx17.4, align 16, !tbaa !4
  %28 = load float, float* %arrayidx17.5, align 4, !tbaa !4
  %33 = load float, float* %arrayidx17.6, align 8, !tbaa !4
Operands done!
Generated:   %53 = load float, float* %52, align 1
Gen:   %53 = load float, float* %52, align 1
Generating MATCH
Match: 
  %mul18 = fmul float %2, %3
  %mul18.1 = fmul float %7, %8
  %mul18.2 = fmul float %12, %13
  %mul18.3 = fmul float %17, %18
  %mul18.4 = fmul float %22, %23
  %mul18.5 = fmul float %27, %28
  %mul18.6 = fmul float %32, %33
Operands done!
Generated:   %54 = fmul float %48, %53
Gen:   %54 = fmul float %48, %53
Generating MATCH
Match: 
  %add19 = fadd float %add, %mul18
  %add19.1 = fadd float %add.1, %mul18.1
  %add19.2 = fadd float %add.2, %mul18.2
  %add19.3 = fadd float %add.3, %mul18.3
  %add19.4 = fadd float %add.4, %mul18.4
  %add19.5 = fadd float %add.5, %mul18.5
  %add19.6 = fadd float %add.6, %mul18.6
Operands done!
Generated:   %55 = fadd float %50, %54
Gen:   %55 = fadd float %50, %54
Generating MATCH
Match: 
  store float %add19, float* %arrayidx, align 32, !tbaa !4
  store float %add19.1, float* %arrayidx.1, align 4, !tbaa !4
  store float %add19.2, float* %arrayidx.2, align 8, !tbaa !4
  store float %add19.3, float* %arrayidx.3, align 4, !tbaa !4
  store float %add19.4, float* %arrayidx.4, align 16, !tbaa !4
  store float %add19.5, float* %arrayidx.5, align 4, !tbaa !4
  store float %add19.6, float* %arrayidx.6, align 8, !tbaa !4
Operands done!
Generated:   store float %55, float* %43, align 1
Gen:   store float %55, float* %43, align 1
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx26, align 4, !tbaa !4
  %9 = load float, float* %arrayidx26.1, align 8, !tbaa !4
  %14 = load float, float* %arrayidx26.2, align 4, !tbaa !4
  %19 = load float, float* %arrayidx26.3, align 16, !tbaa !4
  %24 = load float, float* %arrayidx26.4, align 4, !tbaa !4
  %29 = load float, float* %arrayidx26.5, align 8, !tbaa !4
  %34 = load float, float* %arrayidx26.6, align 4, !tbaa !4
Generating MATCH
Match: 
  %arrayidx26 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx26.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx26.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx26.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx26.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx26.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx26.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating MATCH
Match: 
  %indvars.iv.next = or i64 %indvars.iv, 1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
Generating IDENTICAL
Generating INTSEQ
Gen:   %56 = add i64 %41, 1
Operands done!
Generated:   %57 = or i64 %indvars.iv, %56
Found use: 6:   %arrayidx17.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
Extracting:   %57 = or i64 %indvars.iv, %56
Gen:   %58 = or i64 %indvars.iv, %57
Operands done!
Generated:   %60 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %58
Found use: 6:   store float %add30.7, float* %arrayidx26.6, align 4, !tbaa !4
Extracting:   %60 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %58
Gen:   %61 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %59
Operands done!
Generated:   %63 = load float, float* %61, align 1
Gen:   %63 = load float, float* %61, align 1
Generating MATCH
Match: 
  %mul29 = fmul float %4, %6
  %mul29.1 = fmul float %9, %11
  %mul29.2 = fmul float %14, %16
  %mul29.3 = fmul float %19, %21
  %mul29.4 = fmul float %24, %26
  %mul29.5 = fmul float %29, %31
  %mul29.6 = fmul float %34, %36
Operands done!
Generated:   %64 = fmul float %50, %63
Gen:   %64 = fmul float %50, %63
Generating MATCH
Match: 
  %add30 = fadd float %add19, %mul29
  %add30.1 = fadd float %add19.1, %mul29.1
  %add30.2 = fadd float %add19.2, %mul29.2
  %add30.3 = fadd float %add19.3, %mul29.3
  %add30.4 = fadd float %add19.4, %mul29.4
  %add30.5 = fadd float %add19.5, %mul29.5
  %add30.6 = fadd float %add19.6, %mul29.6
Operands done!
Generated:   %65 = fadd float %57, %64
Gen:   %65 = fadd float %57, %64
Generating MATCH
Match: 
  store float %add30, float* %arrayidx11, align 32, !tbaa !4
  store float %add30.1, float* %arrayidx26, align 4, !tbaa !4
  store float %add30.2, float* %arrayidx26.1, align 8, !tbaa !4
  store float %add30.3, float* %arrayidx26.2, align 4, !tbaa !4
  store float %add30.4, float* %arrayidx26.3, align 16, !tbaa !4
  store float %add30.5, float* %arrayidx26.4, align 4, !tbaa !4
  store float %add30.6, float* %arrayidx26.5, align 8, !tbaa !4
Operands done!
Generated:   store float %65, float* %53, align 1
Gen:   store float %65, float* %53, align 1
Generating MULTI
Graph code generated!
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
24 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
25 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
26 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
27 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
28 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
29 [label="1..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
30 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
22->0 
2->1 
5->1 
3->2 
18->2 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
15->11 
13->12 
14->13 
7->13 
8->13 
16->15 
17->16 
7->16 
8->16 
15->18 
19->18 
20->19 
21->20 
7->20 
8->20 
23->22 
30->22 
2->23 
24->23 
15->24 
25->24 
26->25 
27->26 
7->26 
28->26 
9->28 
29->28 
27->30 
7->30 
8->30 
31 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
26->31
32 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
28->32
}

Gains: 233 - 58 = 175; Width: 0; Profitable; s243
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 20
IDENTICAL: 7
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 1
BlockSize: 20
Done Loop Roller: 1/1
Optimizing: s244
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.054 = phi i32 [ 0, %entry ], [ %inc33, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 99
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
12 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->12
13 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->13
14 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->14
15 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->15
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->16
17 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->17
18 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->18
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->21
22 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->22
23 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->23
24 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->24
25 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->25
26 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->26
27 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->27
28 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->28
29 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->29
30 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->30
31 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->31
32 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->32
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
12 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->12
13 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->13
14 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->14
15 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->15
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->16
17 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->17
18 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->18
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->21
22 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->22
23 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->23
24 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->24
25 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->25
26 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->26
27 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->27
28 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->28
29 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->29
30 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->30
31 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->31
32 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
9->32
}

Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next.1 = or i64 %indvars.iv, 2
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
14 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
16->0 
2->1 
3->1 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
14->12 
9->14 
15->14 
17->16 
7->16 
14->16 
18 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->18
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->19
20 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->20
21 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->21
22 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->22
23 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->23
24 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->24
25 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->25
26 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->26
27 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->27
28 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->28
29 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->29
30 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->30
8->30
31 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
12->31
14->25
14->26
14->27
14->28
14->29
14->30
32 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
14->32
16->31
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next.1 = or i64 %indvars.iv, 2
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
14 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
16->0 
2->1 
3->1 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
14->12 
9->14 
15->14 
17->16 
7->16 
14->16 
18 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->18
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->19
20 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->20
21 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->21
22 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->22
23 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->23
24 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->24
25 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->25
26 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->26
27 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->27
28 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->28
29 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->29
30 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->30
8->30
31 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
12->31
14->25
14->26
14->27
14->28
14->29
14->30
32 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
14->32
16->31
}

Building reduction
  store float %add27.6, float* %arrayidx23.6, align 4, !tbaa !4
  %add27.6 = fadd float %add16.6, %mul26.6
BOs:
  %add27.6 = fadd float %add16.6, %mul26.6
  %add16.6 = fadd float %18, %19
Operands:
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %mul26.6 = fmul float %20, %21
Operands:
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %mul26.6 = fmul float %20, %21
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add16.6, float* %arrayidx.6, align 8, !tbaa !4
BlockSize: 18
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 2
Final Match: 0
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Alt Seq
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Alt Seq
Creating Node
Is Addition
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
[32000 x float]
Indices:
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
GEP Seq
GEP Seq
Invalid:   %23 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="alt: %22, %add16.7", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="alt: @c, @d", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="alt: @d, @a", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="7..8, 1", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
15->0 
2->1 
3->1 
4->3 
9->3 
5->4 
6->5 
7->5 
8->5 
10->9 
11->10 
7->10 
12->10 
13->12 
14->12 
12->15 
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->16
17 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
12->17
18 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
15->18
}

Trying AGAIN
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 2
Final Match: 0
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Alt Seq
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Alt Seq
Creating Node
Is Addition
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
[32000 x float]
Indices:
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
GEP Seq
GEP Seq
Invalid:   %23 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="alt: %22, %add16.7", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="alt: @c, @d", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="alt: @d, @a", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="7..8, 1", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
15->0 
2->1 
3->1 
4->3 
9->3 
5->4 
6->5 
7->5 
8->5 
10->9 
11->10 
7->10 
12->10 
13->12 
14->12 
12->15 
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
4->16
17 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
12->17
18 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
15->18
}

Building reduction
  store float %add27.7, float* %arrayidx23.7, align 32, !tbaa !4
  %add27.7 = fadd float %add16.7, %mul26.7
BOs:
  %add27.7 = fadd float %add16.7, %mul26.7
  %add16.7 = fadd float %22, %23
Operands:
  %22 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %23 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %mul26.7 = fmul float %24, %25
Operands:
  %22 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %23 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %mul26.7 = fmul float %24, %25
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add16.7, float* %arrayidx.7, align 4, !tbaa !4
Done Loop Roller: 0/0
Nothing found in: s244
Optimizing: s1244
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.051 = phi i32 [ 0, %entry ], [ %inc31, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 116
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: store
  store float %add18.1, float* %arrayidx25, align 4, !tbaa !4
Hit: store
  store float %add18.2, float* %arrayidx25.1, align 8, !tbaa !4
Hit: store
  store float %add18.3, float* %arrayidx25.2, align 4, !tbaa !4
Hit: store
  store float %add18.4, float* %arrayidx25.3, align 16, !tbaa !4
Hit: store
  store float %add18.5, float* %arrayidx25.4, align 4, !tbaa !4
Hit: store
  store float %add18.6, float* %arrayidx25.5, align 8, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx25.1, align 8, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx25.2, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx25.3, align 16, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx25.4, align 4, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx25.5, align 8, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx25.6, align 4, !tbaa !4
Hit: store
  store float %add26.1, float* %arrayidx28.1, align 4, !tbaa !4
Hit: store
  store float %add26.2, float* %arrayidx28.2, align 8, !tbaa !4
Hit: store
  store float %add26.3, float* %arrayidx28.3, align 4, !tbaa !4
Hit: store
  store float %add26.4, float* %arrayidx28.4, align 16, !tbaa !4
Hit: store
  store float %add26.5, float* %arrayidx28.5, align 4, !tbaa !4
Hit: store
  store float %add26.6, float* %arrayidx28.6, align 8, !tbaa !4
Schedulable: 1
Loop Rolling: s1244
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = zext i8 %24 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %25
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Gen:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %mul = fmul float %1, %1
  %mul.1 = fmul float %4, %4
  %mul.2 = fmul float %7, %7
  %mul.3 = fmul float %10, %10
  %mul.4 = fmul float %13, %13
  %mul.5 = fmul float %16, %16
  %mul.6 = fmul float %19, %19
Operands done!
Generated:   %31 = fmul float %30, %30
Gen:   %31 = fmul float %30, %30
Generating MATCH
Match: 
  %add = fadd float %0, %mul
  %add.1 = fadd float %3, %mul.1
  %add.2 = fadd float %6, %mul.2
  %add.3 = fadd float %9, %mul.3
  %add.4 = fadd float %12, %mul.4
  %add.5 = fadd float %15, %mul.5
  %add.6 = fadd float %18, %mul.6
Operands done!
Generated:   %32 = fadd float %28, %31
Gen:   %32 = fadd float %28, %31
Generating MATCH
Match: 
  %mul14 = fmul float %0, %0
  %mul14.1 = fmul float %3, %3
  %mul14.2 = fmul float %6, %6
  %mul14.3 = fmul float %9, %9
  %mul14.4 = fmul float %12, %12
  %mul14.5 = fmul float %15, %15
  %mul14.6 = fmul float %18, %18
Operands done!
Generated:   %33 = fmul float %28, %28
Gen:   %33 = fmul float %28, %28
Generating MATCH
Match: 
  %add15 = fadd float %mul14, %add
  %add15.1 = fadd float %mul14.1, %add.1
  %add15.2 = fadd float %mul14.2, %add.2
  %add15.3 = fadd float %mul14.3, %add.3
  %add15.4 = fadd float %mul14.4, %add.4
  %add15.5 = fadd float %mul14.5, %add.5
  %add15.6 = fadd float %mul14.6, %add.6
Operands done!
Generated:   %34 = fadd float %33, %32
Gen:   %34 = fadd float %33, %32
Generating MATCH
Match: 
  %add18 = fadd float %1, %add15
  %add18.1 = fadd float %4, %add15.1
  %add18.2 = fadd float %7, %add15.2
  %add18.3 = fadd float %10, %add15.3
  %add18.4 = fadd float %13, %add15.4
  %add18.5 = fadd float %16, %add15.5
  %add18.6 = fadd float %19, %add15.6
Operands done!
Generated:   %35 = fadd float %30, %34
Gen:   %35 = fadd float %30, %34
Generating MATCH
Match: 
  %arrayidx20 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx25 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx25.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx25.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx25.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx25.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx25.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %36 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Gen:   %36 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Generating MATCH
Match: 
  store float %add18, float* %arrayidx20, align 32, !tbaa !4
  store float %add18.1, float* %arrayidx25, align 4, !tbaa !4
  store float %add18.2, float* %arrayidx25.1, align 8, !tbaa !4
  store float %add18.3, float* %arrayidx25.2, align 4, !tbaa !4
  store float %add18.4, float* %arrayidx25.3, align 16, !tbaa !4
  store float %add18.5, float* %arrayidx25.4, align 4, !tbaa !4
  store float %add18.6, float* %arrayidx25.5, align 8, !tbaa !4
Operands done!
Generated:   store float %35, float* %36, align 1
Gen:   store float %35, float* %36, align 1
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx25, align 4, !tbaa !4
  %5 = load float, float* %arrayidx25.1, align 8, !tbaa !4
  %8 = load float, float* %arrayidx25.2, align 4, !tbaa !4
  %11 = load float, float* %arrayidx25.3, align 16, !tbaa !4
  %14 = load float, float* %arrayidx25.4, align 4, !tbaa !4
  %17 = load float, float* %arrayidx25.5, align 8, !tbaa !4
  %20 = load float, float* %arrayidx25.6, align 4, !tbaa !4
Generating MATCH
Match: 
  %arrayidx25 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx25.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx25.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx25.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx25.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx25.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx25.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating MATCH
Match: 
  %indvars.iv.next = or i64 %indvars.iv, 1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
Generating IDENTICAL
Generating INTSEQ
Gen:   %37 = add i64 %25, 1
Operands done!
Generated:   %38 = or i64 %indvars.iv, %37
Found use: 6:   %arrayidx28.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Extracting:   %38 = or i64 %indvars.iv, %37
Gen:   %39 = or i64 %indvars.iv, %38
Operands done!
Generated:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %39
Found use: 6:   store float %add18.7, float* %arrayidx25.6, align 4, !tbaa !4
Extracting:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %39
Gen:   %42 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %40
Operands done!
Generated:   %44 = load float, float* %42, align 1
Gen:   %44 = load float, float* %42, align 1
Generating MATCH
Match: 
  %add26 = fadd float %4, %add18
  %add26.1 = fadd float %7, %add18.1
  %add26.2 = fadd float %10, %add18.2
  %add26.3 = fadd float %13, %add18.3
  %add26.4 = fadd float %16, %add18.4
  %add26.5 = fadd float %19, %add18.5
  %add26.6 = fadd float %22, %add18.6
Operands done!
Generated:   %45 = fadd float %44, %37
Gen:   %45 = fadd float %44, %37
Generating MATCH
Match: 
  %arrayidx28 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx28.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx28.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx28.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx28.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx28.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx28.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %46 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %28
Gen:   %46 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %28
Generating MATCH
Match: 
  store float %add26, float* %arrayidx28, align 32, !tbaa !4
  store float %add26.1, float* %arrayidx28.1, align 4, !tbaa !4
  store float %add26.2, float* %arrayidx28.2, align 8, !tbaa !4
  store float %add26.3, float* %arrayidx28.3, align 4, !tbaa !4
  store float %add26.4, float* %arrayidx28.4, align 16, !tbaa !4
  store float %add26.5, float* %arrayidx28.5, align 4, !tbaa !4
  store float %add26.6, float* %arrayidx28.6, align 8, !tbaa !4
Operands done!
Generated:   store float %45, float* %46, align 1
Gen:   store float %45, float* %46, align 1
Generating MULTI
Graph code generated!
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
24 [label="1..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
25 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
26 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
19->0 
2->1 
17->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
15->10 
12->11 
12->11 
13->12 
14->13 
6->13 
7->13 
12->15 
16->15 
3->16 
3->16 
18->17 
6->17 
7->17 
20->19 
25->19 
21->20 
2->20 
22->21 
18->22 
6->22 
23->22 
8->23 
24->23 
26->25 
6->25 
7->25 
27 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
22->27
28 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
23->28
}

Gains: 191 - 52 = 139; Width: 0; Profitable; s1244
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 17
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 1
BlockSize: 17
Done Loop Roller: 1/1
Optimizing: s2244
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.036 = phi i32 [ 0, %entry ], [ %inc20, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 64
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Mismatching
Invalid:   %indvars.iv.next = or i64 %indvars.iv, 1
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
10->0 
2->1 
3->1 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
6->10 
12->10 
8->12 
13->12 
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->14
15 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->17
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->19
7->19
20 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
10->20
12->14
12->15
12->16
12->17
12->18
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->21
12->19
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Mismatching
Invalid:   %indvars.iv.next = or i64 %indvars.iv, 1
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
10->0 
2->1 
3->1 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
6->10 
12->10 
8->12 
13->12 
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->14
15 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->17
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->19
7->19
20 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
10->20
12->14
12->15
12->16
12->17
12->18
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->21
12->19
}

BlockSize: 13
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Alt Seq
Creating Node
All the Same
Creating Node
All the Same
Creating Node
[32000 x float]
Indices:
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
GEP Seq
GEP Seq
Creating Node
Is Addition
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: load
  %17 = load float, float* %arrayidx14.7, align 4, !tbaa !4
Hit: store
  store float %add15.7, float* %arrayidx10.6, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s2244
Generating tree
Generating MATCH
Match: 
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating ALTSEQ
Values:
@e = dso_local global [32000 x float] zeroinitializer, align 64
@c = dso_local global [32000 x float] zeroinitializer, align 64
Generated Version 4:
  %19 = icmp eq i8 %18, 0
  %20 = select i1 %19, [32000 x float]* @e, [32000 x float]* @c
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* %20, i64 0, i64 %indvars.iv.next.6
Gen:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* %20, i64 0, i64 %indvars.iv.next.6
Generating MATCH
Match: 
  %16 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %17 = load float, float* %arrayidx14.7, align 4, !tbaa !4
Operands done!
Generated:   %22 = load float, float* %21, align 1
Gen:   %22 = load float, float* %21, align 1
Generating MATCH
Match: 
  %add.7 = fadd float %15, %16
  %add15.7 = fadd float %15, %17
Generating IDENTICAL
Operands done!
Generated:   %23 = fadd float %15, %22
Gen:   %23 = fadd float %15, %22
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %26 = add i64 %25, 8
Closing BINOP
Found use: 0:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Extracting:   %27 = add nuw nsw i64 %indvars.iv, %26
Gen:   %28 = add nuw nsw i64 %indvars.iv, %27
Generating GEPSEQ
Closing GEPSEQ
Gen:   %31 = getelementptr float, float* %19, i64 %29
Generating MATCH
Match: 
  store float %add.7, float* %arrayidx10.7, align 32, !tbaa !4
  store float %add15.7, float* %arrayidx10.6, align 4, !tbaa !4
Operands done!
Generated:   store float %25, float* %31, align 1
Gen:   store float %25, float* %31, align 1
Graph code generated!
Root:
  store float %add.7, float* %arrayidx10.7, align 32, !tbaa !4
  store float %add15.7, float* %arrayidx10.6, align 4, !tbaa !4
Root size: 2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="alt: @e, @c", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="8..7, -1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
8->0 
2->1 
3->1 
4->3 
5->4 
6->4 
7->4 
9->8 
10->9 
11->9 
12 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
8->12
13 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
9->13
}

Gains: 21 - 36 = -15; Width: 2; Unprofitable; s2244
Trying AGAIN
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Alt Seq
Creating Node
All the Same
Creating Node
All the Same
Creating Node
[32000 x float]
Indices:
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
GEP Seq
GEP Seq
Creating Node
Is Addition
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: load
  %18 = load float, float* %arrayidx14.7, align 4, !tbaa !4
Hit: store
  store float %add15.7, float* %arrayidx10.6, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s2244
Generating tree
Generating MATCH
Match: 
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating ALTSEQ
Values:
@e = dso_local global [32000 x float] zeroinitializer, align 64
@c = dso_local global [32000 x float] zeroinitializer, align 64
Generated Version 4:
  %20 = icmp eq i8 %19, 0
  %21 = select i1 %20, [32000 x float]* @e, [32000 x float]* @c
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* %21, i64 0, i64 %indvars.iv.next.6
Gen:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* %21, i64 0, i64 %indvars.iv.next.6
Generating MATCH
Match: 
  %17 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %18 = load float, float* %arrayidx14.7, align 4, !tbaa !4
Operands done!
Generated:   %23 = load float, float* %22, align 1
Gen:   %23 = load float, float* %22, align 1
Generating MATCH
Match: 
  %add.7 = fadd float %16, %17
  %add15.7 = fadd float %16, %18
Generating IDENTICAL
Operands done!
Generated:   %24 = fadd float %16, %23
Gen:   %24 = fadd float %16, %23
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %27 = add i64 %26, 8
Closing BINOP
Found use: 0:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Extracting:   %28 = add nuw nsw i64 %indvars.iv, %27
Gen:   %29 = add nuw nsw i64 %indvars.iv, %28
Generating GEPSEQ
Closing GEPSEQ
Gen:   %32 = getelementptr float, float* %20, i64 %30
Generating MATCH
Match: 
  store float %add.7, float* %arrayidx10.7, align 32, !tbaa !4
  store float %add15.7, float* %arrayidx10.6, align 4, !tbaa !4
Operands done!
Generated:   store float %26, float* %32, align 1
Gen:   store float %26, float* %32, align 1
Graph code generated!
Root:
  store float %add.7, float* %arrayidx10.7, align 32, !tbaa !4
  store float %add15.7, float* %arrayidx10.6, align 4, !tbaa !4
Root size: 2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="alt: @e, @c", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="8..7, -1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
8->0 
2->1 
3->1 
4->3 
5->4 
6->4 
7->4 
9->8 
10->9 
11->9 
12 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
8->12
13 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
9->13
}

Gains: 21 - 36 = -15; Width: 2; Unprofitable; s2244
Done Loop Roller: 0/2
Optimizing: s251
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.031 = phi i32 [ 0, %entry ], [ %inc15, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 99
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Hit: store
  store float %mul10.1, float* %arrayidx12.1, align 4, !tbaa !4
Hit: store
  store float %mul10.2, float* %arrayidx12.2, align 8, !tbaa !4
Hit: store
  store float %mul10.3, float* %arrayidx12.3, align 4, !tbaa !4
Hit: store
  store float %mul10.4, float* %arrayidx12.4, align 16, !tbaa !4
Hit: store
  store float %mul10.5, float* %arrayidx12.5, align 4, !tbaa !4
Hit: store
  store float %mul10.6, float* %arrayidx12.6, align 8, !tbaa !4
Hit: store
  store float %mul10.7, float* %arrayidx12.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s251
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = zext i8 %24 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %25
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Gen:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %31 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %26
Gen:   %31 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %26
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   %32 = load float, float* %31, align 1
Gen:   %32 = load float, float* %31, align 1
Generating MATCH
Match: 
  %mul = fmul float %1, %2
  %mul.1 = fmul float %4, %5
  %mul.2 = fmul float %7, %8
  %mul.3 = fmul float %10, %11
  %mul.4 = fmul float %13, %14
  %mul.5 = fmul float %16, %17
  %mul.6 = fmul float %19, %20
  %mul.7 = fmul float %22, %23
Operands done!
Generated:   %33 = fmul float %30, %32
Gen:   %33 = fmul float %30, %32
Generating MATCH
Match: 
  %add = fadd float %0, %mul
  %add.1 = fadd float %3, %mul.1
  %add.2 = fadd float %6, %mul.2
  %add.3 = fadd float %9, %mul.3
  %add.4 = fadd float %12, %mul.4
  %add.5 = fadd float %15, %mul.5
  %add.6 = fadd float %18, %mul.6
  %add.7 = fadd float %21, %mul.7
Operands done!
Generated:   %34 = fadd float %28, %33
Gen:   %34 = fadd float %28, %33
Generating MATCH
Match: 
  %mul10 = fmul float %add, %add
  %mul10.1 = fmul float %add.1, %add.1
  %mul10.2 = fmul float %add.2, %add.2
  %mul10.3 = fmul float %add.3, %add.3
  %mul10.4 = fmul float %add.4, %add.4
  %mul10.5 = fmul float %add.5, %add.5
  %mul10.6 = fmul float %add.6, %add.6
  %mul10.7 = fmul float %add.7, %add.7
Operands done!
Generated:   %35 = fmul float %34, %34
Gen:   %35 = fmul float %34, %34
Generating MATCH
Match: 
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %36 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Gen:   %36 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Generating MATCH
Match: 
  store float %mul10, float* %arrayidx12, align 32, !tbaa !4
  store float %mul10.1, float* %arrayidx12.1, align 4, !tbaa !4
  store float %mul10.2, float* %arrayidx12.2, align 8, !tbaa !4
  store float %mul10.3, float* %arrayidx12.3, align 4, !tbaa !4
  store float %mul10.4, float* %arrayidx12.4, align 16, !tbaa !4
  store float %mul10.5, float* %arrayidx12.5, align 4, !tbaa !4
  store float %mul10.6, float* %arrayidx12.6, align 8, !tbaa !4
  store float %mul10.7, float* %arrayidx12.7, align 4, !tbaa !4
Operands done!
Generated:   store float %35, float* %36, align 1
Gen:   store float %35, float* %36, align 1
Graph code generated!
Root:
  store float %mul10, float* %arrayidx12, align 32, !tbaa !4
  store float %mul10.1, float* %arrayidx12.1, align 4, !tbaa !4
  store float %mul10.2, float* %arrayidx12.2, align 8, !tbaa !4
  store float %mul10.3, float* %arrayidx12.3, align 4, !tbaa !4
  store float %mul10.4, float* %arrayidx12.4, align 16, !tbaa !4
  store float %mul10.5, float* %arrayidx12.5, align 4, !tbaa !4
  store float %mul10.6, float* %arrayidx12.6, align 8, !tbaa !4
  store float %mul10.7, float* %arrayidx12.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
17->0 
2->1 
2->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
14->10 
12->11 
13->12 
6->12 
7->12 
15->14 
16->15 
6->15 
7->15 
18->17 
6->17 
7->17 
}

Gains: 173 - 23 = 150; Width: 8; Profitable; s251
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 11
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s1251
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.039 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 131
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %30 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %35 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %26 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %31 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %36 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx9.1, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx9.2, align 8, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx9.3, align 4, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx9.4, align 16, !tbaa !4
Hit: load
  %27 = load float, float* %arrayidx9.5, align 4, !tbaa !4
Hit: load
  %32 = load float, float* %arrayidx9.6, align 8, !tbaa !4
Hit: load
  %37 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx11.1, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx11.2, align 8, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx11.3, align 4, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx11.4, align 16, !tbaa !4
Hit: load
  %28 = load float, float* %arrayidx11.5, align 4, !tbaa !4
Hit: load
  %33 = load float, float* %arrayidx11.6, align 8, !tbaa !4
Hit: load
  %38 = load float, float* %arrayidx11.7, align 4, !tbaa !4
Hit: store
  store float %add12.1, float* %arrayidx.1, align 4, !tbaa !4
Hit: store
  store float %add12.2, float* %arrayidx.2, align 8, !tbaa !4
Hit: store
  store float %add12.3, float* %arrayidx.3, align 4, !tbaa !4
Hit: store
  store float %add12.4, float* %arrayidx.4, align 16, !tbaa !4
Hit: store
  store float %add12.5, float* %arrayidx.5, align 4, !tbaa !4
Hit: store
  store float %add12.6, float* %arrayidx.6, align 8, !tbaa !4
Hit: store
  store float %add12.7, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx16.1, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx16.2, align 8, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx16.3, align 4, !tbaa !4
Hit: load
  %24 = load float, float* %arrayidx16.4, align 16, !tbaa !4
Hit: load
  %29 = load float, float* %arrayidx16.5, align 4, !tbaa !4
Hit: load
  %34 = load float, float* %arrayidx16.6, align 8, !tbaa !4
Hit: load
  %39 = load float, float* %arrayidx16.7, align 4, !tbaa !4
Hit: store
  store float %mul.1, float* %arrayidx9.1, align 4, !tbaa !4
Hit: store
  store float %mul.2, float* %arrayidx9.2, align 8, !tbaa !4
Hit: store
  store float %mul.3, float* %arrayidx9.3, align 4, !tbaa !4
Hit: store
  store float %mul.4, float* %arrayidx9.4, align 16, !tbaa !4
Hit: store
  store float %mul.5, float* %arrayidx9.5, align 4, !tbaa !4
Hit: store
  store float %mul.6, float* %arrayidx9.6, align 8, !tbaa !4
Hit: store
  store float %mul.7, float* %arrayidx9.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s1251
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %41 = zext i8 %40 to i64
Closing BINOP
Gen:   %42 = or i64 %indvars.iv, %41
Operands done!
Generated:   %43 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %42
Gen:   %43 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %42
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %20 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %30 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %35 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %44 = load float, float* %43, align 1
Gen:   %44 = load float, float* %43, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %45 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %42
Gen:   %45 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %42
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %11 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %16 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %21 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %26 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %31 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %36 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %46 = load float, float* %45, align 1
Gen:   %46 = load float, float* %45, align 1
Generating MATCH
Match: 
  %add = fadd float %0, %1
  %add.1 = fadd float %5, %6
  %add.2 = fadd float %10, %11
  %add.3 = fadd float %15, %16
  %add.4 = fadd float %20, %21
  %add.5 = fadd float %25, %26
  %add.6 = fadd float %30, %31
  %add.7 = fadd float %35, %36
Operands done!
Generated:   %47 = fadd float %44, %46
Gen:   %47 = fadd float %44, %46
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %42
Gen:   %48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %42
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %7 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %12 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %17 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %22 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %27 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %32 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %37 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   %49 = load float, float* %48, align 1
Gen:   %49 = load float, float* %48, align 1
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %50 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %42
Gen:   %50 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %42
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx11, align 32, !tbaa !4
  %8 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %13 = load float, float* %arrayidx11.2, align 8, !tbaa !4
  %18 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %23 = load float, float* %arrayidx11.4, align 16, !tbaa !4
  %28 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %33 = load float, float* %arrayidx11.6, align 8, !tbaa !4
  %38 = load float, float* %arrayidx11.7, align 4, !tbaa !4
Operands done!
Generated:   %51 = load float, float* %50, align 1
Gen:   %51 = load float, float* %50, align 1
Generating MATCH
Match: 
  %add12 = fadd float %2, %3
  %add12.1 = fadd float %7, %8
  %add12.2 = fadd float %12, %13
  %add12.3 = fadd float %17, %18
  %add12.4 = fadd float %22, %23
  %add12.5 = fadd float %27, %28
  %add12.6 = fadd float %32, %33
  %add12.7 = fadd float %37, %38
Operands done!
Generated:   %52 = fadd float %49, %51
Gen:   %52 = fadd float %49, %51
Generating MATCH
Match: 
  store float %add12, float* %arrayidx, align 32, !tbaa !4
  store float %add12.1, float* %arrayidx.1, align 4, !tbaa !4
  store float %add12.2, float* %arrayidx.2, align 8, !tbaa !4
  store float %add12.3, float* %arrayidx.3, align 4, !tbaa !4
  store float %add12.4, float* %arrayidx.4, align 16, !tbaa !4
  store float %add12.5, float* %arrayidx.5, align 4, !tbaa !4
  store float %add12.6, float* %arrayidx.6, align 8, !tbaa !4
  store float %add12.7, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   store float %52, float* %43, align 1
Gen:   store float %52, float* %43, align 1
Generating MATCH
Match: 
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %53 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %42
Gen:   %53 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %42
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx16, align 32, !tbaa !4
  %9 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %14 = load float, float* %arrayidx16.2, align 8, !tbaa !4
  %19 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %24 = load float, float* %arrayidx16.4, align 16, !tbaa !4
  %29 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %34 = load float, float* %arrayidx16.6, align 8, !tbaa !4
  %39 = load float, float* %arrayidx16.7, align 4, !tbaa !4
Operands done!
Generated:   %54 = load float, float* %53, align 1
Gen:   %54 = load float, float* %53, align 1
Generating MATCH
Match: 
  %mul = fmul float %add, %4
  %mul.1 = fmul float %add.1, %9
  %mul.2 = fmul float %add.2, %14
  %mul.3 = fmul float %add.3, %19
  %mul.4 = fmul float %add.4, %24
  %mul.5 = fmul float %add.5, %29
  %mul.6 = fmul float %add.6, %34
  %mul.7 = fmul float %add.7, %39
Operands done!
Generated:   %55 = fmul float %47, %54
Gen:   %55 = fmul float %47, %54
Generating MATCH
Match: 
  store float %mul, float* %arrayidx9, align 32, !tbaa !4
  store float %mul.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %mul.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %mul.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %mul.4, float* %arrayidx9.4, align 16, !tbaa !4
  store float %mul.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %mul.6, float* %arrayidx9.6, align 8, !tbaa !4
  store float %mul.7, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   store float %55, float* %48, align 1
Gen:   store float %55, float* %48, align 1
Generating MULTI
Graph code generated!
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
24 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
15->0 
2->1 
13->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->11 
6->11 
7->11 
14->13 
6->13 
7->13 
16->15 
4->15 
17->16 
22->16 
18->17 
19->17 
13->18 
20->19 
21->20 
6->20 
7->20 
23->22 
24->23 
6->23 
7->23 
}

Gains: 237 - 31 = 206; Width: 0; Profitable; s1251
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 15
IDENTICAL: 7
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 1
Done Loop Roller: 1/1
Optimizing: s2251
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.040 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 124
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %s.038 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %29, %30
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
Invalid dependence found!
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
11->1 
3->2 
4->2 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
7->14 
8->14 
16 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->16
17 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->17
18 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->18
19 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->19
20 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->20
21 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->21
22 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->22
23 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->23
24 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->24
25 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->25
26 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->26
27 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->27
28 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->28
29 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->29
30 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->30
31 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->31
32 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->32
33 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->33
34 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->34
35 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->35
36 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->36
37 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->37
38 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->38
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
11->1 
3->2 
4->2 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
7->14 
8->14 
16 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->16
17 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->17
18 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->18
19 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->19
20 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->20
21 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->21
22 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->22
23 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->23
24 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->24
25 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->25
26 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->26
27 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->27
28 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->28
29 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->29
30 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->30
31 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->31
32 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->32
33 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->33
34 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->34
35 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->35
36 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->36
37 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->37
38 [label="load", style="filled" , fillcolor="#f2eb5c", shape=box];
14->38
}

Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next.4 = or i64 %indvars.iv, 5
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
3->1 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
6->10 
7->10 
12 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->12
13 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->13
14 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->14
15 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->15
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->16
17 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->17
18 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->18
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->21
22 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->22
23 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->23
24 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->24
25 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->25
26 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->26
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next.4 = or i64 %indvars.iv, 5
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
3->1 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
6->10 
7->10 
12 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->12
13 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->13
14 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->14
15 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->15
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->16
17 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->17
18 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->18
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->21
22 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->22
23 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->23
24 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->24
25 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->25
26 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->26
}

Done Loop Roller: 0/0
Nothing found in: s2251
Optimizing: s3251
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.045 = phi i32 [ 0, %entry ], [ %inc26, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 109
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
Invalid dependence found!
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add.7, %for.body5.7 ]
  %add = fadd float %1, %2
  %add.1 = fadd float %4, %5
  %add.2 = fadd float %7, %8
  %add.3 = fadd float %10, %11
  %add.4 = fadd float %13, %14
  %add.5 = fadd float %16, %17
  %add.6 = fadd float %19, %20
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx.2, align 8, !tbaa !2
Hit: load
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !2
Hit: load
  %13 = load float, float* %arrayidx.4, align 16, !tbaa !2
Hit: load
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !2
Hit: load
  %19 = load float, float* %arrayidx.6, align 8, !tbaa !2
Hit: load
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx7.2, align 8, !tbaa !2
Hit: load
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !2
Hit: load
  %14 = load float, float* %arrayidx7.4, align 16, !tbaa !2
Hit: load
  %17 = load float, float* %arrayidx7.5, align 4, !tbaa !2
Hit: load
  %20 = load float, float* %arrayidx7.6, align 8, !tbaa !2
Hit: store
  store float %add.1, float* %arrayidx10.1, align 8, !tbaa !2
Hit: store
  store float %add.2, float* %arrayidx10.2, align 4, !tbaa !2
Hit: store
  store float %add.3, float* %arrayidx10.3, align 16, !tbaa !2
Hit: store
  store float %add.4, float* %arrayidx10.4, align 4, !tbaa !2
Hit: store
  store float %add.5, float* %arrayidx10.5, align 8, !tbaa !2
Hit: store
  store float %add.6, float* %arrayidx10.6, align 4, !tbaa !2
Hit: load
  %6 = load float, float* %arrayidx14.1, align 4, !tbaa !2
Hit: load
  %9 = load float, float* %arrayidx14.2, align 8, !tbaa !2
Hit: load
  %12 = load float, float* %arrayidx14.3, align 4, !tbaa !2
Hit: load
  %15 = load float, float* %arrayidx14.4, align 16, !tbaa !2
Hit: load
  %18 = load float, float* %arrayidx14.5, align 4, !tbaa !2
Hit: load
  %21 = load float, float* %arrayidx14.6, align 8, !tbaa !2
Hit: store
  store float %mul.1, float* %arrayidx.1, align 4, !tbaa !2
Hit: store
  store float %mul.2, float* %arrayidx.2, align 8, !tbaa !2
Hit: store
  store float %mul.3, float* %arrayidx.3, align 4, !tbaa !2
Hit: store
  store float %mul.4, float* %arrayidx.4, align 16, !tbaa !2
Hit: store
  store float %mul.5, float* %arrayidx.5, align 4, !tbaa !2
Hit: store
  store float %mul.6, float* %arrayidx.6, align 8, !tbaa !2
Hit: store
  store float %mul21.1, float* %arrayidx23.1, align 4, !tbaa !2
Hit: store
  store float %mul21.2, float* %arrayidx23.2, align 8, !tbaa !2
Hit: store
  store float %mul21.3, float* %arrayidx23.3, align 4, !tbaa !2
Hit: store
  store float %mul21.4, float* %arrayidx23.4, align 16, !tbaa !2
Hit: store
  store float %mul21.5, float* %arrayidx23.5, align 4, !tbaa !2
Hit: store
  store float %mul21.6, float* %arrayidx23.6, align 8, !tbaa !2
Schedulable: 1
Loop Rolling: s3251
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %26 = zext i8 %25 to i64
Closing BINOP
Gen:   %27 = or i64 %indvars.iv, %26
Operands done!
Generated:   %28 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %27
Gen:   %28 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %27
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 32, !tbaa !2
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !2
  %7 = load float, float* %arrayidx.2, align 8, !tbaa !2
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !2
  %13 = load float, float* %arrayidx.4, align 16, !tbaa !2
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !2
  %19 = load float, float* %arrayidx.6, align 8, !tbaa !2
Operands done!
Generated:   %29 = load float, float* %28, align 1
Gen:   %29 = load float, float* %28, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %30 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %27
Gen:   %30 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %27
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx7, align 32, !tbaa !2
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !2
  %8 = load float, float* %arrayidx7.2, align 8, !tbaa !2
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !2
  %14 = load float, float* %arrayidx7.4, align 16, !tbaa !2
  %17 = load float, float* %arrayidx7.5, align 4, !tbaa !2
  %20 = load float, float* %arrayidx7.6, align 8, !tbaa !2
Operands done!
Generated:   %31 = load float, float* %30, align 1
Gen:   %31 = load float, float* %30, align 1
Generating MATCH
Match: 
  %add = fadd float %1, %2
  %add.1 = fadd float %4, %5
  %add.2 = fadd float %7, %8
  %add.3 = fadd float %10, %11
  %add.4 = fadd float %13, %14
  %add.5 = fadd float %16, %17
  %add.6 = fadd float %19, %20
Operands done!
Generated:   %32 = fadd float %29, %31
Found use: 6:   %mul21.7 = fmul float %24, %add.6
Extracting:   %32 = fadd float %29, %31
Gen:   %33 = fadd float %30, %32
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating MATCH
Match: 
  %indvars.iv.next = or i64 %indvars.iv, 1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
Generating IDENTICAL
Generating INTSEQ
Gen:   %35 = add i64 %27, 1
Operands done!
Generated:   %36 = or i64 %indvars.iv, %35
Found use: 6:   %arrayidx23.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Extracting:   %36 = or i64 %indvars.iv, %35
Gen:   %37 = or i64 %indvars.iv, %36
Operands done!
Generated:   %39 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %37
Gen:   %39 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %37
Generating MATCH
Match: 
  store float %add, float* %arrayidx10, align 4, !tbaa !2
  store float %add.1, float* %arrayidx10.1, align 8, !tbaa !2
  store float %add.2, float* %arrayidx10.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx10.3, align 16, !tbaa !2
  store float %add.4, float* %arrayidx10.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx10.5, align 8, !tbaa !2
  store float %add.6, float* %arrayidx10.6, align 4, !tbaa !2
Operands done!
Generated:   store float %34, float* %39, align 1
Gen:   store float %34, float* %39, align 1
Generating MATCH
Match: 
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %29
Gen:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %29
Generating MATCH
Match: 
  %5 = load float, float* %arrayidx14, align 32, !tbaa !2
  %8 = load float, float* %arrayidx14.1, align 4, !tbaa !2
  %11 = load float, float* %arrayidx14.2, align 8, !tbaa !2
  %14 = load float, float* %arrayidx14.3, align 4, !tbaa !2
  %17 = load float, float* %arrayidx14.4, align 16, !tbaa !2
  %20 = load float, float* %arrayidx14.5, align 4, !tbaa !2
  %23 = load float, float* %arrayidx14.6, align 8, !tbaa !2
Operands done!
Generated:   %41 = load float, float* %40, align 1
Gen:   %41 = load float, float* %40, align 1
Generating MATCH
Match: 
  %mul = fmul float %4, %5
  %mul.1 = fmul float %7, %8
  %mul.2 = fmul float %10, %11
  %mul.3 = fmul float %13, %14
  %mul.4 = fmul float %16, %17
  %mul.5 = fmul float %19, %20
  %mul.6 = fmul float %22, %23
Operands done!
Generated:   %42 = fmul float %33, %41
Gen:   %42 = fmul float %33, %41
Generating MATCH
Match: 
  store float %mul, float* %arrayidx, align 32, !tbaa !2
  store float %mul.1, float* %arrayidx.1, align 4, !tbaa !2
  store float %mul.2, float* %arrayidx.2, align 8, !tbaa !2
  store float %mul.3, float* %arrayidx.3, align 4, !tbaa !2
  store float %mul.4, float* %arrayidx.4, align 16, !tbaa !2
  store float %mul.5, float* %arrayidx.5, align 4, !tbaa !2
  store float %mul.6, float* %arrayidx.6, align 8, !tbaa !2
Operands done!
Generated:   store float %42, float* %30, align 1
Gen:   store float %42, float* %30, align 1
Generating MATCH
Match: 
  %mul21 = fmul float %5, %2
  %mul21.1 = fmul float %8, %add
  %mul21.2 = fmul float %11, %add.1
  %mul21.3 = fmul float %14, %add.2
  %mul21.4 = fmul float %17, %add.3
  %mul21.5 = fmul float %20, %add.4
  %mul21.6 = fmul float %23, %add.5
Generating RECURRENCE
Gen:   %28 = phi float [ %2, %rolled.pre ]
Operands done!
Generated:   %44 = fmul float %42, %28
Gen:   %44 = fmul float %42, %28
Generating MATCH
Match: 
  %arrayidx23 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx23.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx23.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx23.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx23.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx23.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx23.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %45 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %30
Gen:   %45 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %30
Generating MATCH
Match: 
  store float %mul21, float* %arrayidx23, align 32, !tbaa !2
  store float %mul21.1, float* %arrayidx23.1, align 4, !tbaa !2
  store float %mul21.2, float* %arrayidx23.2, align 8, !tbaa !2
  store float %mul21.3, float* %arrayidx23.3, align 4, !tbaa !2
  store float %mul21.4, float* %arrayidx23.4, align 16, !tbaa !2
  store float %mul21.5, float* %arrayidx23.5, align 4, !tbaa !2
  store float %mul21.6, float* %arrayidx23.6, align 8, !tbaa !2
Operands done!
Generated:   store float %44, float* %45, align 1
Gen:   store float %44, float* %45, align 1
Generating MULTI
Graph code generated!
PHI: recurrence rolled.loop,  %35 = fadd float %32, %34
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="1..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
24 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
25 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
26 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
17->0 
22->0 
2->1 
13->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->11 
6->11 
7->11 
14->13 
6->13 
15->13 
8->15 
16->15 
18->17 
4->17 
10->18 
19->18 
20->19 
21->20 
6->20 
7->20 
23->22 
25->22 
19->23 
24->23 
2->24 
26->25 
6->25 
7->25 
27 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
2->27
28 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
15->28
}

Gains: 196 - 51 = 145; Width: 0; Recurrence Profitable; s3251
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 15
IDENTICAL: 7
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 1
BlockSize: 16
Done Loop Roller: 1/1
Optimizing: s252
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.029 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 76
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %t.027 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %mul.7, %for.body5 ]
  %mul.7 = fmul float %14, %15
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %mul.5 = fmul float %10, %11
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
3->1 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
7->14 
8->14 
16 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
3->16
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %mul.5 = fmul float %10, %11
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
3->1 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
7->14 
8->14 
16 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
3->16
}

Done Loop Roller: 0/0
Nothing found in: s252
Optimizing: s253
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.041 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 7
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 10
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 10
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 10
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 10
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 10
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 10
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 10
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 10
Attempting Group:
Attempting Group:
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s253
Optimizing: s254
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.027 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 60
  %x.0 = phi float [ %x.0.pre, %for.cond2.preheader ], [ %7, %for.body5 ]
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !2
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %5 = load float, float* %arrayidx.5, align 4, !tbaa !2
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="5.000000e-01", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
12->0 
2->1 
11->1 
3->2 
4->2 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
13->12 
7->12 
8->12 
14 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
4->14
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %5 = load float, float* %arrayidx.5, align 4, !tbaa !2
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="5.000000e-01", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
12->0 
2->1 
11->1 
3->2 
4->2 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
13->12 
7->12 
8->12 
14 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
4->14
}

Done Loop Roller: 0/0
Nothing found in: s254
Optimizing: s255
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
  %nl.032 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
BlockSize: 69
  %x.031 = phi float [ %x.031.pre, %for.body ], [ %8, %for.body5 ]
  %8 = load float, float* %arrayidx.7, align 4, !tbaa !2
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %y.029 = phi float [ %0, %for.body ], [ %7, %for.body5 ]
  %7 = load float, float* %arrayidx.6, align 8, !tbaa !2
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %1 = load float, float* %arrayidx, align 32, !tbaa !2
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
4 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
6 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="0x3FD54FDF40000000", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
13->1 
3->2 
4->2 
5->4 
6->4 
7->6 
8->7 
9->7 
10->7 
11->10 
12->10 
15->14 
9->14 
10->14 
16 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
6->16
17 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
6->17
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %1 = load float, float* %arrayidx, align 32, !tbaa !2
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
4 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
6 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="0x3FD54FDF40000000", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
13->1 
3->2 
4->2 
5->4 
6->4 
7->6 
8->7 
9->7 
10->7 
11->10 
12->10 
15->14 
9->14 
10->14 
16 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
6->16
17 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
6->17
}

Done Loop Roller: 0/0
Nothing found in: s255
Optimizing: s256
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.051 = phi i32 [ 0, %entry ], [ %inc30, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %indvars.iv53 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next54, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 3
BlockSize: 88
  %0 = phi float [ %.pre, %for.cond6.preheader ], [ %sub10.7, %for.body9.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %0 = phi float [ %.pre, %for.cond6.preheader ], [ %sub10.7, %for.body9.7 ]
  %sub10 = fsub float 1.000000e+00, %0
  %sub10.1 = fsub float 1.000000e+00, %sub10
  %sub10.2 = fsub float 1.000000e+00, %sub10.1
  %sub10.3 = fsub float 1.000000e+00, %sub10.2
  %sub10.4 = fsub float 1.000000e+00, %sub10.3
  %sub10.5 = fsub float 1.000000e+00, %sub10.4
  %sub10.6 = fsub float 1.000000e+00, %sub10.5
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: store
  store float %sub10.1, float* %arrayidx12.1, align 4, !tbaa !2
Hit: store
  store float %sub10.2, float* %arrayidx12.2, align 4, !tbaa !2
Hit: store
  store float %sub10.3, float* %arrayidx12.3, align 4, !tbaa !2
Hit: store
  store float %sub10.4, float* %arrayidx12.4, align 4, !tbaa !2
Hit: store
  store float %sub10.5, float* %arrayidx12.5, align 4, !tbaa !2
Hit: store
  store float %sub10.6, float* %arrayidx12.6, align 4, !tbaa !2
Hit: load
  %3 = load float, float* %arrayidx18.1, align 4, !tbaa !2
Hit: load
  %5 = load float, float* %arrayidx18.2, align 4, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx18.3, align 4, !tbaa !2
Hit: load
  %9 = load float, float* %arrayidx18.4, align 4, !tbaa !2
Hit: load
  %11 = load float, float* %arrayidx18.5, align 4, !tbaa !2
Hit: load
  %13 = load float, float* %arrayidx18.6, align 4, !tbaa !2
Hit: load
  %4 = load float, float* %arrayidx20.1, align 4, !tbaa !2
Hit: load
  %6 = load float, float* %arrayidx20.2, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx20.3, align 4, !tbaa !2
Hit: load
  %10 = load float, float* %arrayidx20.4, align 4, !tbaa !2
Hit: load
  %12 = load float, float* %arrayidx20.5, align 4, !tbaa !2
Hit: load
  %14 = load float, float* %arrayidx20.6, align 4, !tbaa !2
Hit: store
  store float %add.1, float* %arrayidx24.1, align 4, !tbaa !2
Hit: store
  store float %add.2, float* %arrayidx24.2, align 4, !tbaa !2
Hit: store
  store float %add.3, float* %arrayidx24.3, align 4, !tbaa !2
Hit: store
  store float %add.4, float* %arrayidx24.4, align 4, !tbaa !2
Hit: store
  store float %add.5, float* %arrayidx24.5, align 4, !tbaa !2
Hit: store
  store float %add.6, float* %arrayidx24.6, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s256
Generating tree
Generating MATCH
Match: 
  %sub10 = fsub float 1.000000e+00, %0
  %sub10.1 = fsub float 1.000000e+00, %sub10
  %sub10.2 = fsub float 1.000000e+00, %sub10.1
  %sub10.3 = fsub float 1.000000e+00, %sub10.2
  %sub10.4 = fsub float 1.000000e+00, %sub10.3
  %sub10.5 = fsub float 1.000000e+00, %sub10.4
  %sub10.6 = fsub float 1.000000e+00, %sub10.5
Generating IDENTICAL
Generating RECURRENCE
Gen:   %18 = phi float [ %0, %rolled.pre ]
Operands done!
Generated:   %19 = fsub float 1.000000e+00, %18
Found use: 6:   %sub10.7 = fsub float 1.000000e+00, %sub10.6
Extracting:   %19 = fsub float 1.000000e+00, %18
Gen:   %20 = fsub float 1.000000e+00, %19
Generating MATCH
Match: 
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %22 = zext i8 %18 to i64
Closing BINOP
Gen:   %23 = add nuw nsw i64 %indvars.iv, %22
Operands done!
Generated:   %24 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %23
Gen:   %24 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %23
Generating MATCH
Match: 
  store float %sub10, float* %arrayidx12, align 4, !tbaa !2
  store float %sub10.1, float* %arrayidx12.1, align 4, !tbaa !2
  store float %sub10.2, float* %arrayidx12.2, align 4, !tbaa !2
  store float %sub10.3, float* %arrayidx12.3, align 4, !tbaa !2
  store float %sub10.4, float* %arrayidx12.4, align 4, !tbaa !2
  store float %sub10.5, float* %arrayidx12.5, align 4, !tbaa !2
  store float %sub10.6, float* %arrayidx12.6, align 4, !tbaa !2
Operands done!
Generated:   store float %20, float* %24, align 1
Gen:   store float %20, float* %24, align 1
Generating MATCH
Match: 
  %arrayidx18 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv53
  %arrayidx18.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv53
  %arrayidx18.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv53
  %arrayidx18.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv53
  %arrayidx18.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv53
  %arrayidx18.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv53
  %arrayidx18.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv53
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %25 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %23, i64 %indvars.iv53
Gen:   %25 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %23, i64 %indvars.iv53
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx18, align 4, !tbaa !2
  %4 = load float, float* %arrayidx18.1, align 4, !tbaa !2
  %6 = load float, float* %arrayidx18.2, align 4, !tbaa !2
  %8 = load float, float* %arrayidx18.3, align 4, !tbaa !2
  %10 = load float, float* %arrayidx18.4, align 4, !tbaa !2
  %12 = load float, float* %arrayidx18.5, align 4, !tbaa !2
  %14 = load float, float* %arrayidx18.6, align 4, !tbaa !2
Operands done!
Generated:   %26 = load float, float* %25, align 1
Gen:   %26 = load float, float* %25, align 1
Generating MATCH
Match: 
  %arrayidx20 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx20.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx20.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx20.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx20.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx20.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx20.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %23
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %23
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx20, align 4, !tbaa !2
  %5 = load float, float* %arrayidx20.1, align 4, !tbaa !2
  %7 = load float, float* %arrayidx20.2, align 4, !tbaa !2
  %9 = load float, float* %arrayidx20.3, align 4, !tbaa !2
  %11 = load float, float* %arrayidx20.4, align 4, !tbaa !2
  %13 = load float, float* %arrayidx20.5, align 4, !tbaa !2
  %15 = load float, float* %arrayidx20.6, align 4, !tbaa !2
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %mul = fmul float %2, %3
  %mul.1 = fmul float %4, %5
  %mul.2 = fmul float %6, %7
  %mul.3 = fmul float %8, %9
  %mul.4 = fmul float %10, %11
  %mul.5 = fmul float %12, %13
  %mul.6 = fmul float %14, %15
Operands done!
Generated:   %29 = fmul float %26, %28
Gen:   %29 = fmul float %26, %28
Generating MATCH
Match: 
  %add = fadd float %sub10, %mul
  %add.1 = fadd float %sub10.1, %mul.1
  %add.2 = fadd float %sub10.2, %mul.2
  %add.3 = fadd float %sub10.3, %mul.3
  %add.4 = fadd float %sub10.4, %mul.4
  %add.5 = fadd float %sub10.5, %mul.5
  %add.6 = fadd float %sub10.6, %mul.6
Operands done!
Generated:   %30 = fadd float %20, %29
Gen:   %30 = fadd float %20, %29
Generating MATCH
Match: 
  %arrayidx24 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv53
  %arrayidx24.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv53
  %arrayidx24.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv53
  %arrayidx24.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv53
  %arrayidx24.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv53
  %arrayidx24.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv53
  %arrayidx24.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv53
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %31 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %23, i64 %indvars.iv53
Gen:   %31 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %23, i64 %indvars.iv53
Generating MATCH
Match: 
  store float %add, float* %arrayidx24, align 4, !tbaa !2
  store float %add.1, float* %arrayidx24.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx24.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx24.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx24.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx24.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx24.6, align 4, !tbaa !2
Operands done!
Generated:   store float %30, float* %31, align 1
Gen:   store float %30, float* %31, align 1
Generating MULTI
Graph code generated!
PHI: recurrence rolled.loop,  %20 = fsub float 1.000000e+00, %19
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fsub", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="1.000000e+00", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
11->0 
2->1 
5->1 
3->2 
4->2 
2->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
21->11 
2->12 
13->12 
14->13 
18->13 
15->14 
16->15 
7->15 
8->15 
17->15 
19->18 
20->19 
7->19 
8->19 
22->21 
7->21 
8->21 
17->21 
23 [label="fsub", style="filled" , fillcolor="#f2eb5c", shape=box];
2->23
}

Gains: 151 - 32 = 119; Width: 0; Recurrence Profitable; s256
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 11
IDENTICAL: 8
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 1
BlockSize: 13
Done Loop Roller: 1/1
Optimizing: s257
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.054 = phi i32 [ 0, %entry ], [ %inc32, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 6
  %indvars.iv55 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next56, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 67
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx11.1, align 4, !tbaa !2
Hit: load
  %5 = load float, float* %arrayidx11.2, align 4, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx11.3, align 4, !tbaa !2
Hit: load
  %9 = load float, float* %arrayidx11.4, align 4, !tbaa !2
Hit: load
  %11 = load float, float* %arrayidx11.5, align 4, !tbaa !2
Hit: load
  %13 = load float, float* %arrayidx11.6, align 4, !tbaa !2
Hit: load
  %15 = load float, float* %arrayidx11.7, align 4, !tbaa !2
Hit: load
  %4 = load float, float* %arrayidx22.1, align 4, !tbaa !2
Hit: load
  %6 = load float, float* %arrayidx22.2, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx22.3, align 4, !tbaa !2
Hit: load
  %10 = load float, float* %arrayidx22.4, align 4, !tbaa !2
Hit: load
  %12 = load float, float* %arrayidx22.5, align 4, !tbaa !2
Hit: load
  %14 = load float, float* %arrayidx22.6, align 4, !tbaa !2
Hit: load
  %16 = load float, float* %arrayidx22.7, align 4, !tbaa !2
Hit: store
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !2
Hit: store
  store float %add.2, float* %arrayidx11.2, align 4, !tbaa !2
Hit: store
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !2
Hit: store
  store float %add.4, float* %arrayidx11.4, align 4, !tbaa !2
Hit: store
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !2
Hit: store
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !2
Hit: store
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s257
Generating tree
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv55
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv55
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv55
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv55
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv55
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv55
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv55
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv55
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %18 = zext i8 %17 to i64
Closing BINOP
Gen:   %19 = or i64 %indvars.iv, %18
Generating IDENTICAL
Operands done!
Generated:   %20 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %19, i64 %indvars.iv55
Gen:   %20 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %19, i64 %indvars.iv55
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx11, align 4, !tbaa !2
  %3 = load float, float* %arrayidx11.1, align 4, !tbaa !2
  %5 = load float, float* %arrayidx11.2, align 4, !tbaa !2
  %7 = load float, float* %arrayidx11.3, align 4, !tbaa !2
  %9 = load float, float* %arrayidx11.4, align 4, !tbaa !2
  %11 = load float, float* %arrayidx11.5, align 4, !tbaa !2
  %13 = load float, float* %arrayidx11.6, align 4, !tbaa !2
  %15 = load float, float* %arrayidx11.7, align 4, !tbaa !2
Operands done!
Generated:   %21 = load float, float* %20, align 1
Gen:   %21 = load float, float* %20, align 1
Generating MATCH
Match: 
  %sub14 = fsub float %1, %.pre
  %sub14.1 = fsub float %3, %.pre
  %sub14.2 = fsub float %5, %.pre
  %sub14.3 = fsub float %7, %.pre
  %sub14.4 = fsub float %9, %.pre
  %sub14.5 = fsub float %11, %.pre
  %sub14.6 = fsub float %13, %.pre
  %sub14.7 = fsub float %15, %.pre
Generating IDENTICAL
Operands done!
Generated:   %22 = fsub float %21, %.pre
Found use: 7:   store float %sub14.7, float* %arrayidx16, align 4, !tbaa !2
Extracting:   %22 = fsub float %21, %.pre
Gen:   %23 = fsub float %22, %.pre
Generating MATCH
Match: 
  %arrayidx22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv55
  %arrayidx22.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv55
  %arrayidx22.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv55
  %arrayidx22.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv55
  %arrayidx22.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv55
  %arrayidx22.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv55
  %arrayidx22.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv55
  %arrayidx22.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv55
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %25 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %20, i64 %indvars.iv55
Gen:   %25 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %20, i64 %indvars.iv55
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx22, align 4, !tbaa !2
  %5 = load float, float* %arrayidx22.1, align 4, !tbaa !2
  %7 = load float, float* %arrayidx22.2, align 4, !tbaa !2
  %9 = load float, float* %arrayidx22.3, align 4, !tbaa !2
  %11 = load float, float* %arrayidx22.4, align 4, !tbaa !2
  %13 = load float, float* %arrayidx22.5, align 4, !tbaa !2
  %15 = load float, float* %arrayidx22.6, align 4, !tbaa !2
  %17 = load float, float* %arrayidx22.7, align 4, !tbaa !2
Operands done!
Generated:   %26 = load float, float* %25, align 1
Gen:   %26 = load float, float* %25, align 1
Generating MATCH
Match: 
  %add = fadd float %sub14, %3
  %add.1 = fadd float %sub14.1, %5
  %add.2 = fadd float %sub14.2, %7
  %add.3 = fadd float %sub14.3, %9
  %add.4 = fadd float %sub14.4, %11
  %add.5 = fadd float %sub14.5, %13
  %add.6 = fadd float %sub14.6, %15
  %add.7 = fadd float %sub14.7, %17
Operands done!
Generated:   %27 = fadd float %23, %26
Gen:   %27 = fadd float %23, %26
Generating MATCH
Match: 
  store float %add, float* %arrayidx11, align 4, !tbaa !2
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx11.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx11.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !2
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !2
Operands done!
Generated:   store float %27, float* %21, align 1
Gen:   store float %27, float* %21, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx11, align 4, !tbaa !2
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx11.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx11.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !2
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !2
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fsub", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
4->0 
2->1 
12->1 
3->2 
11->2 
4->3 
5->4 
6->4 
7->4 
10->4 
8->7 
9->7 
13->12 
14->13 
6->13 
7->13 
10->13 
15 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->15
}

Gains: 117 - 25 = 92; Width: 8; Profitable; s257
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 7
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s258
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.048 = phi i32 [ 0, %entry ], [ %inc27, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 171
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %s.046 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %s.1.7, %for.body5 ]
  %s.1.7 = select i1 %cmp6.7, float %mul.7, float %s.1.6
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Found possible recurrence! Init:   %s.046 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %s.1.7, %for.body5 ]
  %s.1 = select i1 %cmp6, float %mul, float %s.046
  %s.1.1 = select i1 %cmp6.1, float %mul.1, float %s.1
  %s.1.2 = select i1 %cmp6.2, float %mul.2, float %s.1.1
  %s.1.3 = select i1 %cmp6.3, float %mul.3, float %s.1.2
  %s.1.4 = select i1 %cmp6.4, float %mul.4, float %s.1.3
  %s.1.5 = select i1 %cmp6.5, float %mul.5, float %s.1.4
  %s.1.6 = select i1 %cmp6.6, float %mul.6, float %s.1.5
  %s.1.7 = select i1 %cmp6.7, float %mul.7, float %s.1.6
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %cmp6.7 = fcmp ogt float %28, 0.000000e+00
Invalid dependence found!
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next.5 = or i64 %indvars.iv, 6
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
3->1 
4->3 
5->4 
6->4 
6->4 
7->4 
8->7 
9->7 
11->10 
6->10 
7->10 
12 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->12
13 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->13
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->14
15 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->17
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->18
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next.5 = or i64 %indvars.iv, 6
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
3->1 
4->3 
5->4 
6->4 
6->4 
7->4 
8->7 
9->7 
11->10 
6->10 
7->10 
12 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->12
13 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->13
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->14
15 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->17
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->18
}

Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Found possible recurrence! Init:   %s.046 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %s.1.7, %for.body5 ]
  %s.1 = select i1 %cmp6, float %mul, float %s.046
  %s.1.1 = select i1 %cmp6.1, float %mul.1, float %s.1
  %s.1.2 = select i1 %cmp6.2, float %mul.2, float %s.1.1
  %s.1.3 = select i1 %cmp6.3, float %mul.3, float %s.1.2
  %s.1.4 = select i1 %cmp6.4, float %mul.4, float %s.1.3
  %s.1.5 = select i1 %cmp6.5, float %mul.5, float %s.1.4
  %s.1.6 = select i1 %cmp6.6, float %mul.6, float %s.1.5
  %s.1.7 = select i1 %cmp6.7, float %mul.7, float %s.1.6
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %3 = load float, float* %arrayidx21, align 32, !tbaa !4
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="select", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="fcmp", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="0.000000e+00", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
21->0 
2->1 
14->1 
3->2 
18->2 
4->3 
13->3 
17->3 
5->4 
12->4 
6->5 
7->6 
8->6 
9->6 
10->9 
11->9 
14->13 
14->13 
15->14 
16->15 
8->15 
9->15 
3->17 
19->18 
20->19 
8->19 
9->19 
22->21 
8->21 
9->21 
23 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
3->23
24 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
3->24
25 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->25
26 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->26
27 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->27
28 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->28
29 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->29
30 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->30
31 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->31
32 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->32
33 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->33
34 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->34
35 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->35
36 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->36
37 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->37
38 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->38
39 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->39
40 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->40
41 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->41
42 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->42
43 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->43
44 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->44
45 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->45
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Found possible recurrence! Init:   %s.046 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %s.1.7, %for.body5 ]
  %s.1 = select i1 %cmp6, float %mul, float %s.046
  %s.1.1 = select i1 %cmp6.1, float %mul.1, float %s.1
  %s.1.2 = select i1 %cmp6.2, float %mul.2, float %s.1.1
  %s.1.3 = select i1 %cmp6.3, float %mul.3, float %s.1.2
  %s.1.4 = select i1 %cmp6.4, float %mul.4, float %s.1.3
  %s.1.5 = select i1 %cmp6.5, float %mul.5, float %s.1.4
  %s.1.6 = select i1 %cmp6.6, float %mul.6, float %s.1.5
  %s.1.7 = select i1 %cmp6.7, float %mul.7, float %s.1.6
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %3 = load float, float* %arrayidx21, align 32, !tbaa !4
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="select", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="fcmp", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="0.000000e+00", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
21->0 
2->1 
14->1 
3->2 
18->2 
4->3 
13->3 
17->3 
5->4 
12->4 
6->5 
7->6 
8->6 
9->6 
10->9 
11->9 
14->13 
14->13 
15->14 
16->15 
8->15 
9->15 
3->17 
19->18 
20->19 
8->19 
9->19 
22->21 
8->21 
9->21 
23 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
3->23
24 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
3->24
25 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->25
26 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->26
27 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->27
28 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->28
29 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->29
30 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->30
31 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
4->31
32 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->32
33 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->33
34 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->34
35 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->35
36 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->36
37 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->37
38 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->38
39 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->39
40 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->40
41 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->41
42 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->42
43 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->43
44 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->44
45 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
13->45
}

Done Loop Roller: 0/0
Nothing found in: s258
Optimizing: s261
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.040 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 102
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %mul.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %mul.4 = fmul float %19, %20
Invalid dependence found!
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
12 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->12
13 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->13
14 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->14
15 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->15
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->16
17 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->17
18 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->21
22 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->22
23 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->23
24 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->24
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
12 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->12
13 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->13
14 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->14
15 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->15
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->16
17 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->17
18 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->21
22 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->22
23 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->23
24 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->24
}

Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Invalid:   %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
4->0 
2->1 
13->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->11 
6->11 
7->11 
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->14
15 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->17
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->19
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Invalid:   %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
4->0 
2->1 
13->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->11 
6->11 
7->11 
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->14
15 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->17
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
7->19
}

Building reduction
  store float %add10.5, float* %arrayidx.5, align 4, !tbaa !2
  %add10.5 = fadd float %add.5, %mul.4
BOs:
  %add10.5 = fadd float %add.5, %mul.4
  %add.5 = fadd float %21, %22
Operands:
  %21 = load float, float* %arrayidx.5, align 4, !tbaa !2
  %22 = load float, float* %arrayidx7.5, align 4, !tbaa !2
  %mul.4 = fmul float %19, %20
Operands:
  %mul.4 = fmul float %19, %20
  %21 = load float, float* %arrayidx.5, align 4, !tbaa !2
  %22 = load float, float* %arrayidx7.5, align 4, !tbaa !2
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s261
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %mul.4 = fmul float %19, %20
inst:   %21 = load float, float* %arrayidx.5, align 4, !tbaa !2
inst:   %22 = load float, float* %arrayidx7.5, align 4, !tbaa !2
Non constants
Array Type: 3:float
Created array:   %33 = alloca float, i8 3, align 4
Gen:   %39 = load float, float* %38, align 4
Closing REDUCTION
Found use: 0:   store float %add10.5, float* %arrayidx.5, align 4, !tbaa !2
Extracting:   %41 = fadd float %38, %40
Gen:   %41 = fadd float %38, %40
Graph code generated!
Root:
  %add10.5 = fadd float %add.5, %mul.4
  %add.5 = fadd float %21, %22
Root size: 2
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 2 - 42 = -40; Width: 2; Reduction Unprofitable; s261
Building reduction
  store float %add10.4, float* %arrayidx.4, align 4, !tbaa !2
  %add10.4 = fadd float %add.4, %mul.3
BOs:
  %add10.4 = fadd float %add.4, %mul.3
  %add.4 = fadd float %17, %18
Operands:
  %17 = load float, float* %arrayidx.4, align 4, !tbaa !2
  %18 = load float, float* %arrayidx7.4, align 4, !tbaa !2
  %mul.3 = fmul float %15, %16
Operands:
  %mul.3 = fmul float %15, %16
  %17 = load float, float* %arrayidx.4, align 4, !tbaa !2
  %18 = load float, float* %arrayidx7.4, align 4, !tbaa !2
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s261
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %mul.3 = fmul float %15, %16
inst:   %17 = load float, float* %arrayidx.4, align 4, !tbaa !2
inst:   %18 = load float, float* %arrayidx7.4, align 4, !tbaa !2
Non constants
Array Type: 3:float
Created array:   %33 = alloca float, i8 3, align 4
Gen:   %39 = load float, float* %38, align 4
Closing REDUCTION
Found use: 0:   store float %add10.4, float* %arrayidx.4, align 4, !tbaa !2
Extracting:   %41 = fadd float %38, %40
Gen:   %41 = fadd float %38, %40
Graph code generated!
Root:
  %add10.4 = fadd float %add.4, %mul.3
  %add.4 = fadd float %17, %18
Root size: 2
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 2 - 42 = -40; Width: 2; Reduction Unprofitable; s261
Building reduction
  store float %add10.3, float* %arrayidx.3, align 4, !tbaa !2
  %add10.3 = fadd float %add.3, %mul.2
BOs:
  %add10.3 = fadd float %add.3, %mul.2
  %add.3 = fadd float %13, %14
Operands:
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !2
  %14 = load float, float* %arrayidx7.3, align 4, !tbaa !2
  %mul.2 = fmul float %11, %12
Operands:
  %mul.2 = fmul float %11, %12
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !2
  %14 = load float, float* %arrayidx7.3, align 4, !tbaa !2
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s261
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %mul.2 = fmul float %11, %12
inst:   %13 = load float, float* %arrayidx.3, align 4, !tbaa !2
inst:   %14 = load float, float* %arrayidx7.3, align 4, !tbaa !2
Non constants
Array Type: 3:float
Created array:   %33 = alloca float, i8 3, align 4
Gen:   %39 = load float, float* %38, align 4
Closing REDUCTION
Found use: 0:   store float %add10.3, float* %arrayidx.3, align 4, !tbaa !2
Extracting:   %41 = fadd float %38, %40
Gen:   %41 = fadd float %38, %40
Graph code generated!
Root:
  %add10.3 = fadd float %add.3, %mul.2
  %add.3 = fadd float %13, %14
Root size: 2
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 2 - 42 = -40; Width: 2; Reduction Unprofitable; s261
Building reduction
  store float %add10.2, float* %arrayidx.2, align 4, !tbaa !2
  %add10.2 = fadd float %add.2, %mul.1
BOs:
  %add10.2 = fadd float %add.2, %mul.1
  %add.2 = fadd float %9, %10
Operands:
  %9 = load float, float* %arrayidx.2, align 4, !tbaa !2
  %10 = load float, float* %arrayidx7.2, align 4, !tbaa !2
  %mul.1 = fmul float %7, %8
Operands:
  %mul.1 = fmul float %7, %8
  %9 = load float, float* %arrayidx.2, align 4, !tbaa !2
  %10 = load float, float* %arrayidx7.2, align 4, !tbaa !2
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s261
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %mul.1 = fmul float %7, %8
inst:   %9 = load float, float* %arrayidx.2, align 4, !tbaa !2
inst:   %10 = load float, float* %arrayidx7.2, align 4, !tbaa !2
Non constants
Array Type: 3:float
Created array:   %33 = alloca float, i8 3, align 4
Gen:   %39 = load float, float* %38, align 4
Closing REDUCTION
Found use: 0:   store float %add10.2, float* %arrayidx.2, align 4, !tbaa !2
Extracting:   %41 = fadd float %38, %40
Gen:   %41 = fadd float %38, %40
Graph code generated!
Root:
  %add10.2 = fadd float %add.2, %mul.1
  %add.2 = fadd float %9, %10
Root size: 2
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 2 - 42 = -40; Width: 2; Reduction Unprofitable; s261
Building reduction
  store float %add10.6, float* %arrayidx.6, align 4, !tbaa !2
  %add10.6 = fadd float %add.6, %mul.5
BOs:
  %add10.6 = fadd float %add.6, %mul.5
  %add.6 = fadd float %25, %26
Operands:
  %25 = load float, float* %arrayidx.6, align 4, !tbaa !2
  %26 = load float, float* %arrayidx7.6, align 4, !tbaa !2
  %mul.5 = fmul float %23, %24
Operands:
  %mul.5 = fmul float %23, %24
  %25 = load float, float* %arrayidx.6, align 4, !tbaa !2
  %26 = load float, float* %arrayidx7.6, align 4, !tbaa !2
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s261
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %mul.5 = fmul float %23, %24
inst:   %25 = load float, float* %arrayidx.6, align 4, !tbaa !2
inst:   %26 = load float, float* %arrayidx7.6, align 4, !tbaa !2
Non constants
Array Type: 3:float
Created array:   %33 = alloca float, i8 3, align 4
Gen:   %39 = load float, float* %38, align 4
Closing REDUCTION
Found use: 0:   store float %add10.6, float* %arrayidx.6, align 4, !tbaa !2
Extracting:   %41 = fadd float %38, %40
Gen:   %41 = fadd float %38, %40
Graph code generated!
Root:
  %add10.6 = fadd float %add.6, %mul.5
  %add.6 = fadd float %25, %26
Root size: 2
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 2 - 42 = -40; Width: 2; Reduction Unprofitable; s261
Building reduction
  store float %add10.1, float* %arrayidx.1, align 4, !tbaa !2
  %add10.1 = fadd float %add.1, %mul
BOs:
  %add10.1 = fadd float %add.1, %mul
  %add.1 = fadd float %5, %6
Operands:
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !2
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !2
  %mul = fmul float %3, %4
Operands:
  %mul = fmul float %3, %4
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !2
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !2
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s261
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %mul = fmul float %3, %4
inst:   %5 = load float, float* %arrayidx.1, align 4, !tbaa !2
inst:   %6 = load float, float* %arrayidx7.1, align 4, !tbaa !2
Non constants
Array Type: 3:float
Created array:   %33 = alloca float, i8 3, align 4
Gen:   %39 = load float, float* %38, align 4
Closing REDUCTION
Found use: 0:   store float %add10.1, float* %arrayidx.1, align 4, !tbaa !2
Extracting:   %41 = fadd float %38, %40
Gen:   %41 = fadd float %38, %40
Graph code generated!
Root:
  %add10.1 = fadd float %add.1, %mul
  %add.1 = fadd float %5, %6
Root size: 2
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 2 - 42 = -40; Width: 2; Reduction Unprofitable; s261
Building reduction
  store float %add10, float* %arrayidx, align 4, !tbaa !2
  %add10 = fadd float %add, %0
BOs:
  %add10 = fadd float %add, %0
  %add = fadd float %1, %2
Operands:
  %1 = load float, float* %arrayidx, align 4, !tbaa !2
  %2 = load float, float* %arrayidx7, align 4, !tbaa !2
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %mul.7, %for.body5.7 ]
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %mul.7, %for.body5.7 ]
  %1 = load float, float* %arrayidx, align 4, !tbaa !2
  %2 = load float, float* %arrayidx7, align 4, !tbaa !2
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s261
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %0 = phi float [ %.pre, %for.cond2.preheader ], [ %mul.7, %for.body5.7 ]
inst:   %1 = load float, float* %arrayidx, align 4, !tbaa !2
inst:   %2 = load float, float* %arrayidx7, align 4, !tbaa !2
Non constants
Array Type: 3:float
Created array:   %33 = alloca float, i8 3, align 4
Gen:   %39 = load float, float* %38, align 4
Closing REDUCTION
Found use: 0:   store float %add10, float* %arrayidx, align 4, !tbaa !2
Extracting:   %41 = fadd float %38, %40
Gen:   %41 = fadd float %38, %40
Graph code generated!
Root:
  %add10 = fadd float %add, %0
  %add = fadd float %1, %2
Root size: 2
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 2 - 42 = -40; Width: 2; Reduction Unprofitable; s261
BlockSize: 15
Attempting Group:
Attempting Group:
Building reduction
  store float %add10.7, float* %arrayidx.7, align 4, !tbaa !2
  %add10.7 = fadd float %add.7, %mul.6
BOs:
  %add10.7 = fadd float %add.7, %mul.6
  %add.7 = fadd float %29, %30
Operands:
  %29 = load float, float* %arrayidx.7, align 4, !tbaa !2
  %30 = load float, float* %arrayidx7.7, align 4, !tbaa !2
  %mul.6 = fmul float %27, %28
Operands:
  %mul.6 = fmul float %27, %28
  %29 = load float, float* %arrayidx.7, align 4, !tbaa !2
  %30 = load float, float* %arrayidx7.7, align 4, !tbaa !2
ReductionNode
Creating Node
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s261
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %mul.6 = fmul float %27, %28
inst:   %29 = load float, float* %arrayidx.7, align 4, !tbaa !2
inst:   %30 = load float, float* %arrayidx7.7, align 4, !tbaa !2
Non constants
Array Type: 3:float
Created array:   %33 = alloca float, i8 3, align 4
Gen:   %39 = load float, float* %38, align 4
Closing REDUCTION
Found use: 0:   store float %add10.7, float* %arrayidx.7, align 4, !tbaa !2
Extracting:   %41 = fadd float %38, %40
Gen:   %41 = fadd float %38, %40
Graph code generated!
Root:
  %add10.7 = fadd float %add.7, %mul.6
  %add.7 = fadd float %29, %30
Root size: 2
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 2 - 42 = -40; Width: 2; Reduction Unprofitable; s261
Done Loop Roller: 0/8
Optimizing: s271
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.029 = phi i32 [ 0, %entry ], [ %inc15, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s271
Optimizing: s272
BlockSize: 9
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.043 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 15
Attempting Group:
Attempting Group:
BlockSize: 5
BlockSize: 15
Attempting Group:
Attempting Group:
BlockSize: 5
BlockSize: 15
Attempting Group:
Attempting Group:
BlockSize: 5
BlockSize: 15
Attempting Group:
Attempting Group:
BlockSize: 5
BlockSize: 15
Attempting Group:
Attempting Group:
BlockSize: 5
BlockSize: 15
Attempting Group:
Attempting Group:
BlockSize: 5
BlockSize: 15
Attempting Group:
Attempting Group:
BlockSize: 5
BlockSize: 15
Attempting Group:
Attempting Group:
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s272
Optimizing: s273
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.051 = phi i32 [ 0, %entry ], [ %inc31, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 12
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %if.end.7 ]
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 17
Attempting Group:
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 17
Attempting Group:
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 17
Attempting Group:
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 17
Attempting Group:
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 17
Attempting Group:
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 17
Attempting Group:
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 17
Attempting Group:
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 8
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s273
Optimizing: s274
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.052 = phi i32 [ 0, %entry ], [ %inc31, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 13
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
Attempting Group:
BlockSize: 5
Attempting Group:
Building reduction
  store float %add19, float* %arrayidx18, align 32, !tbaa !4
  %add19 = fadd float %add, %3
BlockSize: 2
Attempting Group:
BlockSize: 13
Attempting Group:
BlockSize: 2
Attempting Group:
BlockSize: 5
Attempting Group:
Building reduction
  store float %add19.1, float* %arrayidx18.1, align 4, !tbaa !4
  %add19.1 = fadd float %add.1, %7
BlockSize: 13
Attempting Group:
BlockSize: 2
Attempting Group:
BlockSize: 5
Attempting Group:
Building reduction
  store float %add19.2, float* %arrayidx18.2, align 8, !tbaa !4
  %add19.2 = fadd float %add.2, %11
BlockSize: 13
Attempting Group:
BlockSize: 2
Attempting Group:
BlockSize: 5
Attempting Group:
Building reduction
  store float %add19.3, float* %arrayidx18.3, align 4, !tbaa !4
  %add19.3 = fadd float %add.3, %15
BlockSize: 13
Attempting Group:
BlockSize: 2
Attempting Group:
BlockSize: 5
Attempting Group:
Building reduction
  store float %add19.4, float* %arrayidx18.4, align 16, !tbaa !4
  %add19.4 = fadd float %add.4, %19
BlockSize: 13
Attempting Group:
BlockSize: 2
Attempting Group:
BlockSize: 5
Attempting Group:
Building reduction
  store float %add19.5, float* %arrayidx18.5, align 4, !tbaa !4
  %add19.5 = fadd float %add.5, %23
BlockSize: 13
Attempting Group:
BlockSize: 2
Attempting Group:
BlockSize: 5
Attempting Group:
Building reduction
  store float %add19.6, float* %arrayidx18.6, align 8, !tbaa !4
  %add19.6 = fadd float %add.6, %27
BlockSize: 13
Attempting Group:
BlockSize: 2
Attempting Group:
BlockSize: 5
Attempting Group:
Building reduction
  store float %add19.7, float* %arrayidx18.7, align 4, !tbaa !4
  %add19.7 = fadd float %add.7, %31
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s274
Optimizing: s275
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.054 = phi i32 [ 0, %entry ], [ %inc32, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv56 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next57, %for.inc27 ]
BlockSize: 67
  %1 = phi float [ %add.7, %for.body10.7 ], [ %0, %for.body5 ]
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body10.7 ], [ 1, %for.body5 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %1 = phi float [ %add.7, %for.body10.7 ], [ %0, %for.body5 ]
  %add = fadd float %1, %mul
  %add.1 = fadd float %add, %mul.1
  %add.2 = fadd float %add.1, %mul.2
  %add.3 = fadd float %add.2, %mul.3
  %add.4 = fadd float %add.3, %mul.4
  %add.5 = fadd float %add.4, %mul.5
  %add.6 = fadd float %add.5, %mul.6
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx18.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx18.2, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx18.3, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx18.4, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx18.5, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx18.6, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx22.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx22.2, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx22.3, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx22.4, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx22.5, align 4, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx22.6, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx26.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx26.2, align 4, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx26.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx26.4, align 4, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx26.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx26.6, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s275
Generating tree
Generating MATCH
Match: 
  %arrayidx18 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv56
  %arrayidx18.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv56
  %arrayidx18.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv56
  %arrayidx18.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv56
  %arrayidx18.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv56
  %arrayidx18.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv56
  %arrayidx18.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv56
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %19 = zext i8 %18 to i64
Closing BINOP
Gen:   %20 = add nuw nsw i64 %indvars.iv, %19
Generating IDENTICAL
Operands done!
Generated:   %21 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %20, i64 %indvars.iv56
Gen:   %21 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %20, i64 %indvars.iv56
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx18, align 4, !tbaa !4
  %4 = load float, float* %arrayidx18.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx18.2, align 4, !tbaa !4
  %8 = load float, float* %arrayidx18.3, align 4, !tbaa !4
  %10 = load float, float* %arrayidx18.4, align 4, !tbaa !4
  %12 = load float, float* %arrayidx18.5, align 4, !tbaa !4
  %14 = load float, float* %arrayidx18.6, align 4, !tbaa !4
Operands done!
Generated:   %22 = load float, float* %21, align 1
Gen:   %22 = load float, float* %21, align 1
Generating MATCH
Match: 
  %arrayidx22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv, i64 %indvars.iv56
  %arrayidx22.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next, i64 %indvars.iv56
  %arrayidx22.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv56
  %arrayidx22.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv56
  %arrayidx22.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv56
  %arrayidx22.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv56
  %arrayidx22.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv56
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %23 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %20, i64 %indvars.iv56
Gen:   %23 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %20, i64 %indvars.iv56
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx22, align 4, !tbaa !4
  %5 = load float, float* %arrayidx22.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx22.2, align 4, !tbaa !4
  %9 = load float, float* %arrayidx22.3, align 4, !tbaa !4
  %11 = load float, float* %arrayidx22.4, align 4, !tbaa !4
  %13 = load float, float* %arrayidx22.5, align 4, !tbaa !4
  %15 = load float, float* %arrayidx22.6, align 4, !tbaa !4
Operands done!
Generated:   %24 = load float, float* %23, align 1
Gen:   %24 = load float, float* %23, align 1
Generating MATCH
Match: 
  %mul = fmul float %2, %3
  %mul.1 = fmul float %4, %5
  %mul.2 = fmul float %6, %7
  %mul.3 = fmul float %8, %9
  %mul.4 = fmul float %10, %11
  %mul.5 = fmul float %12, %13
  %mul.6 = fmul float %14, %15
Operands done!
Generated:   %25 = fmul float %22, %24
Gen:   %25 = fmul float %22, %24
Generating MATCH
Match: 
  %add = fadd float %1, %mul
  %add.1 = fadd float %add, %mul.1
  %add.2 = fadd float %add.1, %mul.2
  %add.3 = fadd float %add.2, %mul.3
  %add.4 = fadd float %add.3, %mul.4
  %add.5 = fadd float %add.4, %mul.5
  %add.6 = fadd float %add.5, %mul.6
Generating RECURRENCE
Gen:   %19 = phi float [ %1, %rolled.pre ]
Operands done!
Generated:   %27 = fadd float %19, %26
Found use: 6:   %add.7 = fadd float %add.6, %mul.7
Extracting:   %27 = fadd float %19, %26
Gen:   %28 = fadd float %20, %27
Generating MATCH
Match: 
  %arrayidx26 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv56
  %arrayidx26.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv56
  %arrayidx26.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv56
  %arrayidx26.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv56
  %arrayidx26.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv56
  %arrayidx26.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv56
  %arrayidx26.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv56
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %30 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %22, i64 %indvars.iv56
Gen:   %30 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %22, i64 %indvars.iv56
Generating MATCH
Match: 
  store float %add, float* %arrayidx26, align 4, !tbaa !4
  store float %add.1, float* %arrayidx26.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx26.2, align 4, !tbaa !4
  store float %add.3, float* %arrayidx26.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx26.4, align 4, !tbaa !4
  store float %add.5, float* %arrayidx26.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx26.6, align 4, !tbaa !4
Operands done!
Generated:   store float %28, float* %30, align 1
Gen:   store float %28, float* %30, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %28 = fadd float %20, %27
Root:
  store float %add, float* %arrayidx26, align 4, !tbaa !4
  store float %add.1, float* %arrayidx26.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx26.2, align 4, !tbaa !4
  store float %add.3, float* %arrayidx26.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx26.4, align 4, !tbaa !4
  store float %add.5, float* %arrayidx26.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx26.6, align 4, !tbaa !4
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
15->0 
2->1 
3->1 
1->2 
4->3 
12->3 
5->4 
6->5 
7->5 
8->5 
11->5 
9->8 
10->8 
13->12 
14->13 
7->13 
8->13 
11->13 
16->15 
7->15 
8->15 
11->15 
17 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->17
}

Gains: 116 - 27 = 89; Width: 7; Recurrence Profitable; s275
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 0
BlockSize: 3
BlockSize: 10
Done Loop Roller: 1/1
Optimizing: s2275
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.064 = phi i32 [ 0, %entry ], [ %inc39, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %indvars.iv65 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next66, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 13
Attempting Group:
BlockSize: 83
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %6 = load float, float* %arrayidx11.1, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx11.2, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx11.3, align 4, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx11.4, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx11.5, align 4, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx11.6, align 4, !tbaa !4
Hit: load
  %24 = load float, float* %arrayidx11.7, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx15.1, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx15.2, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx15.3, align 4, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx15.4, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx15.5, align 4, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx15.6, align 4, !tbaa !4
Hit: load
  %25 = load float, float* %arrayidx15.7, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx19.1, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx19.2, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx19.3, align 4, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx19.4, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx19.5, align 4, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx19.6, align 4, !tbaa !4
Hit: load
  %26 = load float, float* %arrayidx19.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx11.2, align 4, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx11.4, align 4, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s2275
Generating tree
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv65
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv65
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv65
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv65
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv65
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv65
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv65
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv65
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %28 = zext i8 %27 to i64
Closing BINOP
Gen:   %29 = or i64 %indvars.iv, %28
Generating IDENTICAL
Operands done!
Generated:   %30 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %29, i64 %indvars.iv65
Gen:   %30 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %29, i64 %indvars.iv65
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx11, align 4, !tbaa !4
  %6 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %9 = load float, float* %arrayidx11.2, align 4, !tbaa !4
  %12 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %15 = load float, float* %arrayidx11.4, align 4, !tbaa !4
  %18 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %21 = load float, float* %arrayidx11.6, align 4, !tbaa !4
  %24 = load float, float* %arrayidx11.7, align 4, !tbaa !4
Operands done!
Generated:   %31 = load float, float* %30, align 1
Gen:   %31 = load float, float* %30, align 1
Generating MATCH
Match: 
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv65
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv65
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv65
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv65
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv65
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv65
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv65
  %arrayidx15.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv65
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %32 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %29, i64 %indvars.iv65
Gen:   %32 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %29, i64 %indvars.iv65
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx15, align 4, !tbaa !4
  %7 = load float, float* %arrayidx15.1, align 4, !tbaa !4
  %10 = load float, float* %arrayidx15.2, align 4, !tbaa !4
  %13 = load float, float* %arrayidx15.3, align 4, !tbaa !4
  %16 = load float, float* %arrayidx15.4, align 4, !tbaa !4
  %19 = load float, float* %arrayidx15.5, align 4, !tbaa !4
  %22 = load float, float* %arrayidx15.6, align 4, !tbaa !4
  %25 = load float, float* %arrayidx15.7, align 4, !tbaa !4
Operands done!
Generated:   %33 = load float, float* %32, align 1
Gen:   %33 = load float, float* %32, align 1
Generating MATCH
Match: 
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv, i64 %indvars.iv65
  %arrayidx19.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next, i64 %indvars.iv65
  %arrayidx19.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv65
  %arrayidx19.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv65
  %arrayidx19.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv65
  %arrayidx19.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv65
  %arrayidx19.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv65
  %arrayidx19.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv65
Generating IDENTICAL
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %34 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %29, i64 %indvars.iv65
Gen:   %34 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %29, i64 %indvars.iv65
Generating MATCH
Match: 
  %5 = load float, float* %arrayidx19, align 4, !tbaa !4
  %8 = load float, float* %arrayidx19.1, align 4, !tbaa !4
  %11 = load float, float* %arrayidx19.2, align 4, !tbaa !4
  %14 = load float, float* %arrayidx19.3, align 4, !tbaa !4
  %17 = load float, float* %arrayidx19.4, align 4, !tbaa !4
  %20 = load float, float* %arrayidx19.5, align 4, !tbaa !4
  %23 = load float, float* %arrayidx19.6, align 4, !tbaa !4
  %26 = load float, float* %arrayidx19.7, align 4, !tbaa !4
Operands done!
Generated:   %35 = load float, float* %34, align 1
Gen:   %35 = load float, float* %34, align 1
Generating MATCH
Match: 
  %mul = fmul float %4, %5
  %mul.1 = fmul float %7, %8
  %mul.2 = fmul float %10, %11
  %mul.3 = fmul float %13, %14
  %mul.4 = fmul float %16, %17
  %mul.5 = fmul float %19, %20
  %mul.6 = fmul float %22, %23
  %mul.7 = fmul float %25, %26
Operands done!
Generated:   %36 = fmul float %33, %35
Gen:   %36 = fmul float %33, %35
Generating MATCH
Match: 
  %add = fadd float %3, %mul
  %add.1 = fadd float %6, %mul.1
  %add.2 = fadd float %9, %mul.2
  %add.3 = fadd float %12, %mul.3
  %add.4 = fadd float %15, %mul.4
  %add.5 = fadd float %18, %mul.5
  %add.6 = fadd float %21, %mul.6
  %add.7 = fadd float %24, %mul.7
Operands done!
Generated:   %37 = fadd float %31, %36
Gen:   %37 = fadd float %31, %36
Generating MATCH
Match: 
  store float %add, float* %arrayidx11, align 4, !tbaa !4
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx11.2, align 4, !tbaa !4
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx11.4, align 4, !tbaa !4
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !4
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
Operands done!
Generated:   store float %37, float* %30, align 1
Gen:   store float %37, float* %30, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx11, align 4, !tbaa !4
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx11.2, align 4, !tbaa !4
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx11.4, align 4, !tbaa !4
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !4
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
10->1 
3->2 
4->3 
5->3 
6->3 
9->3 
7->6 
8->6 
11->10 
14->10 
12->11 
13->12 
5->12 
6->12 
9->12 
15->14 
16->15 
5->15 
6->15 
9->15 
}

Gains: 149 - 20 = 129; Width: 8; Profitable; s2275
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 9
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s276
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.040 = phi i32 [ 0, %entry ], [ %inc22, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 6
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.6 ]
BlockSize: 19
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next = or i64 %indvars.iv, 1
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..1, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="alt: %0, %3", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->9 
12->11 
13->12 
5->12 
6->12 
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->14
}

Trying AGAIN
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next = or i64 %indvars.iv, 1
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..1, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="alt: %0, %3", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->9 
12->11 
13->12 
5->12 
6->12 
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->14
}

BlockSize: 20
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next = or i64 %indvars.iv, 1
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..1, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="alt: %0, %8", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->9 
12->11 
13->12 
5->12 
6->12 
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->14
}

Trying AGAIN
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %indvars.iv.next = or i64 %indvars.iv, 1
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..1, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="alt: %0, %8", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->9 
12->11 
13->12 
5->12 
6->12 
14 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
6->14
}

BlockSize: 23
  %indvars.iv.next.250 = phi i64 [ %indvars.iv.next.246, %for.inc.thread ], [ %indvars.iv.next.2, %for.inc ]
  %indvars.iv.next.14348 = phi i64 [ %indvars.iv.next.141, %for.inc.thread ], [ %indvars.iv.next.1, %for.inc ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 2
Final Match: 0
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %14 = load float, float* %arrayidx13.3, align 4, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx15.3, align 4, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx18.3, align 4, !tbaa !4
Hit: store
  store float %add19.3, float* %arrayidx18.3, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s276
Generating tree
Generating MATCH
Match: 
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.14348
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.250
Generating IDENTICAL
Generating IDENTICAL
Generating ALTSEQ
Values:
  %indvars.iv.next.14348 = phi i64 [ %indvars.iv.next.141, %for.inc.thread ], [ %indvars.iv.next.1, %for.inc ]
  %indvars.iv.next.250 = phi i64 [ %indvars.iv.next.246, %for.inc.thread ], [ %indvars.iv.next.2, %for.inc ]
Generated Version 4:
  %41 = icmp eq i8 %40, 0
  %42 = select i1 %41, i64 %indvars.iv.next.14348, i64 %indvars.iv.next.250
Operands done!
Generated:   %43 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %42
Gen:   %43 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %42
Generating MATCH
Match: 
  %11 = load float, float* %arrayidx13.2, align 8, !tbaa !4
  %14 = load float, float* %arrayidx13.3, align 4, !tbaa !4
Operands done!
Generated:   %44 = load float, float* %43, align 1
Gen:   %44 = load float, float* %43, align 1
Generating MATCH
Match: 
  %arrayidx15.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.14348
  %arrayidx15.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.250
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %45 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %42
Gen:   %45 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %42
Generating MATCH
Match: 
  %12 = load float, float* %arrayidx15.2, align 8, !tbaa !4
  %15 = load float, float* %arrayidx15.3, align 4, !tbaa !4
Operands done!
Generated:   %46 = load float, float* %45, align 1
Gen:   %46 = load float, float* %45, align 1
Generating MATCH
Match: 
  %mul16.2 = fmul float %11, %12
  %mul16.3 = fmul float %14, %15
Operands done!
Generated:   %47 = fmul float %44, %46
Gen:   %47 = fmul float %44, %46
Generating MATCH
Match: 
  %arrayidx18.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.14348
  %arrayidx18.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.250
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %42
Gen:   %48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %42
Generating MATCH
Match: 
  %13 = load float, float* %arrayidx18.2, align 8, !tbaa !4
  %16 = load float, float* %arrayidx18.3, align 4, !tbaa !4
Operands done!
Generated:   %49 = load float, float* %48, align 1
Gen:   %49 = load float, float* %48, align 1
Generating MATCH
Match: 
  %add19.2 = fadd float %13, %mul16.2
  %add19.3 = fadd float %16, %mul16.3
Operands done!
Generated:   %50 = fadd float %49, %47
Gen:   %50 = fadd float %49, %47
Generating MATCH
Match: 
  store float %add19.2, float* %arrayidx18.2, align 8, !tbaa !4
  store float %add19.3, float* %arrayidx18.3, align 4, !tbaa !4
Operands done!
Generated:   store float %50, float* %48, align 1
Gen:   store float %50, float* %48, align 1
Graph code generated!
Root:
  store float %add19.2, float* %arrayidx18.2, align 8, !tbaa !4
  store float %add19.3, float* %arrayidx18.3, align 4, !tbaa !4
Root size: 2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="alt: %indvars.iv.next.14348, %indvars.iv.next.250", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
7->1 
3->2 
4->3 
5->3 
6->3 
8->7 
11->7 
9->8 
10->9 
5->9 
6->9 
12->11 
13->12 
5->12 
6->12 
}

Gains: 32 - 19 = 13; Width: 2; Profitable; s276
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 9
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 0
INTSEQ: 0
ALTSEQ: 1
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 22
BlockSize: 23
  %indvars.iv.next.462 = phi i64 [ %47, %rolled.exit ], [ %indvars.iv.next.4, %for.inc.2 ]
  %indvars.iv.next.35560 = phi i64 [ %46, %rolled.exit ], [ %indvars.iv.next.3, %for.inc.2 ]
BlockSize: 22
BlockSize: 4
  %indvars.iv.next.674 = phi i64 [ %indvars.iv.next.670, %for.inc.4.thread ], [ %indvars.iv.next.6, %for.inc.4 ]
  %indvars.iv.next.56772 = phi i64 [ %indvars.iv.next.564, %for.inc.4.thread ], [ %indvars.iv.next.5, %for.inc.4 ]
BlockSize: 2
BlockSize: 25
  %arrayidx8.6.sink = phi float* [ %arrayidx8.6, %if.then.6 ], [ %arrayidx15.6, %if.else.6 ]
  %indvars.iv.next.5.sink = phi i64 [ %indvars.iv.next.5, %if.then.6 ], [ %indvars.iv.next.56772, %if.else.6 ]
  %indvars.iv.next.673 = phi i64 [ %indvars.iv.next.6, %if.then.6 ], [ %indvars.iv.next.674, %if.else.6 ]
Done Loop Roller: 1/1
Optimizing: s277
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.050 = phi i32 [ 0, %entry ], [ %inc31, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.be, %for.body5.backedge ]
BlockSize: 2
BlockSize: 8
BlockSize: 4
Attempting Group:
BlockSize: 8
Attempting Group:
BlockSize: 5
  %indvars.iv.next.pre-phi = phi i64 [ %.pre67, %for.body5.for.inc_crit_edge ], [ %5, %L30 ]
BlockSize: 2
BlockSize: 8
BlockSize: 4
Attempting Group:
BlockSize: 8
Attempting Group:
BlockSize: 5
  %indvars.iv.next.1.pre-phi = phi i64 [ %.pre68, %for.inc.for.inc.1_crit_edge ], [ %11, %L30.1 ]
BlockSize: 2
BlockSize: 8
BlockSize: 4
Attempting Group:
BlockSize: 8
Attempting Group:
BlockSize: 5
  %indvars.iv.next.2.pre-phi = phi i64 [ %.pre69, %for.inc.1.for.inc.2_crit_edge ], [ %17, %L30.2 ]
BlockSize: 2
BlockSize: 8
BlockSize: 4
Attempting Group:
BlockSize: 8
Attempting Group:
BlockSize: 5
  %indvars.iv.next.3.pre-phi = phi i64 [ %.pre70, %for.inc.2.for.inc.3_crit_edge ], [ %23, %L30.3 ]
BlockSize: 2
BlockSize: 8
BlockSize: 4
Attempting Group:
BlockSize: 8
Attempting Group:
BlockSize: 5
  %indvars.iv.next.4.pre-phi = phi i64 [ %.pre71, %for.inc.3.for.inc.4_crit_edge ], [ %29, %L30.4 ]
BlockSize: 2
BlockSize: 8
BlockSize: 4
Attempting Group:
BlockSize: 8
Attempting Group:
BlockSize: 5
  %indvars.iv.next.5.pre-phi = phi i64 [ %.pre72, %for.inc.4.for.inc.5_crit_edge ], [ %35, %L30.5 ]
BlockSize: 2
BlockSize: 8
BlockSize: 4
Attempting Group:
BlockSize: 8
Attempting Group:
BlockSize: 3
  %indvars.iv.next.6.pre-phi = phi i64 [ %.pre73, %for.inc.5.for.inc.6_crit_edge ], [ %41, %L30.6 ]
BlockSize: 4
BlockSize: 2
BlockSize: 2
  %indvars.iv.be = phi i64 [ %.pre74, %for.body5.7.for.inc.7_crit_edge ], [ %47, %L30.7 ]
BlockSize: 8
BlockSize: 4
Attempting Group:
BlockSize: 8
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s277
Optimizing: s278
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.061 = phi i32 [ 0, %entry ], [ %inc38, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %L30.7 ]
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %7 = phi float [ %5, %L20 ], [ %2, %if.end ]
  %8 = phi float [ %add23, %L20 ], [ %.pre62, %if.end ]
  %9 = phi float [ %.pre, %L20 ], [ %add, %if.end ]
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %17 = phi float [ %15, %L20.1 ], [ %12, %if.end.1 ]
  %18 = phi float [ %add23.1, %L20.1 ], [ %.pre64, %if.end.1 ]
  %19 = phi float [ %.pre63, %L20.1 ], [ %add.1, %if.end.1 ]
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %27 = phi float [ %25, %L20.2 ], [ %22, %if.end.2 ]
  %28 = phi float [ %add23.2, %L20.2 ], [ %.pre66, %if.end.2 ]
  %29 = phi float [ %.pre65, %L20.2 ], [ %add.2, %if.end.2 ]
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %37 = phi float [ %35, %L20.3 ], [ %32, %if.end.3 ]
  %38 = phi float [ %add23.3, %L20.3 ], [ %.pre68, %if.end.3 ]
  %39 = phi float [ %.pre67, %L20.3 ], [ %add.3, %if.end.3 ]
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %47 = phi float [ %45, %L20.4 ], [ %42, %if.end.4 ]
  %48 = phi float [ %add23.4, %L20.4 ], [ %.pre70, %if.end.4 ]
  %49 = phi float [ %.pre69, %L20.4 ], [ %add.4, %if.end.4 ]
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %57 = phi float [ %55, %L20.5 ], [ %52, %if.end.5 ]
  %58 = phi float [ %add23.5, %L20.5 ], [ %.pre72, %if.end.5 ]
  %59 = phi float [ %.pre71, %L20.5 ], [ %add.5, %if.end.5 ]
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %67 = phi float [ %65, %L20.6 ], [ %62, %if.end.6 ]
  %68 = phi float [ %add23.6, %L20.6 ], [ %.pre74, %if.end.6 ]
  %69 = phi float [ %.pre73, %L20.6 ], [ %add.6, %if.end.6 ]
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 9
  %77 = phi float [ %75, %L20.7 ], [ %72, %if.end.7 ]
  %78 = phi float [ %add23.7, %L20.7 ], [ %.pre76, %if.end.7 ]
  %79 = phi float [ %.pre75, %L20.7 ], [ %add.7, %if.end.7 ]
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s278
Optimizing: s279
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.081 = phi i32 [ 0, %entry ], [ %inc53, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %L30.7 ]
BlockSize: 9
Attempting Group:
BlockSize: 3
BlockSize: 8
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %7 = phi float [ %2, %if.end.L30_crit_edge ], [ %.pre83, %L20 ], [ %2, %if.end21 ]
  %8 = phi float [ %.pre82, %if.end.L30_crit_edge ], [ %add38, %L20 ], [ %add29, %if.end21 ]
  %9 = phi float [ %add, %if.end.L30_crit_edge ], [ %.pre, %L20 ], [ %add, %if.end21 ]
Attempting Group:
BlockSize: 9
Attempting Group:
BlockSize: 3
BlockSize: 8
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %17 = phi float [ %.pre86, %L20.1 ], [ %12, %if.end21.1 ], [ %12, %if.end.1.L30.1_crit_edge ]
  %18 = phi float [ %add38.1, %L20.1 ], [ %add29.1, %if.end21.1 ], [ %.pre85, %if.end.1.L30.1_crit_edge ]
  %19 = phi float [ %.pre84, %L20.1 ], [ %add.1, %if.end21.1 ], [ %add.1, %if.end.1.L30.1_crit_edge ]
Attempting Group:
BlockSize: 9
Attempting Group:
BlockSize: 3
BlockSize: 8
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %27 = phi float [ %.pre89, %L20.2 ], [ %22, %if.end21.2 ], [ %22, %if.end.2.L30.2_crit_edge ]
  %28 = phi float [ %add38.2, %L20.2 ], [ %add29.2, %if.end21.2 ], [ %.pre88, %if.end.2.L30.2_crit_edge ]
  %29 = phi float [ %.pre87, %L20.2 ], [ %add.2, %if.end21.2 ], [ %add.2, %if.end.2.L30.2_crit_edge ]
Attempting Group:
BlockSize: 9
Attempting Group:
BlockSize: 3
BlockSize: 8
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %37 = phi float [ %.pre92, %L20.3 ], [ %32, %if.end21.3 ], [ %32, %if.end.3.L30.3_crit_edge ]
  %38 = phi float [ %add38.3, %L20.3 ], [ %add29.3, %if.end21.3 ], [ %.pre91, %if.end.3.L30.3_crit_edge ]
  %39 = phi float [ %.pre90, %L20.3 ], [ %add.3, %if.end21.3 ], [ %add.3, %if.end.3.L30.3_crit_edge ]
Attempting Group:
BlockSize: 9
Attempting Group:
BlockSize: 3
BlockSize: 8
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %47 = phi float [ %.pre95, %L20.4 ], [ %42, %if.end21.4 ], [ %42, %if.end.4.L30.4_crit_edge ]
  %48 = phi float [ %add38.4, %L20.4 ], [ %add29.4, %if.end21.4 ], [ %.pre94, %if.end.4.L30.4_crit_edge ]
  %49 = phi float [ %.pre93, %L20.4 ], [ %add.4, %if.end21.4 ], [ %add.4, %if.end.4.L30.4_crit_edge ]
Attempting Group:
BlockSize: 9
Attempting Group:
BlockSize: 3
BlockSize: 8
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %57 = phi float [ %.pre98, %L20.5 ], [ %52, %if.end21.5 ], [ %52, %if.end.5.L30.5_crit_edge ]
  %58 = phi float [ %add38.5, %L20.5 ], [ %add29.5, %if.end21.5 ], [ %.pre97, %if.end.5.L30.5_crit_edge ]
  %59 = phi float [ %.pre96, %L20.5 ], [ %add.5, %if.end21.5 ], [ %add.5, %if.end.5.L30.5_crit_edge ]
Attempting Group:
BlockSize: 9
Attempting Group:
BlockSize: 3
BlockSize: 8
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 11
  %67 = phi float [ %.pre101, %L20.6 ], [ %62, %if.end21.6 ], [ %62, %if.end.6.L30.6_crit_edge ]
  %68 = phi float [ %add38.6, %L20.6 ], [ %add29.6, %if.end21.6 ], [ %.pre100, %if.end.6.L30.6_crit_edge ]
  %69 = phi float [ %.pre99, %L20.6 ], [ %add.6, %if.end21.6 ], [ %add.6, %if.end.6.L30.6_crit_edge ]
Attempting Group:
BlockSize: 9
Attempting Group:
BlockSize: 3
BlockSize: 8
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 9
  %77 = phi float [ %.pre104, %L20.7 ], [ %72, %if.end21.7 ], [ %72, %if.end.7.L30.7_crit_edge ]
  %78 = phi float [ %add38.7, %L20.7 ], [ %add29.7, %if.end21.7 ], [ %.pre103, %if.end.7.L30.7_crit_edge ]
  %79 = phi float [ %.pre102, %L20.7 ], [ %add.7, %if.end21.7 ], [ %add.7, %if.end.7.L30.7_crit_edge ]
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s279
Optimizing: s1279
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.038 = phi i32 [ 0, %entry ], [ %inc22, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 4
BlockSize: 10
Attempting Group:
BlockSize: 5
BlockSize: 4
BlockSize: 10
Attempting Group:
BlockSize: 5
BlockSize: 4
BlockSize: 10
Attempting Group:
BlockSize: 5
BlockSize: 4
BlockSize: 10
Attempting Group:
BlockSize: 5
BlockSize: 4
BlockSize: 10
Attempting Group:
BlockSize: 5
BlockSize: 4
BlockSize: 10
Attempting Group:
BlockSize: 5
BlockSize: 4
BlockSize: 10
Attempting Group:
BlockSize: 5
BlockSize: 4
BlockSize: 10
Attempting Group:
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s1279
Optimizing: s2710
BlockSize: 9
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.090 = phi i32 [ 0, %entry ], [ %inc58, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 7
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 11
Attempting Group:
Attempting Group:
BlockSize: 6
Attempting Group:
BlockSize: 7
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 7
Attempting Group:
BlockSize: 11
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 7
Attempting Group:
BlockSize: 11
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 7
Attempting Group:
BlockSize: 11
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 7
Attempting Group:
BlockSize: 11
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 7
Attempting Group:
BlockSize: 11
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 7
Attempting Group:
BlockSize: 11
Attempting Group:
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 7
Attempting Group:
BlockSize: 11
Attempting Group:
Attempting Group:
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s2710
Optimizing: s2711
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.029 = phi i32 [ 0, %entry ], [ %inc15, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 5
BlockSize: 8
Attempting Group:
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s2711
Optimizing: s2712
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.033 = phi i32 [ 0, %entry ], [ %inc17, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 7
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 6
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 7
BlockSize: 6
Attempting Group:
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s2712
Optimizing: s281
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.035 = phi i32 [ 0, %entry ], [ %inc18, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 115
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %5 = load float, float* %arrayidx.1, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.2, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx.3, align 16, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx.4, align 4, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx.5, align 8, !tbaa !4
Hit: load
  %25 = load float, float* %arrayidx.6, align 4, !tbaa !4
Hit: load
  %29 = load float, float* %arrayidx.7, align 32, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx8.1, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx8.2, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx8.3, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx8.4, align 16, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx8.5, align 4, !tbaa !4
Hit: load
  %26 = load float, float* %arrayidx8.6, align 8, !tbaa !4
Hit: load
  %30 = load float, float* %arrayidx8.7, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx10.1, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx10.2, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx10.3, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx10.4, align 16, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx10.5, align 4, !tbaa !4
Hit: load
  %27 = load float, float* %arrayidx10.6, align 8, !tbaa !4
Hit: load
  %31 = load float, float* %arrayidx10.7, align 4, !tbaa !4
Hit: store
  store float %sub11.1, float* %arrayidx13.1, align 4, !tbaa !4
Hit: store
  store float %sub11.2, float* %arrayidx13.2, align 8, !tbaa !4
Hit: store
  store float %sub11.3, float* %arrayidx13.3, align 4, !tbaa !4
Hit: store
  store float %sub11.4, float* %arrayidx13.4, align 16, !tbaa !4
Hit: store
  store float %sub11.5, float* %arrayidx13.5, align 4, !tbaa !4
Hit: store
  store float %sub11.6, float* %arrayidx13.6, align 8, !tbaa !4
Hit: store
  store float %sub11.7, float* %arrayidx13.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx8.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx8.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx8.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx8.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx8.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx8.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx8.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s281
Generating tree
Generating MATCH
Match: 
  %0 = sub nuw nsw i64 31999, %indvars.iv
  %4 = sub nsw i64 31998, %indvars.iv
  %8 = sub nsw i64 31997, %indvars.iv
  %12 = sub nsw i64 31996, %indvars.iv
  %16 = sub nsw i64 31995, %indvars.iv
  %20 = sub nsw i64 31994, %indvars.iv
  %24 = sub nsw i64 31993, %indvars.iv
  %28 = sub nsw i64 31992, %indvars.iv
Generating INTSEQ
Gen:   %35 = add i64 %34, 31999
Generating IDENTICAL
Operands done!
Generated:   %36 = sub nuw nsw i64 %35, %indvars.iv
Gen:   %36 = sub nuw nsw i64 %35, %indvars.iv
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %0
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %4
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %8
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %12
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %16
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %24
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %36
Gen:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %36
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %5 = load float, float* %arrayidx.1, align 8, !tbaa !4
  %9 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %13 = load float, float* %arrayidx.3, align 16, !tbaa !4
  %17 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %21 = load float, float* %arrayidx.5, align 8, !tbaa !4
  %25 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %29 = load float, float* %arrayidx.7, align 32, !tbaa !4
Operands done!
Generated:   %38 = load float, float* %37, align 1
Gen:   %38 = load float, float* %37, align 1
Generating MATCH
Match: 
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %33 = zext i8 %32 to i64
Closing BINOP
Gen:   %39 = or i64 %indvars.iv, %33
Operands done!
Generated:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %39
Gen:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %39
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx8, align 32, !tbaa !4
  %6 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %10 = load float, float* %arrayidx8.2, align 8, !tbaa !4
  %14 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %18 = load float, float* %arrayidx8.4, align 16, !tbaa !4
  %22 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %26 = load float, float* %arrayidx8.6, align 8, !tbaa !4
  %30 = load float, float* %arrayidx8.7, align 4, !tbaa !4
Operands done!
Generated:   %41 = load float, float* %40, align 1
Gen:   %41 = load float, float* %40, align 1
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %42 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %39
Gen:   %42 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %39
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx10, align 32, !tbaa !4
  %7 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %11 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %15 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %19 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %23 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %27 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %31 = load float, float* %arrayidx10.7, align 4, !tbaa !4
Operands done!
Generated:   %43 = load float, float* %42, align 1
Gen:   %43 = load float, float* %42, align 1
Generating MATCH
Match: 
  %mul = fmul float %2, %3
  %mul.1 = fmul float %6, %7
  %mul.2 = fmul float %10, %11
  %mul.3 = fmul float %14, %15
  %mul.4 = fmul float %18, %19
  %mul.5 = fmul float %22, %23
  %mul.6 = fmul float %26, %27
  %mul.7 = fmul float %30, %31
Operands done!
Generated:   %44 = fmul float %41, %43
Gen:   %44 = fmul float %41, %43
Generating MATCH
Match: 
  %add = fadd float %1, %mul
  %add.1 = fadd float %5, %mul.1
  %add.2 = fadd float %9, %mul.2
  %add.3 = fadd float %13, %mul.3
  %add.4 = fadd float %17, %mul.4
  %add.5 = fadd float %21, %mul.5
  %add.6 = fadd float %25, %mul.6
  %add.7 = fadd float %29, %mul.7
Operands done!
Generated:   %45 = fadd float %38, %44
Gen:   %45 = fadd float %38, %44
Generating MATCH
Match: 
  %sub11 = fadd float %add, -1.000000e+00
  %sub11.1 = fadd float %add.1, -1.000000e+00
  %sub11.2 = fadd float %add.2, -1.000000e+00
  %sub11.3 = fadd float %add.3, -1.000000e+00
  %sub11.4 = fadd float %add.4, -1.000000e+00
  %sub11.5 = fadd float %add.5, -1.000000e+00
  %sub11.6 = fadd float %add.6, -1.000000e+00
  %sub11.7 = fadd float %add.7, -1.000000e+00
Generating IDENTICAL
Operands done!
Generated:   %46 = fadd float %45, -1.000000e+00
Gen:   %46 = fadd float %45, -1.000000e+00
Generating MATCH
Match: 
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx13.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx13.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %47 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %39
Gen:   %47 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %39
Generating MATCH
Match: 
  store float %sub11, float* %arrayidx13, align 32, !tbaa !4
  store float %sub11.1, float* %arrayidx13.1, align 4, !tbaa !4
  store float %sub11.2, float* %arrayidx13.2, align 8, !tbaa !4
  store float %sub11.3, float* %arrayidx13.3, align 4, !tbaa !4
  store float %sub11.4, float* %arrayidx13.4, align 16, !tbaa !4
  store float %sub11.5, float* %arrayidx13.5, align 4, !tbaa !4
  store float %sub11.6, float* %arrayidx13.6, align 8, !tbaa !4
  store float %sub11.7, float* %arrayidx13.7, align 4, !tbaa !4
Operands done!
Generated:   store float %46, float* %47, align 1
Gen:   store float %46, float* %47, align 1
Generating MATCH
Match: 
  store float %add, float* %arrayidx8, align 32, !tbaa !4
  store float %add.1, float* %arrayidx8.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx8.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx8.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx8.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx8.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx8.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx8.7, align 4, !tbaa !4
Operands done!
Generated:   store float %45, float* %40, align 1
Gen:   store float %45, float* %40, align 1
Generating MULTI
Graph code generated!
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="sub", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="31999..31992, -1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="-1.000000e+00", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
22->0 
2->1 
21->1 
3->2 
20->2 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
17->11 
13->12 
14->13 
7->13 
15->13 
10->15 
16->15 
18->17 
19->18 
7->18 
15->18 
6->21 
7->21 
15->21 
3->22 
13->22 
}

Gains: 213 - 32 = 181; Width: 0; Profitable; s281
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 13
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 1
Done Loop Roller: 1/1
Optimizing: s1281
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.041 = phi i32 [ 0, %entry ], [ %inc22, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 147
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %30 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %35 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %26 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %31 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %36 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx9.1, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx9.2, align 8, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx9.3, align 4, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx9.4, align 16, !tbaa !4
Hit: load
  %27 = load float, float* %arrayidx9.5, align 4, !tbaa !4
Hit: load
  %32 = load float, float* %arrayidx9.6, align 8, !tbaa !4
Hit: load
  %37 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx11.1, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx11.2, align 8, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx11.3, align 4, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx11.4, align 16, !tbaa !4
Hit: load
  %28 = load float, float* %arrayidx11.5, align 4, !tbaa !4
Hit: load
  %33 = load float, float* %arrayidx11.6, align 8, !tbaa !4
Hit: load
  %38 = load float, float* %arrayidx11.7, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx14.1, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx14.2, align 8, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx14.3, align 4, !tbaa !4
Hit: load
  %24 = load float, float* %arrayidx14.4, align 16, !tbaa !4
Hit: load
  %29 = load float, float* %arrayidx14.5, align 4, !tbaa !4
Hit: load
  %34 = load float, float* %arrayidx14.6, align 8, !tbaa !4
Hit: load
  %39 = load float, float* %arrayidx14.7, align 4, !tbaa !4
Hit: store
  store float %sub.1, float* %arrayidx9.1, align 4, !tbaa !4
Hit: store
  store float %sub.2, float* %arrayidx9.2, align 8, !tbaa !4
Hit: store
  store float %sub.3, float* %arrayidx9.3, align 4, !tbaa !4
Hit: store
  store float %sub.4, float* %arrayidx9.4, align 16, !tbaa !4
Hit: store
  store float %sub.5, float* %arrayidx9.5, align 4, !tbaa !4
Hit: store
  store float %sub.6, float* %arrayidx9.6, align 8, !tbaa !4
Hit: store
  store float %sub.7, float* %arrayidx9.7, align 4, !tbaa !4
Hit: store
  store float %add15.1, float* %arrayidx.1, align 4, !tbaa !4
Hit: store
  store float %add15.2, float* %arrayidx.2, align 8, !tbaa !4
Hit: store
  store float %add15.3, float* %arrayidx.3, align 4, !tbaa !4
Hit: store
  store float %add15.4, float* %arrayidx.4, align 16, !tbaa !4
Hit: store
  store float %add15.5, float* %arrayidx.5, align 4, !tbaa !4
Hit: store
  store float %add15.6, float* %arrayidx.6, align 8, !tbaa !4
Hit: store
  store float %add15.7, float* %arrayidx.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s1281
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %41 = zext i8 %40 to i64
Closing BINOP
Gen:   %42 = or i64 %indvars.iv, %41
Operands done!
Generated:   %43 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %42
Gen:   %43 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %42
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %20 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %30 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %35 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %44 = load float, float* %43, align 1
Gen:   %44 = load float, float* %43, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %45 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %42
Gen:   %45 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %42
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %11 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %16 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %21 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %26 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %31 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %36 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %46 = load float, float* %45, align 1
Gen:   %46 = load float, float* %45, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul.1 = fmul float %5, %6
  %mul.2 = fmul float %10, %11
  %mul.3 = fmul float %15, %16
  %mul.4 = fmul float %20, %21
  %mul.5 = fmul float %25, %26
  %mul.6 = fmul float %30, %31
  %mul.7 = fmul float %35, %36
Operands done!
Generated:   %47 = fmul float %44, %46
Gen:   %47 = fmul float %44, %46
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %42
Gen:   %48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %42
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %7 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %12 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %17 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %22 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %27 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %32 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %37 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   %49 = load float, float* %48, align 1
Gen:   %49 = load float, float* %48, align 1
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %50 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %42
Gen:   %50 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %42
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx11, align 32, !tbaa !4
  %8 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %13 = load float, float* %arrayidx11.2, align 8, !tbaa !4
  %18 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %23 = load float, float* %arrayidx11.4, align 16, !tbaa !4
  %28 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %33 = load float, float* %arrayidx11.6, align 8, !tbaa !4
  %38 = load float, float* %arrayidx11.7, align 4, !tbaa !4
Operands done!
Generated:   %51 = load float, float* %50, align 1
Gen:   %51 = load float, float* %50, align 1
Generating MATCH
Match: 
  %mul12 = fmul float %2, %3
  %mul12.1 = fmul float %7, %8
  %mul12.2 = fmul float %12, %13
  %mul12.3 = fmul float %17, %18
  %mul12.4 = fmul float %22, %23
  %mul12.5 = fmul float %27, %28
  %mul12.6 = fmul float %32, %33
  %mul12.7 = fmul float %37, %38
Operands done!
Generated:   %52 = fmul float %49, %51
Gen:   %52 = fmul float %49, %51
Generating MATCH
Match: 
  %add = fadd float %mul, %mul12
  %add.1 = fadd float %mul.1, %mul12.1
  %add.2 = fadd float %mul.2, %mul12.2
  %add.3 = fadd float %mul.3, %mul12.3
  %add.4 = fadd float %mul.4, %mul12.4
  %add.5 = fadd float %mul.5, %mul12.5
  %add.6 = fadd float %mul.6, %mul12.6
  %add.7 = fadd float %mul.7, %mul12.7
Operands done!
Generated:   %53 = fadd float %47, %52
Gen:   %53 = fadd float %47, %52
Generating MATCH
Match: 
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %54 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %42
Gen:   %54 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %42
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx14, align 32, !tbaa !4
  %9 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %14 = load float, float* %arrayidx14.2, align 8, !tbaa !4
  %19 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %24 = load float, float* %arrayidx14.4, align 16, !tbaa !4
  %29 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %34 = load float, float* %arrayidx14.6, align 8, !tbaa !4
  %39 = load float, float* %arrayidx14.7, align 4, !tbaa !4
Operands done!
Generated:   %55 = load float, float* %54, align 1
Gen:   %55 = load float, float* %54, align 1
Generating MATCH
Match: 
  %add15 = fadd float %4, %add
  %add15.1 = fadd float %9, %add.1
  %add15.2 = fadd float %14, %add.2
  %add15.3 = fadd float %19, %add.3
  %add15.4 = fadd float %24, %add.4
  %add15.5 = fadd float %29, %add.5
  %add15.6 = fadd float %34, %add.6
  %add15.7 = fadd float %39, %add.7
Operands done!
Generated:   %56 = fadd float %55, %53
Gen:   %56 = fadd float %55, %53
Generating MATCH
Match: 
  %sub = fadd float %add15, -1.000000e+00
  %sub.1 = fadd float %add15.1, -1.000000e+00
  %sub.2 = fadd float %add15.2, -1.000000e+00
  %sub.3 = fadd float %add15.3, -1.000000e+00
  %sub.4 = fadd float %add15.4, -1.000000e+00
  %sub.5 = fadd float %add15.5, -1.000000e+00
  %sub.6 = fadd float %add15.6, -1.000000e+00
  %sub.7 = fadd float %add15.7, -1.000000e+00
Generating IDENTICAL
Operands done!
Generated:   %57 = fadd float %56, -1.000000e+00
Gen:   %57 = fadd float %56, -1.000000e+00
Generating MATCH
Match: 
  store float %sub, float* %arrayidx9, align 32, !tbaa !4
  store float %sub.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %sub.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %sub.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %sub.4, float* %arrayidx9.4, align 16, !tbaa !4
  store float %sub.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %sub.6, float* %arrayidx9.6, align 8, !tbaa !4
  store float %sub.7, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   store float %57, float* %48, align 1
Gen:   store float %57, float* %48, align 1
Generating MATCH
Match: 
  store float %add15, float* %arrayidx, align 32, !tbaa !4
  store float %add15.1, float* %arrayidx.1, align 4, !tbaa !4
  store float %add15.2, float* %arrayidx.2, align 8, !tbaa !4
  store float %add15.3, float* %arrayidx.3, align 4, !tbaa !4
  store float %add15.4, float* %arrayidx.4, align 16, !tbaa !4
  store float %add15.5, float* %arrayidx.5, align 4, !tbaa !4
  store float %add15.6, float* %arrayidx.6, align 8, !tbaa !4
  store float %add15.7, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   store float %56, float* %43, align 1
Gen:   store float %56, float* %43, align 1
Generating MULTI
Graph code generated!
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
24 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
25 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
26 [label="-1.000000e+00", style="filled" , fillcolor="#8ae18a", shape=box];
27 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
27->0 
2->1 
21->1 
3->2 
26->2 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
19->11 
13->12 
16->12 
14->13 
15->14 
7->14 
8->14 
17->16 
18->17 
7->17 
8->17 
20->19 
23->19 
21->20 
22->21 
7->21 
8->21 
24->23 
25->24 
7->24 
8->24 
3->27 
14->27 
}

Gains: 253 - 33 = 220; Width: 0; Profitable; s1281
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 17
IDENTICAL: 8
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 1
Done Loop Roller: 1/1
Optimizing: s291
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.027 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 84
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %im1.025 = phi i64 [ 31999, %for.cond2.preheader ], [ %indvars.iv.next.6, %for.body5 ]
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
Match: 0
7 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx7.1, align 32, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.2, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.3, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.4, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.5, align 16, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.6, align 4, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx7.7, align 8, !tbaa !4
Hit: store
  store float %mul.1, float* %arrayidx9.1, align 4, !tbaa !4
Hit: store
  store float %mul.2, float* %arrayidx9.2, align 8, !tbaa !4
Hit: store
  store float %mul.3, float* %arrayidx9.3, align 4, !tbaa !4
Hit: store
  store float %mul.4, float* %arrayidx9.4, align 16, !tbaa !4
Hit: store
  store float %mul.5, float* %arrayidx9.5, align 4, !tbaa !4
Hit: store
  store float %mul.6, float* %arrayidx9.6, align 8, !tbaa !4
Hit: store
  store float %mul.7, float* %arrayidx9.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s291
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %17 = zext i8 %16 to i64
Closing BINOP
Found use: 7:   %im1.025 = phi i64 [ 31999, %for.cond2.preheader ], [ %indvars.iv.next.6, %for.body5 ]
Extracting:   %18 = or i64 %indvars.iv, %17
Gen:   %19 = or i64 %indvars.iv, %18
Operands done!
Generated:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %19
Gen:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %19
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 32, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %5 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %9 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %13 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %22 = load float, float* %21, align 1
Gen:   %22 = load float, float* %21, align 1
Generating MATCH
Match: 
  %idxprom6 = and i64 %im1.025, 4294967295
  %idxprom6.1 = and i64 %indvars.iv, 4294967288
  %idxprom6.2 = and i64 %indvars.iv.next, 4294967289
  %idxprom6.3 = and i64 %indvars.iv.next.1, 4294967290
  %idxprom6.4 = and i64 %indvars.iv.next.2, 4294967291
  %idxprom6.5 = and i64 %indvars.iv.next.3, 4294967292
  %idxprom6.6 = and i64 %indvars.iv.next.4, 4294967293
  %idxprom6.7 = and i64 %indvars.iv.next.5, 4294967294
Generating BINOP
Generating Mismatch
Mismatched Values:
inst:   %im1.025 = phi i64 [ 31999, %for.cond2.preheader ], [ %indvars.iv.next.6, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
Non constants
Array Type: 8:i64
Created array:   %17 = alloca i64, i8 8, align 8
Gen:   %33 = load i64, i64* %32, align 8
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 1
int: i64 2
int: i64 3
int: i64 4
int: i64 5
int: i64 6
All constants
Created array: @2 = private constant [8 x i64] [i64 0, i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6]
Gen:   %35 = load i64, i64* %34, align 8
Closing BINOP
Gen:   %36 = or i64 %33, %35
Generating Mismatch
Mismatched Values:
int: i64 4294967295
int: i64 4294967288
int: i64 4294967289
int: i64 4294967290
int: i64 4294967291
int: i64 4294967292
int: i64 4294967293
int: i64 4294967294
All constants
Found Array: @2 = private constant [8 x i64] [i64 0, i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6]
Gen:   %35 = load i64, i64* %34, align 8
Operands done!
Generated:   %37 = and i64 %36, %35
Gen:   %37 = and i64 %36, %35
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.1
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.2
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.3
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.5
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.6
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.7
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %38 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %37
Gen:   %38 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %37
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx7, align 4, !tbaa !4
  %4 = load float, float* %arrayidx7.1, align 32, !tbaa !4
  %6 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %8 = load float, float* %arrayidx7.3, align 8, !tbaa !4
  %10 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %12 = load float, float* %arrayidx7.5, align 16, !tbaa !4
  %14 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %16 = load float, float* %arrayidx7.7, align 8, !tbaa !4
Operands done!
Generated:   %39 = load float, float* %38, align 1
Gen:   %39 = load float, float* %38, align 1
Generating MATCH
Match: 
  %add = fadd float %1, %2
  %add.1 = fadd float %3, %4
  %add.2 = fadd float %5, %6
  %add.3 = fadd float %7, %8
  %add.4 = fadd float %9, %10
  %add.5 = fadd float %11, %12
  %add.6 = fadd float %13, %14
  %add.7 = fadd float %15, %16
Operands done!
Generated:   %40 = fadd float %31, %39
Gen:   %40 = fadd float %31, %39
Generating MATCH
Match: 
  %mul = fmul float %add, 5.000000e-01
  %mul.1 = fmul float %add.1, 5.000000e-01
  %mul.2 = fmul float %add.2, 5.000000e-01
  %mul.3 = fmul float %add.3, 5.000000e-01
  %mul.4 = fmul float %add.4, 5.000000e-01
  %mul.5 = fmul float %add.5, 5.000000e-01
  %mul.6 = fmul float %add.6, 5.000000e-01
  %mul.7 = fmul float %add.7, 5.000000e-01
Generating IDENTICAL
Operands done!
Generated:   %41 = fmul float %40, 5.000000e-01
Gen:   %41 = fmul float %40, 5.000000e-01
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %42 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
Gen:   %42 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
Generating MATCH
Match: 
  store float %mul, float* %arrayidx9, align 32, !tbaa !4
  store float %mul.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %mul.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %mul.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %mul.4, float* %arrayidx9.4, align 16, !tbaa !4
  store float %mul.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %mul.6, float* %arrayidx9.6, align 8, !tbaa !4
  store float %mul.7, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   store float %41, float* %42, align 1
Gen:   store float %41, float* %42, align 1
Graph code generated!
Root:
  store float %mul, float* %arrayidx9, align 32, !tbaa !4
  store float %mul.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %mul.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %mul.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %mul.4, float* %arrayidx9.4, align 16, !tbaa !4
  store float %mul.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %mul.6, float* %arrayidx9.6, align 8, !tbaa !4
  store float %mul.7, float* %arrayidx9.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="and", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
15 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
16 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
17 [label="5.000000e-01", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
18->0 
2->1 
17->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
5->11 
6->11 
12->11 
13->12 
16->12 
14->13 
15->13 
19->18 
6->18 
7->18 
20 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
7->20
}

Gains: 157 - 132 = 25; Width: 8; Profitable; s291
Done!
NodeTypeFreq;
MISMATCH: 3
MATCH: 9
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 2
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s292
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.034 = phi i32 [ 0, %entry ], [ %inc15, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 93
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %16, %for.body5 ]
  %16 = load float, float* %arrayidx7.7, align 8, !tbaa !2
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %im1.031 = phi i64 [ 31999, %for.cond2.preheader ], [ %indvars.iv.next.6, %for.body5 ]
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
Match: 0
7 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Found possible recurrence! Init:   %0 = phi float [ %.pre, %for.cond2.preheader ], [ %16, %for.body5 ]
  %2 = load float, float* %arrayidx7, align 4, !tbaa !2
  %4 = load float, float* %arrayidx7.1, align 32, !tbaa !2
  %6 = load float, float* %arrayidx7.2, align 4, !tbaa !2
  %8 = load float, float* %arrayidx7.3, align 8, !tbaa !2
  %10 = load float, float* %arrayidx7.4, align 4, !tbaa !2
  %12 = load float, float* %arrayidx7.5, align 16, !tbaa !2
  %14 = load float, float* %arrayidx7.6, align 4, !tbaa !2
  %16 = load float, float* %arrayidx7.7, align 8, !tbaa !2
Recurrence
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !2
Hit: load
  %5 = load float, float* %arrayidx.2, align 8, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !2
Hit: load
  %9 = load float, float* %arrayidx.4, align 16, !tbaa !2
Hit: load
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !2
Hit: load
  %13 = load float, float* %arrayidx.6, align 8, !tbaa !2
Hit: load
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !2
Hit: load
  %4 = load float, float* %arrayidx7.1, align 32, !tbaa !2
Hit: load
  %6 = load float, float* %arrayidx7.2, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx7.3, align 8, !tbaa !2
Hit: load
  %10 = load float, float* %arrayidx7.4, align 4, !tbaa !2
Hit: load
  %12 = load float, float* %arrayidx7.5, align 16, !tbaa !2
Hit: load
  %14 = load float, float* %arrayidx7.6, align 4, !tbaa !2
Hit: load
  %16 = load float, float* %arrayidx7.7, align 8, !tbaa !2
Hit: store
  store float %mul.1, float* %arrayidx12.1, align 4, !tbaa !2
Hit: store
  store float %mul.2, float* %arrayidx12.2, align 8, !tbaa !2
Hit: store
  store float %mul.3, float* %arrayidx12.3, align 4, !tbaa !2
Hit: store
  store float %mul.4, float* %arrayidx12.4, align 16, !tbaa !2
Hit: store
  store float %mul.5, float* %arrayidx12.5, align 4, !tbaa !2
Hit: store
  store float %mul.6, float* %arrayidx12.6, align 8, !tbaa !2
Hit: store
  store float %mul.7, float* %arrayidx12.7, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s292
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %18 = zext i8 %17 to i64
Closing BINOP
Found use: 7:   %im1.031 = phi i64 [ 31999, %for.cond2.preheader ], [ %indvars.iv.next.6, %for.body5 ]
Extracting:   %19 = or i64 %indvars.iv, %18
Gen:   %20 = or i64 %indvars.iv, %19
Operands done!
Generated:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %20
Gen:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %20
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx, align 32, !tbaa !2
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !2
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !2
  %8 = load float, float* %arrayidx.3, align 4, !tbaa !2
  %10 = load float, float* %arrayidx.4, align 16, !tbaa !2
  %12 = load float, float* %arrayidx.5, align 4, !tbaa !2
  %14 = load float, float* %arrayidx.6, align 8, !tbaa !2
  %16 = load float, float* %arrayidx.7, align 4, !tbaa !2
Operands done!
Generated:   %23 = load float, float* %22, align 1
Gen:   %23 = load float, float* %22, align 1
Generating MATCH
Match: 
  %idxprom6 = and i64 %im1.031, 4294967295
  %idxprom6.1 = and i64 %indvars.iv, 4294967288
  %idxprom6.2 = and i64 %indvars.iv.next, 4294967289
  %idxprom6.3 = and i64 %indvars.iv.next.1, 4294967290
  %idxprom6.4 = and i64 %indvars.iv.next.2, 4294967291
  %idxprom6.5 = and i64 %indvars.iv.next.3, 4294967292
  %idxprom6.6 = and i64 %indvars.iv.next.4, 4294967293
  %idxprom6.7 = and i64 %indvars.iv.next.5, 4294967294
Generating BINOP
Generating Mismatch
Mismatched Values:
inst:   %im1.031 = phi i64 [ 31999, %for.cond2.preheader ], [ %indvars.iv.next.6, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
inst:   %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
Non constants
Array Type: 8:i64
Created array:   %18 = alloca i64, i8 8, align 8
Gen:   %34 = load i64, i64* %33, align 8
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 1
int: i64 2
int: i64 3
int: i64 4
int: i64 5
int: i64 6
All constants
Created array: @3 = private constant [8 x i64] [i64 0, i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6]
Gen:   %36 = load i64, i64* %35, align 8
Closing BINOP
Gen:   %37 = or i64 %34, %36
Generating Mismatch
Mismatched Values:
int: i64 4294967295
int: i64 4294967288
int: i64 4294967289
int: i64 4294967290
int: i64 4294967291
int: i64 4294967292
int: i64 4294967293
int: i64 4294967294
All constants
Found Array: @3 = private constant [8 x i64] [i64 0, i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6]
Gen:   %36 = load i64, i64* %35, align 8
Operands done!
Generated:   %38 = and i64 %37, %36
Gen:   %38 = and i64 %37, %36
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.1
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.2
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.3
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.5
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.6
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.7
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %39 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %38
Gen:   %39 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %38
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx7, align 4, !tbaa !2
  %5 = load float, float* %arrayidx7.1, align 32, !tbaa !2
  %7 = load float, float* %arrayidx7.2, align 4, !tbaa !2
  %9 = load float, float* %arrayidx7.3, align 8, !tbaa !2
  %11 = load float, float* %arrayidx7.4, align 4, !tbaa !2
  %13 = load float, float* %arrayidx7.5, align 16, !tbaa !2
  %15 = load float, float* %arrayidx7.6, align 4, !tbaa !2
  %17 = load float, float* %arrayidx7.7, align 8, !tbaa !2
Operands done!
Generated:   %40 = load float, float* %39, align 1
Found use: 7:   %1 = phi float [ %.pre, %for.cond2.preheader ], [ %17, %for.body5 ]
Extracting:   %40 = load float, float* %39, align 1
Gen:   %41 = load float, float* %40, align 1
Generating MATCH
Match: 
  %add = fadd float %3, %4
  %add.1 = fadd float %5, %6
  %add.2 = fadd float %7, %8
  %add.3 = fadd float %9, %10
  %add.4 = fadd float %11, %12
  %add.5 = fadd float %13, %14
  %add.6 = fadd float %15, %16
  %add.7 = fadd float %17, %18
Operands done!
Generated:   %43 = fadd float %33, %41
Gen:   %43 = fadd float %33, %41
Generating MATCH
Match: 
  %add10 = fadd float %add, %2
  %add10.1 = fadd float %add.1, %4
  %add10.2 = fadd float %add.2, %6
  %add10.3 = fadd float %add.3, %8
  %add10.4 = fadd float %add.4, %10
  %add10.5 = fadd float %add.5, %12
  %add10.6 = fadd float %add.6, %14
  %add10.7 = fadd float %add.7, %16
Generating RECURRENCE
Gen:   %29 = phi float [ %2, %rolled.pre ]
Operands done!
Generated:   %45 = fadd float %44, %29
Gen:   %45 = fadd float %44, %29
Generating MATCH
Match: 
  %mul = fmul float %add10, 0x3FD54FDF40000000
  %mul.1 = fmul float %add10.1, 0x3FD54FDF40000000
  %mul.2 = fmul float %add10.2, 0x3FD54FDF40000000
  %mul.3 = fmul float %add10.3, 0x3FD54FDF40000000
  %mul.4 = fmul float %add10.4, 0x3FD54FDF40000000
  %mul.5 = fmul float %add10.5, 0x3FD54FDF40000000
  %mul.6 = fmul float %add10.6, 0x3FD54FDF40000000
  %mul.7 = fmul float %add10.7, 0x3FD54FDF40000000
Generating IDENTICAL
Operands done!
Generated:   %46 = fmul float %45, 0x3FD54FDF40000000
Gen:   %46 = fmul float %45, 0x3FD54FDF40000000
Generating MATCH
Match: 
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %47 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %31
Gen:   %47 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %31
Generating MATCH
Match: 
  store float %mul, float* %arrayidx12, align 32, !tbaa !2
  store float %mul.1, float* %arrayidx12.1, align 4, !tbaa !2
  store float %mul.2, float* %arrayidx12.2, align 8, !tbaa !2
  store float %mul.3, float* %arrayidx12.3, align 4, !tbaa !2
  store float %mul.4, float* %arrayidx12.4, align 16, !tbaa !2
  store float %mul.5, float* %arrayidx12.5, align 4, !tbaa !2
  store float %mul.6, float* %arrayidx12.6, align 8, !tbaa !2
  store float %mul.7, float* %arrayidx12.7, align 4, !tbaa !2
Operands done!
Generated:   store float %46, float* %47, align 1
Gen:   store float %46, float* %47, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %42 = load float, float* %41, align 1
Root:
  store float %mul, float* %arrayidx12, align 32, !tbaa !2
  store float %mul.1, float* %arrayidx12.1, align 4, !tbaa !2
  store float %mul.2, float* %arrayidx12.2, align 8, !tbaa !2
  store float %mul.3, float* %arrayidx12.3, align 4, !tbaa !2
  store float %mul.4, float* %arrayidx12.4, align 16, !tbaa !2
  store float %mul.5, float* %arrayidx12.5, align 4, !tbaa !2
  store float %mul.6, float* %arrayidx12.6, align 8, !tbaa !2
  store float %mul.7, float* %arrayidx12.7, align 4, !tbaa !2
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="and", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
16 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
17 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
18 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="0x3FD54FDF40000000", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
20->0 
2->1 
19->1 
3->2 
18->2 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
6->12 
7->12 
13->12 
14->13 
17->13 
15->14 
16->14 
11->18 
21->20 
7->20 
8->20 
22 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
8->22
23 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
11->23
}

Gains: 165 - 142 = 23; Width: 8; Recurrence Profitable; s292
Done!
NodeTypeFreq;
MISMATCH: 3
MATCH: 10
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 2
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s293
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.019 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 32
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Computing order of nodes for each lane
Read/Write memory found in between
  %1 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
2 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->0 
3->2 
4->2 
5->2 
6->5 
7->5 
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Computing order of nodes for each lane
Read/Write memory found in between
  %1 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
2 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->0 
3->2 
4->2 
5->2 
6->5 
7->5 
}

Done Loop Roller: 0/0
Nothing found in: s293
Optimizing: s2101
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.034 = phi i32 [ 0, %entry ], [ %inc18, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 83
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx11.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx11.2, align 8, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx11.3, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx11.4, align 16, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx11.5, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx11.6, align 8, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx11.7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx15.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx15.2, align 8, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx15.3, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx15.4, align 16, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx15.5, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx15.6, align 8, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx15.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx15.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx15.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx15.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx15.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx15.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx15.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx15.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s2101
Generating tree
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = zext i8 %24 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %25
Operands done!
Generated:   %27 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %26, i64 %26
Gen:   %27 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %26, i64 %26
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx7, align 32, !tbaa !4
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %12 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %15 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %18 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %21 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv, i64 %indvars.iv
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next, i64 %indvars.iv.next
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv.next.1
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv.next.2
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv.next.3
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv.next.4
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv.next.5
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %26, i64 %26
Gen:   %29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %26, i64 %26
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx11, align 32, !tbaa !4
  %4 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx11.2, align 8, !tbaa !4
  %10 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %13 = load float, float* %arrayidx11.4, align 16, !tbaa !4
  %16 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %19 = load float, float* %arrayidx11.6, align 8, !tbaa !4
  %22 = load float, float* %arrayidx11.7, align 4, !tbaa !4
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul.1 = fmul float %3, %4
  %mul.2 = fmul float %6, %7
  %mul.3 = fmul float %9, %10
  %mul.4 = fmul float %12, %13
  %mul.5 = fmul float %15, %16
  %mul.6 = fmul float %18, %19
  %mul.7 = fmul float %21, %22
Operands done!
Generated:   %31 = fmul float %28, %30
Gen:   %31 = fmul float %28, %30
Generating MATCH
Match: 
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv.next
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv.next.1
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv.next.2
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv.next.3
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv.next.4
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv.next.5
  %arrayidx15.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %32 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %26, i64 %26
Gen:   %32 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %26, i64 %26
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx15, align 32, !tbaa !4
  %5 = load float, float* %arrayidx15.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx15.2, align 8, !tbaa !4
  %11 = load float, float* %arrayidx15.3, align 4, !tbaa !4
  %14 = load float, float* %arrayidx15.4, align 16, !tbaa !4
  %17 = load float, float* %arrayidx15.5, align 4, !tbaa !4
  %20 = load float, float* %arrayidx15.6, align 8, !tbaa !4
  %23 = load float, float* %arrayidx15.7, align 4, !tbaa !4
Operands done!
Generated:   %33 = load float, float* %32, align 1
Gen:   %33 = load float, float* %32, align 1
Generating MATCH
Match: 
  %add = fadd float %2, %mul
  %add.1 = fadd float %5, %mul.1
  %add.2 = fadd float %8, %mul.2
  %add.3 = fadd float %11, %mul.3
  %add.4 = fadd float %14, %mul.4
  %add.5 = fadd float %17, %mul.5
  %add.6 = fadd float %20, %mul.6
  %add.7 = fadd float %23, %mul.7
Operands done!
Generated:   %34 = fadd float %33, %31
Gen:   %34 = fadd float %33, %31
Generating MATCH
Match: 
  store float %add, float* %arrayidx15, align 32, !tbaa !4
  store float %add.1, float* %arrayidx15.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx15.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx15.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx15.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx15.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx15.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx15.7, align 4, !tbaa !4
Operands done!
Generated:   store float %34, float* %32, align 1
Gen:   store float %34, float* %32, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx15, align 32, !tbaa !4
  store float %add.1, float* %arrayidx15.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx15.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx15.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx15.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx15.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx15.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx15.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
6->3 
7->6 
8->6 
10->9 
13->9 
11->10 
12->11 
5->11 
6->11 
6->11 
14->13 
15->14 
5->14 
6->14 
6->14 
}

Gains: 149 - 20 = 129; Width: 8; Profitable; s2101
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 9
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s2102
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.038 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %indvars.iv39 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next40, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 27
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Computing order of nodes for each lane
Hit: store
  store float 0.000000e+00, float* %arrayidx11.1, align 4, !tbaa !4
Hit: store
  store float 0.000000e+00, float* %arrayidx11.2, align 4, !tbaa !4
Hit: store
  store float 0.000000e+00, float* %arrayidx11.3, align 4, !tbaa !4
Hit: store
  store float 0.000000e+00, float* %arrayidx11.4, align 4, !tbaa !4
Hit: store
  store float 0.000000e+00, float* %arrayidx11.5, align 4, !tbaa !4
Hit: store
  store float 0.000000e+00, float* %arrayidx11.6, align 4, !tbaa !4
Hit: store
  store float 0.000000e+00, float* %arrayidx11.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s2102
Generating tree
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv39
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv39
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv39
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv39
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv39
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv39
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv39
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv39
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %1 = zext i8 %0 to i64
Closing BINOP
Gen:   %2 = or i64 %indvars.iv, %1
Generating IDENTICAL
Operands done!
Generated:   %3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %2, i64 %indvars.iv39
Gen:   %3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %2, i64 %indvars.iv39
Generating MATCH
Match: 
  store float 0.000000e+00, float* %arrayidx11, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.1, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.2, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.3, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.4, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.5, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.6, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.7, align 4, !tbaa !4
Generating IDENTICAL
Operands done!
Generated:   store float 0.000000e+00, float* %3, align 1
Gen:   store float 0.000000e+00, float* %3, align 1
Graph code generated!
Root:
  store float 0.000000e+00, float* %arrayidx11, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.1, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.2, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.3, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.4, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.5, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.6, align 4, !tbaa !4
  store float 0.000000e+00, float* %arrayidx11.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="0.000000e+00", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->0 
3->2 
4->2 
5->2 
8->2 
6->5 
7->5 
}

Gains: 53 - 8 = 45; Width: 8; Profitable; s2102
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 2
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s2111
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.046 = phi i32 [ 0, %entry ], [ %inc27, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 5
  %indvars.iv48 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next49, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 3
BlockSize: 67
  %1 = phi float [ %.pre, %for.cond6.preheader ], [ %conv17.7, %for.body9.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %2 = load float, float* %arrayidx16, align 4, !tbaa !2
  %conv17 = fptrunc double %div to float
  %conv17.1 = fptrunc double %div.1 to float
  %conv17.2 = fptrunc double %div.2 to float
  %conv17.3 = fptrunc double %div.3 to float
  %conv17.4 = fptrunc double %div.4 to float
  %conv17.5 = fptrunc double %div.5 to float
  %conv17.6 = fptrunc double %div.6 to float
Recurrence
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Invalid:   %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fptrunc", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fdiv", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fpext", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
6 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="1.900000e+00", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
8->0 
2->1 
3->2 
7->2 
4->3 
5->4 
6->4 
1->6 
9->8 
10->8 
11->8 
12->8 
13->12 
14->12 
15 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->17
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->21
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %2 = load float, float* %arrayidx16, align 4, !tbaa !2
  %conv17 = fptrunc double %div to float
  %conv17.1 = fptrunc double %div.1 to float
  %conv17.2 = fptrunc double %div.2 to float
  %conv17.3 = fptrunc double %div.3 to float
  %conv17.4 = fptrunc double %div.4 to float
  %conv17.5 = fptrunc double %div.5 to float
  %conv17.6 = fptrunc double %div.6 to float
Recurrence
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Invalid:   %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fptrunc", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fdiv", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="fpext", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
6 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="1.900000e+00", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
8->0 
2->1 
3->2 
7->2 
4->3 
5->4 
6->4 
1->6 
9->8 
10->8 
11->8 
12->8 
13->12 
14->12 
15 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->16
17 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->17
18 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->18
19 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->19
20 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->20
21 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
12->21
}

BlockSize: 10
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s2111
Optimizing: s311
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.022 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
Building reduction
  %call6 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add.7) #11
  %add.7 = fadd float %add.6, %7
BlockSize: 36
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %sum.020 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %add.6, %7
Possible reduction
  %add.7 = fadd float %add.6, %7
Building reduction
  %sum.020 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %add.6, %7
BOs:
  %add.7 = fadd float %add.6, %7
  %add.6 = fadd float %add.5, %6
  %add.5 = fadd float %add.4, %5
  %add.4 = fadd float %add.3, %4
  %add.3 = fadd float %add.2, %3
  %add.2 = fadd float %add.1, %2
  %add.1 = fadd float %add, %1
  %add = fadd float %sum.020, %0
Operands:
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands:
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: load
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s311
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %9 = zext i8 %8 to i64
Closing BINOP
Gen:   %10 = or i64 %indvars.iv, %9
Operands done!
Generated:   %11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
Gen:   %11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %12 = load float, float* %11, align 1
Gen:   %12 = load float, float* %11, align 1
Generating REDUCTION
Closing REDUCTION
Found use: 0:   %call6 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add.7) #11
Extracting:   %14 = fadd float %9, %13
Gen:   %14 = fadd float %9, %13
Graph code generated!
Root:
  %add.7 = fadd float %add.6, %7
  %add.6 = fadd float %add.5, %6
  %add.5 = fadd float %add.4, %5
  %add.4 = fadd float %add.3, %4
  %add.3 = fadd float %add.2, %3
  %add.2 = fadd float %add.1, %2
  %add.1 = fadd float %add, %1
  %add = fadd float %sum.020, %0
Root size: 8
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->1 
3->2 
4->2 
5->2 
6->5 
7->5 
8 [label="call", style="filled" , fillcolor="#f2eb5c", shape=box];
0->8
}

Gains: 61 - 9 = 52; Width: 8; Reduction Profitable; s311
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 2
IDENTICAL: 3
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 1
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: test
BlockSize: 1
BlockSize: 1
BlockSize: 8
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %s.06 = phi float [ 0.000000e+00, %entry ], [ %add, %for.body ]
  %add = fadd float %s.06, %0
Done Loop Roller: 0/0
Nothing found in: test
Optimizing: s31111
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.088 = phi i32 [ 0, %entry ], [ %inc, %test.exit39 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 8
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0, %for.body.i.preheader ]
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %s.06.i = phi float [ %add.i, %for.body.i ], [ 0.000000e+00, %for.body.i.preheader ]
  %add.i = fadd float %s.06.i, %0
BlockSize: 8
  %indvars.iv.i80 = phi i64 [ %indvars.iv.next.i84, %for.body.i86 ], [ 0, %for.body.i ]
  %indvars.iv.next.i84 = add nuw nsw i64 %indvars.iv.i80, 1
  %s.06.i81 = phi float [ %add.i83, %for.body.i86 ], [ 0.000000e+00, %for.body.i ]
  %add.i83 = fadd float %s.06.i81, %1
BlockSize: 2
BlockSize: 8
  %indvars.iv.i72 = phi i64 [ 0, %test.exit87 ], [ %indvars.iv.next.i76, %for.body.i78 ]
  %indvars.iv.next.i76 = add nuw nsw i64 %indvars.iv.i72, 1
  %s.06.i73 = phi float [ 0.000000e+00, %test.exit87 ], [ %add.i75, %for.body.i78 ]
  %add.i75 = fadd float %s.06.i73, %2
BlockSize: 2
BlockSize: 8
  %indvars.iv.i64 = phi i64 [ 0, %test.exit79 ], [ %indvars.iv.next.i68, %for.body.i70 ]
  %indvars.iv.next.i68 = add nuw nsw i64 %indvars.iv.i64, 1
  %s.06.i65 = phi float [ 0.000000e+00, %test.exit79 ], [ %add.i67, %for.body.i70 ]
  %add.i67 = fadd float %s.06.i65, %3
BlockSize: 2
BlockSize: 8
  %indvars.iv.i56 = phi i64 [ 0, %test.exit71 ], [ %indvars.iv.next.i60, %for.body.i62 ]
  %indvars.iv.next.i60 = add nuw nsw i64 %indvars.iv.i56, 1
  %s.06.i57 = phi float [ 0.000000e+00, %test.exit71 ], [ %add.i59, %for.body.i62 ]
  %add.i59 = fadd float %s.06.i57, %4
BlockSize: 2
BlockSize: 8
  %indvars.iv.i48 = phi i64 [ 0, %test.exit63 ], [ %indvars.iv.next.i52, %for.body.i54 ]
  %indvars.iv.next.i52 = add nuw nsw i64 %indvars.iv.i48, 1
  %s.06.i49 = phi float [ 0.000000e+00, %test.exit63 ], [ %add.i51, %for.body.i54 ]
  %add.i51 = fadd float %s.06.i49, %5
BlockSize: 2
BlockSize: 8
  %indvars.iv.i40 = phi i64 [ 0, %test.exit55 ], [ %indvars.iv.next.i44, %for.body.i46 ]
  %indvars.iv.next.i44 = add nuw nsw i64 %indvars.iv.i40, 1
  %s.06.i41 = phi float [ 0.000000e+00, %test.exit55 ], [ %add.i43, %for.body.i46 ]
  %add.i43 = fadd float %s.06.i41, %6
BlockSize: 2
BlockSize: 8
  %indvars.iv.i32 = phi i64 [ 0, %test.exit47 ], [ %indvars.iv.next.i36, %for.body.i38 ]
  %indvars.iv.next.i36 = add nuw nsw i64 %indvars.iv.i32, 1
  %s.06.i33 = phi float [ 0.000000e+00, %test.exit47 ], [ %add.i35, %for.body.i38 ]
  %add.i35 = fadd float %s.06.i33, %7
BlockSize: 6
Attempting Group:
Building reduction
  %call17 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add16) #11
  %add16 = fadd float %add14, %add.i35
BOs:
  %add16 = fadd float %add14, %add.i35
  %add14 = fadd float %add12, %add.i43
Operands:
  %add12 = fadd float %add10, %add.i51
  %add.i43 = fadd float %s.06.i41, %6
  %add.i35 = fadd float %s.06.i33, %7
Operands:
  %add12 = fadd float %add10, %add.i51
  %add.i43 = fadd float %s.06.i41, %6
  %add.i35 = fadd float %s.06.i33, %7
ReductionNode
Creating Node
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s31111
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %add12 = fadd float %add10, %add.i51
inst:   %add.i43 = fadd float %s.06.i41, %6
inst:   %add.i35 = fadd float %s.06.i33, %7
Non constants
Array Type: 3:float
Created array:   %8 = alloca float, i8 3, align 4
Gen:   %14 = load float, float* %13, align 4
Closing REDUCTION
Found use: 0:   %call17 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add16) #11
Extracting:   %16 = fadd float %13, %15
Gen:   %16 = fadd float %13, %15
Graph code generated!
Root:
  %add16 = fadd float %add14, %add.i35
  %add14 = fadd float %add12, %add.i43
Root size: 2
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="call", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 2 - 42 = -40; Width: 2; Reduction Unprofitable; s31111
Done Loop Roller: 0/1
Optimizing: s312
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.022 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup4 ]
BlockSize: 3
Attempting Group:
Building reduction
  ret float %mul.7
  %mul.7 = fmul float %mul.6, %7
BlockSize: 4
Attempting Group:
Building reduction
  %call6 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %mul.7) #11
  %mul.7 = fmul float %mul.6, %7
BlockSize: 36
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %prod.120 = phi float [ 1.000000e+00, %for.cond2.preheader ], [ %mul.7, %for.body5 ]
  %mul.7 = fmul float %mul.6, %7
Possible reduction
  %mul.7 = fmul float %mul.6, %7
Building reduction
  %prod.120 = phi float [ 1.000000e+00, %for.cond2.preheader ], [ %mul.7, %for.body5 ]
  %mul.7 = fmul float %mul.6, %7
BOs:
  %mul.7 = fmul float %mul.6, %7
  %mul.6 = fmul float %mul.5, %6
  %mul.5 = fmul float %mul.4, %5
  %mul.4 = fmul float %mul.3, %4
  %mul.3 = fmul float %mul.2, %3
  %mul.2 = fmul float %mul.1, %2
  %mul.1 = fmul float %mul, %1
  %mul = fmul float %prod.120, %0
Operands:
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands:
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: load
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s312
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %9 = zext i8 %8 to i64
Closing BINOP
Gen:   %10 = or i64 %indvars.iv, %9
Operands done!
Generated:   %11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
Gen:   %11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %12 = load float, float* %11, align 1
Gen:   %12 = load float, float* %11, align 1
Generating REDUCTION
Closing REDUCTION
Found use: 0:   ret float %mul.7
Extracting:   %14 = fmul float %9, %13
Gen:   %14 = fmul float %9, %13
Graph code generated!
Root:
  %mul.7 = fmul float %mul.6, %7
  %mul.6 = fmul float %mul.5, %6
  %mul.5 = fmul float %mul.4, %5
  %mul.4 = fmul float %mul.3, %4
  %mul.3 = fmul float %mul.2, %3
  %mul.2 = fmul float %mul.1, %2
  %mul.1 = fmul float %mul, %1
  %mul = fmul float %prod.120, %0
Root size: 8
digraph VTree {
0 [label="fmul red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->1 
3->2 
4->2 
5->2 
6->5 
7->5 
8 [label="ret", style="filled" , fillcolor="#f2eb5c", shape=box];
0->8
}

Gains: 61 - 9 = 52; Width: 8; Reduction Profitable; s312
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 2
IDENTICAL: 3
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 1
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s313
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.025 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
BlockSize: 3
Attempting Group:
Building reduction
  ret float %add.7
  %add.7 = fadd float %add.6, %mul.7
BlockSize: 4
Attempting Group:
Building reduction
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add.7) #11
  %add.7 = fadd float %add.6, %mul.7
BlockSize: 60
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %dot.123 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %add.6, %mul.7
Possible reduction
  %add.7 = fadd float %add.6, %mul.7
Building reduction
  %dot.123 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %add.6, %mul.7
BOs:
  %add.7 = fadd float %add.6, %mul.7
  %add.6 = fadd float %add.5, %mul.6
  %add.5 = fadd float %add.4, %mul.5
  %add.4 = fadd float %add.3, %mul.4
  %add.3 = fadd float %add.2, %mul.3
  %add.2 = fadd float %add.1, %mul.2
  %add.1 = fadd float %add, %mul.1
  %add = fadd float %dot.123, %mul
Operands:
  %mul = fmul float %0, %1
  %mul.1 = fmul float %2, %3
  %mul.2 = fmul float %4, %5
  %mul.3 = fmul float %6, %7
  %mul.4 = fmul float %8, %9
  %mul.5 = fmul float %10, %11
  %mul.6 = fmul float %12, %13
  %mul.7 = fmul float %14, %15
Operands:
  %mul = fmul float %0, %1
  %mul.1 = fmul float %2, %3
  %mul.2 = fmul float %4, %5
  %mul.3 = fmul float %6, %7
  %mul.4 = fmul float %8, %9
  %mul.5 = fmul float %10, %11
  %mul.6 = fmul float %12, %13
  %mul.7 = fmul float %14, %15
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s313
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %17 = zext i8 %16 to i64
Closing BINOP
Gen:   %18 = or i64 %indvars.iv, %17
Operands done!
Generated:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Gen:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %20 = load float, float* %19, align 1
Gen:   %20 = load float, float* %19, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
Gen:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %22 = load float, float* %21, align 1
Gen:   %22 = load float, float* %21, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul.1 = fmul float %2, %3
  %mul.2 = fmul float %4, %5
  %mul.3 = fmul float %6, %7
  %mul.4 = fmul float %8, %9
  %mul.5 = fmul float %10, %11
  %mul.6 = fmul float %12, %13
  %mul.7 = fmul float %14, %15
Operands done!
Generated:   %23 = fmul float %20, %22
Gen:   %23 = fmul float %20, %22
Generating REDUCTION
Closing REDUCTION
Found use: 0:   ret float %add.7
Extracting:   %25 = fadd float %17, %24
Gen:   %25 = fadd float %17, %24
Graph code generated!
Root:
  %add.7 = fadd float %add.6, %mul.7
  %add.6 = fadd float %add.5, %mul.6
  %add.5 = fadd float %add.4, %mul.5
  %add.4 = fadd float %add.3, %mul.4
  %add.3 = fadd float %add.2, %mul.3
  %add.2 = fadd float %add.1, %mul.2
  %add.1 = fadd float %add, %mul.1
  %add = fadd float %dot.123, %mul
Root size: 8
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
12 [label="ret", style="filled" , fillcolor="#f2eb5c", shape=box];
0->12
}

Gains: 101 - 14 = 87; Width: 8; Reduction Profitable; s313
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 5
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 1
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s314
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
Attempting Group:
BlockSize: 3
  %nl.026 = phi i32 [ 0, %entry ], [ %inc11, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
BlockSize: 43
  %1 = phi float [ %0, %for.body ], [ %.pre, %for.body5.for.body5_crit_edge ]
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next.7, %for.body5.for.body5_crit_edge ]
  %x.124 = phi float [ %0, %for.body ], [ %x.2.7, %for.body5.for.body5_crit_edge ]
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s314
Optimizing: s315
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 10
  %indvars.iv54 = phi i64 [ 0, %entry ], [ %indvars.iv.next55, %for.body ]
  %indvars.iv.next55 = add nuw nsw i64 %indvars.iv54, 1
Attempting Group:
BlockSize: 4
Attempting Group:
Building reduction
  ret float %add30
  %add30 = fadd float %add, 1.000000e+00
BlockSize: 3
  %nl.052 = phi i32 [ %inc25, %for.cond.cleanup11 ], [ 0, %for.body ]
BlockSize: 6
Attempting Group:
BlockSize: 60
  %3 = phi float [ %2, %for.body6 ], [ %.pre, %for.body12.for.body12_crit_edge ]
  %indvars.iv = phi i64 [ 0, %for.body6 ], [ %indvars.iv.next.7, %for.body12.for.body12_crit_edge ]
  %index.150 = phi i32 [ 0, %for.body6 ], [ %index.2.7, %for.body12.for.body12_crit_edge ]
  %x.149 = phi float [ %2, %for.body6 ], [ %x.2.7, %for.body12.for.body12_crit_edge ]
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s315
Optimizing: s316
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
Attempting Group:
BlockSize: 3
  %nl.026 = phi i32 [ 0, %entry ], [ %inc11, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
BlockSize: 39
  %indvars.iv = phi i64 [ 1, %for.body ], [ %indvars.iv.next.7, %for.body5.7 ]
  %x.124 = phi float [ %0, %for.body ], [ %x.2.7, %for.body5.7 ]
BlockSize: 6
Done Loop Roller: 0/0
Nothing found in: s316
Optimizing: s317
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.021 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup4 ]
BlockSize: 3
Attempting Group:
Building reduction
  ret float %mul.7
  %mul.7 = fmul float %mul.6, 0x3FEFAE1480000000
BlockSize: 4
Attempting Group:
Building reduction
  %call6 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %mul.7) #11
  %mul.7 = fmul float %mul.6, 0x3FEFAE1480000000
BlockSize: 13
  %i.020 = phi i32 [ 0, %for.cond2.preheader ], [ %inc.7, %for.body5 ]
  %inc.7 = add nuw nsw i32 %i.020, 8
  %q.119 = phi float [ 1.000000e+00, %for.cond2.preheader ], [ %mul.7, %for.body5 ]
  %mul.7 = fmul float %mul.6, 0x3FEFAE1480000000
Possible reduction
  %mul.7 = fmul float %mul.6, 0x3FEFAE1480000000
Building reduction
  %q.119 = phi float [ 1.000000e+00, %for.cond2.preheader ], [ %mul.7, %for.body5 ]
  %mul.7 = fmul float %mul.6, 0x3FEFAE1480000000
BOs:
  %mul.7 = fmul float %mul.6, 0x3FEFAE1480000000
  %mul.6 = fmul float %mul.5, 0x3FEFAE1480000000
  %mul.5 = fmul float %mul.4, 0x3FEFAE1480000000
  %mul.4 = fmul float %mul.3, 0x3FEFAE1480000000
  %mul.3 = fmul float %mul.2, 0x3FEFAE1480000000
  %mul.2 = fmul float %mul.1, 0x3FEFAE1480000000
  %mul.1 = fmul float %mul, 0x3FEFAE1480000000
  %mul = fmul float %q.119, 0x3FEFAE1480000000
Operands:
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
Operands:
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
float 0x3FEFAE1480000000
ReductionNode
Creating Node
All the Same
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s317
Generating tree
Generating REDUCTION
Generating IDENTICAL
Closing REDUCTION
Found use: 0:   ret float %mul.7
Extracting:   %2 = fmul float %1, 0x3FEFAE1480000000
Gen:   %2 = fmul float %1, 0x3FEFAE1480000000
Graph code generated!
Root:
  %mul.7 = fmul float %mul.6, 0x3FEFAE1480000000
  %mul.6 = fmul float %mul.5, 0x3FEFAE1480000000
  %mul.5 = fmul float %mul.4, 0x3FEFAE1480000000
  %mul.4 = fmul float %mul.3, 0x3FEFAE1480000000
  %mul.3 = fmul float %mul.2, 0x3FEFAE1480000000
  %mul.2 = fmul float %mul.1, 0x3FEFAE1480000000
  %mul.1 = fmul float %mul, 0x3FEFAE1480000000
  %mul = fmul float %q.119, 0x3FEFAE1480000000
Root size: 8
digraph VTree {
0 [label="fmul red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="0x3FEFAE1480000000", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2 [label="ret", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 8 - 3 = 5; Width: 8; Reduction Profitable; s317
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 0
IDENTICAL: 1
CONSTEXPR: 0
BINOP: 0
INTSEQ: 0
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 1
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s318
BlockSize: 9
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
Building reduction
  ret float %add19
  %add19 = fadd float %add11, 1.000000e+00
BlockSize: 4
  %nl.043 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
Attempting Group:
BlockSize: 6
Attempting Group:
BlockSize: 62
  %indvars.iv = phi i64 [ %3, %for.body ], [ %indvars.iv.next.7, %for.body5.7 ]
  %i.042 = phi i32 [ 1, %for.body ], [ %inc10.7, %for.body5.7 ]
  %max.140 = phi float [ %5, %for.body ], [ %max.2.7, %for.body5.7 ]
  %index.139 = phi i32 [ 0, %for.body ], [ %index.2.7, %for.body5.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 7
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 7
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
4 x 7
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 7
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
Mismatching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %8 = load float, float* %arrayidx.1, align 4, !tbaa !11
Hit: load
  %10 = load float, float* %arrayidx.2, align 4, !tbaa !11
Hit: load
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !11
Hit: load
  %14 = load float, float* %arrayidx.4, align 4, !tbaa !11
Hit: load
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !11
Hit: load
  %18 = load float, float* %arrayidx.6, align 4, !tbaa !11
Schedulable: 1
Loop Rolling: s318
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating BINOP
Generating IDENTICAL
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 7:i64
Created array:   %22 = alloca i64, i8 7, align 8
Gen:   %32 = load i64, i64* %31, align 8
Closing BINOP
Gen:   %33 = add i64 %indvars.iv, %32
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 7:i64
Created array:   %30 = alloca i64, i8 7, align 8
Gen:   %43 = load i64, i64* %42, align 8
Closing BINOP
Gen:   %44 = add i64 %41, %43
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 7:i64
Created array:   %38 = alloca i64, i8 7, align 8
Gen:   %54 = load i64, i64* %53, align 8
Closing BINOP
Gen:   %55 = add i64 %52, %54
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 7:i64
Created array:   %46 = alloca i64, i8 7, align 8
Gen:   %65 = load i64, i64* %64, align 8
Closing BINOP
Gen:   %66 = add i64 %63, %65
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 7:i64
Created array:   %54 = alloca i64, i8 7, align 8
Gen:   %76 = load i64, i64* %75, align 8
Closing BINOP
Gen:   %77 = add i64 %74, %76
Generating Mismatch
Mismatched Values:
int: i64 0
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
inst:   %3 = sext i32 %2 to i64
Non constants
Array Type: 7:i64
Created array:   %62 = alloca i64, i8 7, align 8
Gen:   %87 = load i64, i64* %86, align 8
Closing BINOP
Found use: 6:   %indvars.iv.next.6 = add i64 %indvars.iv.next.5, %3
Extracting:   %88 = add i64 %85, %87
Gen:   %89 = add i64 %86, %88
Operands done!
Generated:   %91 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %89
Gen:   %91 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %89
Generating MATCH
Match: 
  %7 = load float, float* %arrayidx, align 4, !tbaa !11
  %9 = load float, float* %arrayidx.1, align 4, !tbaa !11
  %11 = load float, float* %arrayidx.2, align 4, !tbaa !11
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !11
  %15 = load float, float* %arrayidx.4, align 4, !tbaa !11
  %17 = load float, float* %arrayidx.5, align 4, !tbaa !11
  %19 = load float, float* %arrayidx.6, align 4, !tbaa !11
Operands done!
Generated:   %92 = load float, float* %91, align 1
Gen:   %92 = load float, float* %91, align 1
Generating MATCH
Match: 
  %8 = tail call float @llvm.fabs.f32(float %7)
  %10 = tail call float @llvm.fabs.f32(float %9)
  %12 = tail call float @llvm.fabs.f32(float %11)
  %14 = tail call float @llvm.fabs.f32(float %13)
  %16 = tail call float @llvm.fabs.f32(float %15)
  %18 = tail call float @llvm.fabs.f32(float %17)
  %20 = tail call float @llvm.fabs.f32(float %19)
Generating IDENTICAL
Operands done!
Generated:   %93 = tail call float @llvm.fabs.f32(float %92)
Found use: 0:   %max.2 = select i1 %cmp6, float %8, float %max.140
Found use: 1:   %max.2.1 = select i1 %cmp6.1, float %10, float %max.2
Found use: 2:   %max.2.2 = select i1 %cmp6.2, float %12, float %max.2.1
Found use: 3:   %max.2.3 = select i1 %cmp6.3, float %14, float %max.2.2
Found use: 4:   %max.2.4 = select i1 %cmp6.4, float %16, float %max.2.3
Found use: 5:   %max.2.5 = select i1 %cmp6.5, float %18, float %max.2.4
Found use: 6:   %max.2.6 = select i1 %cmp6.6, float %20, float %max.2.5
Extracting:   %93 = tail call float @llvm.fabs.f32(float %92)
Gen:   %94 = tail call float @llvm.fabs.f32(float %93)
Graph code generated!
Root:
  %9 = tail call float @llvm.fabs.f32(float %8)
  %11 = tail call float @llvm.fabs.f32(float %10)
  %13 = tail call float @llvm.fabs.f32(float %12)
  %15 = tail call float @llvm.fabs.f32(float %14)
  %17 = tail call float @llvm.fabs.f32(float %16)
  %19 = tail call float @llvm.fabs.f32(float %18)
  %21 = tail call float @llvm.fabs.f32(float %20)
Root size: 7
digraph VTree {
0 [label="call: llvm.fabs.f32", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
13 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
14 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
15 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
16 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
17 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
18 [label="func: llvm.fabs.f32", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
18->0 
2->1 
3->2 
4->2 
5->2 
6->5 
17->5 
7->6 
16->6 
8->7 
15->7 
9->8 
14->8 
10->9 
13->9 
11->10 
12->10 
19 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->19
20 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->20
21 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->21
22 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->22
23 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->23
24 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->24
25 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->25
26 [label="add", style="filled" , fillcolor="#f2eb5c", shape=box];
5->26
}

Gains: 48 - 590 = -542; Width: 7; Unprofitable; s318
BlockSize: 9
Attempting Group:
Done Loop Roller: 0/1
Optimizing: s319
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.047 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
BlockSize: 3
Attempting Group:
Building reduction
  ret float %add22.7
  %add22.7 = fadd float %add12.7, %add17.7
BlockSize: 4
Attempting Group:
Building reduction
  %call23 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add22.7) #11
  %add22.7 = fadd float %add12.7, %add17.7
BlockSize: 124
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %sum.145 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add22.7, %for.body5 ]
  %add22.7 = fadd float %add12.7, %add17.7
Possible reduction
  %add22.7 = fadd float %add12.7, %add17.7
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx16.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx16.2, align 8, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx16.3, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx16.4, align 16, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx16.5, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx16.6, align 8, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx16.7, align 4, !tbaa !4
Hit: store
  store float %add17.1, float* %arrayidx19.1, align 4, !tbaa !4
Hit: store
  store float %add17.2, float* %arrayidx19.2, align 8, !tbaa !4
Hit: store
  store float %add17.3, float* %arrayidx19.3, align 4, !tbaa !4
Hit: store
  store float %add17.4, float* %arrayidx19.4, align 16, !tbaa !4
Hit: store
  store float %add17.5, float* %arrayidx19.5, align 4, !tbaa !4
Hit: store
  store float %add17.6, float* %arrayidx19.6, align 8, !tbaa !4
Hit: store
  store float %add17.7, float* %arrayidx19.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s319
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = zext i8 %24 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %25
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %26
Gen:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %26
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %add = fadd float %0, %1
  %add.1 = fadd float %3, %4
  %add.2 = fadd float %6, %7
  %add.3 = fadd float %9, %10
  %add.4 = fadd float %12, %13
  %add.5 = fadd float %15, %16
  %add.6 = fadd float %18, %19
  %add.7 = fadd float %21, %22
Operands done!
Generated:   %31 = fadd float %28, %30
Found use: 0:   %add12 = fadd float %sum.145, %add
Found use: 1:   %add12.1 = fadd float %add22, %add.1
Found use: 2:   %add12.2 = fadd float %add22.1, %add.2
Found use: 3:   %add12.3 = fadd float %add22.2, %add.3
Found use: 4:   %add12.4 = fadd float %add22.3, %add.4
Found use: 5:   %add12.5 = fadd float %add22.4, %add.5
Found use: 6:   %add12.6 = fadd float %add22.5, %add.6
Found use: 7:   %add12.7 = fadd float %add22.6, %add.7
Extracting:   %31 = fadd float %28, %30
Gen:   %32 = fadd float %29, %31
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %27
Gen:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %27
Generating MATCH
Match: 
  store float %add, float* %arrayidx9, align 32, !tbaa !4
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   store float %32, float* %34, align 1
Gen:   store float %32, float* %34, align 1
Generating MATCH
Match: 
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %27
Gen:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %27
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx16, align 32, !tbaa !4
  %6 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %9 = load float, float* %arrayidx16.2, align 8, !tbaa !4
  %12 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %15 = load float, float* %arrayidx16.4, align 16, !tbaa !4
  %18 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %21 = load float, float* %arrayidx16.6, align 8, !tbaa !4
  %24 = load float, float* %arrayidx16.7, align 4, !tbaa !4
Operands done!
Generated:   %36 = load float, float* %35, align 1
Gen:   %36 = load float, float* %35, align 1
Generating MATCH
Match: 
  %add17 = fadd float %1, %3
  %add17.1 = fadd float %4, %6
  %add17.2 = fadd float %7, %9
  %add17.3 = fadd float %10, %12
  %add17.4 = fadd float %13, %15
  %add17.5 = fadd float %16, %18
  %add17.6 = fadd float %19, %21
  %add17.7 = fadd float %22, %24
Operands done!
Generated:   %37 = fadd float %29, %36
Found use: 0:   %add22 = fadd float %add12, %add17
Found use: 1:   %add22.1 = fadd float %add12.1, %add17.1
Found use: 2:   %add22.2 = fadd float %add12.2, %add17.2
Found use: 3:   %add22.3 = fadd float %add12.3, %add17.3
Found use: 4:   %add22.4 = fadd float %add12.4, %add17.4
Found use: 5:   %add22.5 = fadd float %add12.5, %add17.5
Found use: 6:   %add22.6 = fadd float %add12.6, %add17.6
Found use: 7:   %add22.7 = fadd float %add12.7, %add17.7
Extracting:   %37 = fadd float %29, %36
Gen:   %38 = fadd float %30, %37
Generating MATCH
Match: 
  %arrayidx19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx19.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx19.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx19.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx19.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx19.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx19.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx19.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %28
Gen:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %28
Generating MATCH
Match: 
  store float %add17, float* %arrayidx19, align 32, !tbaa !4
  store float %add17.1, float* %arrayidx19.1, align 4, !tbaa !4
  store float %add17.2, float* %arrayidx19.2, align 8, !tbaa !4
  store float %add17.3, float* %arrayidx19.3, align 4, !tbaa !4
  store float %add17.4, float* %arrayidx19.4, align 16, !tbaa !4
  store float %add17.5, float* %arrayidx19.5, align 4, !tbaa !4
  store float %add17.6, float* %arrayidx19.6, align 8, !tbaa !4
  store float %add17.7, float* %arrayidx19.7, align 4, !tbaa !4
Operands done!
Generated:   store float %38, float* %40, align 1
Gen:   store float %38, float* %40, align 1
Generating MULTI
Graph code generated!
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
15->0 
2->1 
13->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->11 
6->11 
7->11 
14->13 
6->13 
7->13 
16->15 
20->15 
3->16 
17->16 
18->17 
19->18 
6->18 
7->18 
21->20 
6->20 
7->20 
22 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->22
23 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->23
24 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->24
25 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->25
26 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->26
27 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->27
28 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->28
29 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
2->29
30 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
16->30
31 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
16->31
32 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
16->32
33 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
16->33
34 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
16->34
35 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
16->35
36 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
16->36
37 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
16->37
}

Gains: 197 - 128 = 69; Width: 0; Profitable; s319
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 12
IDENTICAL: 7
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 1
Building reduction
  %sum.145 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %66, %rolled.exit ]
  %66 = fadd float %65, %50
Done Loop Roller: 1/1
Optimizing: s3110
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 6
Attempting Group:
Building reduction
  ret float %add32
  %add32 = fadd float %add31, 1.000000e+00
BOs:
  %add32 = fadd float %add31, 1.000000e+00
  %add31 = fadd float %add29, %conv20
  %add29 = fadd float %add, 1.000000e+00
Operands:
  %add = fadd float %max.3.7, %conv
float 1.000000e+00
  %conv20 = sitofp i32 %yindex.3.7 to float
float 1.000000e+00
Operands:
  %add = fadd float %max.3.7, %conv
float 1.000000e+00
  %conv20 = sitofp i32 %yindex.3.7 to float
float 1.000000e+00
ReductionNode
Creating Node
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s3110
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %add = fadd float %max.3.7, %conv
const: float 1.000000e+00
inst:   %conv20 = sitofp i32 %yindex.3.7 to float
const: float 1.000000e+00
Non constants
Array Type: 4:float
Created array:   %25 = alloca float, i8 4, align 4
Gen:   %32 = load float, float* %31, align 4
Closing REDUCTION
Found use: 0:   ret float %add32
Extracting:   %34 = fadd float %31, %33
Gen:   %34 = fadd float %31, %33
Graph code generated!
Root:
  %add32 = fadd float %add31, 1.000000e+00
  %add31 = fadd float %add29, %conv20
  %add29 = fadd float %add, 1.000000e+00
Root size: 3
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="ret", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 3 - 54 = -51; Width: 3; Reduction Unprofitable; s3110
BlockSize: 3
  %nl.062 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup4 ]
BlockSize: 6
  %indvars.iv63 = phi i64 [ 0, %for.body ], [ %indvars.iv.next64, %for.cond.cleanup8 ]
  %xindex.160 = phi i32 [ 0, %for.body ], [ %xindex.3.7, %for.cond.cleanup8 ]
  %max.159 = phi float [ %0, %for.body ], [ %max.3.7, %for.cond.cleanup8 ]
  %yindex.158 = phi i32 [ 0, %for.body ], [ %yindex.3.7, %for.cond.cleanup8 ]
BlockSize: 8
Attempting Group:
Building reduction
  %call22 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add21) #11
  %add21 = fadd float %add, %conv20
BOs:
  %add21 = fadd float %add, %conv20
  %add = fadd float %max.3.7, %conv
Operands:
  %max.3.7 = select i1 %cmp12.7, float %22, float %max.3.6
  %conv = sitofp i32 %xindex.3.7 to float
  %conv20 = sitofp i32 %yindex.3.7 to float
Operands:
  %max.3.7 = select i1 %cmp12.7, float %22, float %max.3.6
  %conv = sitofp i32 %xindex.3.7 to float
  %conv20 = sitofp i32 %yindex.3.7 to float
ReductionNode
Creating Node
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s3110
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %max.3.7 = select i1 %cmp12.7, float %22, float %max.3.6
inst:   %conv = sitofp i32 %xindex.3.7 to float
inst:   %conv20 = sitofp i32 %yindex.3.7 to float
Non constants
Array Type: 3:float
Created array:   %25 = alloca float, i8 3, align 4
Gen:   %31 = load float, float* %30, align 4
Closing REDUCTION
Found use: 0:   %call22 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add21) #11
Found use: 1:   %add29 = fadd float %add, 1.000000e+00
Extracting:   %33 = fadd float %30, %32
Gen:   %34 = fadd float %31, %33
Graph code generated!
Root:
  %add21 = fadd float %add, %conv20
  %add = fadd float %max.3.7, %conv
Root size: 2
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="call", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
3 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
0->3
}

Gains: 2 - 57 = -55; Width: 2; Reduction Unprofitable; s3110
BlockSize: 3
BlockSize: 70
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %xindex.256 = phi i32 [ %xindex.160, %for.cond6.preheader ], [ %xindex.3.7, %for.body9 ]
  %xindex.3.7 = select i1 %25, i32 %2, i32 %xindex.256
  %max.255 = phi float [ %max.159, %for.cond6.preheader ], [ %max.3.7, %for.body9 ]
  %max.3.7 = select i1 %cmp12.7, float %23, float %max.3.6
  %yindex.254 = phi i32 [ %yindex.158, %for.cond6.preheader ], [ %yindex.3.7, %for.body9 ]
  %yindex.3.7 = select i1 %cmp12.7, i32 %24, i32 %yindex.3.6
Done Loop Roller: 0/2
Optimizing: s13110
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 6
Attempting Group:
Building reduction
  ret float %add32
  %add32 = fadd float %add31, 1.000000e+00
BOs:
  %add32 = fadd float %add31, 1.000000e+00
  %add31 = fadd float %add29, %conv20
  %add29 = fadd float %add, 1.000000e+00
Operands:
  %add = fadd float %max.3.7, %conv
float 1.000000e+00
  %conv20 = sitofp i32 %yindex.3.7 to float
float 1.000000e+00
Operands:
  %add = fadd float %max.3.7, %conv
float 1.000000e+00
  %conv20 = sitofp i32 %yindex.3.7 to float
float 1.000000e+00
ReductionNode
Creating Node
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s13110
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %add = fadd float %max.3.7, %conv
const: float 1.000000e+00
inst:   %conv20 = sitofp i32 %yindex.3.7 to float
const: float 1.000000e+00
Non constants
Array Type: 4:float
Created array:   %25 = alloca float, i8 4, align 4
Gen:   %32 = load float, float* %31, align 4
Closing REDUCTION
Found use: 0:   ret float %add32
Extracting:   %34 = fadd float %31, %33
Gen:   %34 = fadd float %31, %33
Graph code generated!
Root:
  %add32 = fadd float %add31, 1.000000e+00
  %add31 = fadd float %add29, %conv20
  %add29 = fadd float %add, 1.000000e+00
Root size: 3
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="ret", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 3 - 54 = -51; Width: 3; Reduction Unprofitable; s13110
BlockSize: 3
  %nl.062 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup4 ]
BlockSize: 6
  %indvars.iv63 = phi i64 [ 0, %for.body ], [ %indvars.iv.next64, %for.cond.cleanup8 ]
  %xindex.160 = phi i32 [ 0, %for.body ], [ %xindex.3.7, %for.cond.cleanup8 ]
  %max.159 = phi float [ %0, %for.body ], [ %max.3.7, %for.cond.cleanup8 ]
  %yindex.158 = phi i32 [ 0, %for.body ], [ %yindex.3.7, %for.cond.cleanup8 ]
BlockSize: 8
Attempting Group:
Building reduction
  %call22 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add21) #11
  %add21 = fadd float %add, %conv20
BOs:
  %add21 = fadd float %add, %conv20
  %add = fadd float %max.3.7, %conv
Operands:
  %max.3.7 = select i1 %cmp12.7, float %22, float %max.3.6
  %conv = sitofp i32 %xindex.3.7 to float
  %conv20 = sitofp i32 %yindex.3.7 to float
Operands:
  %max.3.7 = select i1 %cmp12.7, float %22, float %max.3.6
  %conv = sitofp i32 %xindex.3.7 to float
  %conv20 = sitofp i32 %yindex.3.7 to float
ReductionNode
Creating Node
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: s13110
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %max.3.7 = select i1 %cmp12.7, float %22, float %max.3.6
inst:   %conv = sitofp i32 %xindex.3.7 to float
inst:   %conv20 = sitofp i32 %yindex.3.7 to float
Non constants
Array Type: 3:float
Created array:   %25 = alloca float, i8 3, align 4
Gen:   %31 = load float, float* %30, align 4
Closing REDUCTION
Found use: 0:   %call22 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add21) #11
Found use: 1:   %add29 = fadd float %add, 1.000000e+00
Extracting:   %33 = fadd float %30, %32
Gen:   %34 = fadd float %31, %33
Graph code generated!
Root:
  %add21 = fadd float %add, %conv20
  %add = fadd float %max.3.7, %conv
Root size: 2
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="call", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
3 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
0->3
}

Gains: 2 - 57 = -55; Width: 2; Reduction Unprofitable; s13110
BlockSize: 3
BlockSize: 70
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %xindex.256 = phi i32 [ %xindex.160, %for.cond6.preheader ], [ %xindex.3.7, %for.body9 ]
  %xindex.3.7 = select i1 %25, i32 %2, i32 %xindex.256
  %max.255 = phi float [ %max.159, %for.cond6.preheader ], [ %max.3.7, %for.body9 ]
  %max.3.7 = select i1 %cmp12.7, float %23, float %max.3.6
  %yindex.254 = phi i32 [ %yindex.158, %for.cond6.preheader ], [ %yindex.3.7, %for.body9 ]
  %yindex.3.7 = select i1 %cmp12.7, i32 %24, i32 %yindex.3.6
Done Loop Roller: 0/2
Optimizing: s3111
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.026 = phi i32 [ 0, %entry ], [ %inc11, %for.cond.cleanup4 ]
BlockSize: 3
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 52
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %sum.124 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %sum.2.7, %for.body5 ]
  %sum.2.7 = select i1 %cmp6.7, float %add.7, float %sum.2.6
Done Loop Roller: 0/0
Nothing found in: s3111
Optimizing: s3112
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.026 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
BlockSize: 3
Attempting Group:
Building reduction
  ret float %add.7
  %add.7 = fadd float %add.6, %7
BlockSize: 4
Attempting Group:
Building reduction
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add.7) #11
  %add.7 = fadd float %add.6, %7
BlockSize: 52
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %sum.124 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %add.6, %7
Possible reduction
  %add.7 = fadd float %add.6, %7
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Found possible recurrence! Init:   %sum.124 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add = fadd float %sum.124, %0
  %add.1 = fadd float %add, %1
  %add.2 = fadd float %add.1, %2
  %add.3 = fadd float %add.2, %3
  %add.4 = fadd float %add.3, %4
  %add.5 = fadd float %add.4, %5
  %add.6 = fadd float %add.5, %6
  %add.7 = fadd float %add.6, %7
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s3112
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %9 = zext i8 %8 to i64
Closing BINOP
Gen:   %10 = or i64 %indvars.iv, %9
Operands done!
Generated:   %11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
Gen:   %11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %12 = load float, float* %11, align 1
Gen:   %12 = load float, float* %11, align 1
Generating MATCH
Match: 
  %add = fadd float %sum.124, %0
  %add.1 = fadd float %add, %1
  %add.2 = fadd float %add.1, %2
  %add.3 = fadd float %add.2, %3
  %add.4 = fadd float %add.3, %4
  %add.5 = fadd float %add.4, %5
  %add.6 = fadd float %add.5, %6
  %add.7 = fadd float %add.6, %7
Generating RECURRENCE
Gen:   %9 = phi float [ %sum.124, %rolled.pre ]
Operands done!
Generated:   %14 = fadd float %9, %13
Found use: 7:   ret float %add.7
Extracting:   %14 = fadd float %9, %13
Gen:   %15 = fadd float %10, %14
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %17 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %12
Gen:   %17 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %12
Generating MATCH
Match: 
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   store float %15, float* %17, align 1
Gen:   store float %15, float* %17, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %15 = fadd float %10, %14
Root:
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
3->1 
1->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
6->10 
7->10 
12 [label="ret", style="filled" , fillcolor="#f2eb5c", shape=box];
1->12
}

Gains: 93 - 22 = 71; Width: 8; Recurrence Profitable; s3112
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 5
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s3113
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
Attempting Group:
BlockSize: 4
  %nl.026 = phi i32 [ 0, %entry ], [ %inc11, %for.cond.cleanup4 ]
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 51
  %2 = phi float [ %0, %for.body ], [ %.pre, %for.body5.for.body5_crit_edge ]
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next.7, %for.body5.for.body5_crit_edge ]
  %max.124 = phi float [ %1, %for.body ], [ %max.2.7, %for.body5.for.body5_crit_edge ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float %0) #6

Call3
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !2
digraph VTree {
0 [label="call: llvm.fabs.f32", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
2 [label="func: llvm.fabs.f32", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->0 
3 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->3
4 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->4
5 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->5
6 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->6
7 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->7
8 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->8
9 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->9
10 [label="select", style="filled" , fillcolor="#f2eb5c", shape=box];
0->10
}

BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s3113
Optimizing: s321
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.025 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 60
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add.7, %for.body5.7 ]
  %add = fadd float %2, %mul
  %add.1 = fadd float %4, %mul.1
  %add.2 = fadd float %6, %mul.2
  %add.3 = fadd float %8, %mul.3
  %add.4 = fadd float %10, %mul.4
  %add.5 = fadd float %12, %mul.5
  %add.6 = fadd float %14, %mul.6
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !2
Hit: load
  %5 = load float, float* %arrayidx7.2, align 4, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !2
Hit: load
  %9 = load float, float* %arrayidx7.4, align 4, !tbaa !2
Hit: load
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !2
Hit: load
  %13 = load float, float* %arrayidx7.6, align 4, !tbaa !2
Hit: load
  %4 = load float, float* %arrayidx9.1, align 4, !tbaa !2
Hit: load
  %6 = load float, float* %arrayidx9.2, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx9.3, align 4, !tbaa !2
Hit: load
  %10 = load float, float* %arrayidx9.4, align 4, !tbaa !2
Hit: load
  %12 = load float, float* %arrayidx9.5, align 4, !tbaa !2
Hit: load
  %14 = load float, float* %arrayidx9.6, align 4, !tbaa !2
Hit: store
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !2
Hit: store
  store float %add.2, float* %arrayidx9.2, align 4, !tbaa !2
Hit: store
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !2
Hit: store
  store float %add.4, float* %arrayidx9.4, align 4, !tbaa !2
Hit: store
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !2
Hit: store
  store float %add.6, float* %arrayidx9.6, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s321
Generating tree
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %18 = zext i8 %17 to i64
Closing BINOP
Gen:   %19 = add nuw nsw i64 %indvars.iv, %18
Operands done!
Generated:   %20 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %19
Gen:   %20 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %19
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 4, !tbaa !2
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !2
  %5 = load float, float* %arrayidx7.2, align 4, !tbaa !2
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !2
  %9 = load float, float* %arrayidx7.4, align 4, !tbaa !2
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !2
  %13 = load float, float* %arrayidx7.6, align 4, !tbaa !2
Operands done!
Generated:   %21 = load float, float* %20, align 1
Gen:   %21 = load float, float* %20, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul.1 = fmul float %add, %3
  %mul.2 = fmul float %add.1, %5
  %mul.3 = fmul float %add.2, %7
  %mul.4 = fmul float %add.3, %9
  %mul.5 = fmul float %add.4, %11
  %mul.6 = fmul float %add.5, %13
Generating RECURRENCE
Gen:   %18 = phi float [ %0, %rolled.pre ]
Operands done!
Generated:   %23 = fmul float %18, %22
Gen:   %23 = fmul float %18, %22
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %24 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
Gen:   %24 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx9, align 4, !tbaa !2
  %4 = load float, float* %arrayidx9.1, align 4, !tbaa !2
  %6 = load float, float* %arrayidx9.2, align 4, !tbaa !2
  %8 = load float, float* %arrayidx9.3, align 4, !tbaa !2
  %10 = load float, float* %arrayidx9.4, align 4, !tbaa !2
  %12 = load float, float* %arrayidx9.5, align 4, !tbaa !2
  %14 = load float, float* %arrayidx9.6, align 4, !tbaa !2
Operands done!
Generated:   %25 = load float, float* %24, align 1
Gen:   %25 = load float, float* %24, align 1
Generating MATCH
Match: 
  %add = fadd float %2, %mul
  %add.1 = fadd float %4, %mul.1
  %add.2 = fadd float %6, %mul.2
  %add.3 = fadd float %8, %mul.3
  %add.4 = fadd float %10, %mul.4
  %add.5 = fadd float %12, %mul.5
  %add.6 = fadd float %14, %mul.6
Operands done!
Generated:   %26 = fadd float %25, %23
Found use: 6:   %mul.7 = fmul float %add.6, %15
Extracting:   %26 = fadd float %25, %23
Gen:   %27 = fadd float %26, %24
Generating MATCH
Match: 
  store float %add, float* %arrayidx9, align 4, !tbaa !2
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx9.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx9.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx9.6, align 4, !tbaa !2
Operands done!
Generated:   store float %27, float* %25, align 1
Gen:   store float %27, float* %25, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %27 = fadd float %26, %24
Root:
  store float %add, float* %arrayidx9, align 4, !tbaa !2
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !2
  store float %add.2, float* %arrayidx9.2, align 4, !tbaa !2
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !2
  store float %add.4, float* %arrayidx9.4, align 4, !tbaa !2
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !2
  store float %add.6, float* %arrayidx9.6, align 4, !tbaa !2
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->9 
1->10 
12->11 
13->12 
5->12 
6->12 
14 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
1->14
}

Gains: 102 - 25 = 77; Width: 7; Recurrence Profitable; s321
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 7
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 0
BlockSize: 9
Done Loop Roller: 1/1
Optimizing: s322
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
  %nl.037 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 80
  %0 = phi float [ %.pre40, %for.cond2.preheader ], [ %add16.6, %for.body5.6 ]
  %1 = phi float [ %.pre, %for.cond2.preheader ], [ %add16.7, %for.body5.6 ]
  %indvars.iv = phi i64 [ 2, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.6 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Is Addition
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Found possible recurrence! Init:   %1 = phi float [ %.pre, %for.cond2.preheader ], [ %add16.7, %for.body5.6 ]
  %add16 = fadd float %add, %mul15
  %add16.1 = fadd float %add.1, %mul15.1
  %add16.2 = fadd float %add.2, %mul15.2
  %add16.3 = fadd float %add.3, %mul15.3
  %add16.4 = fadd float %add.4, %mul15.4
  %add16.5 = fadd float %add.5, %mul15.5
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %add16 = fadd float %add, %mul15
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
17 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
4->0 
2->1 
15->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->10 
1->11 
13->12 
14->13 
6->13 
7->13 
16->15 
17->15 
18->17 
19->18 
6->18 
7->18 
20 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
21 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
1->21
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Is Addition
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
6 x 6
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Found possible recurrence! Init:   %1 = phi float [ %.pre, %for.cond2.preheader ], [ %add16.7, %for.body5.6 ]
  %add16 = fadd float %add, %mul15
  %add16.1 = fadd float %add.1, %mul15.1
  %add16.2 = fadd float %add.2, %mul15.2
  %add16.3 = fadd float %add.3, %mul15.3
  %add16.4 = fadd float %add.4, %mul15.4
  %add16.5 = fadd float %add.5, %mul15.5
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
6 x 6
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %add16 = fadd float %add, %mul15
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
17 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
4->0 
2->1 
15->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->10 
1->11 
13->12 
14->13 
6->13 
7->13 
16->15 
17->15 
18->17 
19->18 
6->18 
7->18 
20 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
21 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
1->21
}

Building reduction
  store float %add16.5, float* %arrayidx.5, align 4, !tbaa !2
  %add16.5 = fadd float %add.5, %mul15.5
BOs:
  %add16.5 = fadd float %add.5, %mul15.5
  %add.5 = fadd float %19, %mul.5
Operands:
  %19 = load float, float* %arrayidx.5, align 4, !tbaa !2
  %mul.5 = fmul float %add16.4, %20
  %mul15.5 = fmul float %add16.3, %21
Operands:
  %19 = load float, float* %arrayidx.5, align 4, !tbaa !2
  %mul.5 = fmul float %add16.4, %20
  %mul15.5 = fmul float %add16.3, %21
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  %21 = load float, float* %arrayidx14.5, align 4, !tbaa !2
Building reduction
  store float %add16.4, float* %arrayidx.4, align 8, !tbaa !2
  %add16.4 = fadd float %add.4, %mul15.4
BOs:
  %add16.4 = fadd float %add.4, %mul15.4
  %add.4 = fadd float %16, %mul.4
Operands:
  %16 = load float, float* %arrayidx.4, align 8, !tbaa !2
  %mul.4 = fmul float %add16.3, %17
  %mul15.4 = fmul float %add16.2, %18
Operands:
  %16 = load float, float* %arrayidx.4, align 8, !tbaa !2
  %mul.4 = fmul float %add16.3, %17
  %mul15.4 = fmul float %add16.2, %18
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  %18 = load float, float* %arrayidx14.4, align 8, !tbaa !2
Building reduction
  store float %add16.2, float* %arrayidx.2, align 8, !tbaa !2
  %add16.2 = fadd float %add.2, %mul15.2
BOs:
  %add16.2 = fadd float %add.2, %mul15.2
  %add.2 = fadd float %10, %mul.2
Operands:
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !2
  %mul.2 = fmul float %add16.1, %11
  %mul15.2 = fmul float %add16, %12
Operands:
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !2
  %mul.2 = fmul float %add16.1, %11
  %mul15.2 = fmul float %add16, %12
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  %12 = load float, float* %arrayidx14.2, align 8, !tbaa !2
Building reduction
  store float %add16.3, float* %arrayidx.3, align 4, !tbaa !2
  %add16.3 = fadd float %add.3, %mul15.3
BOs:
  %add16.3 = fadd float %add.3, %mul15.3
  %add.3 = fadd float %13, %mul.3
Operands:
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !2
  %mul.3 = fmul float %add16.2, %14
  %mul15.3 = fmul float %add16.1, %15
Operands:
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !2
  %mul.3 = fmul float %add16.2, %14
  %mul15.3 = fmul float %add16.1, %15
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  %15 = load float, float* %arrayidx14.3, align 4, !tbaa !2
Building reduction
  store float %add16.1, float* %arrayidx.1, align 4, !tbaa !2
  %add16.1 = fadd float %add.1, %mul15.1
BOs:
  %add16.1 = fadd float %add.1, %mul15.1
  %add.1 = fadd float %5, %mul.1
Operands:
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !2
  %mul.1 = fmul float %add16, %6
  %mul15.1 = fmul float %8, %9
Operands:
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !2
  %mul.1 = fmul float %add16, %6
  %mul15.1 = fmul float %8, %9
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  %8 = load float, float* %arrayidx12.1, align 4, !tbaa !2
Building reduction
  store float %add16, float* %arrayidx, align 8, !tbaa !2
  %add16 = fadd float %add, %mul15
BOs:
  %add16 = fadd float %add, %mul15
  %add = fadd float %2, %mul
Operands:
  %2 = load float, float* %arrayidx, align 8, !tbaa !2
  %mul = fmul float %1, %3
  %mul15 = fmul float %0, %4
Operands:
  %2 = load float, float* %arrayidx, align 8, !tbaa !2
  %mul = fmul float %1, %3
  %mul15 = fmul float %0, %4
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  %4 = load float, float* %arrayidx14, align 8, !tbaa !2
BlockSize: 25
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Found possible recurrence! Init:   %add16.5 = fadd float %add.5, %mul15.5
  %add16.6 = fadd float %add.6, %mul15.6
  %add16.7 = fadd float %add.7, %mul15.7
Recurrence
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %25 = load float, float* %arrayidx.7, align 4, !tbaa !2
Hit: load
  %26 = load float, float* %arrayidx9.7, align 4, !tbaa !2
Hit: load
  %27 = load float, float* %arrayidx14.7, align 4, !tbaa !2
Hit: store
  store float %add16.7, float* %arrayidx.7, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s322
Generating tree
Generating MATCH
Match: 
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %30 = add i64 %29, 6
Closing BINOP
Gen:   %31 = add nuw nsw i64 %indvars.iv, %30
Operands done!
Generated:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %31
Gen:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %31
Generating MATCH
Match: 
  %22 = load float, float* %arrayidx.6, align 8, !tbaa !2
  %25 = load float, float* %arrayidx.7, align 4, !tbaa !2
Operands done!
Generated:   %33 = load float, float* %32, align 1
Gen:   %33 = load float, float* %32, align 1
Generating MATCH
Match: 
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %31
Gen:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %31
Generating MATCH
Match: 
  %23 = load float, float* %arrayidx9.6, align 8, !tbaa !2
  %26 = load float, float* %arrayidx9.7, align 4, !tbaa !2
Operands done!
Generated:   %35 = load float, float* %34, align 1
Gen:   %35 = load float, float* %34, align 1
Generating MATCH
Match: 
  %mul.6 = fmul float %add16.5, %23
  %mul.7 = fmul float %add16.6, %26
Generating RECURRENCE
Gen:   %29 = phi float [ %add16.5, %rolled.pre ]
Operands done!
Generated:   %37 = fmul float %29, %36
Gen:   %37 = fmul float %29, %36
Generating MATCH
Match: 
  %add.6 = fadd float %22, %mul.6
  %add.7 = fadd float %25, %mul.7
Operands done!
Generated:   %38 = fadd float %34, %37
Gen:   %38 = fadd float %34, %37
Generating MATCH
Match: 
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %39 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %32
Gen:   %39 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %32
Generating MATCH
Match: 
  %24 = load float, float* %arrayidx14.6, align 8, !tbaa !2
  %27 = load float, float* %arrayidx14.7, align 4, !tbaa !2
Operands done!
Generated:   %40 = load float, float* %39, align 1
Gen:   %40 = load float, float* %39, align 1
Generating MATCH
Match: 
  %mul15.6 = fmul float %add16.4, %24
  %mul15.7 = fmul float %add16.5, %27
Generating ALTSEQ
Values:
  %add16.4 = fadd float %add.4, %mul15.4
  %add16.5 = fadd float %add.5, %mul15.5
Generated Version 4:
  %41 = icmp eq i8 %28, 0
  %42 = select i1 %41, float %add16.4, float %add16.5
Operands done!
Generated:   %43 = fmul float %42, %40
Gen:   %43 = fmul float %42, %40
Generating MATCH
Match: 
  %add16.6 = fadd float %add.6, %mul15.6
  %add16.7 = fadd float %add.7, %mul15.7
Operands done!
Generated:   %44 = fadd float %38, %43
Found use: 0:   %0 = phi float [ %.pre40, %for.cond2.preheader ], [ %add16.6, %for.body5.6 ]
Found use: 1:   %1 = phi float [ %.pre, %for.cond2.preheader ], [ %add16.7, %for.body5.6 ]
Extracting:   %44 = fadd float %38, %43
Gen:   %45 = fadd float %39, %44
Generating MATCH
Match: 
  store float %add16.6, float* %arrayidx.6, align 8, !tbaa !2
  store float %add16.7, float* %arrayidx.7, align 4, !tbaa !2
Operands done!
Generated:   store float %45, float* %34, align 1
Gen:   store float %45, float* %34, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %45 = fadd float %39, %44
Root:
  store float %add16.6, float* %arrayidx.6, align 8, !tbaa !2
  store float %add16.7, float* %arrayidx.7, align 4, !tbaa !2
Root size: 2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="6..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="alt: %add16.4, %add16.5", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
4->0 
2->1 
15->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->10 
1->11 
13->12 
14->13 
6->13 
7->13 
16->15 
17->15 
18->17 
19->18 
6->18 
7->18 
20 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
21 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
1->21
22 [label="icmp", style="filled" , fillcolor="#f2eb5c", shape=box];
7->22
}

Gains: 42 - 41 = 1; Width: 2; Recurrence Unprofitable; s322
Trying AGAIN
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Found possible recurrence! Init:   %add16.5 = fadd float %add.5, %mul15.5
  %add16.6 = fadd float %add.6, %mul15.6
  %add16.7 = fadd float %add.7, %mul15.7
Recurrence
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %26 = load float, float* %arrayidx.7, align 4, !tbaa !2
Hit: load
  %27 = load float, float* %arrayidx9.7, align 4, !tbaa !2
Hit: load
  %28 = load float, float* %arrayidx14.7, align 4, !tbaa !2
Hit: store
  store float %add16.7, float* %arrayidx.7, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s322
Generating tree
Generating MATCH
Match: 
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %31 = add i64 %30, 6
Closing BINOP
Gen:   %32 = add nuw nsw i64 %indvars.iv, %31
Operands done!
Generated:   %33 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %32
Gen:   %33 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %32
Generating MATCH
Match: 
  %23 = load float, float* %arrayidx.6, align 8, !tbaa !2
  %26 = load float, float* %arrayidx.7, align 4, !tbaa !2
Operands done!
Generated:   %34 = load float, float* %33, align 1
Gen:   %34 = load float, float* %33, align 1
Generating MATCH
Match: 
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %32
Gen:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %32
Generating MATCH
Match: 
  %24 = load float, float* %arrayidx9.6, align 8, !tbaa !2
  %27 = load float, float* %arrayidx9.7, align 4, !tbaa !2
Operands done!
Generated:   %36 = load float, float* %35, align 1
Gen:   %36 = load float, float* %35, align 1
Generating MATCH
Match: 
  %mul.6 = fmul float %add16.5, %24
  %mul.7 = fmul float %add16.6, %27
Generating RECURRENCE
Gen:   %30 = phi float [ %add16.5, %rolled.pre ]
Operands done!
Generated:   %38 = fmul float %30, %37
Gen:   %38 = fmul float %30, %37
Generating MATCH
Match: 
  %add.6 = fadd float %23, %mul.6
  %add.7 = fadd float %26, %mul.7
Operands done!
Generated:   %39 = fadd float %35, %38
Gen:   %39 = fadd float %35, %38
Generating MATCH
Match: 
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %33
Gen:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %33
Generating MATCH
Match: 
  %25 = load float, float* %arrayidx14.6, align 8, !tbaa !2
  %28 = load float, float* %arrayidx14.7, align 4, !tbaa !2
Operands done!
Generated:   %41 = load float, float* %40, align 1
Gen:   %41 = load float, float* %40, align 1
Generating MATCH
Match: 
  %mul15.6 = fmul float %add16.4, %25
  %mul15.7 = fmul float %add16.5, %28
Generating ALTSEQ
Values:
  %add16.4 = fadd float %add.4, %mul15.4
  %add16.5 = fadd float %add.5, %mul15.5
Generated Version 4:
  %42 = icmp eq i8 %29, 0
  %43 = select i1 %42, float %add16.4, float %add16.5
Operands done!
Generated:   %44 = fmul float %43, %41
Gen:   %44 = fmul float %43, %41
Generating MATCH
Match: 
  %add16.6 = fadd float %add.6, %mul15.6
  %add16.7 = fadd float %add.7, %mul15.7
Operands done!
Generated:   %45 = fadd float %39, %44
Found use: 0:   %1 = phi float [ %.pre40, %for.cond2.preheader ], [ %add16.6, %for.body5.6 ]
Found use: 1:   %2 = phi float [ %.pre, %for.cond2.preheader ], [ %add16.7, %for.body5.6 ]
Extracting:   %45 = fadd float %39, %44
Gen:   %46 = fadd float %40, %45
Generating MATCH
Match: 
  store float %add16.6, float* %arrayidx.6, align 8, !tbaa !2
  store float %add16.7, float* %arrayidx.7, align 4, !tbaa !2
Operands done!
Generated:   store float %46, float* %35, align 1
Gen:   store float %46, float* %35, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %46 = fadd float %40, %45
Root:
  store float %add16.6, float* %arrayidx.6, align 8, !tbaa !2
  store float %add16.7, float* %arrayidx.7, align 4, !tbaa !2
Root size: 2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="6..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="alt: %add16.4, %add16.5", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
4->0 
2->1 
15->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->10 
1->11 
13->12 
14->13 
6->13 
7->13 
16->15 
17->15 
18->17 
19->18 
6->18 
7->18 
20 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
21 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
1->21
22 [label="icmp", style="filled" , fillcolor="#f2eb5c", shape=box];
7->22
}

Gains: 42 - 41 = 1; Width: 2; Recurrence Unprofitable; s322
Building reduction
  store float %add16.7, float* %arrayidx.7, align 4, !tbaa !2
  %add16.7 = fadd float %add.7, %mul15.7
BOs:
  %add16.7 = fadd float %add.7, %mul15.7
  %add.7 = fadd float %27, %mul.7
Operands:
  %27 = load float, float* %arrayidx.7, align 4, !tbaa !2
  %mul.7 = fmul float %add16.6, %28
  %mul15.7 = fmul float %add16.5, %29
Operands:
  %27 = load float, float* %arrayidx.7, align 4, !tbaa !2
  %mul.7 = fmul float %add16.6, %28
  %mul15.7 = fmul float %add16.5, %29
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  %29 = load float, float* %arrayidx14.7, align 4, !tbaa !2
Building reduction
  store float %add16.6, float* %arrayidx.6, align 8, !tbaa !2
  %add16.6 = fadd float %add.6, %mul15.6
BOs:
  %add16.6 = fadd float %add.6, %mul15.6
  %add.6 = fadd float %24, %mul.6
Operands:
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !2
  %mul.6 = fmul float %add16.5, %25
  %mul15.6 = fmul float %add16.4, %26
Operands:
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !2
  %mul.6 = fmul float %add16.5, %25
  %mul15.6 = fmul float %add16.4, %26
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  %26 = load float, float* %arrayidx14.6, align 8, !tbaa !2
Done Loop Roller: 0/2
Optimizing: s323
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.042 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 109
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %add19.1 = fadd float %add.1, %mul18.1
Invalid dependence found!
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %add19 = fadd float %add, %mul18
  %add19.1 = fadd float %add.1, %mul18.1
  %add19.2 = fadd float %add.2, %mul18.2
  %add19.3 = fadd float %add.3, %mul18.3
  %add19.4 = fadd float %add.4, %mul18.4
  %add19.5 = fadd float %add.5, %mul18.5
  %add19.6 = fadd float %add.6, %mul18.6
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
19->0 
2->1 
15->1 
3->2 
4->2 
1->3 
5->4 
12->4 
6->5 
7->6 
8->6 
9->6 
10->9 
11->9 
13->12 
14->13 
8->13 
9->13 
5->15 
16->15 
17->16 
18->17 
8->17 
9->17 
20->19 
8->19 
9->19 
21 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->21
22 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->22
23 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->23
24 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->24
25 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->25
26 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->26
27 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->27
28 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->28
29 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->29
30 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->30
31 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->31
32 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->32
33 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->33
34 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->34
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Found possible recurrence! Init:   %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %add19 = fadd float %add, %mul18
  %add19.1 = fadd float %add.1, %mul18.1
  %add19.2 = fadd float %add.2, %mul18.2
  %add19.3 = fadd float %add.3, %mul18.3
  %add19.4 = fadd float %add.4, %mul18.4
  %add19.5 = fadd float %add.5, %mul18.5
  %add19.6 = fadd float %add.6, %mul18.6
Recurrence
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
19->0 
2->1 
15->1 
3->2 
4->2 
1->3 
5->4 
12->4 
6->5 
7->6 
8->6 
9->6 
10->9 
11->9 
13->12 
14->13 
8->13 
9->13 
5->15 
16->15 
17->16 
18->17 
8->17 
9->17 
20->19 
8->19 
9->19 
21 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->21
22 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->22
23 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->23
24 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->24
25 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->25
26 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->26
27 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->27
28 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
2->28
29 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->29
30 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->30
31 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->31
32 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->32
33 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->33
34 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
9->34
}

Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %add.5 = fadd float %add19.4, %mul.5
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
3->1 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
7->14 
8->14 
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->16
17 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->17
18 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->18
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->19
20 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
21 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->21
22 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->22
23 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->23
24 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->24
25 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->25
26 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->26
27 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->27
28 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->28
29 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->29
30 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->30
31 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->31
32 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->32
33 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->33
34 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->34
35 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->35
}

Trying AGAIN
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Invalid:   %add.5 = fadd float %add19.4, %mul.5
Invalid dependence found!
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
3->1 
4->3 
11->3 
5->4 
6->5 
7->5 
8->5 
9->8 
10->8 
12->11 
13->12 
7->12 
8->12 
15->14 
7->14 
8->14 
16 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->16
17 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->17
18 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->18
19 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->19
20 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->20
21 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->21
22 [label="fadd", style="filled" , fillcolor="#f2eb5c", shape=box];
1->22
23 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->23
24 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->24
25 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->25
26 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->26
27 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->27
28 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->28
29 [label="fmul", style="filled" , fillcolor="#f2eb5c", shape=box];
4->29
30 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->30
31 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->31
32 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->32
33 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->33
34 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->34
35 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
8->35
}

Building reduction
  store float %add19.6, float* %arrayidx21.6, align 4, !tbaa !2
  %add19.6 = fadd float %add.6, %mul18.6
BOs:
  %add19.6 = fadd float %add.6, %mul18.6
  %add.6 = fadd float %add19.5, %mul.6
  %add19.5 = fadd float %add.5, %mul18.5
  %add.5 = fadd float %add19.4, %mul.5
  %add19.4 = fadd float %add.4, %mul18.4
  %add.4 = fadd float %add19.3, %mul.4
  %add19.3 = fadd float %add.3, %mul18.3
  %add.3 = fadd float %add19.2, %mul.3
  %add19.2 = fadd float %add.2, %mul18.2
  %add.2 = fadd float %add19.1, %mul.2
  %add19.1 = fadd float %add.1, %mul18.1
  %add.1 = fadd float %add19, %mul.1
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
  %mul.4 = fmul float %13, %14
  %mul18.4 = fmul float %13, %15
  %mul.5 = fmul float %16, %17
  %mul18.5 = fmul float %16, %18
  %mul.6 = fmul float %19, %20
  %mul18.6 = fmul float %19, %21
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
  %mul.4 = fmul float %13, %14
  %mul18.4 = fmul float %13, %15
  %mul.5 = fmul float %16, %17
  %mul18.5 = fmul float %16, %18
  %mul.6 = fmul float %19, %20
  %mul18.6 = fmul float %19, %21
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
15 x 15
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
Building reduction
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !2
  %add.6 = fadd float %add19.5, %mul.6
BOs:
  %add.6 = fadd float %add19.5, %mul.6
  %add19.5 = fadd float %add.5, %mul18.5
  %add.5 = fadd float %add19.4, %mul.5
  %add19.4 = fadd float %add.4, %mul18.4
  %add.4 = fadd float %add19.3, %mul.4
  %add19.3 = fadd float %add.3, %mul18.3
  %add.3 = fadd float %add19.2, %mul.3
  %add19.2 = fadd float %add.2, %mul18.2
  %add.2 = fadd float %add19.1, %mul.2
  %add19.1 = fadd float %add.1, %mul18.1
  %add.1 = fadd float %add19, %mul.1
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
  %mul.4 = fmul float %13, %14
  %mul18.4 = fmul float %13, %15
  %mul.5 = fmul float %16, %17
  %mul18.5 = fmul float %16, %18
  %mul.6 = fmul float %19, %20
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
  %mul.4 = fmul float %13, %14
  %mul18.4 = fmul float %13, %15
  %mul.5 = fmul float %16, %17
  %mul18.5 = fmul float %16, %18
  %mul.6 = fmul float %19, %20
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
14 x 14
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
Building reduction
  store float %add19.5, float* %arrayidx21.5, align 4, !tbaa !2
  %add19.5 = fadd float %add.5, %mul18.5
BOs:
  %add19.5 = fadd float %add.5, %mul18.5
  %add.5 = fadd float %add19.4, %mul.5
  %add19.4 = fadd float %add.4, %mul18.4
  %add.4 = fadd float %add19.3, %mul.4
  %add19.3 = fadd float %add.3, %mul18.3
  %add.3 = fadd float %add19.2, %mul.3
  %add19.2 = fadd float %add.2, %mul18.2
  %add.2 = fadd float %add19.1, %mul.2
  %add19.1 = fadd float %add.1, %mul18.1
  %add.1 = fadd float %add19, %mul.1
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
  %mul.4 = fmul float %13, %14
  %mul18.4 = fmul float %13, %15
  %mul.5 = fmul float %16, %17
  %mul18.5 = fmul float %16, %18
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
  %mul.4 = fmul float %13, %14
  %mul18.4 = fmul float %13, %15
  %mul.5 = fmul float %16, %17
  %mul18.5 = fmul float %16, %18
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
13 x 13
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
Building reduction
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !2
  %add.5 = fadd float %add19.4, %mul.5
BOs:
  %add.5 = fadd float %add19.4, %mul.5
  %add19.4 = fadd float %add.4, %mul18.4
  %add.4 = fadd float %add19.3, %mul.4
  %add19.3 = fadd float %add.3, %mul18.3
  %add.3 = fadd float %add19.2, %mul.3
  %add19.2 = fadd float %add.2, %mul18.2
  %add.2 = fadd float %add19.1, %mul.2
  %add19.1 = fadd float %add.1, %mul18.1
  %add.1 = fadd float %add19, %mul.1
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
  %mul.4 = fmul float %13, %14
  %mul18.4 = fmul float %13, %15
  %mul.5 = fmul float %16, %17
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
  %mul.4 = fmul float %13, %14
  %mul18.4 = fmul float %13, %15
  %mul.5 = fmul float %16, %17
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
12 x 12
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
Building reduction
  store float %add19.4, float* %arrayidx21.4, align 4, !tbaa !2
  %add19.4 = fadd float %add.4, %mul18.4
BOs:
  %add19.4 = fadd float %add.4, %mul18.4
  %add.4 = fadd float %add19.3, %mul.4
  %add19.3 = fadd float %add.3, %mul18.3
  %add.3 = fadd float %add19.2, %mul.3
  %add19.2 = fadd float %add.2, %mul18.2
  %add.2 = fadd float %add19.1, %mul.2
  %add19.1 = fadd float %add.1, %mul18.1
  %add.1 = fadd float %add19, %mul.1
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
  %mul.4 = fmul float %13, %14
  %mul18.4 = fmul float %13, %15
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
  %mul.4 = fmul float %13, %14
  %mul18.4 = fmul float %13, %15
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
11 x 11
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
Building reduction
  store float %add.4, float* %arrayidx11.4, align 4, !tbaa !2
  %add.4 = fadd float %add19.3, %mul.4
BOs:
  %add.4 = fadd float %add19.3, %mul.4
  %add19.3 = fadd float %add.3, %mul18.3
  %add.3 = fadd float %add19.2, %mul.3
  %add19.2 = fadd float %add.2, %mul18.2
  %add.2 = fadd float %add19.1, %mul.2
  %add19.1 = fadd float %add.1, %mul18.1
  %add.1 = fadd float %add19, %mul.1
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
  %mul.4 = fmul float %13, %14
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
  %mul.4 = fmul float %13, %14
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
10 x 10
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
Building reduction
  store float %add19.3, float* %arrayidx21.3, align 4, !tbaa !2
  %add19.3 = fadd float %add.3, %mul18.3
BOs:
  %add19.3 = fadd float %add.3, %mul18.3
  %add.3 = fadd float %add19.2, %mul.3
  %add19.2 = fadd float %add.2, %mul18.2
  %add.2 = fadd float %add19.1, %mul.2
  %add19.1 = fadd float %add.1, %mul18.1
  %add.1 = fadd float %add19, %mul.1
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
  %mul18.3 = fmul float %10, %12
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
9 x 9
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
Building reduction
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !2
  %add.3 = fadd float %add19.2, %mul.3
BOs:
  %add.3 = fadd float %add19.2, %mul.3
  %add19.2 = fadd float %add.2, %mul18.2
  %add.2 = fadd float %add19.1, %mul.2
  %add19.1 = fadd float %add.1, %mul18.1
  %add.1 = fadd float %add19, %mul.1
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
  %mul.3 = fmul float %10, %11
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
Building reduction
  store float %add19.2, float* %arrayidx21.2, align 4, !tbaa !2
  %add19.2 = fadd float %add.2, %mul18.2
BOs:
  %add19.2 = fadd float %add.2, %mul18.2
  %add.2 = fadd float %add19.1, %mul.2
  %add19.1 = fadd float %add.1, %mul18.1
  %add.1 = fadd float %add19, %mul.1
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
  %mul18.2 = fmul float %7, %9
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
Building reduction
  store float %add.2, float* %arrayidx11.2, align 4, !tbaa !2
  %add.2 = fadd float %add19.1, %mul.2
BOs:
  %add.2 = fadd float %add19.1, %mul.2
  %add19.1 = fadd float %add.1, %mul18.1
  %add.1 = fadd float %add19, %mul.1
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
  %mul.2 = fmul float %7, %8
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
Building reduction
  store float %add19.1, float* %arrayidx21.1, align 4, !tbaa !2
  %add19.1 = fadd float %add.1, %mul18.1
BOs:
  %add19.1 = fadd float %add.1, %mul18.1
  %add.1 = fadd float %add19, %mul.1
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
  %mul18.1 = fmul float %4, %6
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 5
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
Building reduction
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !2
  %add.1 = fadd float %add19, %mul.1
BOs:
  %add.1 = fadd float %add19, %mul.1
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
  %mul.1 = fmul float %4, %5
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
4 x 4
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
Building reduction
  store float %add19, float* %arrayidx21, align 4, !tbaa !2
  %add19 = fadd float %add, %mul18
BOs:
  %add19 = fadd float %add, %mul18
  %add = fadd float %0, %mul
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
Operands:
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %mul = fmul float %1, %2
  %mul18 = fmul float %1, %3
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
Match: 0
3 x 3
Final Match: 0
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add, float* %arrayidx11, align 4, !tbaa !2
BlockSize: 16
Attempting Group:
Attempting Group:
Building reduction
  store float %add19.7, float* %arrayidx21.7, align 4, !tbaa !2
  %add19.7 = fadd float %add.7, %mul18.7
BOs:
  %add19.7 = fadd float %add.7, %mul18.7
  %add.7 = fadd float %add19.6, %mul.7
Operands:
  %add19.6 = fadd float %add.6, %mul18.6
  %mul.7 = fmul float %22, %23
  %mul18.7 = fmul float %22, %24
Operands:
  %add19.6 = fadd float %add.6, %mul18.6
  %mul.7 = fmul float %22, %23
  %mul18.7 = fmul float %22, %24
ReductionNode
Creating Node
Mismatching
Computing order of nodes for each lane
Read/Write memory found in between
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !2
Building reduction
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !2
  %add.7 = fadd float %add19.6, %mul.7
Done Loop Roller: 0/0
Nothing found in: s323
Optimizing: s331
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.025 = phi i32 [ 0, %entry ], [ %inc9, %for.cond.cleanup4 ]
BlockSize: 5
Attempting Group:
BlockSize: 5
Attempting Group:
BlockSize: 52
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %j.123 = phi i32 [ -1, %for.cond2.preheader ], [ %j.2.7, %for.body5 ]
  %j.2.7 = select i1 %cmp6.7, i32 %15, i32 %j.2.6
Done Loop Roller: 0/0
Nothing found in: s331
Optimizing: s332
BlockSize: 9
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.036 = phi i32 [ 0, %entry ], [ %inc13, %L20 ]
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 5
BlockSize: 2
BlockSize: 2
BlockSize: 2
BlockSize: 2
BlockSize: 2
BlockSize: 2
BlockSize: 2
BlockSize: 2
BlockSize: 8
  %value.1 = phi float [ %18, %L20.split.loop.exit37 ], [ %17, %L20.split.loop.exit40 ], [ %16, %L20.split.loop.exit43 ], [ %15, %L20.split.loop.exit46 ], [ %14, %L20.split.loop.exit49 ], [ %13, %L20.split.loop.exit52 ], [ %4, %L20.split.loop.exit55 ], [ %3, %L20.split.loop.exit58 ], [ -1.000000e+00, %for.inc.7 ]
  %index.0 = phi i32 [ %5, %L20.split.loop.exit37 ], [ %6, %L20.split.loop.exit40 ], [ %7, %L20.split.loop.exit43 ], [ %8, %L20.split.loop.exit46 ], [ %9, %L20.split.loop.exit49 ], [ %10, %L20.split.loop.exit52 ], [ %11, %L20.split.loop.exit55 ], [ %12, %L20.split.loop.exit58 ], [ -2, %for.inc.7 ]
Attempting Group:
BlockSize: 3
Attempting Group:
BlockSize: 5
BlockSize: 5
BlockSize: 5
BlockSize: 5
BlockSize: 5
BlockSize: 5
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s332
Optimizing: s341
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.029 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 6
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %j.027 = phi i32 [ -1, %for.cond2.preheader ], [ %j.1.7, %for.inc.7 ]
BlockSize: 5
Attempting Group:
BlockSize: 6
  %j.1 = phi i32 [ %inc, %if.then ], [ %j.027, %for.body5 ]
BlockSize: 5
Attempting Group:
BlockSize: 6
  %j.1.1 = phi i32 [ %inc.1, %if.then.1 ], [ %j.1, %for.inc ]
BlockSize: 5
Attempting Group:
BlockSize: 6
  %j.1.2 = phi i32 [ %inc.2, %if.then.2 ], [ %j.1.1, %for.inc.1 ]
BlockSize: 5
Attempting Group:
BlockSize: 6
  %j.1.3 = phi i32 [ %inc.3, %if.then.3 ], [ %j.1.2, %for.inc.2 ]
BlockSize: 5
Attempting Group:
BlockSize: 6
  %j.1.4 = phi i32 [ %inc.4, %if.then.4 ], [ %j.1.3, %for.inc.3 ]
BlockSize: 5
Attempting Group:
BlockSize: 6
  %j.1.5 = phi i32 [ %inc.5, %if.then.5 ], [ %j.1.4, %for.inc.4 ]
BlockSize: 5
Attempting Group:
BlockSize: 6
  %j.1.6 = phi i32 [ %inc.6, %if.then.6 ], [ %j.1.5, %for.inc.5 ]
BlockSize: 5
Attempting Group:
BlockSize: 4
  %j.1.7 = phi i32 [ %inc.7, %if.then.7 ], [ %j.1.6, %for.inc.6 ]
Done Loop Roller: 0/0
Nothing found in: s341
Optimizing: s342
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.029 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 6
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %j.027 = phi i32 [ -1, %for.cond2.preheader ], [ %j.1.7, %for.inc.7 ]
BlockSize: 6
Attempting Group:
BlockSize: 6
  %j.1 = phi i32 [ %inc, %if.then ], [ %j.027, %for.body5 ]
BlockSize: 6
Attempting Group:
BlockSize: 6
  %j.1.1 = phi i32 [ %inc.1, %if.then.1 ], [ %j.1, %for.inc ]
BlockSize: 6
Attempting Group:
BlockSize: 6
  %j.1.2 = phi i32 [ %inc.2, %if.then.2 ], [ %j.1.1, %for.inc.1 ]
BlockSize: 6
Attempting Group:
BlockSize: 6
  %j.1.3 = phi i32 [ %inc.3, %if.then.3 ], [ %j.1.2, %for.inc.2 ]
BlockSize: 6
Attempting Group:
BlockSize: 6
  %j.1.4 = phi i32 [ %inc.4, %if.then.4 ], [ %j.1.3, %for.inc.3 ]
BlockSize: 6
Attempting Group:
BlockSize: 6
  %j.1.5 = phi i32 [ %inc.5, %if.then.5 ], [ %j.1.4, %for.inc.4 ]
BlockSize: 6
Attempting Group:
BlockSize: 6
  %j.1.6 = phi i32 [ %inc.6, %if.then.6 ], [ %j.1.5, %for.inc.5 ]
BlockSize: 6
Attempting Group:
BlockSize: 4
  %j.1.7 = phi i32 [ %inc.7, %if.then.7 ], [ %j.1.6, %for.inc.6 ]
Done Loop Roller: 0/0
Nothing found in: s342
Optimizing: s343
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.046 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 3
  %indvars.iv47 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next48, %for.cond.cleanup8 ]
  %k.044 = phi i32 [ -1, %for.cond2.preheader ], [ %k.2.7, %for.cond.cleanup8 ]
BlockSize: 4
Attempting Group:
BlockSize: 3
BlockSize: 6
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %k.142 = phi i32 [ %k.044, %for.cond6.preheader ], [ %k.2.7, %for.inc.7 ]
BlockSize: 7
Attempting Group:
BlockSize: 6
  %k.2 = phi i32 [ %inc, %if.then ], [ %k.142, %for.body9 ]
BlockSize: 7
Attempting Group:
BlockSize: 6
  %k.2.1 = phi i32 [ %inc.1, %if.then.1 ], [ %k.2, %for.inc ]
BlockSize: 7
Attempting Group:
BlockSize: 6
  %k.2.2 = phi i32 [ %inc.2, %if.then.2 ], [ %k.2.1, %for.inc.1 ]
BlockSize: 7
Attempting Group:
BlockSize: 6
  %k.2.3 = phi i32 [ %inc.3, %if.then.3 ], [ %k.2.2, %for.inc.2 ]
BlockSize: 7
Attempting Group:
BlockSize: 6
  %k.2.4 = phi i32 [ %inc.4, %if.then.4 ], [ %k.2.3, %for.inc.3 ]
BlockSize: 7
Attempting Group:
BlockSize: 6
  %k.2.5 = phi i32 [ %inc.5, %if.then.5 ], [ %k.2.4, %for.inc.4 ]
BlockSize: 7
Attempting Group:
BlockSize: 6
  %k.2.6 = phi i32 [ %inc.6, %if.then.6 ], [ %k.2.5, %for.inc.5 ]
BlockSize: 7
Attempting Group:
BlockSize: 4
  %k.2.7 = phi i32 [ %inc.7, %if.then.7 ], [ %k.2.6, %for.inc.6 ]
Done Loop Roller: 0/0
Nothing found in: s343
Optimizing: s351
BlockSize: 5
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.067 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 43
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body5 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 5
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 5
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
5 x 5
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx10, align 4, !tbaa !2
Hit: load
  %7 = load float, float* %arrayidx18, align 4, !tbaa !2
Hit: load
  %10 = load float, float* %arrayidx26, align 4, !tbaa !2
Hit: load
  %13 = load float, float* %arrayidx34, align 4, !tbaa !2
Hit: load
  %5 = load float, float* %arrayidx14, align 4, !tbaa !2
Hit: load
  %8 = load float, float* %arrayidx22, align 4, !tbaa !2
Hit: load
  %11 = load float, float* %arrayidx30, align 4, !tbaa !2
Hit: load
  %14 = load float, float* %arrayidx38, align 4, !tbaa !2
Hit: store
  store float %add15, float* %arrayidx14, align 4, !tbaa !2
Hit: store
  store float %add23, float* %arrayidx22, align 4, !tbaa !2
Hit: store
  store float %add31, float* %arrayidx30, align 4, !tbaa !2
Hit: store
  store float %add39, float* %arrayidx38, align 4, !tbaa !2
Schedulable: 1
Loop Rolling: s351
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %3
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %6
  %arrayidx26 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %9
  %arrayidx34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %12
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %16 = zext i8 %15 to i64
Closing BINOP
Gen:   %17 = add nuw nsw i64 %indvars.iv, %16
Operands done!
Generated:   %18 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %17
Gen:   %18 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %17
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 4, !tbaa !2
  %4 = load float, float* %arrayidx10, align 4, !tbaa !2
  %7 = load float, float* %arrayidx18, align 4, !tbaa !2
  %10 = load float, float* %arrayidx26, align 4, !tbaa !2
  %13 = load float, float* %arrayidx34, align 4, !tbaa !2
Operands done!
Generated:   %19 = load float, float* %18, align 1
Gen:   %19 = load float, float* %18, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul11 = fmul float %0, %4
  %mul19 = fmul float %0, %7
  %mul27 = fmul float %0, %10
  %mul35 = fmul float %0, %13
Generating IDENTICAL
Operands done!
Generated:   %20 = fmul float %0, %19
Gen:   %20 = fmul float %0, %19
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %3
  %arrayidx22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %6
  %arrayidx30 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %9
  %arrayidx38 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %12
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %17
Gen:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %17
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx7, align 4, !tbaa !2
  %5 = load float, float* %arrayidx14, align 4, !tbaa !2
  %8 = load float, float* %arrayidx22, align 4, !tbaa !2
  %11 = load float, float* %arrayidx30, align 4, !tbaa !2
  %14 = load float, float* %arrayidx38, align 4, !tbaa !2
Operands done!
Generated:   %22 = load float, float* %21, align 1
Gen:   %22 = load float, float* %21, align 1
Generating MATCH
Match: 
  %add = fadd float %2, %mul
  %add15 = fadd float %5, %mul11
  %add23 = fadd float %8, %mul19
  %add31 = fadd float %11, %mul27
  %add39 = fadd float %14, %mul35
Operands done!
Generated:   %23 = fadd float %22, %20
Gen:   %23 = fadd float %22, %20
Generating MATCH
Match: 
  store float %add, float* %arrayidx7, align 4, !tbaa !2
  store float %add15, float* %arrayidx14, align 4, !tbaa !2
  store float %add23, float* %arrayidx22, align 4, !tbaa !2
  store float %add31, float* %arrayidx30, align 4, !tbaa !2
  store float %add39, float* %arrayidx38, align 4, !tbaa !2
Operands done!
Generated:   store float %23, float* %21, align 1
Gen:   store float %23, float* %21, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx7, align 4, !tbaa !2
  store float %add15, float* %arrayidx14, align 4, !tbaa !2
  store float %add23, float* %arrayidx22, align 4, !tbaa !2
  store float %add31, float* %arrayidx30, align 4, !tbaa !2
  store float %add39, float* %arrayidx38, align 4, !tbaa !2
Root size: 5
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..4, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->9 
12->11 
13->12 
5->12 
6->12 
}

Gains: 72 - 16 = 56; Width: 5; Profitable; s351
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 7
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s1351
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.029 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 63
  %i.028 = phi i32 [ 0, %for.cond2.preheader ], [ %inc.7, %for.body5 ]
  %inc.7 = add nuw nsw i32 %i.028, 8
  %C.027 = phi float* [ getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), %for.cond2.preheader ], [ %incdec.ptr7.7, %for.body5 ]
  %incdec.ptr7.7 = getelementptr inbounds float, float* %C.027, i64 8
  %B.026 = phi float* [ getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), %for.cond2.preheader ], [ %incdec.ptr6.7, %for.body5 ]
  %incdec.ptr6.7 = getelementptr inbounds float, float* %B.026, i64 8
  %A.025 = phi float* [ getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), %for.cond2.preheader ], [ %incdec.ptr.7, %for.body5 ]
  %incdec.ptr.7 = getelementptr inbounds float, float* %A.025, i64 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Ptr:   %B.026 = phi float* [ getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), %for.cond2.preheader ], [ %incdec.ptr6.7, %for.body5 ]
AllGEPs: 0
GEP Seq
GEP Seq
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Ptr:   %C.027 = phi float* [ getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), %for.cond2.preheader ], [ %incdec.ptr7.7, %for.body5 ]
AllGEPs: 0
GEP Seq
GEP Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Ptr:   %A.025 = phi float* [ getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), %for.cond2.preheader ], [ %incdec.ptr.7, %for.body5 ]
AllGEPs: 0
GEP Seq
GEP Seq
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* %incdec.ptr6, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %incdec.ptr6.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %incdec.ptr6.2, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %incdec.ptr6.3, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %incdec.ptr6.4, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %incdec.ptr6.5, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %incdec.ptr6.6, align 4, !tbaa !4
Hit: load
  %3 = load float, float* %incdec.ptr7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %incdec.ptr7.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %incdec.ptr7.2, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %incdec.ptr7.3, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %incdec.ptr7.4, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %incdec.ptr7.5, align 4, !tbaa !4
Hit: load
  %15 = load float, float* %incdec.ptr7.6, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %incdec.ptr, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %incdec.ptr.1, align 4, !tbaa !4
Hit: store
  store float %add.3, float* %incdec.ptr.2, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %incdec.ptr.3, align 4, !tbaa !4
Hit: store
  store float %add.5, float* %incdec.ptr.4, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %incdec.ptr.5, align 4, !tbaa !4
Hit: store
  store float %add.7, float* %incdec.ptr.6, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s1351
Generating tree
Generating MATCH
Match: 
  %0 = load float, float* %B.026, align 4, !tbaa !4
  %2 = load float, float* %incdec.ptr6, align 4, !tbaa !4
  %4 = load float, float* %incdec.ptr6.1, align 4, !tbaa !4
  %6 = load float, float* %incdec.ptr6.2, align 4, !tbaa !4
  %8 = load float, float* %incdec.ptr6.3, align 4, !tbaa !4
  %10 = load float, float* %incdec.ptr6.4, align 4, !tbaa !4
  %12 = load float, float* %incdec.ptr6.5, align 4, !tbaa !4
  %14 = load float, float* %incdec.ptr6.6, align 4, !tbaa !4
Generating GEPSEQ
Generating INTSEQ
Gen:   %17 = zext i8 %16 to i64
Closing GEPSEQ
Gen:   %18 = getelementptr float, float* %B.026, i64 %17
Operands done!
Generated:   %19 = load float, float* %18, align 1
Gen:   %19 = load float, float* %18, align 1
Generating MATCH
Match: 
  %1 = load float, float* %C.027, align 4, !tbaa !4
  %3 = load float, float* %incdec.ptr7, align 4, !tbaa !4
  %5 = load float, float* %incdec.ptr7.1, align 4, !tbaa !4
  %7 = load float, float* %incdec.ptr7.2, align 4, !tbaa !4
  %9 = load float, float* %incdec.ptr7.3, align 4, !tbaa !4
  %11 = load float, float* %incdec.ptr7.4, align 4, !tbaa !4
  %13 = load float, float* %incdec.ptr7.5, align 4, !tbaa !4
  %15 = load float, float* %incdec.ptr7.6, align 4, !tbaa !4
Generating GEPSEQ
Closing GEPSEQ
Gen:   %20 = getelementptr float, float* %C.027, i64 %17
Operands done!
Generated:   %21 = load float, float* %20, align 1
Gen:   %21 = load float, float* %20, align 1
Generating MATCH
Match: 
  %add = fadd float %0, %1
  %add.1 = fadd float %2, %3
  %add.2 = fadd float %4, %5
  %add.3 = fadd float %6, %7
  %add.4 = fadd float %8, %9
  %add.5 = fadd float %10, %11
  %add.6 = fadd float %12, %13
  %add.7 = fadd float %14, %15
Operands done!
Generated:   %22 = fadd float %19, %21
Gen:   %22 = fadd float %19, %21
Generating MATCH
Match: 
  store float %add, float* %A.025, align 4, !tbaa !4
  store float %add.1, float* %incdec.ptr, align 4, !tbaa !4
  store float %add.2, float* %incdec.ptr.1, align 4, !tbaa !4
  store float %add.3, float* %incdec.ptr.2, align 4, !tbaa !4
  store float %add.4, float* %incdec.ptr.3, align 4, !tbaa !4
  store float %add.5, float* %incdec.ptr.4, align 4, !tbaa !4
  store float %add.6, float* %incdec.ptr.5, align 4, !tbaa !4
  store float %add.7, float* %incdec.ptr.6, align 4, !tbaa !4
Generating GEPSEQ
Closing GEPSEQ
Gen:   %23 = getelementptr float, float* %A.025, i64 %17
Operands done!
Generated:   store float %22, float* %23, align 1
Gen:   store float %22, float* %23, align 1
Graph code generated!
Root:
  store float %add, float* %A.025, align 4, !tbaa !4
  store float %add.1, float* %incdec.ptr, align 4, !tbaa !4
  store float %add.2, float* %incdec.ptr.1, align 4, !tbaa !4
  store float %add.3, float* %incdec.ptr.2, align 4, !tbaa !4
  store float %add.4, float* %incdec.ptr.3, align 4, !tbaa !4
  store float %add.5, float* %incdec.ptr.4, align 4, !tbaa !4
  store float %add.6, float* %incdec.ptr.5, align 4, !tbaa !4
  store float %add.7, float* %incdec.ptr.6, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
7->0 
2->1 
5->1 
3->2 
4->3 
6->5 
4->6 
4->7 
}

Gains: 77 - 13 = 64; Width: 8; Profitable; s1351
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 4
IDENTICAL: 0
CONSTEXPR: 0
BINOP: 0
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 3
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s352
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.065 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
BlockSize: 3
Attempting Group:
Building reduction
  ret float %add39
  %add39 = fadd float %add31, %mul38
BlockSize: 4
Attempting Group:
Building reduction
  %call41 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add39) #11
  %add39 = fadd float %add31, %mul38
BlockSize: 39
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body5 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 5
  %dot.163 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add39, %for.body5 ]
  %add39 = fadd float %add31, %mul38
Possible reduction
  %add39 = fadd float %add31, %mul38
Building reduction
  %dot.163 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add39, %for.body5 ]
  %add39 = fadd float %add31, %mul38
BOs:
  %add39 = fadd float %add31, %mul38
  %add31 = fadd float %add23, %mul30
  %add23 = fadd float %add15, %mul22
  %add15 = fadd float %add, %mul14
  %add = fadd float %dot.163, %mul
Operands:
  %mul = fmul float %0, %1
  %mul14 = fmul float %3, %4
  %mul22 = fmul float %6, %7
  %mul30 = fmul float %9, %10
  %mul38 = fmul float %12, %13
Operands:
  %mul = fmul float %0, %1
  %mul14 = fmul float %3, %4
  %mul22 = fmul float %6, %7
  %mul30 = fmul float %9, %10
  %mul38 = fmul float %12, %13
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 5
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
5 x 5
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx10, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx18, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx26, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx34, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx13, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx21, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx29, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx37, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s352
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %2
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %5
  %arrayidx26 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %8
  %arrayidx34 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %11
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %15 = zext i8 %14 to i64
Closing BINOP
Gen:   %16 = add nuw nsw i64 %indvars.iv, %15
Operands done!
Generated:   %17 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %16
Gen:   %17 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %16
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %3 = load float, float* %arrayidx10, align 4, !tbaa !4
  %6 = load float, float* %arrayidx18, align 4, !tbaa !4
  %9 = load float, float* %arrayidx26, align 4, !tbaa !4
  %12 = load float, float* %arrayidx34, align 4, !tbaa !4
Operands done!
Generated:   %18 = load float, float* %17, align 1
Gen:   %18 = load float, float* %17, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %2
  %arrayidx21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %5
  %arrayidx29 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %8
  %arrayidx37 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %11
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %16
Gen:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %16
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 4, !tbaa !4
  %4 = load float, float* %arrayidx13, align 4, !tbaa !4
  %7 = load float, float* %arrayidx21, align 4, !tbaa !4
  %10 = load float, float* %arrayidx29, align 4, !tbaa !4
  %13 = load float, float* %arrayidx37, align 4, !tbaa !4
Operands done!
Generated:   %20 = load float, float* %19, align 1
Gen:   %20 = load float, float* %19, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul14 = fmul float %3, %4
  %mul22 = fmul float %6, %7
  %mul30 = fmul float %9, %10
  %mul38 = fmul float %12, %13
Operands done!
Generated:   %21 = fmul float %18, %20
Gen:   %21 = fmul float %18, %20
Generating REDUCTION
Closing REDUCTION
Found use: 0:   ret float %add39
Extracting:   %23 = fadd float %15, %22
Gen:   %23 = fadd float %15, %22
Graph code generated!
Root:
  %add39 = fadd float %add31, %mul38
  %add31 = fadd float %add23, %mul30
  %add23 = fadd float %add15, %mul22
  %add15 = fadd float %add, %mul14
  %add = fadd float %dot.163, %mul
Root size: 5
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..4, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
12 [label="ret", style="filled" , fillcolor="#f2eb5c", shape=box];
0->12
}

Gains: 62 - 14 = 48; Width: 5; Reduction Profitable; s352
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 5
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 1
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s353
BlockSize: 8
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.083 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 58
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body5 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 5
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
5 x 5
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
5 x 5
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
5 x 5
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %7 = load i32, i32* %arrayidx12, align 4, !tbaa !13
Hit: load
  %11 = load i32, i32* %arrayidx22, align 4, !tbaa !13
Hit: load
  %15 = load i32, i32* %arrayidx32, align 4, !tbaa !13
Hit: load
  %19 = load i32, i32* %arrayidx42, align 4, !tbaa !13
Hit: load
  %8 = load float, float* %arrayidx14, align 4, !tbaa !9
Hit: load
  %12 = load float, float* %arrayidx24, align 4, !tbaa !9
Hit: load
  %16 = load float, float* %arrayidx34, align 4, !tbaa !9
Hit: load
  %20 = load float, float* %arrayidx44, align 4, !tbaa !9
Hit: load
  %9 = load float, float* %arrayidx18, align 4, !tbaa !9
Hit: load
  %13 = load float, float* %arrayidx28, align 4, !tbaa !9
Hit: load
  %17 = load float, float* %arrayidx38, align 4, !tbaa !9
Hit: load
  %21 = load float, float* %arrayidx48, align 4, !tbaa !9
Hit: store
  store float %add19, float* %arrayidx18, align 4, !tbaa !9
Hit: store
  store float %add29, float* %arrayidx28, align 4, !tbaa !9
Hit: store
  store float %add39, float* %arrayidx38, align 4, !tbaa !9
Hit: store
  store float %add49, float* %arrayidx48, align 4, !tbaa !9
Schedulable: 1
Loop Rolling: s353
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %indvars.iv
  %arrayidx12 = getelementptr inbounds i32, i32* %1, i64 %6
  %arrayidx22 = getelementptr inbounds i32, i32* %1, i64 %10
  %arrayidx32 = getelementptr inbounds i32, i32* %1, i64 %14
  %arrayidx42 = getelementptr inbounds i32, i32* %1, i64 %18
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %23 = zext i8 %22 to i64
Closing BINOP
Gen:   %24 = add nuw nsw i64 %indvars.iv, %23
Operands done!
Generated:   %25 = getelementptr inbounds i32, i32* %1, i64 %24
Gen:   %25 = getelementptr inbounds i32, i32* %1, i64 %24
Generating MATCH
Match: 
  %3 = load i32, i32* %arrayidx, align 4, !tbaa !13
  %7 = load i32, i32* %arrayidx12, align 4, !tbaa !13
  %11 = load i32, i32* %arrayidx22, align 4, !tbaa !13
  %15 = load i32, i32* %arrayidx32, align 4, !tbaa !13
  %19 = load i32, i32* %arrayidx42, align 4, !tbaa !13
Operands done!
Generated:   %26 = load i32, i32* %25, align 1
Gen:   %26 = load i32, i32* %25, align 1
Generating MATCH
Match: 
  %idxprom6 = sext i32 %3 to i64
  %idxprom13 = sext i32 %7 to i64
  %idxprom23 = sext i32 %11 to i64
  %idxprom33 = sext i32 %15 to i64
  %idxprom43 = sext i32 %19 to i64
Operands done!
Generated:   %27 = sext i32 %26 to i64
Gen:   %27 = sext i32 %26 to i64
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom13
  %arrayidx24 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom23
  %arrayidx34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom33
  %arrayidx44 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom43
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %28 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %27
Gen:   %28 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %27
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx7, align 4, !tbaa !9
  %8 = load float, float* %arrayidx14, align 4, !tbaa !9
  %12 = load float, float* %arrayidx24, align 4, !tbaa !9
  %16 = load float, float* %arrayidx34, align 4, !tbaa !9
  %20 = load float, float* %arrayidx44, align 4, !tbaa !9
Operands done!
Generated:   %29 = load float, float* %28, align 1
Gen:   %29 = load float, float* %28, align 1
Generating MATCH
Match: 
  %mul = fmul float %2, %4
  %mul15 = fmul float %2, %8
  %mul25 = fmul float %2, %12
  %mul35 = fmul float %2, %16
  %mul45 = fmul float %2, %20
Generating IDENTICAL
Operands done!
Generated:   %30 = fmul float %2, %29
Gen:   %30 = fmul float %2, %29
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %6
  %arrayidx28 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
  %arrayidx38 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %14
  %arrayidx48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %31 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %24
Gen:   %31 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %24
Generating MATCH
Match: 
  %5 = load float, float* %arrayidx9, align 4, !tbaa !9
  %9 = load float, float* %arrayidx18, align 4, !tbaa !9
  %13 = load float, float* %arrayidx28, align 4, !tbaa !9
  %17 = load float, float* %arrayidx38, align 4, !tbaa !9
  %21 = load float, float* %arrayidx48, align 4, !tbaa !9
Operands done!
Generated:   %32 = load float, float* %31, align 1
Gen:   %32 = load float, float* %31, align 1
Generating MATCH
Match: 
  %add = fadd float %5, %mul
  %add19 = fadd float %9, %mul15
  %add29 = fadd float %13, %mul25
  %add39 = fadd float %17, %mul35
  %add49 = fadd float %21, %mul45
Operands done!
Generated:   %33 = fadd float %32, %30
Gen:   %33 = fadd float %32, %30
Generating MATCH
Match: 
  store float %add, float* %arrayidx9, align 4, !tbaa !9
  store float %add19, float* %arrayidx18, align 4, !tbaa !9
  store float %add29, float* %arrayidx28, align 4, !tbaa !9
  store float %add39, float* %arrayidx38, align 4, !tbaa !9
  store float %add49, float* %arrayidx48, align 4, !tbaa !9
Operands done!
Generated:   store float %33, float* %31, align 1
Gen:   store float %33, float* %31, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx9, align 4, !tbaa !9
  store float %add19, float* %arrayidx18, align 4, !tbaa !9
  store float %add29, float* %arrayidx28, align 4, !tbaa !9
  store float %add39, float* %arrayidx38, align 4, !tbaa !9
  store float %add49, float* %arrayidx48, align 4, !tbaa !9
Root size: 5
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..4, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->9 
12->11 
13->12 
5->12 
14->12 
15->14 
16->15 
17->16 
6->16 
}

Gains: 92 - 20 = 72; Width: 5; Profitable; s353
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 10
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s421
BlockSize: 5
Attempting Group:
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
  %0 = phi float* [ getelementptr inbounds ([65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 0), %entry ], [ %.pre, %for.cond.cleanup4.for.body_crit_edge ]
  %nl.026 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4.for.body_crit_edge ]
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 2
BlockSize: 53
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !8
Hit: load
  %5 = load float, float* %arrayidx.2, align 4, !tbaa !8
Hit: load
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !8
Hit: load
  %9 = load float, float* %arrayidx.4, align 4, !tbaa !8
Hit: load
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !8
Hit: load
  %13 = load float, float* %arrayidx.6, align 4, !tbaa !8
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !8
Hit: load
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !8
Hit: load
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !8
Hit: load
  %10 = load float, float* %arrayidx7.4, align 16, !tbaa !8
Hit: load
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !8
Hit: load
  %14 = load float, float* %arrayidx7.6, align 8, !tbaa !8
Hit: store
  store float %add8.1, float* %arrayidx, align 4, !tbaa !8
Hit: store
  store float %add8.2, float* %arrayidx.1, align 4, !tbaa !8
Hit: store
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !8
Hit: store
  store float %add8.4, float* %arrayidx.3, align 4, !tbaa !8
Hit: store
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !8
Hit: store
  store float %add8.6, float* %arrayidx.5, align 4, !tbaa !8
Schedulable: 1
Loop Rolling: s421
Generating tree
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 4, !tbaa !8
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !8
  %5 = load float, float* %arrayidx.2, align 4, !tbaa !8
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !8
  %9 = load float, float* %arrayidx.4, align 4, !tbaa !8
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !8
  %13 = load float, float* %arrayidx.6, align 4, !tbaa !8
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  %arrayidx.1 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  %arrayidx.2 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  %arrayidx.3 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.3
  %arrayidx.4 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.4
  %arrayidx.5 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.5
  %arrayidx.6 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating MATCH
Match: 
  %indvars.iv.next = or i64 %indvars.iv, 1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
Generating IDENTICAL
Generating INTSEQ
Gen:   %19 = add i64 %18, 1
Operands done!
Generated:   %20 = or i64 %indvars.iv, %19
Found use: 6:   %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Extracting:   %20 = or i64 %indvars.iv, %19
Gen:   %21 = or i64 %indvars.iv, %20
Operands done!
Generated:   %23 = getelementptr inbounds float, float* %1, i64 %21
Found use: 6:   store float %add8.7, float* %arrayidx.6, align 4, !tbaa !8
Extracting:   %23 = getelementptr inbounds float, float* %1, i64 %21
Gen:   %24 = getelementptr inbounds float, float* %2, i64 %22
Operands done!
Generated:   %26 = load float, float* %24, align 1
Gen:   %26 = load float, float* %24, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %20 = zext i8 %19 to i64
Closing BINOP
Gen:   %27 = or i64 %indvars.iv, %20
Operands done!
Generated:   %28 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %27
Gen:   %28 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %27
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx7, align 32, !tbaa !8
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !8
  %8 = load float, float* %arrayidx7.2, align 8, !tbaa !8
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !8
  %12 = load float, float* %arrayidx7.4, align 16, !tbaa !8
  %14 = load float, float* %arrayidx7.5, align 4, !tbaa !8
  %16 = load float, float* %arrayidx7.6, align 8, !tbaa !8
Operands done!
Generated:   %29 = load float, float* %28, align 1
Gen:   %29 = load float, float* %28, align 1
Generating MATCH
Match: 
  %add8 = fadd float %3, %4
  %add8.1 = fadd float %5, %6
  %add8.2 = fadd float %7, %8
  %add8.3 = fadd float %9, %10
  %add8.4 = fadd float %11, %12
  %add8.5 = fadd float %13, %14
  %add8.6 = fadd float %15, %16
Operands done!
Generated:   %30 = fadd float %26, %29
Gen:   %30 = fadd float %26, %29
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds float, float* %2, i64 %indvars.iv
  %arrayidx = getelementptr inbounds float, float* %2, i64 %indvars.iv.next
  %arrayidx.1 = getelementptr inbounds float, float* %2, i64 %indvars.iv.next.1
  %arrayidx.2 = getelementptr inbounds float, float* %2, i64 %indvars.iv.next.2
  %arrayidx.3 = getelementptr inbounds float, float* %2, i64 %indvars.iv.next.3
  %arrayidx.4 = getelementptr inbounds float, float* %2, i64 %indvars.iv.next.4
  %arrayidx.5 = getelementptr inbounds float, float* %2, i64 %indvars.iv.next.5
Generating IDENTICAL
Operands done!
Generated:   %31 = getelementptr inbounds float, float* %2, i64 %27
Gen:   %31 = getelementptr inbounds float, float* %2, i64 %27
Generating MATCH
Match: 
  store float %add8, float* %arrayidx10, align 4, !tbaa !8
  store float %add8.1, float* %arrayidx, align 4, !tbaa !8
  store float %add8.2, float* %arrayidx.1, align 4, !tbaa !8
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !8
  store float %add8.4, float* %arrayidx.3, align 4, !tbaa !8
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !8
  store float %add8.6, float* %arrayidx.5, align 4, !tbaa !8
Operands done!
Generated:   store float %30, float* %31, align 1
Gen:   store float %30, float* %31, align 1
Graph code generated!
Root:
  store float %add8, float* %arrayidx10, align 4, !tbaa !8
  store float %add8.1, float* %arrayidx, align 4, !tbaa !8
  store float %add8.2, float* %arrayidx.1, align 4, !tbaa !8
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !8
  store float %add8.4, float* %arrayidx.3, align 4, !tbaa !8
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !8
  store float %add8.6, float* %arrayidx.5, align 4, !tbaa !8
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="1..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
8->1 
3->2 
4->3 
5->3 
6->5 
7->5 
9->8 
10->9 
11->9 
12->9 
6->12 
13->12 
4->14 
12->14 
15 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
3->15
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
5->16
}

Gains: 92 - 37 = 55; Width: 7; Profitable; s421
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 8
Done Loop Roller: 1/1
Optimizing: s1421
BlockSize: 5
Attempting Group:
Attempting Group:
Attempting Group:
BlockSize: 3
  %0 = phi float* [ getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 16000), %entry ], [ %.pre, %for.cond.cleanup4.for.cond2.preheader_crit_edge ]
  %nl.025 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4.for.cond2.preheader_crit_edge ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 2
BlockSize: 67
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !8
Hit: load
  %5 = load float, float* %arrayidx.2, align 4, !tbaa !8
Hit: load
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !8
Hit: load
  %9 = load float, float* %arrayidx.4, align 4, !tbaa !8
Hit: load
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !8
Hit: load
  %13 = load float, float* %arrayidx.6, align 4, !tbaa !8
Hit: load
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !8
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !8
Hit: load
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !8
Hit: load
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !8
Hit: load
  %10 = load float, float* %arrayidx7.4, align 16, !tbaa !8
Hit: load
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !8
Hit: load
  %14 = load float, float* %arrayidx7.6, align 8, !tbaa !8
Hit: load
  %16 = load float, float* %arrayidx7.7, align 4, !tbaa !8
Hit: store
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !8
Hit: store
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !8
Hit: store
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !8
Hit: store
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !8
Hit: store
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !8
Hit: store
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !8
Hit: store
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !8
Schedulable: 1
Loop Rolling: s1421
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds float, float* %0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %18 = zext i8 %17 to i64
Closing BINOP
Gen:   %19 = or i64 %indvars.iv, %18
Operands done!
Generated:   %20 = getelementptr inbounds float, float* %0, i64 %19
Gen:   %20 = getelementptr inbounds float, float* %0, i64 %19
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 4, !tbaa !8
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !8
  %5 = load float, float* %arrayidx.2, align 4, !tbaa !8
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !8
  %9 = load float, float* %arrayidx.4, align 4, !tbaa !8
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !8
  %13 = load float, float* %arrayidx.6, align 4, !tbaa !8
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !8
Operands done!
Generated:   %21 = load float, float* %20, align 1
Gen:   %21 = load float, float* %20, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %19
Gen:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %19
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx7, align 32, !tbaa !8
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !8
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !8
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !8
  %10 = load float, float* %arrayidx7.4, align 16, !tbaa !8
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !8
  %14 = load float, float* %arrayidx7.6, align 8, !tbaa !8
  %16 = load float, float* %arrayidx7.7, align 4, !tbaa !8
Operands done!
Generated:   %23 = load float, float* %22, align 1
Gen:   %23 = load float, float* %22, align 1
Generating MATCH
Match: 
  %add = fadd float %1, %2
  %add.1 = fadd float %3, %4
  %add.2 = fadd float %5, %6
  %add.3 = fadd float %7, %8
  %add.4 = fadd float %9, %10
  %add.5 = fadd float %11, %12
  %add.6 = fadd float %13, %14
  %add.7 = fadd float %15, %16
Operands done!
Generated:   %24 = fadd float %21, %23
Gen:   %24 = fadd float %21, %23
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %25 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %19
Gen:   %25 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %19
Generating MATCH
Match: 
  store float %add, float* %arrayidx9, align 32, !tbaa !8
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !8
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !8
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !8
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !8
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !8
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !8
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !8
Operands done!
Generated:   store float %24, float* %25, align 1
Gen:   store float %24, float* %25, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx9, align 32, !tbaa !8
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !8
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !8
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !8
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !8
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !8
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !8
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !8
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
12->0 
2->1 
8->1 
3->2 
4->3 
5->3 
6->5 
7->5 
9->8 
10->9 
11->9 
5->9 
13->12 
11->12 
5->12 
}

Gains: 117 - 16 = 101; Width: 8; Profitable; s1421
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 7
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s422
BlockSize: 5
Attempting Group:
Attempting Group:
Attempting Group:
BlockSize: 3
  %0 = phi float* [ getelementptr inbounds ([65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 4), %entry ], [ %.pre, %for.cond.cleanup4.for.cond2.preheader_crit_edge ]
  %nl.026 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4.for.cond2.preheader_crit_edge ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 2
BlockSize: 75
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !8
Hit: load
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !8
Hit: load
  %11 = load float, float* %arrayidx.3, align 4, !tbaa !8
Hit: load
  %14 = load float, float* %arrayidx.4, align 16, !tbaa !8
Hit: load
  %17 = load float, float* %arrayidx.5, align 4, !tbaa !8
Hit: load
  %20 = load float, float* %arrayidx.6, align 8, !tbaa !8
Hit: load
  %23 = load float, float* %arrayidx.7, align 4, !tbaa !8
Hit: load
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !8
Hit: load
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !8
Hit: load
  %12 = load float, float* %arrayidx7.3, align 4, !tbaa !8
Hit: load
  %15 = load float, float* %arrayidx7.4, align 16, !tbaa !8
Hit: load
  %18 = load float, float* %arrayidx7.5, align 4, !tbaa !8
Hit: load
  %21 = load float, float* %arrayidx7.6, align 8, !tbaa !8
Hit: load
  %24 = load float, float* %arrayidx7.7, align 4, !tbaa !8
Hit: store
  store float %add8.1, float* %arrayidx10.1, align 4, !tbaa !8
Hit: store
  store float %add8.2, float* %arrayidx10.2, align 4, !tbaa !8
Hit: store
  store float %add8.3, float* %arrayidx10.3, align 4, !tbaa !8
Hit: store
  store float %add8.4, float* %arrayidx10.4, align 4, !tbaa !8
Hit: store
  store float %add8.5, float* %arrayidx10.5, align 4, !tbaa !8
Hit: store
  store float %add8.6, float* %arrayidx10.6, align 4, !tbaa !8
Hit: store
  store float %add8.7, float* %arrayidx10.7, align 4, !tbaa !8
Schedulable: 1
Loop Rolling: s422
Generating tree
Generating MATCH
Match: 
  %1 = add nuw nsw i64 %indvars.iv, 8
  %4 = add nuw nsw i64 %indvars.iv, 9
  %7 = add nuw nsw i64 %indvars.iv, 10
  %10 = add nuw nsw i64 %indvars.iv, 11
  %13 = add nuw nsw i64 %indvars.iv, 12
  %16 = add nuw nsw i64 %indvars.iv, 13
  %19 = add nuw nsw i64 %indvars.iv, 14
  %22 = add nuw nsw i64 %indvars.iv, 15
Generating IDENTICAL
Generating INTSEQ
Gen:   %27 = add i64 %26, 8
Operands done!
Generated:   %28 = add nuw nsw i64 %indvars.iv, %27
Gen:   %28 = add nuw nsw i64 %indvars.iv, %27
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %1
  %arrayidx.1 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %4
  %arrayidx.2 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %7
  %arrayidx.3 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %10
  %arrayidx.4 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %13
  %arrayidx.5 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %16
  %arrayidx.6 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %19
  %arrayidx.7 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %22
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %28
Gen:   %29 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %28
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx, align 32, !tbaa !8
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !8
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !8
  %11 = load float, float* %arrayidx.3, align 4, !tbaa !8
  %14 = load float, float* %arrayidx.4, align 16, !tbaa !8
  %17 = load float, float* %arrayidx.5, align 4, !tbaa !8
  %20 = load float, float* %arrayidx.6, align 8, !tbaa !8
  %23 = load float, float* %arrayidx.7, align 4, !tbaa !8
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %26 = zext i8 %25 to i64
Closing BINOP
Gen:   %31 = or i64 %indvars.iv, %26
Operands done!
Generated:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %31
Gen:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %31
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx7, align 32, !tbaa !8
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !8
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !8
  %12 = load float, float* %arrayidx7.3, align 4, !tbaa !8
  %15 = load float, float* %arrayidx7.4, align 16, !tbaa !8
  %18 = load float, float* %arrayidx7.5, align 4, !tbaa !8
  %21 = load float, float* %arrayidx7.6, align 8, !tbaa !8
  %24 = load float, float* %arrayidx7.7, align 4, !tbaa !8
Operands done!
Generated:   %33 = load float, float* %32, align 1
Gen:   %33 = load float, float* %32, align 1
Generating MATCH
Match: 
  %add8 = fadd float %2, %3
  %add8.1 = fadd float %5, %6
  %add8.2 = fadd float %8, %9
  %add8.3 = fadd float %11, %12
  %add8.4 = fadd float %14, %15
  %add8.5 = fadd float %17, %18
  %add8.6 = fadd float %20, %21
  %add8.7 = fadd float %23, %24
Operands done!
Generated:   %34 = fadd float %30, %33
Gen:   %34 = fadd float %30, %33
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds float, float* %0, i64 %indvars.iv
  %arrayidx10.1 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  %arrayidx10.2 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  %arrayidx10.3 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  %arrayidx10.4 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.3
  %arrayidx10.5 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.4
  %arrayidx10.6 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.5
  %arrayidx10.7 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.6
Generating IDENTICAL
Operands done!
Generated:   %35 = getelementptr inbounds float, float* %0, i64 %31
Gen:   %35 = getelementptr inbounds float, float* %0, i64 %31
Generating MATCH
Match: 
  store float %add8, float* %arrayidx10, align 4, !tbaa !8
  store float %add8.1, float* %arrayidx10.1, align 4, !tbaa !8
  store float %add8.2, float* %arrayidx10.2, align 4, !tbaa !8
  store float %add8.3, float* %arrayidx10.3, align 4, !tbaa !8
  store float %add8.4, float* %arrayidx10.4, align 4, !tbaa !8
  store float %add8.5, float* %arrayidx10.5, align 4, !tbaa !8
  store float %add8.6, float* %arrayidx10.6, align 4, !tbaa !8
  store float %add8.7, float* %arrayidx10.7, align 4, !tbaa !8
Operands done!
Generated:   store float %34, float* %35, align 1
Gen:   store float %34, float* %35, align 1
Graph code generated!
Root:
  store float %add8, float* %arrayidx10, align 4, !tbaa !8
  store float %add8.1, float* %arrayidx10.1, align 4, !tbaa !8
  store float %add8.2, float* %arrayidx10.2, align 4, !tbaa !8
  store float %add8.3, float* %arrayidx10.3, align 4, !tbaa !8
  store float %add8.4, float* %arrayidx10.4, align 4, !tbaa !8
  store float %add8.5, float* %arrayidx10.5, align 4, !tbaa !8
  store float %add8.6, float* %arrayidx10.6, align 4, !tbaa !8
  store float %add8.7, float* %arrayidx10.7, align 4, !tbaa !8
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="8..15, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
14->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
12->10 
7->12 
13->12 
15->14 
12->14 
}

Gains: 141 - 20 = 121; Width: 8; Profitable; s422
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s423
BlockSize: 5
Attempting Group:
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.027 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 59
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !8
Hit: load
  %5 = load float, float* %arrayidx.2, align 4, !tbaa !8
Hit: load
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !8
Hit: load
  %9 = load float, float* %arrayidx.4, align 4, !tbaa !8
Hit: load
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !8
Hit: load
  %13 = load float, float* %arrayidx.6, align 4, !tbaa !8
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !8
Hit: load
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !8
Hit: load
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !8
Hit: load
  %10 = load float, float* %arrayidx7.4, align 16, !tbaa !8
Hit: load
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !8
Hit: load
  %14 = load float, float* %arrayidx7.6, align 8, !tbaa !8
Hit: store
  store float %add.1, float* %arrayidx10.1, align 8, !tbaa !8
Hit: store
  store float %add.2, float* %arrayidx10.2, align 4, !tbaa !8
Hit: store
  store float %add.3, float* %arrayidx10.3, align 16, !tbaa !8
Hit: store
  store float %add.4, float* %arrayidx10.4, align 4, !tbaa !8
Hit: store
  store float %add.5, float* %arrayidx10.5, align 8, !tbaa !8
Hit: store
  store float %add.6, float* %arrayidx10.6, align 4, !tbaa !8
Schedulable: 1
Loop Rolling: s423
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds float, float* %0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %18 = zext i8 %17 to i64
Closing BINOP
Gen:   %19 = or i64 %indvars.iv, %18
Operands done!
Generated:   %20 = getelementptr inbounds float, float* %0, i64 %19
Gen:   %20 = getelementptr inbounds float, float* %0, i64 %19
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 4, !tbaa !8
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !8
  %5 = load float, float* %arrayidx.2, align 4, !tbaa !8
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !8
  %9 = load float, float* %arrayidx.4, align 4, !tbaa !8
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !8
  %13 = load float, float* %arrayidx.6, align 4, !tbaa !8
Operands done!
Generated:   %21 = load float, float* %20, align 1
Gen:   %21 = load float, float* %20, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %19
Gen:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %19
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx7, align 32, !tbaa !8
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !8
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !8
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !8
  %10 = load float, float* %arrayidx7.4, align 16, !tbaa !8
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !8
  %14 = load float, float* %arrayidx7.6, align 8, !tbaa !8
Operands done!
Generated:   %23 = load float, float* %22, align 1
Gen:   %23 = load float, float* %22, align 1
Generating MATCH
Match: 
  %add = fadd float %1, %2
  %add.1 = fadd float %3, %4
  %add.2 = fadd float %5, %6
  %add.3 = fadd float %7, %8
  %add.4 = fadd float %9, %10
  %add.5 = fadd float %11, %12
  %add.6 = fadd float %13, %14
Operands done!
Generated:   %24 = fadd float %21, %23
Gen:   %24 = fadd float %21, %23
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next
  %arrayidx10.1 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.1
  %arrayidx10.2 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.2
  %arrayidx10.3 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.3
  %arrayidx10.4 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.4
  %arrayidx10.5 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.5
  %arrayidx10.6 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating MATCH
Match: 
  %indvars.iv.next = or i64 %indvars.iv, 1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = add i64 %18, 1
Operands done!
Generated:   %26 = or i64 %indvars.iv, %25
Found use: 6:   %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Extracting:   %26 = or i64 %indvars.iv, %25
Gen:   %27 = or i64 %indvars.iv, %26
Operands done!
Generated:   %29 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %27
Gen:   %29 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %27
Generating MATCH
Match: 
  store float %add, float* %arrayidx10, align 4, !tbaa !8
  store float %add.1, float* %arrayidx10.1, align 8, !tbaa !8
  store float %add.2, float* %arrayidx10.2, align 4, !tbaa !8
  store float %add.3, float* %arrayidx10.3, align 16, !tbaa !8
  store float %add.4, float* %arrayidx10.4, align 4, !tbaa !8
  store float %add.5, float* %arrayidx10.5, align 8, !tbaa !8
  store float %add.6, float* %arrayidx10.6, align 4, !tbaa !8
Operands done!
Generated:   store float %25, float* %29, align 1
Gen:   store float %25, float* %29, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx10, align 4, !tbaa !8
  store float %add.1, float* %arrayidx10.1, align 8, !tbaa !8
  store float %add.2, float* %arrayidx10.2, align 4, !tbaa !8
  store float %add.3, float* %arrayidx10.3, align 16, !tbaa !8
  store float %add.4, float* %arrayidx10.4, align 4, !tbaa !8
  store float %add.5, float* %arrayidx10.5, align 8, !tbaa !8
  store float %add.6, float* %arrayidx10.6, align 4, !tbaa !8
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="1..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
12->0 
2->1 
8->1 
3->2 
4->3 
5->3 
6->5 
7->5 
9->8 
10->9 
11->9 
5->9 
13->12 
11->12 
14->12 
6->14 
15->14 
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
14->16
}

Gains: 105 - 29 = 76; Width: 7; Profitable; s423
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 9
Done Loop Roller: 1/1
Optimizing: s424
BlockSize: 5
Attempting Group:
Attempting Group:
Attempting Group:
BlockSize: 3
  %nl.027 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 59
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 7
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
7 x 7
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
7 x 7
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !8
Hit: load
  %5 = load float, float* %arrayidx.2, align 8, !tbaa !8
Hit: load
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !8
Hit: load
  %9 = load float, float* %arrayidx.4, align 16, !tbaa !8
Hit: load
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !8
Hit: load
  %13 = load float, float* %arrayidx.6, align 8, !tbaa !8
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !8
Hit: load
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !8
Hit: load
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !8
Hit: load
  %10 = load float, float* %arrayidx7.4, align 16, !tbaa !8
Hit: load
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !8
Hit: load
  %14 = load float, float* %arrayidx7.6, align 8, !tbaa !8
Hit: store
  store float %add.1, float* %arrayidx10.1, align 4, !tbaa !8
Hit: store
  store float %add.2, float* %arrayidx10.2, align 4, !tbaa !8
Hit: store
  store float %add.3, float* %arrayidx10.3, align 4, !tbaa !8
Hit: store
  store float %add.4, float* %arrayidx10.4, align 4, !tbaa !8
Hit: store
  store float %add.5, float* %arrayidx10.5, align 4, !tbaa !8
Hit: store
  store float %add.6, float* %arrayidx10.6, align 4, !tbaa !8
Schedulable: 1
Loop Rolling: s424
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %18 = zext i8 %17 to i64
Closing BINOP
Gen:   %19 = or i64 %indvars.iv, %18
Operands done!
Generated:   %20 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %19
Gen:   %20 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %19
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 32, !tbaa !8
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !8
  %5 = load float, float* %arrayidx.2, align 8, !tbaa !8
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !8
  %9 = load float, float* %arrayidx.4, align 16, !tbaa !8
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !8
  %13 = load float, float* %arrayidx.6, align 8, !tbaa !8
Operands done!
Generated:   %21 = load float, float* %20, align 1
Gen:   %21 = load float, float* %20, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %19
Gen:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %19
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx7, align 32, !tbaa !8
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !8
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !8
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !8
  %10 = load float, float* %arrayidx7.4, align 16, !tbaa !8
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !8
  %14 = load float, float* %arrayidx7.6, align 8, !tbaa !8
Operands done!
Generated:   %23 = load float, float* %22, align 1
Gen:   %23 = load float, float* %22, align 1
Generating MATCH
Match: 
  %add = fadd float %1, %2
  %add.1 = fadd float %3, %4
  %add.2 = fadd float %5, %6
  %add.3 = fadd float %7, %8
  %add.4 = fadd float %9, %10
  %add.5 = fadd float %11, %12
  %add.6 = fadd float %13, %14
Operands done!
Generated:   %24 = fadd float %21, %23
Gen:   %24 = fadd float %21, %23
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  %arrayidx10.1 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  %arrayidx10.2 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  %arrayidx10.3 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.3
  %arrayidx10.4 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.4
  %arrayidx10.5 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.5
  %arrayidx10.6 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating MATCH
Match: 
  %indvars.iv.next = or i64 %indvars.iv, 1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = add i64 %18, 1
Operands done!
Generated:   %26 = or i64 %indvars.iv, %25
Found use: 6:   %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Extracting:   %26 = or i64 %indvars.iv, %25
Gen:   %27 = or i64 %indvars.iv, %26
Operands done!
Generated:   %29 = getelementptr inbounds float, float* %1, i64 %27
Gen:   %29 = getelementptr inbounds float, float* %1, i64 %27
Generating MATCH
Match: 
  store float %add, float* %arrayidx10, align 4, !tbaa !8
  store float %add.1, float* %arrayidx10.1, align 4, !tbaa !8
  store float %add.2, float* %arrayidx10.2, align 4, !tbaa !8
  store float %add.3, float* %arrayidx10.3, align 4, !tbaa !8
  store float %add.4, float* %arrayidx10.4, align 4, !tbaa !8
  store float %add.5, float* %arrayidx10.5, align 4, !tbaa !8
  store float %add.6, float* %arrayidx10.6, align 4, !tbaa !8
Operands done!
Generated:   store float %25, float* %29, align 1
Gen:   store float %25, float* %29, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx10, align 4, !tbaa !8
  store float %add.1, float* %arrayidx10.1, align 4, !tbaa !8
  store float %add.2, float* %arrayidx10.2, align 4, !tbaa !8
  store float %add.3, float* %arrayidx10.3, align 4, !tbaa !8
  store float %add.4, float* %arrayidx10.4, align 4, !tbaa !8
  store float %add.5, float* %arrayidx10.5, align 4, !tbaa !8
  store float %add.6, float* %arrayidx10.6, align 4, !tbaa !8
Root size: 7
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..6, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="or", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="1..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
12->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
13->12 
14->12 
7->14 
15->14 
16 [label="getelementptr", style="filled" , fillcolor="#f2eb5c", shape=box];
14->16
}

Gains: 105 - 29 = 76; Width: 7; Profitable; s424
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 2
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
BlockSize: 9
Done Loop Roller: 1/1
Optimizing: s431
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.029 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 59
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: store
  store float %add8.1, float* %arrayidx.1, align 4, !tbaa !4
Hit: store
  store float %add8.2, float* %arrayidx.2, align 8, !tbaa !4
Hit: store
  store float %add8.3, float* %arrayidx.3, align 4, !tbaa !4
Hit: store
  store float %add8.4, float* %arrayidx.4, align 16, !tbaa !4
Hit: store
  store float %add8.5, float* %arrayidx.5, align 4, !tbaa !4
Hit: store
  store float %add8.6, float* %arrayidx.6, align 8, !tbaa !4
Hit: store
  store float %add8.7, float* %arrayidx.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s431
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %17 = zext i8 %16 to i64
Closing BINOP
Gen:   %18 = or i64 %indvars.iv, %17
Operands done!
Generated:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Gen:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %20 = load float, float* %19, align 1
Gen:   %20 = load float, float* %19, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
Gen:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %22 = load float, float* %21, align 1
Gen:   %22 = load float, float* %21, align 1
Generating MATCH
Match: 
  %add8 = fadd float %0, %1
  %add8.1 = fadd float %2, %3
  %add8.2 = fadd float %4, %5
  %add8.3 = fadd float %6, %7
  %add8.4 = fadd float %8, %9
  %add8.5 = fadd float %10, %11
  %add8.6 = fadd float %12, %13
  %add8.7 = fadd float %14, %15
Operands done!
Generated:   %23 = fadd float %20, %22
Gen:   %23 = fadd float %20, %22
Generating MATCH
Match: 
  store float %add8, float* %arrayidx, align 32, !tbaa !4
  store float %add8.1, float* %arrayidx.1, align 4, !tbaa !4
  store float %add8.2, float* %arrayidx.2, align 8, !tbaa !4
  store float %add8.3, float* %arrayidx.3, align 4, !tbaa !4
  store float %add8.4, float* %arrayidx.4, align 16, !tbaa !4
  store float %add8.5, float* %arrayidx.5, align 4, !tbaa !4
  store float %add8.6, float* %arrayidx.6, align 8, !tbaa !4
  store float %add8.7, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   store float %23, float* %19, align 1
Gen:   store float %23, float* %19, align 1
Graph code generated!
Root:
  store float %add8, float* %arrayidx, align 32, !tbaa !4
  store float %add8.1, float* %arrayidx.1, align 4, !tbaa !4
  store float %add8.2, float* %arrayidx.2, align 8, !tbaa !4
  store float %add8.3, float* %arrayidx.3, align 4, !tbaa !4
  store float %add8.4, float* %arrayidx.4, align 16, !tbaa !4
  store float %add8.5, float* %arrayidx.5, align 4, !tbaa !4
  store float %add8.6, float* %arrayidx.6, align 8, !tbaa !4
  store float %add8.7, float* %arrayidx.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
}

Gains: 109 - 15 = 94; Width: 8; Profitable; s431
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 6
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s441
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.058 = phi i32 [ 0, %entry ], [ %inc37, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 6
BlockSize: 2
BlockSize: 4
BlockSize: 4
BlockSize: 10
  %mul.sink = phi float [ %mul, %if.then ], [ %mul30, %if.else25 ], [ %mul21, %if.then16 ]
Attempting Group:
BlockSize: 2
BlockSize: 4
BlockSize: 4
BlockSize: 6
BlockSize: 10
  %mul.1.sink = phi float [ %mul.1, %if.then.1 ], [ %mul21.1, %if.then16.1 ], [ %mul30.1, %if.else25.1 ]
Attempting Group:
BlockSize: 2
BlockSize: 4
BlockSize: 4
BlockSize: 6
BlockSize: 10
  %mul.2.sink = phi float [ %mul.2, %if.then.2 ], [ %mul21.2, %if.then16.2 ], [ %mul30.2, %if.else25.2 ]
Attempting Group:
BlockSize: 2
BlockSize: 4
BlockSize: 4
BlockSize: 6
BlockSize: 10
  %mul.3.sink = phi float [ %mul.3, %if.then.3 ], [ %mul21.3, %if.then16.3 ], [ %mul30.3, %if.else25.3 ]
Attempting Group:
BlockSize: 2
BlockSize: 4
BlockSize: 4
BlockSize: 6
BlockSize: 10
  %mul.4.sink = phi float [ %mul.4, %if.then.4 ], [ %mul21.4, %if.then16.4 ], [ %mul30.4, %if.else25.4 ]
Attempting Group:
BlockSize: 2
BlockSize: 4
BlockSize: 4
BlockSize: 6
BlockSize: 10
  %mul.5.sink = phi float [ %mul.5, %if.then.5 ], [ %mul21.5, %if.then16.5 ], [ %mul30.5, %if.else25.5 ]
Attempting Group:
BlockSize: 2
BlockSize: 4
BlockSize: 4
BlockSize: 6
BlockSize: 10
  %mul.6.sink = phi float [ %mul.6, %if.then.6 ], [ %mul21.6, %if.then16.6 ], [ %mul30.6, %if.else25.6 ]
Attempting Group:
BlockSize: 2
BlockSize: 4
BlockSize: 4
BlockSize: 6
BlockSize: 8
  %mul.7.sink = phi float [ %mul.7, %if.then.7 ], [ %mul21.7, %if.then16.7 ], [ %mul30.7, %if.else25.7 ]
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s441
Optimizing: s442
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.064 = phi i32 [ 0, %entry ], [ %inc41, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 4
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 9
  %mul.sink = phi float [ %mul, %L15 ], [ %mul19, %L20 ], [ %mul27, %L30 ], [ %mul35, %L40 ]
Attempting Group:
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 9
  %mul.1.sink = phi float [ %mul.1, %L15.1 ], [ %mul35.1, %L40.1 ], [ %mul19.1, %L20.1 ], [ %mul27.1, %L30.1 ]
Attempting Group:
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 9
  %mul.2.sink = phi float [ %mul.2, %L15.2 ], [ %mul35.2, %L40.2 ], [ %mul19.2, %L20.2 ], [ %mul27.2, %L30.2 ]
Attempting Group:
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 9
  %mul.3.sink = phi float [ %mul.3, %L15.3 ], [ %mul35.3, %L40.3 ], [ %mul19.3, %L20.3 ], [ %mul27.3, %L30.3 ]
Attempting Group:
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 9
  %mul.4.sink = phi float [ %mul.4, %L15.4 ], [ %mul35.4, %L40.4 ], [ %mul19.4, %L20.4 ], [ %mul27.4, %L30.4 ]
Attempting Group:
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 9
  %mul.5.sink = phi float [ %mul.5, %L15.5 ], [ %mul35.5, %L40.5 ], [ %mul19.5, %L20.5 ], [ %mul27.5, %L30.5 ]
Attempting Group:
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 9
  %mul.6.sink = phi float [ %mul.6, %L15.6 ], [ %mul35.6, %L40.6 ], [ %mul19.6, %L20.6 ], [ %mul27.6, %L30.6 ]
Attempting Group:
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 4
BlockSize: 8
  %mul.7.sink = phi float [ %mul.7, %L15.7 ], [ %mul35.7, %L40.7 ], [ %mul19.7, %L20.7 ], [ %mul27.7, %L30.7 ]
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s442
Optimizing: s443
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.040 = phi i32 [ 0, %entry ], [ %inc23, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 7
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 3
BlockSize: 13
  %.sink = phi float [ %2, %L20 ], [ %1, %for.body5 ]
Attempting Group:
BlockSize: 3
BlockSize: 13
  %.sink44 = phi float [ %6, %L20.1 ], [ %5, %for.inc ]
Attempting Group:
BlockSize: 3
BlockSize: 13
  %.sink47 = phi float [ %10, %L20.2 ], [ %9, %for.inc.1 ]
Attempting Group:
BlockSize: 3
BlockSize: 13
  %.sink50 = phi float [ %14, %L20.3 ], [ %13, %for.inc.2 ]
Attempting Group:
BlockSize: 3
BlockSize: 13
  %.sink53 = phi float [ %18, %L20.4 ], [ %17, %for.inc.3 ]
Attempting Group:
BlockSize: 3
BlockSize: 13
  %.sink56 = phi float [ %22, %L20.5 ], [ %21, %for.inc.4 ]
Attempting Group:
BlockSize: 3
BlockSize: 13
  %.sink59 = phi float [ %26, %L20.6 ], [ %25, %for.inc.5 ]
Attempting Group:
BlockSize: 3
BlockSize: 9
  %.sink62 = phi float [ %30, %L20.7 ], [ %29, %for.inc.6 ]
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s443
Optimizing: s451
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.027 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 83
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float %0) local_unnamed_addr #2

Call3
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float %0) local_unnamed_addr #2

Call3
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: call: sinf
  %call6.1 = tail call float @sinf(float %2) #11
Hit: call: sinf
  %call6.2 = tail call float @sinf(float %4) #11
Hit: call: sinf
  %call6.3 = tail call float @sinf(float %6) #11
Hit: call: sinf
  %call6.4 = tail call float @sinf(float %8) #11
Hit: call: sinf
  %call6.5 = tail call float @sinf(float %10) #11
Hit: call: sinf
  %call6.6 = tail call float @sinf(float %12) #11
Hit: call: sinf
  %call6.7 = tail call float @sinf(float %14) #11
Hit: load
  %3 = load float, float* %arrayidx8.1, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx8.2, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx8.3, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx8.4, align 16, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx8.5, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx8.6, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx8.7, align 4, !tbaa !4
Hit: call: cosf
  %call9.1 = tail call float @cosf(float %3) #11
Hit: call: cosf
  %call9.2 = tail call float @cosf(float %5) #11
Hit: call: cosf
  %call9.3 = tail call float @cosf(float %7) #11
Hit: call: cosf
  %call9.4 = tail call float @cosf(float %9) #11
Hit: call: cosf
  %call9.5 = tail call float @cosf(float %11) #11
Hit: call: cosf
  %call9.6 = tail call float @cosf(float %13) #11
Hit: call: cosf
  %call9.7 = tail call float @cosf(float %15) #11
Hit: store
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s451
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %17 = zext i8 %16 to i64
Closing BINOP
Gen:   %18 = or i64 %indvars.iv, %17
Operands done!
Generated:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
Gen:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %20 = load float, float* %19, align 1
Gen:   %20 = load float, float* %19, align 1
Generating MATCH
Match: 
  %call6 = tail call float @sinf(float %0) #11
  %call6.1 = tail call float @sinf(float %2) #11
  %call6.2 = tail call float @sinf(float %4) #11
  %call6.3 = tail call float @sinf(float %6) #11
  %call6.4 = tail call float @sinf(float %8) #11
  %call6.5 = tail call float @sinf(float %10) #11
  %call6.6 = tail call float @sinf(float %12) #11
  %call6.7 = tail call float @sinf(float %14) #11
Generating IDENTICAL
Operands done!
Generated:   %21 = tail call float @sinf(float %20) #11
Gen:   %21 = tail call float @sinf(float %20) #11
Generating MATCH
Match: 
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %18
Gen:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %18
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx8, align 32, !tbaa !4
  %3 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %5 = load float, float* %arrayidx8.2, align 8, !tbaa !4
  %7 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %9 = load float, float* %arrayidx8.4, align 16, !tbaa !4
  %11 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %13 = load float, float* %arrayidx8.6, align 8, !tbaa !4
  %15 = load float, float* %arrayidx8.7, align 4, !tbaa !4
Operands done!
Generated:   %23 = load float, float* %22, align 1
Gen:   %23 = load float, float* %22, align 1
Generating MATCH
Match: 
  %call9 = tail call float @cosf(float %1) #11
  %call9.1 = tail call float @cosf(float %3) #11
  %call9.2 = tail call float @cosf(float %5) #11
  %call9.3 = tail call float @cosf(float %7) #11
  %call9.4 = tail call float @cosf(float %9) #11
  %call9.5 = tail call float @cosf(float %11) #11
  %call9.6 = tail call float @cosf(float %13) #11
  %call9.7 = tail call float @cosf(float %15) #11
Generating IDENTICAL
Operands done!
Generated:   %24 = tail call float @cosf(float %23) #11
Gen:   %24 = tail call float @cosf(float %23) #11
Generating MATCH
Match: 
  %add = fadd float %call6, %call9
  %add.1 = fadd float %call6.1, %call9.1
  %add.2 = fadd float %call6.2, %call9.2
  %add.3 = fadd float %call6.3, %call9.3
  %add.4 = fadd float %call6.4, %call9.4
  %add.5 = fadd float %call6.5, %call9.5
  %add.6 = fadd float %call6.6, %call9.6
  %add.7 = fadd float %call6.7, %call9.7
Operands done!
Generated:   %25 = fadd float %21, %24
Gen:   %25 = fadd float %21, %24
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %26 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Gen:   %26 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Generating MATCH
Match: 
  store float %add, float* %arrayidx11, align 32, !tbaa !4
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
Operands done!
Generated:   store float %25, float* %26, align 1
Gen:   store float %25, float* %26, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx11, align 32, !tbaa !4
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="call: sinf", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="func: sinf", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="call: cosf", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="func: cosf", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
16->0 
2->1 
11->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
12->11 
15->11 
13->12 
14->13 
6->13 
7->13 
17->16 
6->16 
7->16 
}

Gains: 157 - 21 = 136; Width: 8; Profitable; s451
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 9
IDENTICAL: 7
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s452
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.027 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 91
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
2 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: store
  store float %add8.1, float* %arrayidx10.1, align 4, !tbaa !4
Hit: store
  store float %add8.2, float* %arrayidx10.2, align 8, !tbaa !4
Hit: store
  store float %add8.3, float* %arrayidx10.3, align 4, !tbaa !4
Hit: store
  store float %add8.4, float* %arrayidx10.4, align 16, !tbaa !4
Hit: store
  store float %add8.5, float* %arrayidx10.5, align 4, !tbaa !4
Hit: store
  store float %add8.6, float* %arrayidx10.6, align 8, !tbaa !4
Hit: store
  store float %add8.7, float* %arrayidx10.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s452
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = zext i8 %24 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %25
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Gen:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %2 = trunc i64 %indvars.iv.next to i32
  %5 = trunc i64 %indvars.iv.next.1 to i32
  %8 = trunc i64 %indvars.iv.next.2 to i32
  %11 = trunc i64 %indvars.iv.next.3 to i32
  %14 = trunc i64 %indvars.iv.next.4 to i32
  %17 = trunc i64 %indvars.iv.next.5 to i32
  %20 = trunc i64 %indvars.iv.next.6 to i32
  %23 = trunc i64 %indvars.iv.next.7 to i32
Generating BINOP
Generating BINOP
Generating IDENTICAL
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 0
int: i64 8
All constants
Created array: @4 = private constant [8 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8]
Gen:   %32 = load i64, i64* %31, align 8
Closing BINOP
Found use: 7:   %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
Extracting:   %33 = add nuw nsw i64 %indvars.iv, %32
Gen:   %34 = add nuw nsw i64 %indvars.iv, %33
Generating Mismatch
Mismatched Values:
int: i64 1
int: i64 2
int: i64 3
int: i64 4
int: i64 5
int: i64 6
int: i64 7
int: i64 0
All constants
Found Array: @4 = private constant [8 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 8]
Gen:   %33 = load i64, i64* %32, align 8
Closing BINOP
Gen:   %36 = or i64 %34, %33
Operands done!
Generated:   %37 = trunc i64 %36 to i32
Gen:   %37 = trunc i64 %36 to i32
Generating MATCH
Match: 
  %conv = sitofp i32 %3 to float
  %conv.1 = sitofp i32 %6 to float
  %conv.2 = sitofp i32 %9 to float
  %conv.3 = sitofp i32 %12 to float
  %conv.4 = sitofp i32 %15 to float
  %conv.5 = sitofp i32 %18 to float
  %conv.6 = sitofp i32 %21 to float
  %conv.7 = sitofp i32 %24 to float
Operands done!
Generated:   %38 = sitofp i32 %37 to float
Gen:   %38 = sitofp i32 %37 to float
Generating MATCH
Match: 
  %mul = fmul float %2, %conv
  %mul.1 = fmul float %5, %conv.1
  %mul.2 = fmul float %8, %conv.2
  %mul.3 = fmul float %11, %conv.3
  %mul.4 = fmul float %14, %conv.4
  %mul.5 = fmul float %17, %conv.5
  %mul.6 = fmul float %20, %conv.6
  %mul.7 = fmul float %23, %conv.7
Operands done!
Generated:   %39 = fmul float %31, %38
Gen:   %39 = fmul float %31, %38
Generating MATCH
Match: 
  %add8 = fadd float %1, %mul
  %add8.1 = fadd float %4, %mul.1
  %add8.2 = fadd float %7, %mul.2
  %add8.3 = fadd float %10, %mul.3
  %add8.4 = fadd float %13, %mul.4
  %add8.5 = fadd float %16, %mul.5
  %add8.6 = fadd float %19, %mul.6
  %add8.7 = fadd float %22, %mul.7
Operands done!
Generated:   %40 = fadd float %29, %39
Gen:   %40 = fadd float %29, %39
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %27
Gen:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %27
Generating MATCH
Match: 
  store float %add8, float* %arrayidx10, align 32, !tbaa !4
  store float %add8.1, float* %arrayidx10.1, align 4, !tbaa !4
  store float %add8.2, float* %arrayidx10.2, align 8, !tbaa !4
  store float %add8.3, float* %arrayidx10.3, align 4, !tbaa !4
  store float %add8.4, float* %arrayidx10.4, align 16, !tbaa !4
  store float %add8.5, float* %arrayidx10.5, align 4, !tbaa !4
  store float %add8.6, float* %arrayidx10.6, align 8, !tbaa !4
  store float %add8.7, float* %arrayidx10.7, align 4, !tbaa !4
Operands done!
Generated:   store float %40, float* %41, align 1
Gen:   store float %40, float* %41, align 1
Graph code generated!
Root:
  store float %add8, float* %arrayidx10, align 32, !tbaa !4
  store float %add8.1, float* %arrayidx10.1, align 4, !tbaa !4
  store float %add8.2, float* %arrayidx10.2, align 8, !tbaa !4
  store float %add8.3, float* %arrayidx10.3, align 4, !tbaa !4
  store float %add8.4, float* %arrayidx10.4, align 16, !tbaa !4
  store float %add8.5, float* %arrayidx10.5, align 4, !tbaa !4
  store float %add8.6, float* %arrayidx10.6, align 8, !tbaa !4
  store float %add8.7, float* %arrayidx10.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="sitofp", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="trunc", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
18 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
19 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
19->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
13->9 
11->10 
12->11 
5->11 
6->11 
14->13 
15->14 
16->15 
18->15 
7->16 
17->16 
20->19 
5->19 
6->19 
21 [label="icmp", style="filled" , fillcolor="#f2eb5c", shape=box];
16->21
}

Gains: 152 - 35 = 117; Width: 8; Profitable; s452
Done!
NodeTypeFreq;
MISMATCH: 2
MATCH: 10
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 3
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s453
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.025 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 60
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %s.023 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %add.6, 2.000000e+00
Possible reduction
  %add.7 = fadd float %add.6, 2.000000e+00
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
Found possible recurrence! Init:   %s.023 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add = fadd float %s.023, 2.000000e+00
  %add.1 = fadd float %add, 2.000000e+00
  %add.2 = fadd float %add.1, 2.000000e+00
  %add.3 = fadd float %add.2, 2.000000e+00
  %add.4 = fadd float %add.3, 2.000000e+00
  %add.5 = fadd float %add.4, 2.000000e+00
  %add.6 = fadd float %add.5, 2.000000e+00
  %add.7 = fadd float %add.6, 2.000000e+00
Recurrence
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: store
  store float %mul.1, float* %arrayidx7.1, align 4, !tbaa !4
Hit: store
  store float %mul.2, float* %arrayidx7.2, align 8, !tbaa !4
Hit: store
  store float %mul.3, float* %arrayidx7.3, align 4, !tbaa !4
Hit: store
  store float %mul.4, float* %arrayidx7.4, align 16, !tbaa !4
Hit: store
  store float %mul.5, float* %arrayidx7.5, align 4, !tbaa !4
Hit: store
  store float %mul.6, float* %arrayidx7.6, align 8, !tbaa !4
Hit: store
  store float %mul.7, float* %arrayidx7.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s453
Generating tree
Generating MATCH
Match: 
  %add = fadd float %s.023, 2.000000e+00
  %add.1 = fadd float %add, 2.000000e+00
  %add.2 = fadd float %add.1, 2.000000e+00
  %add.3 = fadd float %add.2, 2.000000e+00
  %add.4 = fadd float %add.3, 2.000000e+00
  %add.5 = fadd float %add.4, 2.000000e+00
  %add.6 = fadd float %add.5, 2.000000e+00
  %add.7 = fadd float %add.6, 2.000000e+00
Generating RECURRENCE
Gen:   %9 = phi float [ %s.023, %rolled.pre ]
Generating IDENTICAL
Operands done!
Generated:   %10 = fadd float %9, 2.000000e+00
Found use: 7:   %s.023 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
Extracting:   %10 = fadd float %9, 2.000000e+00
Gen:   %11 = fadd float %10, 2.000000e+00
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %13 = zext i8 %9 to i64
Closing BINOP
Gen:   %14 = or i64 %indvars.iv, %13
Operands done!
Generated:   %15 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %14
Gen:   %15 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %14
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx, align 32, !tbaa !4
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %3 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %4 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %5 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %6 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %7 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %8 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %16 = load float, float* %15, align 1
Gen:   %16 = load float, float* %15, align 1
Generating MATCH
Match: 
  %mul = fmul float %add, %1
  %mul.1 = fmul float %add.1, %2
  %mul.2 = fmul float %add.2, %3
  %mul.3 = fmul float %add.3, %4
  %mul.4 = fmul float %add.4, %5
  %mul.5 = fmul float %add.5, %6
  %mul.6 = fmul float %add.6, %7
  %mul.7 = fmul float %add.7, %8
Operands done!
Generated:   %17 = fmul float %11, %16
Gen:   %17 = fmul float %11, %16
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %18 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %14
Gen:   %18 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %14
Generating MATCH
Match: 
  store float %mul, float* %arrayidx7, align 32, !tbaa !4
  store float %mul.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %mul.2, float* %arrayidx7.2, align 8, !tbaa !4
  store float %mul.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %mul.4, float* %arrayidx7.4, align 16, !tbaa !4
  store float %mul.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %mul.6, float* %arrayidx7.6, align 8, !tbaa !4
  store float %mul.7, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   store float %17, float* %18, align 1
Gen:   store float %17, float* %18, align 1
Graph code generated!
PHI: recurrence rolled.loop,  %11 = fadd float %10, 2.000000e+00
Root:
  store float %mul, float* %arrayidx7, align 32, !tbaa !4
  store float %mul.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %mul.2, float* %arrayidx7.2, align 8, !tbaa !4
  store float %mul.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %mul.4, float* %arrayidx7.4, align 16, !tbaa !4
  store float %mul.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %mul.6, float* %arrayidx7.6, align 8, !tbaa !4
  store float %mul.7, float* %arrayidx7.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="recurrence", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="2.000000e+00", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
12->0 
2->1 
5->1 
3->2 
4->2 
2->3 
6->5 
7->6 
8->6 
9->6 
10->9 
11->9 
13->12 
8->12 
9->12 
14 [label="phi", style="filled" , fillcolor="#f2eb5c", shape=box];
2->14
}

Gains: 101 - 23 = 78; Width: 8; Recurrence Profitable; s453
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 6
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 1
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s471s
BlockSize: 1
Done Loop Roller: 0/0
Nothing found in: s471s
Optimizing: s471
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.044 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 131
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %25 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %29 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx14.1, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx14.2, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx14.3, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx14.4, align 16, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx14.5, align 4, !tbaa !4
Hit: load
  %26 = load float, float* %arrayidx14.6, align 8, !tbaa !4
Hit: load
  %30 = load float, float* %arrayidx14.7, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx18.1, align 4, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx18.2, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx18.3, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx18.4, align 16, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx18.5, align 4, !tbaa !4
Hit: load
  %27 = load float, float* %arrayidx18.6, align 8, !tbaa !4
Hit: load
  %31 = load float, float* %arrayidx18.7, align 4, !tbaa !4
Hit: store
  store float %add20.1, float* %arrayidx.1, align 4, !tbaa !4
Hit: store
  store float %add20.2, float* %arrayidx.2, align 8, !tbaa !4
Hit: store
  store float %add20.3, float* %arrayidx.3, align 4, !tbaa !4
Hit: store
  store float %add20.4, float* %arrayidx.4, align 16, !tbaa !4
Hit: store
  store float %add20.5, float* %arrayidx.5, align 4, !tbaa !4
Hit: store
  store float %add20.6, float* %arrayidx.6, align 8, !tbaa !4
Hit: store
  store float %add20.7, float* %arrayidx.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s471
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %33 = zext i8 %32 to i64
Closing BINOP
Gen:   %34 = or i64 %indvars.iv, %33
Operands done!
Generated:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %34
Gen:   %35 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %34
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %36 = load float, float* %35, align 1
Gen:   %36 = load float, float* %35, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %34
Gen:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %34
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %17 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %25 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %29 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %38 = load float, float* %37, align 1
Gen:   %38 = load float, float* %37, align 1
Generating MATCH
Match: 
  %mul = fmul float %1, %1
  %mul.1 = fmul float %5, %5
  %mul.2 = fmul float %9, %9
  %mul.3 = fmul float %13, %13
  %mul.4 = fmul float %17, %17
  %mul.5 = fmul float %21, %21
  %mul.6 = fmul float %25, %25
  %mul.7 = fmul float %29, %29
Operands done!
Generated:   %39 = fmul float %38, %38
Gen:   %39 = fmul float %38, %38
Generating MATCH
Match: 
  %add = fadd float %0, %mul
  %add.1 = fadd float %4, %mul.1
  %add.2 = fadd float %8, %mul.2
  %add.3 = fadd float %12, %mul.3
  %add.4 = fadd float %16, %mul.4
  %add.5 = fadd float %20, %mul.5
  %add.6 = fadd float %24, %mul.6
  %add.7 = fadd float %28, %mul.7
Operands done!
Generated:   %40 = fadd float %36, %39
Gen:   %40 = fadd float %36, %39
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @x, i64 0, i64 %indvars.iv
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @x, i64 0, i64 %indvars.iv.next
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @x, i64 0, i64 %indvars.iv.next.1
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @x, i64 0, i64 %indvars.iv.next.2
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @x, i64 0, i64 %indvars.iv.next.3
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @x, i64 0, i64 %indvars.iv.next.4
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @x, i64 0, i64 %indvars.iv.next.5
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @x, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @x, i64 0, i64 %34
Gen:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @x, i64 0, i64 %34
Generating MATCH
Match: 
  store float %add, float* %arrayidx11, align 32, !tbaa !4
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
Operands done!
Generated:   store float %40, float* %41, align 1
Gen:   store float %40, float* %41, align 1
Generating MATCH
Match: 
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %42 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %34
Gen:   %42 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %34
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx14, align 32, !tbaa !4
  %6 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %10 = load float, float* %arrayidx14.2, align 8, !tbaa !4
  %14 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %18 = load float, float* %arrayidx14.4, align 16, !tbaa !4
  %22 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %26 = load float, float* %arrayidx14.6, align 8, !tbaa !4
  %30 = load float, float* %arrayidx14.7, align 4, !tbaa !4
Operands done!
Generated:   %43 = load float, float* %42, align 1
Gen:   %43 = load float, float* %42, align 1
Generating MATCH
Match: 
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %arrayidx18.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %arrayidx18.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %arrayidx18.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %arrayidx18.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %arrayidx18.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %arrayidx18.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %arrayidx18.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %44 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %34
Gen:   %44 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %34
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx18, align 32, !tbaa !4
  %7 = load float, float* %arrayidx18.1, align 4, !tbaa !4
  %11 = load float, float* %arrayidx18.2, align 8, !tbaa !4
  %15 = load float, float* %arrayidx18.3, align 4, !tbaa !4
  %19 = load float, float* %arrayidx18.4, align 16, !tbaa !4
  %23 = load float, float* %arrayidx18.5, align 4, !tbaa !4
  %27 = load float, float* %arrayidx18.6, align 8, !tbaa !4
  %31 = load float, float* %arrayidx18.7, align 4, !tbaa !4
Operands done!
Generated:   %45 = load float, float* %44, align 1
Gen:   %45 = load float, float* %44, align 1
Generating MATCH
Match: 
  %mul19 = fmul float %1, %3
  %mul19.1 = fmul float %5, %7
  %mul19.2 = fmul float %9, %11
  %mul19.3 = fmul float %13, %15
  %mul19.4 = fmul float %17, %19
  %mul19.5 = fmul float %21, %23
  %mul19.6 = fmul float %25, %27
  %mul19.7 = fmul float %29, %31
Operands done!
Generated:   %46 = fmul float %38, %45
Gen:   %46 = fmul float %38, %45
Generating MATCH
Match: 
  %add20 = fadd float %2, %mul19
  %add20.1 = fadd float %6, %mul19.1
  %add20.2 = fadd float %10, %mul19.2
  %add20.3 = fadd float %14, %mul19.3
  %add20.4 = fadd float %18, %mul19.4
  %add20.5 = fadd float %22, %mul19.5
  %add20.6 = fadd float %26, %mul19.6
  %add20.7 = fadd float %30, %mul19.7
Operands done!
Generated:   %47 = fadd float %43, %46
Gen:   %47 = fadd float %43, %46
Generating MATCH
Match: 
  store float %add20, float* %arrayidx, align 32, !tbaa !4
  store float %add20.1, float* %arrayidx.1, align 4, !tbaa !4
  store float %add20.2, float* %arrayidx.2, align 8, !tbaa !4
  store float %add20.3, float* %arrayidx.3, align 4, !tbaa !4
  store float %add20.4, float* %arrayidx.4, align 16, !tbaa !4
  store float %add20.5, float* %arrayidx.5, align 4, !tbaa !4
  store float %add20.6, float* %arrayidx.6, align 8, !tbaa !4
  store float %add20.7, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   store float %47, float* %35, align 1
Gen:   store float %47, float* %35, align 1
Generating MULTI
Graph code generated!
Root:
Root size: 0
digraph VTree {
0 [label="multi flow", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
24 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
16->0 
2->1 
14->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
11->10 
12->11 
13->12 
6->12 
7->12 
15->14 
6->14 
7->14 
17->16 
4->16 
18->17 
21->17 
19->18 
20->19 
6->19 
7->19 
11->21 
22->21 
23->22 
24->23 
6->23 
7->23 
}

Gains: 229 - 30 = 199; Width: 0; Profitable; s471
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 15
IDENTICAL: 7
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 1
Done Loop Roller: 1/1
Optimizing: s481
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.029 = phi i32 [ 0, %entry ], [ %inc15, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %if.end.7 ]
BlockSize: 2
Attempting Group:
BlockSize: 14
Attempting Group:
BlockSize: 14
Attempting Group:
BlockSize: 14
Attempting Group:
BlockSize: 14
Attempting Group:
BlockSize: 14
Attempting Group:
BlockSize: 14
Attempting Group:
BlockSize: 14
Attempting Group:
BlockSize: 12
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: s481
Optimizing: s482
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.033 = phi i32 [ 0, %entry ], [ %inc17, %cleanup ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.cond2.7 ]
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 12
Attempting Group:
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: s482
Optimizing: s491
BlockSize: 7
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.032 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 115
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %6 = load float, float* %arrayidx.1, align 4, !tbaa !11
Hit: load
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !11
Hit: load
  %14 = load float, float* %arrayidx.3, align 4, !tbaa !11
Hit: load
  %18 = load float, float* %arrayidx.4, align 16, !tbaa !11
Hit: load
  %22 = load float, float* %arrayidx.5, align 4, !tbaa !11
Hit: load
  %26 = load float, float* %arrayidx.6, align 8, !tbaa !11
Hit: load
  %30 = load float, float* %arrayidx.7, align 4, !tbaa !11
Hit: load
  %7 = load float, float* %arrayidx7.1, align 4, !tbaa !11
Hit: load
  %11 = load float, float* %arrayidx7.2, align 8, !tbaa !11
Hit: load
  %15 = load float, float* %arrayidx7.3, align 4, !tbaa !11
Hit: load
  %19 = load float, float* %arrayidx7.4, align 16, !tbaa !11
Hit: load
  %23 = load float, float* %arrayidx7.5, align 4, !tbaa !11
Hit: load
  %27 = load float, float* %arrayidx7.6, align 8, !tbaa !11
Hit: load
  %31 = load float, float* %arrayidx7.7, align 4, !tbaa !11
Hit: load
  %8 = load float, float* %arrayidx9.1, align 4, !tbaa !11
Hit: load
  %12 = load float, float* %arrayidx9.2, align 8, !tbaa !11
Hit: load
  %16 = load float, float* %arrayidx9.3, align 4, !tbaa !11
Hit: load
  %20 = load float, float* %arrayidx9.4, align 16, !tbaa !11
Hit: load
  %24 = load float, float* %arrayidx9.5, align 4, !tbaa !11
Hit: load
  %28 = load float, float* %arrayidx9.6, align 8, !tbaa !11
Hit: load
  %32 = load float, float* %arrayidx9.7, align 4, !tbaa !11
Hit: load
  %9 = load i32, i32* %arrayidx11.1, align 4, !tbaa !13
Hit: load
  %13 = load i32, i32* %arrayidx11.2, align 4, !tbaa !13
Hit: load
  %17 = load i32, i32* %arrayidx11.3, align 4, !tbaa !13
Hit: load
  %21 = load i32, i32* %arrayidx11.4, align 4, !tbaa !13
Hit: load
  %25 = load i32, i32* %arrayidx11.5, align 4, !tbaa !13
Hit: load
  %29 = load i32, i32* %arrayidx11.6, align 4, !tbaa !13
Hit: load
  %33 = load i32, i32* %arrayidx11.7, align 4, !tbaa !13
Hit: store
  store float %add.1, float* %arrayidx13.1, align 4, !tbaa !11
Hit: store
  store float %add.2, float* %arrayidx13.2, align 4, !tbaa !11
Hit: store
  store float %add.3, float* %arrayidx13.3, align 4, !tbaa !11
Hit: store
  store float %add.4, float* %arrayidx13.4, align 4, !tbaa !11
Hit: store
  store float %add.5, float* %arrayidx13.5, align 4, !tbaa !11
Hit: store
  store float %add.6, float* %arrayidx13.6, align 4, !tbaa !11
Hit: store
  store float %add.7, float* %arrayidx13.7, align 4, !tbaa !11
Schedulable: 1
Loop Rolling: s491
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %35 = zext i8 %34 to i64
Closing BINOP
Gen:   %36 = or i64 %indvars.iv, %35
Operands done!
Generated:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %36
Gen:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %36
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx, align 32, !tbaa !11
  %6 = load float, float* %arrayidx.1, align 4, !tbaa !11
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !11
  %14 = load float, float* %arrayidx.3, align 4, !tbaa !11
  %18 = load float, float* %arrayidx.4, align 16, !tbaa !11
  %22 = load float, float* %arrayidx.5, align 4, !tbaa !11
  %26 = load float, float* %arrayidx.6, align 8, !tbaa !11
  %30 = load float, float* %arrayidx.7, align 4, !tbaa !11
Operands done!
Generated:   %38 = load float, float* %37, align 1
Gen:   %38 = load float, float* %37, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %39 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %36
Gen:   %39 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %36
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx7, align 32, !tbaa !11
  %7 = load float, float* %arrayidx7.1, align 4, !tbaa !11
  %11 = load float, float* %arrayidx7.2, align 8, !tbaa !11
  %15 = load float, float* %arrayidx7.3, align 4, !tbaa !11
  %19 = load float, float* %arrayidx7.4, align 16, !tbaa !11
  %23 = load float, float* %arrayidx7.5, align 4, !tbaa !11
  %27 = load float, float* %arrayidx7.6, align 8, !tbaa !11
  %31 = load float, float* %arrayidx7.7, align 4, !tbaa !11
Operands done!
Generated:   %40 = load float, float* %39, align 1
Gen:   %40 = load float, float* %39, align 1
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %36
Gen:   %41 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %36
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx9, align 32, !tbaa !11
  %8 = load float, float* %arrayidx9.1, align 4, !tbaa !11
  %12 = load float, float* %arrayidx9.2, align 8, !tbaa !11
  %16 = load float, float* %arrayidx9.3, align 4, !tbaa !11
  %20 = load float, float* %arrayidx9.4, align 16, !tbaa !11
  %24 = load float, float* %arrayidx9.5, align 4, !tbaa !11
  %28 = load float, float* %arrayidx9.6, align 8, !tbaa !11
  %32 = load float, float* %arrayidx9.7, align 4, !tbaa !11
Operands done!
Generated:   %42 = load float, float* %41, align 1
Gen:   %42 = load float, float* %41, align 1
Generating MATCH
Match: 
  %mul = fmul float %3, %4
  %mul.1 = fmul float %7, %8
  %mul.2 = fmul float %11, %12
  %mul.3 = fmul float %15, %16
  %mul.4 = fmul float %19, %20
  %mul.5 = fmul float %23, %24
  %mul.6 = fmul float %27, %28
  %mul.7 = fmul float %31, %32
Operands done!
Generated:   %43 = fmul float %40, %42
Gen:   %43 = fmul float %40, %42
Generating MATCH
Match: 
  %add = fadd float %2, %mul
  %add.1 = fadd float %6, %mul.1
  %add.2 = fadd float %10, %mul.2
  %add.3 = fadd float %14, %mul.3
  %add.4 = fadd float %18, %mul.4
  %add.5 = fadd float %22, %mul.5
  %add.6 = fadd float %26, %mul.6
  %add.7 = fadd float %30, %mul.7
Operands done!
Generated:   %44 = fadd float %38, %43
Gen:   %44 = fadd float %38, %43
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv
  %arrayidx11.1 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next
  %arrayidx11.2 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.1
  %arrayidx11.3 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.2
  %arrayidx11.4 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.3
  %arrayidx11.5 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.4
  %arrayidx11.6 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.5
  %arrayidx11.7 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.6
Generating IDENTICAL
Operands done!
Generated:   %45 = getelementptr inbounds i32, i32* %1, i64 %36
Gen:   %45 = getelementptr inbounds i32, i32* %1, i64 %36
Generating MATCH
Match: 
  %5 = load i32, i32* %arrayidx11, align 4, !tbaa !13
  %9 = load i32, i32* %arrayidx11.1, align 4, !tbaa !13
  %13 = load i32, i32* %arrayidx11.2, align 4, !tbaa !13
  %17 = load i32, i32* %arrayidx11.3, align 4, !tbaa !13
  %21 = load i32, i32* %arrayidx11.4, align 4, !tbaa !13
  %25 = load i32, i32* %arrayidx11.5, align 4, !tbaa !13
  %29 = load i32, i32* %arrayidx11.6, align 4, !tbaa !13
  %33 = load i32, i32* %arrayidx11.7, align 4, !tbaa !13
Operands done!
Generated:   %46 = load i32, i32* %45, align 1
Gen:   %46 = load i32, i32* %45, align 1
Generating MATCH
Match: 
  %idxprom12 = sext i32 %5 to i64
  %idxprom12.1 = sext i32 %9 to i64
  %idxprom12.2 = sext i32 %13 to i64
  %idxprom12.3 = sext i32 %17 to i64
  %idxprom12.4 = sext i32 %21 to i64
  %idxprom12.5 = sext i32 %25 to i64
  %idxprom12.6 = sext i32 %29 to i64
  %idxprom12.7 = sext i32 %33 to i64
Operands done!
Generated:   %47 = sext i32 %46 to i64
Gen:   %47 = sext i32 %46 to i64
Generating MATCH
Match: 
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom12
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom12.1
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom12.2
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom12.3
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom12.4
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom12.5
  %arrayidx13.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom12.6
  %arrayidx13.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom12.7
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %47
Gen:   %48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %47
Generating MATCH
Match: 
  store float %add, float* %arrayidx13, align 4, !tbaa !11
  store float %add.1, float* %arrayidx13.1, align 4, !tbaa !11
  store float %add.2, float* %arrayidx13.2, align 4, !tbaa !11
  store float %add.3, float* %arrayidx13.3, align 4, !tbaa !11
  store float %add.4, float* %arrayidx13.4, align 4, !tbaa !11
  store float %add.5, float* %arrayidx13.5, align 4, !tbaa !11
  store float %add.6, float* %arrayidx13.6, align 4, !tbaa !11
  store float %add.7, float* %arrayidx13.7, align 4, !tbaa !11
Operands done!
Generated:   store float %44, float* %48, align 1
Gen:   store float %44, float* %48, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx13, align 4, !tbaa !11
  store float %add.1, float* %arrayidx13.1, align 4, !tbaa !11
  store float %add.2, float* %arrayidx13.2, align 4, !tbaa !11
  store float %add.3, float* %arrayidx13.3, align 4, !tbaa !11
  store float %add.4, float* %arrayidx13.4, align 4, !tbaa !11
  store float %add.5, float* %arrayidx13.5, align 4, !tbaa !11
  store float %add.6, float* %arrayidx13.6, align 4, !tbaa !11
  store float %add.7, float* %arrayidx13.7, align 4, !tbaa !11
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
16->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
13->9 
11->10 
12->11 
5->11 
6->11 
14->13 
15->14 
5->14 
6->14 
17->16 
5->16 
18->16 
19->18 
20->19 
21->20 
6->20 
}

Gains: 197 - 26 = 171; Width: 8; Profitable; s491
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 13
IDENTICAL: 7
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s4112
BlockSize: 11
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.029 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 91
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %7 = load i32, i32* %arrayidx.1, align 4, !tbaa !15
Hit: load
  %10 = load i32, i32* %arrayidx.2, align 4, !tbaa !15
Hit: load
  %13 = load i32, i32* %arrayidx.3, align 4, !tbaa !15
Hit: load
  %16 = load i32, i32* %arrayidx.4, align 4, !tbaa !15
Hit: load
  %19 = load i32, i32* %arrayidx.5, align 4, !tbaa !15
Hit: load
  %22 = load i32, i32* %arrayidx.6, align 4, !tbaa !15
Hit: load
  %25 = load i32, i32* %arrayidx.7, align 4, !tbaa !15
Hit: load
  %8 = load float, float* %arrayidx7.1, align 4, !tbaa !17
Hit: load
  %11 = load float, float* %arrayidx7.2, align 4, !tbaa !17
Hit: load
  %14 = load float, float* %arrayidx7.3, align 4, !tbaa !17
Hit: load
  %17 = load float, float* %arrayidx7.4, align 4, !tbaa !17
Hit: load
  %20 = load float, float* %arrayidx7.5, align 4, !tbaa !17
Hit: load
  %23 = load float, float* %arrayidx7.6, align 4, !tbaa !17
Hit: load
  %26 = load float, float* %arrayidx7.7, align 4, !tbaa !17
Hit: load
  %9 = load float, float* %arrayidx9.1, align 4, !tbaa !17
Hit: load
  %12 = load float, float* %arrayidx9.2, align 8, !tbaa !17
Hit: load
  %15 = load float, float* %arrayidx9.3, align 4, !tbaa !17
Hit: load
  %18 = load float, float* %arrayidx9.4, align 16, !tbaa !17
Hit: load
  %21 = load float, float* %arrayidx9.5, align 4, !tbaa !17
Hit: load
  %24 = load float, float* %arrayidx9.6, align 8, !tbaa !17
Hit: load
  %27 = load float, float* %arrayidx9.7, align 4, !tbaa !17
Hit: store
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !17
Hit: store
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !17
Hit: store
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !17
Hit: store
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !17
Hit: store
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !17
Hit: store
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !17
Hit: store
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !17
Schedulable: 1
Loop Rolling: s4112
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %29 = zext i8 %28 to i64
Closing BINOP
Gen:   %30 = or i64 %indvars.iv, %29
Operands done!
Generated:   %31 = getelementptr inbounds i32, i32* %2, i64 %30
Gen:   %31 = getelementptr inbounds i32, i32* %2, i64 %30
Generating MATCH
Match: 
  %4 = load i32, i32* %arrayidx, align 4, !tbaa !15
  %7 = load i32, i32* %arrayidx.1, align 4, !tbaa !15
  %10 = load i32, i32* %arrayidx.2, align 4, !tbaa !15
  %13 = load i32, i32* %arrayidx.3, align 4, !tbaa !15
  %16 = load i32, i32* %arrayidx.4, align 4, !tbaa !15
  %19 = load i32, i32* %arrayidx.5, align 4, !tbaa !15
  %22 = load i32, i32* %arrayidx.6, align 4, !tbaa !15
  %25 = load i32, i32* %arrayidx.7, align 4, !tbaa !15
Operands done!
Generated:   %32 = load i32, i32* %31, align 1
Gen:   %32 = load i32, i32* %31, align 1
Generating MATCH
Match: 
  %idxprom6 = sext i32 %4 to i64
  %idxprom6.1 = sext i32 %7 to i64
  %idxprom6.2 = sext i32 %10 to i64
  %idxprom6.3 = sext i32 %13 to i64
  %idxprom6.4 = sext i32 %16 to i64
  %idxprom6.5 = sext i32 %19 to i64
  %idxprom6.6 = sext i32 %22 to i64
  %idxprom6.7 = sext i32 %25 to i64
Operands done!
Generated:   %33 = sext i32 %32 to i64
Gen:   %33 = sext i32 %32 to i64
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.1
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.2
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.3
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.5
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.6
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.7
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %33
Gen:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %33
Generating MATCH
Match: 
  %5 = load float, float* %arrayidx7, align 4, !tbaa !17
  %8 = load float, float* %arrayidx7.1, align 4, !tbaa !17
  %11 = load float, float* %arrayidx7.2, align 4, !tbaa !17
  %14 = load float, float* %arrayidx7.3, align 4, !tbaa !17
  %17 = load float, float* %arrayidx7.4, align 4, !tbaa !17
  %20 = load float, float* %arrayidx7.5, align 4, !tbaa !17
  %23 = load float, float* %arrayidx7.6, align 4, !tbaa !17
  %26 = load float, float* %arrayidx7.7, align 4, !tbaa !17
Operands done!
Generated:   %35 = load float, float* %34, align 1
Gen:   %35 = load float, float* %34, align 1
Generating MATCH
Match: 
  %mul = fmul float %3, %5
  %mul.1 = fmul float %3, %8
  %mul.2 = fmul float %3, %11
  %mul.3 = fmul float %3, %14
  %mul.4 = fmul float %3, %17
  %mul.5 = fmul float %3, %20
  %mul.6 = fmul float %3, %23
  %mul.7 = fmul float %3, %26
Generating IDENTICAL
Operands done!
Generated:   %36 = fmul float %3, %35
Gen:   %36 = fmul float %3, %35
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %30
Gen:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %30
Generating MATCH
Match: 
  %6 = load float, float* %arrayidx9, align 32, !tbaa !17
  %9 = load float, float* %arrayidx9.1, align 4, !tbaa !17
  %12 = load float, float* %arrayidx9.2, align 8, !tbaa !17
  %15 = load float, float* %arrayidx9.3, align 4, !tbaa !17
  %18 = load float, float* %arrayidx9.4, align 16, !tbaa !17
  %21 = load float, float* %arrayidx9.5, align 4, !tbaa !17
  %24 = load float, float* %arrayidx9.6, align 8, !tbaa !17
  %27 = load float, float* %arrayidx9.7, align 4, !tbaa !17
Operands done!
Generated:   %38 = load float, float* %37, align 1
Gen:   %38 = load float, float* %37, align 1
Generating MATCH
Match: 
  %add = fadd float %6, %mul
  %add.1 = fadd float %9, %mul.1
  %add.2 = fadd float %12, %mul.2
  %add.3 = fadd float %15, %mul.3
  %add.4 = fadd float %18, %mul.4
  %add.5 = fadd float %21, %mul.5
  %add.6 = fadd float %24, %mul.6
  %add.7 = fadd float %27, %mul.7
Operands done!
Generated:   %39 = fadd float %38, %36
Gen:   %39 = fadd float %38, %36
Generating MATCH
Match: 
  store float %add, float* %arrayidx9, align 32, !tbaa !17
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !17
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !17
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !17
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !17
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !17
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !17
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !17
Operands done!
Generated:   store float %39, float* %37, align 1
Gen:   store float %39, float* %37, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx9, align 32, !tbaa !17
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !17
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !17
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !17
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !17
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !17
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !17
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !17
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->9 
12->11 
13->12 
5->12 
14->12 
15->14 
16->15 
17->16 
6->16 
}

Gains: 149 - 20 = 129; Width: 8; Profitable; s4112
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 10
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s4113
BlockSize: 7
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.032 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 91
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %5 = load i32, i32* %arrayidx.1, align 4, !tbaa !11
Hit: load
  %8 = load i32, i32* %arrayidx.2, align 4, !tbaa !11
Hit: load
  %11 = load i32, i32* %arrayidx.3, align 4, !tbaa !11
Hit: load
  %14 = load i32, i32* %arrayidx.4, align 4, !tbaa !11
Hit: load
  %17 = load i32, i32* %arrayidx.5, align 4, !tbaa !11
Hit: load
  %20 = load i32, i32* %arrayidx.6, align 4, !tbaa !11
Hit: load
  %23 = load i32, i32* %arrayidx.7, align 4, !tbaa !11
Hit: load
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !13
Hit: load
  %9 = load float, float* %arrayidx7.2, align 4, !tbaa !13
Hit: load
  %12 = load float, float* %arrayidx7.3, align 4, !tbaa !13
Hit: load
  %15 = load float, float* %arrayidx7.4, align 4, !tbaa !13
Hit: load
  %18 = load float, float* %arrayidx7.5, align 4, !tbaa !13
Hit: load
  %21 = load float, float* %arrayidx7.6, align 4, !tbaa !13
Hit: load
  %24 = load float, float* %arrayidx7.7, align 4, !tbaa !13
Hit: load
  %7 = load float, float* %arrayidx9.1, align 4, !tbaa !13
Hit: load
  %10 = load float, float* %arrayidx9.2, align 8, !tbaa !13
Hit: load
  %13 = load float, float* %arrayidx9.3, align 4, !tbaa !13
Hit: load
  %16 = load float, float* %arrayidx9.4, align 16, !tbaa !13
Hit: load
  %19 = load float, float* %arrayidx9.5, align 4, !tbaa !13
Hit: load
  %22 = load float, float* %arrayidx9.6, align 8, !tbaa !13
Hit: load
  %25 = load float, float* %arrayidx9.7, align 4, !tbaa !13
Hit: store
  store float %add.1, float* %arrayidx13.1, align 4, !tbaa !13
Hit: store
  store float %add.2, float* %arrayidx13.2, align 4, !tbaa !13
Hit: store
  store float %add.3, float* %arrayidx13.3, align 4, !tbaa !13
Hit: store
  store float %add.4, float* %arrayidx13.4, align 4, !tbaa !13
Hit: store
  store float %add.5, float* %arrayidx13.5, align 4, !tbaa !13
Hit: store
  store float %add.6, float* %arrayidx13.6, align 4, !tbaa !13
Hit: store
  store float %add.7, float* %arrayidx13.7, align 4, !tbaa !13
Schedulable: 1
Loop Rolling: s4113
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %27 = zext i8 %26 to i64
Closing BINOP
Gen:   %28 = or i64 %indvars.iv, %27
Operands done!
Generated:   %29 = getelementptr inbounds i32, i32* %1, i64 %28
Gen:   %29 = getelementptr inbounds i32, i32* %1, i64 %28
Generating MATCH
Match: 
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !11
  %5 = load i32, i32* %arrayidx.1, align 4, !tbaa !11
  %8 = load i32, i32* %arrayidx.2, align 4, !tbaa !11
  %11 = load i32, i32* %arrayidx.3, align 4, !tbaa !11
  %14 = load i32, i32* %arrayidx.4, align 4, !tbaa !11
  %17 = load i32, i32* %arrayidx.5, align 4, !tbaa !11
  %20 = load i32, i32* %arrayidx.6, align 4, !tbaa !11
  %23 = load i32, i32* %arrayidx.7, align 4, !tbaa !11
Operands done!
Generated:   %30 = load i32, i32* %29, align 1
Gen:   %30 = load i32, i32* %29, align 1
Generating MATCH
Match: 
  %idxprom6 = sext i32 %2 to i64
  %idxprom6.1 = sext i32 %5 to i64
  %idxprom6.2 = sext i32 %8 to i64
  %idxprom6.3 = sext i32 %11 to i64
  %idxprom6.4 = sext i32 %14 to i64
  %idxprom6.5 = sext i32 %17 to i64
  %idxprom6.6 = sext i32 %20 to i64
  %idxprom6.7 = sext i32 %23 to i64
Operands done!
Generated:   %31 = sext i32 %30 to i64
Gen:   %31 = sext i32 %30 to i64
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.1
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.2
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.3
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.5
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.6
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.7
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %31
Gen:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %31
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx7, align 4, !tbaa !13
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !13
  %9 = load float, float* %arrayidx7.2, align 4, !tbaa !13
  %12 = load float, float* %arrayidx7.3, align 4, !tbaa !13
  %15 = load float, float* %arrayidx7.4, align 4, !tbaa !13
  %18 = load float, float* %arrayidx7.5, align 4, !tbaa !13
  %21 = load float, float* %arrayidx7.6, align 4, !tbaa !13
  %24 = load float, float* %arrayidx7.7, align 4, !tbaa !13
Operands done!
Generated:   %33 = load float, float* %32, align 1
Gen:   %33 = load float, float* %32, align 1
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %28
Gen:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %28
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx9, align 32, !tbaa !13
  %7 = load float, float* %arrayidx9.1, align 4, !tbaa !13
  %10 = load float, float* %arrayidx9.2, align 8, !tbaa !13
  %13 = load float, float* %arrayidx9.3, align 4, !tbaa !13
  %16 = load float, float* %arrayidx9.4, align 16, !tbaa !13
  %19 = load float, float* %arrayidx9.5, align 4, !tbaa !13
  %22 = load float, float* %arrayidx9.6, align 8, !tbaa !13
  %25 = load float, float* %arrayidx9.7, align 4, !tbaa !13
Operands done!
Generated:   %35 = load float, float* %34, align 1
Gen:   %35 = load float, float* %34, align 1
Generating MATCH
Match: 
  %add = fadd float %3, %4
  %add.1 = fadd float %6, %7
  %add.2 = fadd float %9, %10
  %add.3 = fadd float %12, %13
  %add.4 = fadd float %15, %16
  %add.5 = fadd float %18, %19
  %add.6 = fadd float %21, %22
  %add.7 = fadd float %24, %25
Operands done!
Generated:   %36 = fadd float %33, %35
Gen:   %36 = fadd float %33, %35
Generating MATCH
Match: 
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom6
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom6.1
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom6.2
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom6.3
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom6.4
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom6.5
  %arrayidx13.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom6.6
  %arrayidx13.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom6.7
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %31
Gen:   %37 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %31
Generating MATCH
Match: 
  store float %add, float* %arrayidx13, align 4, !tbaa !13
  store float %add.1, float* %arrayidx13.1, align 4, !tbaa !13
  store float %add.2, float* %arrayidx13.2, align 4, !tbaa !13
  store float %add.3, float* %arrayidx13.3, align 4, !tbaa !13
  store float %add.4, float* %arrayidx13.4, align 4, !tbaa !13
  store float %add.5, float* %arrayidx13.5, align 4, !tbaa !13
  store float %add.6, float* %arrayidx13.6, align 4, !tbaa !13
  store float %add.7, float* %arrayidx13.7, align 4, !tbaa !13
Operands done!
Generated:   store float %36, float* %37, align 1
Gen:   store float %36, float* %37, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx13, align 4, !tbaa !13
  store float %add.1, float* %arrayidx13.1, align 4, !tbaa !13
  store float %add.2, float* %arrayidx13.2, align 4, !tbaa !13
  store float %add.3, float* %arrayidx13.3, align 4, !tbaa !13
  store float %add.4, float* %arrayidx13.4, align 4, !tbaa !13
  store float %add.5, float* %arrayidx13.5, align 4, !tbaa !13
  store float %add.6, float* %arrayidx13.6, align 4, !tbaa !13
  store float %add.7, float* %arrayidx13.7, align 4, !tbaa !13
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
16->0 
2->1 
13->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->7 
9->8 
10->8 
11->10 
12->10 
14->13 
15->14 
5->14 
10->14 
17->16 
5->16 
6->16 
}

Gains: 157 - 21 = 136; Width: 8; Profitable; s4113
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 10
IDENTICAL: 6
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s4114
BlockSize: 23
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.042 = phi i32 [ 0, %entry ], [ %inc20, %for.cond.cleanup4 ]
BlockSize: 1
BlockSize: 20
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %for.body5.prol ], [ %5, %for.body5.preheader ]
  %indvars.iv.next.prol = add nsw i64 %indvars.iv.prol, 1
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body5.prol ], [ %xtraiter, %for.body5.preheader ]
  %prol.iter.sub = add i32 %prol.iter, -1
Attempting Group:
BlockSize: 2
  %indvars.iv.unr = phi i64 [ %5, %for.body5.preheader ], [ %indvars.iv.next.prol, %for.body5.prol ]
BlockSize: 4
Attempting Group:
BlockSize: 123
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body5 ], [ %indvars.iv.unr, %for.body5.prol.loopexit ]
  %indvars.iv.next.7 = add nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %20 = load i32, i32* %arrayidx.1, align 4, !tbaa !13
Hit: load
  %24 = load i32, i32* %arrayidx.2, align 4, !tbaa !13
Hit: load
  %28 = load i32, i32* %arrayidx.3, align 4, !tbaa !13
Hit: load
  %32 = load i32, i32* %arrayidx.4, align 4, !tbaa !13
Hit: load
  %36 = load i32, i32* %arrayidx.5, align 4, !tbaa !13
Hit: load
  %40 = load i32, i32* %arrayidx.6, align 4, !tbaa !13
Hit: load
  %44 = load i32, i32* %arrayidx.7, align 4, !tbaa !13
Hit: load
  %21 = load float, float* %arrayidx7.1, align 4, !tbaa !14
Hit: load
  %25 = load float, float* %arrayidx7.2, align 4, !tbaa !14
Hit: load
  %29 = load float, float* %arrayidx7.3, align 4, !tbaa !14
Hit: load
  %33 = load float, float* %arrayidx7.4, align 4, !tbaa !14
Hit: load
  %37 = load float, float* %arrayidx7.5, align 4, !tbaa !14
Hit: load
  %41 = load float, float* %arrayidx7.6, align 4, !tbaa !14
Hit: load
  %45 = load float, float* %arrayidx7.7, align 4, !tbaa !14
Hit: load
  %22 = load float, float* %arrayidx11.1, align 4, !tbaa !14
Hit: load
  %26 = load float, float* %arrayidx11.2, align 4, !tbaa !14
Hit: load
  %30 = load float, float* %arrayidx11.3, align 4, !tbaa !14
Hit: load
  %34 = load float, float* %arrayidx11.4, align 4, !tbaa !14
Hit: load
  %38 = load float, float* %arrayidx11.5, align 4, !tbaa !14
Hit: load
  %42 = load float, float* %arrayidx11.6, align 4, !tbaa !14
Hit: load
  %46 = load float, float* %arrayidx11.7, align 4, !tbaa !14
Hit: load
  %23 = load float, float* %arrayidx13.1, align 4, !tbaa !14
Hit: load
  %27 = load float, float* %arrayidx13.2, align 4, !tbaa !14
Hit: load
  %31 = load float, float* %arrayidx13.3, align 4, !tbaa !14
Hit: load
  %35 = load float, float* %arrayidx13.4, align 4, !tbaa !14
Hit: load
  %39 = load float, float* %arrayidx13.5, align 4, !tbaa !14
Hit: load
  %43 = load float, float* %arrayidx13.6, align 4, !tbaa !14
Hit: load
  %47 = load float, float* %arrayidx13.7, align 4, !tbaa !14
Hit: store
  store float %add14.1, float* %arrayidx16.1, align 4, !tbaa !14
Hit: store
  store float %add14.2, float* %arrayidx16.2, align 4, !tbaa !14
Hit: store
  store float %add14.3, float* %arrayidx16.3, align 4, !tbaa !14
Hit: store
  store float %add14.4, float* %arrayidx16.4, align 4, !tbaa !14
Hit: store
  store float %add14.5, float* %arrayidx16.5, align 4, !tbaa !14
Hit: store
  store float %add14.6, float* %arrayidx16.6, align 4, !tbaa !14
Hit: store
  store float %add14.7, float* %arrayidx16.7, align 4, !tbaa !14
Schedulable: 1
Loop Rolling: s4114
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %49 = zext i8 %48 to i64
Closing BINOP
Gen:   %50 = add nsw i64 %indvars.iv, %49
Operands done!
Generated:   %51 = getelementptr inbounds i32, i32* %2, i64 %50
Gen:   %51 = getelementptr inbounds i32, i32* %2, i64 %50
Generating MATCH
Match: 
  %16 = load i32, i32* %arrayidx, align 4, !tbaa !13
  %20 = load i32, i32* %arrayidx.1, align 4, !tbaa !13
  %24 = load i32, i32* %arrayidx.2, align 4, !tbaa !13
  %28 = load i32, i32* %arrayidx.3, align 4, !tbaa !13
  %32 = load i32, i32* %arrayidx.4, align 4, !tbaa !13
  %36 = load i32, i32* %arrayidx.5, align 4, !tbaa !13
  %40 = load i32, i32* %arrayidx.6, align 4, !tbaa !13
  %44 = load i32, i32* %arrayidx.7, align 4, !tbaa !13
Operands done!
Generated:   %52 = load i32, i32* %51, align 1
Gen:   %52 = load i32, i32* %51, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %53 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %50
Gen:   %53 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %50
Generating MATCH
Match: 
  %17 = load float, float* %arrayidx7, align 4, !tbaa !14
  %21 = load float, float* %arrayidx7.1, align 4, !tbaa !14
  %25 = load float, float* %arrayidx7.2, align 4, !tbaa !14
  %29 = load float, float* %arrayidx7.3, align 4, !tbaa !14
  %33 = load float, float* %arrayidx7.4, align 4, !tbaa !14
  %37 = load float, float* %arrayidx7.5, align 4, !tbaa !14
  %41 = load float, float* %arrayidx7.6, align 4, !tbaa !14
  %45 = load float, float* %arrayidx7.7, align 4, !tbaa !14
Operands done!
Generated:   %54 = load float, float* %53, align 1
Gen:   %54 = load float, float* %53, align 1
Generating MATCH
Match: 
  %sub9 = sub i32 31999, %16
  %sub9.1 = sub i32 31999, %20
  %sub9.2 = sub i32 31999, %24
  %sub9.3 = sub i32 31999, %28
  %sub9.4 = sub i32 31999, %32
  %sub9.5 = sub i32 31999, %36
  %sub9.6 = sub i32 31999, %40
  %sub9.7 = sub i32 31999, %44
Generating IDENTICAL
Operands done!
Generated:   %55 = sub i32 31999, %52
Gen:   %55 = sub i32 31999, %52
Generating MATCH
Match: 
  %idxprom10 = sext i32 %sub9 to i64
  %idxprom10.1 = sext i32 %sub9.1 to i64
  %idxprom10.2 = sext i32 %sub9.2 to i64
  %idxprom10.3 = sext i32 %sub9.3 to i64
  %idxprom10.4 = sext i32 %sub9.4 to i64
  %idxprom10.5 = sext i32 %sub9.5 to i64
  %idxprom10.6 = sext i32 %sub9.6 to i64
  %idxprom10.7 = sext i32 %sub9.7 to i64
Operands done!
Generated:   %56 = sext i32 %55 to i64
Gen:   %56 = sext i32 %55 to i64
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.1
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.2
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.3
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.4
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.5
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.6
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.7
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %57 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %56
Gen:   %57 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %56
Generating MATCH
Match: 
  %18 = load float, float* %arrayidx11, align 4, !tbaa !14
  %22 = load float, float* %arrayidx11.1, align 4, !tbaa !14
  %26 = load float, float* %arrayidx11.2, align 4, !tbaa !14
  %30 = load float, float* %arrayidx11.3, align 4, !tbaa !14
  %34 = load float, float* %arrayidx11.4, align 4, !tbaa !14
  %38 = load float, float* %arrayidx11.5, align 4, !tbaa !14
  %42 = load float, float* %arrayidx11.6, align 4, !tbaa !14
  %46 = load float, float* %arrayidx11.7, align 4, !tbaa !14
Operands done!
Generated:   %58 = load float, float* %57, align 1
Gen:   %58 = load float, float* %57, align 1
Generating MATCH
Match: 
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx13.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %arrayidx13.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %59 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %50
Gen:   %59 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %50
Generating MATCH
Match: 
  %19 = load float, float* %arrayidx13, align 4, !tbaa !14
  %23 = load float, float* %arrayidx13.1, align 4, !tbaa !14
  %27 = load float, float* %arrayidx13.2, align 4, !tbaa !14
  %31 = load float, float* %arrayidx13.3, align 4, !tbaa !14
  %35 = load float, float* %arrayidx13.4, align 4, !tbaa !14
  %39 = load float, float* %arrayidx13.5, align 4, !tbaa !14
  %43 = load float, float* %arrayidx13.6, align 4, !tbaa !14
  %47 = load float, float* %arrayidx13.7, align 4, !tbaa !14
Operands done!
Generated:   %60 = load float, float* %59, align 1
Gen:   %60 = load float, float* %59, align 1
Generating MATCH
Match: 
  %mul = fmul float %18, %19
  %mul.1 = fmul float %22, %23
  %mul.2 = fmul float %26, %27
  %mul.3 = fmul float %30, %31
  %mul.4 = fmul float %34, %35
  %mul.5 = fmul float %38, %39
  %mul.6 = fmul float %42, %43
  %mul.7 = fmul float %46, %47
Operands done!
Generated:   %61 = fmul float %58, %60
Gen:   %61 = fmul float %58, %60
Generating MATCH
Match: 
  %add14 = fadd float %17, %mul
  %add14.1 = fadd float %21, %mul.1
  %add14.2 = fadd float %25, %mul.2
  %add14.3 = fadd float %29, %mul.3
  %add14.4 = fadd float %33, %mul.4
  %add14.5 = fadd float %37, %mul.5
  %add14.6 = fadd float %41, %mul.6
  %add14.7 = fadd float %45, %mul.7
Operands done!
Generated:   %62 = fadd float %54, %61
Gen:   %62 = fadd float %54, %61
Generating MATCH
Match: 
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %63 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %50
Gen:   %63 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %50
Generating MATCH
Match: 
  store float %add14, float* %arrayidx16, align 4, !tbaa !14
  store float %add14.1, float* %arrayidx16.1, align 4, !tbaa !14
  store float %add14.2, float* %arrayidx16.2, align 4, !tbaa !14
  store float %add14.3, float* %arrayidx16.3, align 4, !tbaa !14
  store float %add14.4, float* %arrayidx16.4, align 4, !tbaa !14
  store float %add14.5, float* %arrayidx16.5, align 4, !tbaa !14
  store float %add14.6, float* %arrayidx16.6, align 4, !tbaa !14
  store float %add14.7, float* %arrayidx16.7, align 4, !tbaa !14
Operands done!
Generated:   store float %62, float* %63, align 1
Gen:   store float %62, float* %63, align 1
Graph code generated!
Root:
  store float %add14, float* %arrayidx16, align 4, !tbaa !14
  store float %add14.1, float* %arrayidx16.1, align 4, !tbaa !14
  store float %add14.2, float* %arrayidx16.2, align 4, !tbaa !14
  store float %add14.3, float* %arrayidx16.3, align 4, !tbaa !14
  store float %add14.4, float* %arrayidx16.4, align 4, !tbaa !14
  store float %add14.5, float* %arrayidx16.5, align 4, !tbaa !14
  store float %add14.6, float* %arrayidx16.6, align 4, !tbaa !14
  store float %add14.7, float* %arrayidx16.7, align 4, !tbaa !14
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="add seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="sub", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="31999", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
17 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
19 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
22->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
19->9 
11->10 
12->11 
5->11 
13->11 
14->13 
15->14 
16->14 
17->16 
18->17 
6->17 
20->19 
21->20 
5->20 
6->20 
23->22 
5->22 
6->22 
}

Gains: 213 - 28 = 185; Width: 8; Profitable; s4114
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 14
IDENTICAL: 8
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s4115
BlockSize: 7
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.028 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
BlockSize: 3
Attempting Group:
Building reduction
  ret float %add.7
  %add.7 = fadd float %add.6, %mul.7
BlockSize: 4
Attempting Group:
BlockSize: 84
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %sum.126 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %add.6, %mul.7
Possible reduction
  %add.7 = fadd float %add.6, %mul.7
Building reduction
  %sum.126 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %add.6, %mul.7
BOs:
  %add.7 = fadd float %add.6, %mul.7
  %add.6 = fadd float %add.5, %mul.6
  %add.5 = fadd float %add.4, %mul.5
  %add.4 = fadd float %add.3, %mul.4
  %add.3 = fadd float %add.2, %mul.3
  %add.2 = fadd float %add.1, %mul.2
  %add.1 = fadd float %add, %mul.1
  %add = fadd float %sum.126, %mul
Operands:
  %mul = fmul float %2, %4
  %mul.1 = fmul float %5, %7
  %mul.2 = fmul float %8, %10
  %mul.3 = fmul float %11, %13
  %mul.4 = fmul float %14, %16
  %mul.5 = fmul float %17, %19
  %mul.6 = fmul float %20, %22
  %mul.7 = fmul float %23, %25
Operands:
  %mul = fmul float %2, %4
  %mul.1 = fmul float %5, %7
  %mul.2 = fmul float %8, %10
  %mul.3 = fmul float %11, %13
  %mul.4 = fmul float %14, %16
  %mul.5 = fmul float %17, %19
  %mul.6 = fmul float %20, %22
  %mul.7 = fmul float %23, %25
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !11
Hit: load
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !11
Hit: load
  %11 = load float, float* %arrayidx.3, align 4, !tbaa !11
Hit: load
  %14 = load float, float* %arrayidx.4, align 16, !tbaa !11
Hit: load
  %17 = load float, float* %arrayidx.5, align 4, !tbaa !11
Hit: load
  %20 = load float, float* %arrayidx.6, align 8, !tbaa !11
Hit: load
  %23 = load float, float* %arrayidx.7, align 4, !tbaa !11
Hit: load
  %6 = load i32, i32* %arrayidx7.1, align 4, !tbaa !13
Hit: load
  %9 = load i32, i32* %arrayidx7.2, align 4, !tbaa !13
Hit: load
  %12 = load i32, i32* %arrayidx7.3, align 4, !tbaa !13
Hit: load
  %15 = load i32, i32* %arrayidx7.4, align 4, !tbaa !13
Hit: load
  %18 = load i32, i32* %arrayidx7.5, align 4, !tbaa !13
Hit: load
  %21 = load i32, i32* %arrayidx7.6, align 4, !tbaa !13
Hit: load
  %24 = load i32, i32* %arrayidx7.7, align 4, !tbaa !13
Hit: load
  %7 = load float, float* %arrayidx9.1, align 4, !tbaa !11
Hit: load
  %10 = load float, float* %arrayidx9.2, align 4, !tbaa !11
Hit: load
  %13 = load float, float* %arrayidx9.3, align 4, !tbaa !11
Hit: load
  %16 = load float, float* %arrayidx9.4, align 4, !tbaa !11
Hit: load
  %19 = load float, float* %arrayidx9.5, align 4, !tbaa !11
Hit: load
  %22 = load float, float* %arrayidx9.6, align 4, !tbaa !11
Hit: load
  %25 = load float, float* %arrayidx9.7, align 4, !tbaa !11
Schedulable: 1
Loop Rolling: s4115
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %27 = zext i8 %26 to i64
Closing BINOP
Gen:   %28 = or i64 %indvars.iv, %27
Operands done!
Generated:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
Gen:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx, align 32, !tbaa !11
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !11
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !11
  %11 = load float, float* %arrayidx.3, align 4, !tbaa !11
  %14 = load float, float* %arrayidx.4, align 16, !tbaa !11
  %17 = load float, float* %arrayidx.5, align 4, !tbaa !11
  %20 = load float, float* %arrayidx.6, align 8, !tbaa !11
  %23 = load float, float* %arrayidx.7, align 4, !tbaa !11
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.6
Generating IDENTICAL
Operands done!
Generated:   %31 = getelementptr inbounds i32, i32* %1, i64 %28
Gen:   %31 = getelementptr inbounds i32, i32* %1, i64 %28
Generating MATCH
Match: 
  %3 = load i32, i32* %arrayidx7, align 4, !tbaa !13
  %6 = load i32, i32* %arrayidx7.1, align 4, !tbaa !13
  %9 = load i32, i32* %arrayidx7.2, align 4, !tbaa !13
  %12 = load i32, i32* %arrayidx7.3, align 4, !tbaa !13
  %15 = load i32, i32* %arrayidx7.4, align 4, !tbaa !13
  %18 = load i32, i32* %arrayidx7.5, align 4, !tbaa !13
  %21 = load i32, i32* %arrayidx7.6, align 4, !tbaa !13
  %24 = load i32, i32* %arrayidx7.7, align 4, !tbaa !13
Operands done!
Generated:   %32 = load i32, i32* %31, align 1
Gen:   %32 = load i32, i32* %31, align 1
Generating MATCH
Match: 
  %idxprom8 = sext i32 %3 to i64
  %idxprom8.1 = sext i32 %6 to i64
  %idxprom8.2 = sext i32 %9 to i64
  %idxprom8.3 = sext i32 %12 to i64
  %idxprom8.4 = sext i32 %15 to i64
  %idxprom8.5 = sext i32 %18 to i64
  %idxprom8.6 = sext i32 %21 to i64
  %idxprom8.7 = sext i32 %24 to i64
Operands done!
Generated:   %33 = sext i32 %32 to i64
Gen:   %33 = sext i32 %32 to i64
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom8
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom8.1
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom8.2
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom8.3
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom8.4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom8.5
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom8.6
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom8.7
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %33
Gen:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %33
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx9, align 4, !tbaa !11
  %7 = load float, float* %arrayidx9.1, align 4, !tbaa !11
  %10 = load float, float* %arrayidx9.2, align 4, !tbaa !11
  %13 = load float, float* %arrayidx9.3, align 4, !tbaa !11
  %16 = load float, float* %arrayidx9.4, align 4, !tbaa !11
  %19 = load float, float* %arrayidx9.5, align 4, !tbaa !11
  %22 = load float, float* %arrayidx9.6, align 4, !tbaa !11
  %25 = load float, float* %arrayidx9.7, align 4, !tbaa !11
Operands done!
Generated:   %35 = load float, float* %34, align 1
Gen:   %35 = load float, float* %34, align 1
Generating MATCH
Match: 
  %mul = fmul float %2, %4
  %mul.1 = fmul float %5, %7
  %mul.2 = fmul float %8, %10
  %mul.3 = fmul float %11, %13
  %mul.4 = fmul float %14, %16
  %mul.5 = fmul float %17, %19
  %mul.6 = fmul float %20, %22
  %mul.7 = fmul float %23, %25
Operands done!
Generated:   %36 = fmul float %30, %35
Gen:   %36 = fmul float %30, %35
Generating REDUCTION
Closing REDUCTION
Found use: 0:   ret float %add.7
Extracting:   %38 = fadd float %27, %37
Gen:   %38 = fadd float %27, %37
Graph code generated!
Root:
  %add.7 = fadd float %add.6, %mul.7
  %add.6 = fadd float %add.5, %mul.6
  %add.5 = fadd float %add.4, %mul.5
  %add.4 = fadd float %add.3, %mul.4
  %add.3 = fadd float %add.2, %mul.3
  %add.2 = fadd float %add.1, %mul.2
  %add.1 = fadd float %add, %mul.1
  %add = fadd float %sum.126, %mul
Root size: 8
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
12->10 
13->12 
14->13 
15->14 
6->14 
16 [label="ret", style="filled" , fillcolor="#f2eb5c", shape=box];
0->16
}

Gains: 133 - 18 = 115; Width: 8; Reduction Profitable; s4115
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 8
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 1
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: s4116
BlockSize: 16
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.038 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup4 ]
BlockSize: 3
Attempting Group:
Building reduction
  ret float %add12.6
  %add12.6 = fadd float %add12.5, %mul.6
BlockSize: 4
Attempting Group:
BlockSize: 81
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %sum.136 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add12.7, %for.body5.7 ]
BlockSize: 12
Done Loop Roller: 0/0
Nothing found in: s4116
Optimizing: s4117
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.028 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 107
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
7 x 8
Final Match: 0
BinOp Seq
Creating Node
match analysis
match analysis
Match: 0
7 x 8
Final Match: 0
Mismatching
Creating Node
All the Same
Creating Node
match analysis
match analysis
Match: 0
4 x 8
Final Match: 0
Mismatching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx7.1, align 16, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.2, align 4, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.4, align 8, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.5, align 8, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx7.6, align 4, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s4117
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = zext i8 %24 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %25
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %div = lshr exact i64 %indvars.iv, 1
  %div.1 = lshr exact i64 %indvars.iv, 1
  %div.2 = lshr exact i64 %indvars.iv.next.1, 1
  %div.3 = lshr i64 %indvars.iv.next.2, 1
  %div.4 = lshr exact i64 %indvars.iv.next.3, 1
  %div.5 = lshr i64 %indvars.iv.next.4, 1
  %div.6 = lshr exact i64 %indvars.iv.next.5, 1
  %div.7 = lshr i64 %indvars.iv.next.6, 1
Generating BINOP
Generating IDENTICAL
Generating Mismatch
Mismatched Values:
int: i64 0
int: i64 0
int: i64 2
int: i64 3
int: i64 4
int: i64 5
int: i64 6
int: i64 7
All constants
Created array: @5 = private constant [8 x i64] [i64 0, i64 0, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7]
Gen:   %30 = load i64, i64* %29, align 8
Closing BINOP
Gen:   %31 = or i64 %indvars.iv, %30
Generating IDENTICAL
Operands done!
Generated:   %32 = lshr exact i64 %31, 1
Gen:   %32 = lshr exact i64 %31, 1
Generating MATCH
Match: 
  %idxprom6 = and i64 %div, 2147483644
  %idxprom6.1 = and i64 %div.1, 2147483644
  %idxprom6.2 = and i64 %div.2, 2147483645
  %idxprom6.3 = and i64 %div.3, 2147483645
  %idxprom6.4 = and i64 %div.4, 2147483646
  %idxprom6.5 = and i64 %div.5, 2147483646
  %idxprom6.6 = and i64 %div.6, 2147483647
  %idxprom6.7 = and i64 %div.7, 2147483647
Generating Mismatch
Mismatched Values:
int: i64 2147483644
int: i64 2147483644
int: i64 2147483645
int: i64 2147483645
int: i64 2147483646
int: i64 2147483646
int: i64 2147483647
int: i64 2147483647
All constants
Found Array: @5 = private constant [8 x i64] [i64 0, i64 0, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7]
Gen:   %30 = load i64, i64* %29, align 8
Operands done!
Generated:   %33 = and i64 %32, %30
Gen:   %33 = and i64 %32, %30
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.1
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.2
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.3
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.5
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.6
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.7
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %33
Gen:   %34 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %33
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 16, !tbaa !4
  %4 = load float, float* %arrayidx7.1, align 16, !tbaa !4
  %7 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.4, align 8, !tbaa !4
  %16 = load float, float* %arrayidx7.5, align 8, !tbaa !4
  %19 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %35 = load float, float* %34, align 1
Gen:   %35 = load float, float* %34, align 1
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %36 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %26
Gen:   %36 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %26
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   %37 = load float, float* %36, align 1
Gen:   %37 = load float, float* %36, align 1
Generating MATCH
Match: 
  %mul = fmul float %1, %2
  %mul.1 = fmul float %4, %5
  %mul.2 = fmul float %7, %8
  %mul.3 = fmul float %10, %11
  %mul.4 = fmul float %13, %14
  %mul.5 = fmul float %16, %17
  %mul.6 = fmul float %19, %20
  %mul.7 = fmul float %22, %23
Operands done!
Generated:   %38 = fmul float %35, %37
Gen:   %38 = fmul float %35, %37
Generating MATCH
Match: 
  %add = fadd float %0, %mul
  %add.1 = fadd float %3, %mul.1
  %add.2 = fadd float %6, %mul.2
  %add.3 = fadd float %9, %mul.3
  %add.4 = fadd float %12, %mul.4
  %add.5 = fadd float %15, %mul.5
  %add.6 = fadd float %18, %mul.6
  %add.7 = fadd float %21, %mul.7
Operands done!
Generated:   %39 = fadd float %28, %38
Gen:   %39 = fadd float %28, %38
Generating MATCH
Match: 
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Gen:   %40 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Generating MATCH
Match: 
  store float %add, float* %arrayidx11, align 32, !tbaa !4
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
Operands done!
Generated:   store float %39, float* %40, align 1
Gen:   store float %39, float* %40, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx11, align 32, !tbaa !4
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="and", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="lshr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
16 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
17 [label="1", style="filled" , fillcolor="#8ae18a", shape=box];
18 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
19 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
20 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
21 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
22 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
23 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
22->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
19->9 
11->10 
12->11 
5->11 
13->11 
14->13 
18->13 
15->14 
17->14 
7->15 
16->15 
20->19 
21->20 
5->20 
6->20 
23->22 
5->22 
6->22 
}

Gains: 213 - 31 = 182; Width: 8; Profitable; s4117
Done!
NodeTypeFreq;
MISMATCH: 2
MATCH: 12
IDENTICAL: 7
CONSTEXPR: 0
BINOP: 2
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: f
BlockSize: 2
Done Loop Roller: 0/0
Nothing found in: f
Optimizing: s4121
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.026 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 83
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx10.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx10.2, align 8, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx10.3, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx10.4, align 16, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx10.5, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx10.6, align 8, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx10.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx10.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx10.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx10.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx10.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx10.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx10.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx10.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: s4121
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = zext i8 %24 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %25
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Gen:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %mul.i = fmul float %0, %1
  %mul.i.1 = fmul float %3, %4
  %mul.i.2 = fmul float %6, %7
  %mul.i.3 = fmul float %9, %10
  %mul.i.4 = fmul float %12, %13
  %mul.i.5 = fmul float %15, %16
  %mul.i.6 = fmul float %18, %19
  %mul.i.7 = fmul float %21, %22
Operands done!
Generated:   %31 = fmul float %28, %30
Gen:   %31 = fmul float %28, %30
Generating MATCH
Match: 
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Gen:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx10, align 32, !tbaa !4
  %5 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %11 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %14 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %17 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %20 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %23 = load float, float* %arrayidx10.7, align 4, !tbaa !4
Operands done!
Generated:   %33 = load float, float* %32, align 1
Gen:   %33 = load float, float* %32, align 1
Generating MATCH
Match: 
  %add = fadd float %2, %mul.i
  %add.1 = fadd float %5, %mul.i.1
  %add.2 = fadd float %8, %mul.i.2
  %add.3 = fadd float %11, %mul.i.3
  %add.4 = fadd float %14, %mul.i.4
  %add.5 = fadd float %17, %mul.i.5
  %add.6 = fadd float %20, %mul.i.6
  %add.7 = fadd float %23, %mul.i.7
Operands done!
Generated:   %34 = fadd float %33, %31
Gen:   %34 = fadd float %33, %31
Generating MATCH
Match: 
  store float %add, float* %arrayidx10, align 32, !tbaa !4
  store float %add.1, float* %arrayidx10.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx10.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx10.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx10.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx10.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx10.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx10.7, align 4, !tbaa !4
Operands done!
Generated:   store float %34, float* %32, align 1
Gen:   store float %34, float* %32, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx10, align 32, !tbaa !4
  store float %add.1, float* %arrayidx10.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx10.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx10.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx10.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx10.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx10.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx10.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
13->9 
11->10 
12->11 
5->11 
6->11 
14->13 
15->14 
5->14 
6->14 
}

Gains: 149 - 20 = 129; Width: 8; Profitable; s4121
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 9
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: va
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 6
  %nl.022 = phi i32 [ 0, %entry ], [ %inc10, %for.cond2.preheader ]
  %inc10 = add nuw nsw i32 %nl.022, 1
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: va
Optimizing: vag
BlockSize: 7
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.026 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 67
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %4 = load i32, i32* %arrayidx.1, align 4, !tbaa !11
Hit: load
  %6 = load i32, i32* %arrayidx.2, align 4, !tbaa !11
Hit: load
  %8 = load i32, i32* %arrayidx.3, align 4, !tbaa !11
Hit: load
  %10 = load i32, i32* %arrayidx.4, align 4, !tbaa !11
Hit: load
  %12 = load i32, i32* %arrayidx.5, align 4, !tbaa !11
Hit: load
  %14 = load i32, i32* %arrayidx.6, align 4, !tbaa !11
Hit: load
  %16 = load i32, i32* %arrayidx.7, align 4, !tbaa !11
Hit: load
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !13
Hit: load
  %7 = load float, float* %arrayidx7.2, align 4, !tbaa !13
Hit: load
  %9 = load float, float* %arrayidx7.3, align 4, !tbaa !13
Hit: load
  %11 = load float, float* %arrayidx7.4, align 4, !tbaa !13
Hit: load
  %13 = load float, float* %arrayidx7.5, align 4, !tbaa !13
Hit: load
  %15 = load float, float* %arrayidx7.6, align 4, !tbaa !13
Hit: load
  %17 = load float, float* %arrayidx7.7, align 4, !tbaa !13
Hit: store
  store float %5, float* %arrayidx9.1, align 4, !tbaa !13
Hit: store
  store float %7, float* %arrayidx9.2, align 8, !tbaa !13
Hit: store
  store float %9, float* %arrayidx9.3, align 4, !tbaa !13
Hit: store
  store float %11, float* %arrayidx9.4, align 16, !tbaa !13
Hit: store
  store float %13, float* %arrayidx9.5, align 4, !tbaa !13
Hit: store
  store float %15, float* %arrayidx9.6, align 8, !tbaa !13
Hit: store
  store float %17, float* %arrayidx9.7, align 4, !tbaa !13
Schedulable: 1
Loop Rolling: vag
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %19 = zext i8 %18 to i64
Closing BINOP
Gen:   %20 = or i64 %indvars.iv, %19
Operands done!
Generated:   %21 = getelementptr inbounds i32, i32* %1, i64 %20
Gen:   %21 = getelementptr inbounds i32, i32* %1, i64 %20
Generating MATCH
Match: 
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !11
  %4 = load i32, i32* %arrayidx.1, align 4, !tbaa !11
  %6 = load i32, i32* %arrayidx.2, align 4, !tbaa !11
  %8 = load i32, i32* %arrayidx.3, align 4, !tbaa !11
  %10 = load i32, i32* %arrayidx.4, align 4, !tbaa !11
  %12 = load i32, i32* %arrayidx.5, align 4, !tbaa !11
  %14 = load i32, i32* %arrayidx.6, align 4, !tbaa !11
  %16 = load i32, i32* %arrayidx.7, align 4, !tbaa !11
Operands done!
Generated:   %22 = load i32, i32* %21, align 1
Gen:   %22 = load i32, i32* %21, align 1
Generating MATCH
Match: 
  %idxprom6 = sext i32 %2 to i64
  %idxprom6.1 = sext i32 %4 to i64
  %idxprom6.2 = sext i32 %6 to i64
  %idxprom6.3 = sext i32 %8 to i64
  %idxprom6.4 = sext i32 %10 to i64
  %idxprom6.5 = sext i32 %12 to i64
  %idxprom6.6 = sext i32 %14 to i64
  %idxprom6.7 = sext i32 %16 to i64
Operands done!
Generated:   %23 = sext i32 %22 to i64
Gen:   %23 = sext i32 %22 to i64
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.1
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.2
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.3
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.5
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.6
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.7
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %24 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %23
Gen:   %24 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %23
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx7, align 4, !tbaa !13
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !13
  %7 = load float, float* %arrayidx7.2, align 4, !tbaa !13
  %9 = load float, float* %arrayidx7.3, align 4, !tbaa !13
  %11 = load float, float* %arrayidx7.4, align 4, !tbaa !13
  %13 = load float, float* %arrayidx7.5, align 4, !tbaa !13
  %15 = load float, float* %arrayidx7.6, align 4, !tbaa !13
  %17 = load float, float* %arrayidx7.7, align 4, !tbaa !13
Operands done!
Generated:   %25 = load float, float* %24, align 1
Gen:   %25 = load float, float* %24, align 1
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %26 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
Gen:   %26 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
Generating MATCH
Match: 
  store float %3, float* %arrayidx9, align 32, !tbaa !13
  store float %5, float* %arrayidx9.1, align 4, !tbaa !13
  store float %7, float* %arrayidx9.2, align 8, !tbaa !13
  store float %9, float* %arrayidx9.3, align 4, !tbaa !13
  store float %11, float* %arrayidx9.4, align 16, !tbaa !13
  store float %13, float* %arrayidx9.5, align 4, !tbaa !13
  store float %15, float* %arrayidx9.6, align 8, !tbaa !13
  store float %17, float* %arrayidx9.7, align 4, !tbaa !13
Operands done!
Generated:   store float %25, float* %26, align 1
Gen:   store float %25, float* %26, align 1
Graph code generated!
Root:
  store float %3, float* %arrayidx9, align 32, !tbaa !13
  store float %5, float* %arrayidx9.1, align 4, !tbaa !13
  store float %7, float* %arrayidx9.2, align 8, !tbaa !13
  store float %9, float* %arrayidx9.3, align 4, !tbaa !13
  store float %11, float* %arrayidx9.4, align 16, !tbaa !13
  store float %13, float* %arrayidx9.5, align 4, !tbaa !13
  store float %15, float* %arrayidx9.6, align 8, !tbaa !13
  store float %17, float* %arrayidx9.7, align 4, !tbaa !13
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
12->0 
2->1 
3->2 
4->2 
5->2 
6->5 
7->6 
8->7 
9->7 
10->9 
11->9 
13->12 
4->12 
9->12 
}

Gains: 117 - 16 = 101; Width: 8; Profitable; vag
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 7
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: vas
BlockSize: 7
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.026 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 67
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !11
Hit: load
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !11
Hit: load
  %8 = load float, float* %arrayidx.3, align 4, !tbaa !11
Hit: load
  %10 = load float, float* %arrayidx.4, align 16, !tbaa !11
Hit: load
  %12 = load float, float* %arrayidx.5, align 4, !tbaa !11
Hit: load
  %14 = load float, float* %arrayidx.6, align 8, !tbaa !11
Hit: load
  %16 = load float, float* %arrayidx.7, align 4, !tbaa !11
Hit: load
  %5 = load i32, i32* %arrayidx7.1, align 4, !tbaa !13
Hit: load
  %7 = load i32, i32* %arrayidx7.2, align 4, !tbaa !13
Hit: load
  %9 = load i32, i32* %arrayidx7.3, align 4, !tbaa !13
Hit: load
  %11 = load i32, i32* %arrayidx7.4, align 4, !tbaa !13
Hit: load
  %13 = load i32, i32* %arrayidx7.5, align 4, !tbaa !13
Hit: load
  %15 = load i32, i32* %arrayidx7.6, align 4, !tbaa !13
Hit: load
  %17 = load i32, i32* %arrayidx7.7, align 4, !tbaa !13
Hit: store
  store float %4, float* %arrayidx9.1, align 4, !tbaa !11
Hit: store
  store float %6, float* %arrayidx9.2, align 4, !tbaa !11
Hit: store
  store float %8, float* %arrayidx9.3, align 4, !tbaa !11
Hit: store
  store float %10, float* %arrayidx9.4, align 4, !tbaa !11
Hit: store
  store float %12, float* %arrayidx9.5, align 4, !tbaa !11
Hit: store
  store float %14, float* %arrayidx9.6, align 4, !tbaa !11
Hit: store
  store float %16, float* %arrayidx9.7, align 4, !tbaa !11
Schedulable: 1
Loop Rolling: vas
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %19 = zext i8 %18 to i64
Closing BINOP
Gen:   %20 = or i64 %indvars.iv, %19
Operands done!
Generated:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %20
Gen:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %20
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx, align 32, !tbaa !11
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !11
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !11
  %8 = load float, float* %arrayidx.3, align 4, !tbaa !11
  %10 = load float, float* %arrayidx.4, align 16, !tbaa !11
  %12 = load float, float* %arrayidx.5, align 4, !tbaa !11
  %14 = load float, float* %arrayidx.6, align 8, !tbaa !11
  %16 = load float, float* %arrayidx.7, align 4, !tbaa !11
Operands done!
Generated:   %22 = load float, float* %21, align 1
Gen:   %22 = load float, float* %21, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next.6
Generating IDENTICAL
Operands done!
Generated:   %23 = getelementptr inbounds i32, i32* %1, i64 %20
Gen:   %23 = getelementptr inbounds i32, i32* %1, i64 %20
Generating MATCH
Match: 
  %3 = load i32, i32* %arrayidx7, align 4, !tbaa !13
  %5 = load i32, i32* %arrayidx7.1, align 4, !tbaa !13
  %7 = load i32, i32* %arrayidx7.2, align 4, !tbaa !13
  %9 = load i32, i32* %arrayidx7.3, align 4, !tbaa !13
  %11 = load i32, i32* %arrayidx7.4, align 4, !tbaa !13
  %13 = load i32, i32* %arrayidx7.5, align 4, !tbaa !13
  %15 = load i32, i32* %arrayidx7.6, align 4, !tbaa !13
  %17 = load i32, i32* %arrayidx7.7, align 4, !tbaa !13
Operands done!
Generated:   %24 = load i32, i32* %23, align 1
Gen:   %24 = load i32, i32* %23, align 1
Generating MATCH
Match: 
  %idxprom8 = sext i32 %3 to i64
  %idxprom8.1 = sext i32 %5 to i64
  %idxprom8.2 = sext i32 %7 to i64
  %idxprom8.3 = sext i32 %9 to i64
  %idxprom8.4 = sext i32 %11 to i64
  %idxprom8.5 = sext i32 %13 to i64
  %idxprom8.6 = sext i32 %15 to i64
  %idxprom8.7 = sext i32 %17 to i64
Operands done!
Generated:   %25 = sext i32 %24 to i64
Gen:   %25 = sext i32 %24 to i64
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom8
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom8.1
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom8.2
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom8.3
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom8.4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom8.5
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom8.6
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom8.7
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %26 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %25
Gen:   %26 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %25
Generating MATCH
Match: 
  store float %2, float* %arrayidx9, align 4, !tbaa !11
  store float %4, float* %arrayidx9.1, align 4, !tbaa !11
  store float %6, float* %arrayidx9.2, align 4, !tbaa !11
  store float %8, float* %arrayidx9.3, align 4, !tbaa !11
  store float %10, float* %arrayidx9.4, align 4, !tbaa !11
  store float %12, float* %arrayidx9.5, align 4, !tbaa !11
  store float %14, float* %arrayidx9.6, align 4, !tbaa !11
  store float %16, float* %arrayidx9.7, align 4, !tbaa !11
Operands done!
Generated:   store float %22, float* %26, align 1
Gen:   store float %22, float* %26, align 1
Graph code generated!
Root:
  store float %2, float* %arrayidx9, align 4, !tbaa !11
  store float %4, float* %arrayidx9.1, align 4, !tbaa !11
  store float %6, float* %arrayidx9.2, align 4, !tbaa !11
  store float %8, float* %arrayidx9.3, align 4, !tbaa !11
  store float %10, float* %arrayidx9.4, align 4, !tbaa !11
  store float %12, float* %arrayidx9.5, align 4, !tbaa !11
  store float %14, float* %arrayidx9.6, align 4, !tbaa !11
  store float %16, float* %arrayidx9.7, align 4, !tbaa !11
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="sext", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
8->0 
2->1 
3->2 
4->2 
5->2 
6->5 
7->5 
9->8 
4->8 
10->8 
11->10 
12->11 
13->12 
5->12 
}

Gains: 117 - 16 = 101; Width: 8; Profitable; vas
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 7
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: vif
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.026 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 5
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
BlockSize: 3
Attempting Group:
BlockSize: 5
BlockSize: 3
Attempting Group:
BlockSize: 5
BlockSize: 3
Attempting Group:
BlockSize: 5
BlockSize: 3
Attempting Group:
BlockSize: 5
BlockSize: 3
Attempting Group:
BlockSize: 5
BlockSize: 3
Attempting Group:
BlockSize: 5
BlockSize: 3
Attempting Group:
BlockSize: 5
BlockSize: 3
Attempting Group:
BlockSize: 3
Done Loop Roller: 0/0
Nothing found in: vif
Optimizing: vpv
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.022 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 59
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: vpv
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %17 = zext i8 %16 to i64
Closing BINOP
Gen:   %18 = or i64 %indvars.iv, %17
Operands done!
Generated:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
Gen:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %20 = load float, float* %19, align 1
Gen:   %20 = load float, float* %19, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Gen:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %22 = load float, float* %21, align 1
Gen:   %22 = load float, float* %21, align 1
Generating MATCH
Match: 
  %add = fadd float %0, %1
  %add.1 = fadd float %2, %3
  %add.2 = fadd float %4, %5
  %add.3 = fadd float %6, %7
  %add.4 = fadd float %8, %9
  %add.5 = fadd float %10, %11
  %add.6 = fadd float %12, %13
  %add.7 = fadd float %14, %15
Operands done!
Generated:   %23 = fadd float %20, %22
Gen:   %23 = fadd float %20, %22
Generating MATCH
Match: 
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   store float %23, float* %21, align 1
Gen:   store float %23, float* %21, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
}

Gains: 109 - 15 = 94; Width: 8; Profitable; vpv
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 6
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: vtv
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.022 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 59
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: store
  store float %mul.1, float* %arrayidx7.1, align 4, !tbaa !4
Hit: store
  store float %mul.2, float* %arrayidx7.2, align 8, !tbaa !4
Hit: store
  store float %mul.3, float* %arrayidx7.3, align 4, !tbaa !4
Hit: store
  store float %mul.4, float* %arrayidx7.4, align 16, !tbaa !4
Hit: store
  store float %mul.5, float* %arrayidx7.5, align 4, !tbaa !4
Hit: store
  store float %mul.6, float* %arrayidx7.6, align 8, !tbaa !4
Hit: store
  store float %mul.7, float* %arrayidx7.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: vtv
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %17 = zext i8 %16 to i64
Closing BINOP
Gen:   %18 = or i64 %indvars.iv, %17
Operands done!
Generated:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
Gen:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %20 = load float, float* %19, align 1
Gen:   %20 = load float, float* %19, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Gen:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %22 = load float, float* %21, align 1
Gen:   %22 = load float, float* %21, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul.1 = fmul float %2, %3
  %mul.2 = fmul float %4, %5
  %mul.3 = fmul float %6, %7
  %mul.4 = fmul float %8, %9
  %mul.5 = fmul float %10, %11
  %mul.6 = fmul float %12, %13
  %mul.7 = fmul float %14, %15
Operands done!
Generated:   %23 = fmul float %20, %22
Gen:   %23 = fmul float %20, %22
Generating MATCH
Match: 
  store float %mul, float* %arrayidx7, align 32, !tbaa !4
  store float %mul.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %mul.2, float* %arrayidx7.2, align 8, !tbaa !4
  store float %mul.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %mul.4, float* %arrayidx7.4, align 16, !tbaa !4
  store float %mul.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %mul.6, float* %arrayidx7.6, align 8, !tbaa !4
  store float %mul.7, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   store float %23, float* %21, align 1
Gen:   store float %23, float* %21, align 1
Graph code generated!
Root:
  store float %mul, float* %arrayidx7, align 32, !tbaa !4
  store float %mul.1, float* %arrayidx7.1, align 4, !tbaa !4
  store float %mul.2, float* %arrayidx7.2, align 8, !tbaa !4
  store float %mul.3, float* %arrayidx7.3, align 4, !tbaa !4
  store float %mul.4, float* %arrayidx7.4, align 16, !tbaa !4
  store float %mul.5, float* %arrayidx7.5, align 4, !tbaa !4
  store float %mul.6, float* %arrayidx7.6, align 8, !tbaa !4
  store float %mul.7, float* %arrayidx7.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
10->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
}

Gains: 109 - 15 = 94; Width: 8; Profitable; vtv
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 6
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: vpvtv
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.025 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 83
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Hit: store
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
Hit: store
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !4
Hit: store
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
Hit: store
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !4
Hit: store
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
Hit: store
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !4
Hit: store
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: vpvtv
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = zext i8 %24 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %25
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Gen:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul.1 = fmul float %3, %4
  %mul.2 = fmul float %6, %7
  %mul.3 = fmul float %9, %10
  %mul.4 = fmul float %12, %13
  %mul.5 = fmul float %15, %16
  %mul.6 = fmul float %18, %19
  %mul.7 = fmul float %21, %22
Operands done!
Generated:   %31 = fmul float %28, %30
Gen:   %31 = fmul float %28, %30
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Gen:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   %33 = load float, float* %32, align 1
Gen:   %33 = load float, float* %32, align 1
Generating MATCH
Match: 
  %add = fadd float %2, %mul
  %add.1 = fadd float %5, %mul.1
  %add.2 = fadd float %8, %mul.2
  %add.3 = fadd float %11, %mul.3
  %add.4 = fadd float %14, %mul.4
  %add.5 = fadd float %17, %mul.5
  %add.6 = fadd float %20, %mul.6
  %add.7 = fadd float %23, %mul.7
Operands done!
Generated:   %34 = fadd float %33, %31
Gen:   %34 = fadd float %33, %31
Generating MATCH
Match: 
  store float %add, float* %arrayidx9, align 32, !tbaa !4
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   store float %34, float* %32, align 1
Gen:   store float %34, float* %32, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx9, align 32, !tbaa !4
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !4
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !4
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
13->9 
11->10 
12->11 
5->11 
6->11 
14->13 
15->14 
5->14 
6->14 
}

Gains: 149 - 20 = 129; Width: 8; Profitable; vpvtv
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 9
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: vpvts
BlockSize: 9
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.026 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup6 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 67
  %indvars.iv = phi i64 [ 0, %for.cond3.preheader ], [ %indvars.iv.next.7, %for.body7 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !13
Hit: load
  %7 = load float, float* %arrayidx.2, align 8, !tbaa !13
Hit: load
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !13
Hit: load
  %11 = load float, float* %arrayidx.4, align 16, !tbaa !13
Hit: load
  %13 = load float, float* %arrayidx.5, align 4, !tbaa !13
Hit: load
  %15 = load float, float* %arrayidx.6, align 8, !tbaa !13
Hit: load
  %17 = load float, float* %arrayidx.7, align 4, !tbaa !13
Hit: load
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !13
Hit: load
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !13
Hit: load
  %10 = load float, float* %arrayidx9.3, align 4, !tbaa !13
Hit: load
  %12 = load float, float* %arrayidx9.4, align 16, !tbaa !13
Hit: load
  %14 = load float, float* %arrayidx9.5, align 4, !tbaa !13
Hit: load
  %16 = load float, float* %arrayidx9.6, align 8, !tbaa !13
Hit: load
  %18 = load float, float* %arrayidx9.7, align 4, !tbaa !13
Hit: store
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !13
Hit: store
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !13
Hit: store
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !13
Hit: store
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !13
Hit: store
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !13
Hit: store
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !13
Hit: store
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !13
Schedulable: 1
Loop Rolling: vpvts
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %20 = zext i8 %19 to i64
Closing BINOP
Gen:   %21 = or i64 %indvars.iv, %20
Operands done!
Generated:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %21
Gen:   %22 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %21
Generating MATCH
Match: 
  %3 = load float, float* %arrayidx, align 32, !tbaa !13
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !13
  %7 = load float, float* %arrayidx.2, align 8, !tbaa !13
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !13
  %11 = load float, float* %arrayidx.4, align 16, !tbaa !13
  %13 = load float, float* %arrayidx.5, align 4, !tbaa !13
  %15 = load float, float* %arrayidx.6, align 8, !tbaa !13
  %17 = load float, float* %arrayidx.7, align 4, !tbaa !13
Operands done!
Generated:   %23 = load float, float* %22, align 1
Gen:   %23 = load float, float* %22, align 1
Generating MATCH
Match: 
  %mul = fmul float %3, %conv
  %mul.1 = fmul float %5, %conv
  %mul.2 = fmul float %7, %conv
  %mul.3 = fmul float %9, %conv
  %mul.4 = fmul float %11, %conv
  %mul.5 = fmul float %13, %conv
  %mul.6 = fmul float %15, %conv
  %mul.7 = fmul float %17, %conv
Generating IDENTICAL
Operands done!
Generated:   %24 = fmul float %23, %conv
Gen:   %24 = fmul float %23, %conv
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %25 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %21
Gen:   %25 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %21
Generating MATCH
Match: 
  %4 = load float, float* %arrayidx9, align 32, !tbaa !13
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !13
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !13
  %10 = load float, float* %arrayidx9.3, align 4, !tbaa !13
  %12 = load float, float* %arrayidx9.4, align 16, !tbaa !13
  %14 = load float, float* %arrayidx9.5, align 4, !tbaa !13
  %16 = load float, float* %arrayidx9.6, align 8, !tbaa !13
  %18 = load float, float* %arrayidx9.7, align 4, !tbaa !13
Operands done!
Generated:   %26 = load float, float* %25, align 1
Gen:   %26 = load float, float* %25, align 1
Generating MATCH
Match: 
  %add = fadd float %4, %mul
  %add.1 = fadd float %6, %mul.1
  %add.2 = fadd float %8, %mul.2
  %add.3 = fadd float %10, %mul.3
  %add.4 = fadd float %12, %mul.4
  %add.5 = fadd float %14, %mul.5
  %add.6 = fadd float %16, %mul.6
  %add.7 = fadd float %18, %mul.7
Operands done!
Generated:   %27 = fadd float %26, %24
Gen:   %27 = fadd float %26, %24
Generating MATCH
Match: 
  store float %add, float* %arrayidx9, align 32, !tbaa !13
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !13
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !13
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !13
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !13
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !13
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !13
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !13
Operands done!
Generated:   store float %27, float* %25, align 1
Gen:   store float %27, float* %25, align 1
Graph code generated!
Root:
  store float %add, float* %arrayidx9, align 32, !tbaa !13
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !13
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !13
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !13
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !13
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !13
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !13
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !13
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="sitofp", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
13->9 
11->10 
12->11 
5->11 
6->11 
}

Gains: 117 - 16 = 101; Width: 8; Profitable; vpvts
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 7
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: vpvpv
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.026 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 83
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Hit: store
  store float %add10.1, float* %arrayidx9.1, align 4, !tbaa !4
Hit: store
  store float %add10.2, float* %arrayidx9.2, align 8, !tbaa !4
Hit: store
  store float %add10.3, float* %arrayidx9.3, align 4, !tbaa !4
Hit: store
  store float %add10.4, float* %arrayidx9.4, align 16, !tbaa !4
Hit: store
  store float %add10.5, float* %arrayidx9.5, align 4, !tbaa !4
Hit: store
  store float %add10.6, float* %arrayidx9.6, align 8, !tbaa !4
Hit: store
  store float %add10.7, float* %arrayidx9.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: vpvpv
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = zext i8 %24 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %25
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Gen:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %add = fadd float %0, %1
  %add.1 = fadd float %3, %4
  %add.2 = fadd float %6, %7
  %add.3 = fadd float %9, %10
  %add.4 = fadd float %12, %13
  %add.5 = fadd float %15, %16
  %add.6 = fadd float %18, %19
  %add.7 = fadd float %21, %22
Operands done!
Generated:   %31 = fadd float %28, %30
Gen:   %31 = fadd float %28, %30
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Gen:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   %33 = load float, float* %32, align 1
Gen:   %33 = load float, float* %32, align 1
Generating MATCH
Match: 
  %add10 = fadd float %2, %add
  %add10.1 = fadd float %5, %add.1
  %add10.2 = fadd float %8, %add.2
  %add10.3 = fadd float %11, %add.3
  %add10.4 = fadd float %14, %add.4
  %add10.5 = fadd float %17, %add.5
  %add10.6 = fadd float %20, %add.6
  %add10.7 = fadd float %23, %add.7
Operands done!
Generated:   %34 = fadd float %33, %31
Gen:   %34 = fadd float %33, %31
Generating MATCH
Match: 
  store float %add10, float* %arrayidx9, align 32, !tbaa !4
  store float %add10.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %add10.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %add10.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %add10.4, float* %arrayidx9.4, align 16, !tbaa !4
  store float %add10.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %add10.6, float* %arrayidx9.6, align 8, !tbaa !4
  store float %add10.7, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   store float %34, float* %32, align 1
Gen:   store float %34, float* %32, align 1
Graph code generated!
Root:
  store float %add10, float* %arrayidx9, align 32, !tbaa !4
  store float %add10.1, float* %arrayidx9.1, align 4, !tbaa !4
  store float %add10.2, float* %arrayidx9.2, align 8, !tbaa !4
  store float %add10.3, float* %arrayidx9.3, align 4, !tbaa !4
  store float %add10.4, float* %arrayidx9.4, align 16, !tbaa !4
  store float %add10.5, float* %arrayidx9.5, align 4, !tbaa !4
  store float %add10.6, float* %arrayidx9.6, align 8, !tbaa !4
  store float %add10.7, float* %arrayidx9.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="fadd", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
13->9 
11->10 
12->11 
5->11 
6->11 
14->13 
15->14 
5->14 
6->14 
}

Gains: 149 - 20 = 129; Width: 8; Profitable; vpvpv
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 9
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: vtvtv
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.029 = phi i32 [ 0, %entry ], [ %inc15, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 83
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
Hit: load
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
Hit: load
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
Hit: load
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Hit: store
  store float %mul10.1, float* %arrayidx.1, align 4, !tbaa !4
Hit: store
  store float %mul10.2, float* %arrayidx.2, align 8, !tbaa !4
Hit: store
  store float %mul10.3, float* %arrayidx.3, align 4, !tbaa !4
Hit: store
  store float %mul10.4, float* %arrayidx.4, align 16, !tbaa !4
Hit: store
  store float %mul10.5, float* %arrayidx.5, align 4, !tbaa !4
Hit: store
  store float %mul10.6, float* %arrayidx.6, align 8, !tbaa !4
Hit: store
  store float %mul10.7, float* %arrayidx.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: vtvtv
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %25 = zext i8 %24 to i64
Closing BINOP
Gen:   %26 = or i64 %indvars.iv, %25
Operands done!
Generated:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Gen:   %27 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %28 = load float, float* %27, align 1
Gen:   %28 = load float, float* %27, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Gen:   %29 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %30 = load float, float* %29, align 1
Gen:   %30 = load float, float* %29, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul.1 = fmul float %3, %4
  %mul.2 = fmul float %6, %7
  %mul.3 = fmul float %9, %10
  %mul.4 = fmul float %12, %13
  %mul.5 = fmul float %15, %16
  %mul.6 = fmul float %18, %19
  %mul.7 = fmul float %21, %22
Operands done!
Generated:   %31 = fmul float %28, %30
Gen:   %31 = fmul float %28, %30
Generating MATCH
Match: 
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Gen:   %32 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %26
Generating MATCH
Match: 
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
Operands done!
Generated:   %33 = load float, float* %32, align 1
Gen:   %33 = load float, float* %32, align 1
Generating MATCH
Match: 
  %mul10 = fmul float %mul, %2
  %mul10.1 = fmul float %mul.1, %5
  %mul10.2 = fmul float %mul.2, %8
  %mul10.3 = fmul float %mul.3, %11
  %mul10.4 = fmul float %mul.4, %14
  %mul10.5 = fmul float %mul.5, %17
  %mul10.6 = fmul float %mul.6, %20
  %mul10.7 = fmul float %mul.7, %23
Operands done!
Generated:   %34 = fmul float %31, %33
Gen:   %34 = fmul float %31, %33
Generating MATCH
Match: 
  store float %mul10, float* %arrayidx, align 32, !tbaa !4
  store float %mul10.1, float* %arrayidx.1, align 4, !tbaa !4
  store float %mul10.2, float* %arrayidx.2, align 8, !tbaa !4
  store float %mul10.3, float* %arrayidx.3, align 4, !tbaa !4
  store float %mul10.4, float* %arrayidx.4, align 16, !tbaa !4
  store float %mul10.5, float* %arrayidx.5, align 4, !tbaa !4
  store float %mul10.6, float* %arrayidx.6, align 8, !tbaa !4
  store float %mul10.7, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   store float %34, float* %27, align 1
Gen:   store float %34, float* %27, align 1
Graph code generated!
Root:
  store float %mul10, float* %arrayidx, align 32, !tbaa !4
  store float %mul10.1, float* %arrayidx.1, align 4, !tbaa !4
  store float %mul10.2, float* %arrayidx.2, align 8, !tbaa !4
  store float %mul10.3, float* %arrayidx.3, align 4, !tbaa !4
  store float %mul10.4, float* %arrayidx.4, align 16, !tbaa !4
  store float %mul10.5, float* %arrayidx.5, align 4, !tbaa !4
  store float %mul10.6, float* %arrayidx.6, align 8, !tbaa !4
  store float %mul10.7, float* %arrayidx.7, align 4, !tbaa !4
Root size: 8
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
12 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
13 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
14 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
15 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
4->0 
2->1 
13->1 
3->2 
10->2 
4->3 
5->4 
6->4 
7->4 
8->7 
9->7 
11->10 
12->11 
6->11 
7->11 
14->13 
15->14 
6->14 
7->14 
}

Gains: 149 - 20 = 129; Width: 8; Profitable; vtvtv
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 9
IDENTICAL: 5
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 0
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: vsumr
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.022 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup4 ]
BlockSize: 3
Attempting Group:
Building reduction
  ret float %add.7
  %add.7 = fadd float %add.6, %7
BlockSize: 4
Attempting Group:
Building reduction
  %call6 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add.7) #11
  %add.7 = fadd float %add.6, %7
BlockSize: 36
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %sum.120 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %add.6, %7
Possible reduction
  %add.7 = fadd float %add.6, %7
Building reduction
  %sum.120 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %add.6, %7
BOs:
  %add.7 = fadd float %add.6, %7
  %add.6 = fadd float %add.5, %6
  %add.5 = fadd float %add.4, %5
  %add.4 = fadd float %add.3, %4
  %add.3 = fadd float %add.2, %3
  %add.2 = fadd float %add.1, %2
  %add.1 = fadd float %add, %1
  %add = fadd float %sum.120, %0
Operands:
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands:
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: load
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: vsumr
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %9 = zext i8 %8 to i64
Closing BINOP
Gen:   %10 = or i64 %indvars.iv, %9
Operands done!
Generated:   %11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
Gen:   %11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %12 = load float, float* %11, align 1
Gen:   %12 = load float, float* %11, align 1
Generating REDUCTION
Closing REDUCTION
Found use: 0:   ret float %add.7
Extracting:   %14 = fadd float %9, %13
Gen:   %14 = fadd float %9, %13
Graph code generated!
Root:
  %add.7 = fadd float %add.6, %7
  %add.6 = fadd float %add.5, %6
  %add.5 = fadd float %add.4, %5
  %add.4 = fadd float %add.3, %4
  %add.3 = fadd float %add.2, %3
  %add.2 = fadd float %add.1, %2
  %add.1 = fadd float %add, %1
  %add = fadd float %sum.120, %0
Root size: 8
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->1 
3->2 
4->2 
5->2 
6->5 
7->5 
8 [label="ret", style="filled" , fillcolor="#f2eb5c", shape=box];
0->8
}

Gains: 61 - 9 = 52; Width: 8; Reduction Profitable; vsumr
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 2
IDENTICAL: 3
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 1
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: vdotr
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.025 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
BlockSize: 3
Attempting Group:
Building reduction
  ret float %add.7
  %add.7 = fadd float %add.6, %mul.7
BlockSize: 4
Attempting Group:
Building reduction
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add.7) #11
  %add.7 = fadd float %add.6, %mul.7
BlockSize: 60
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %dot.123 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %add.6, %mul.7
Possible reduction
  %add.7 = fadd float %add.6, %mul.7
Building reduction
  %dot.123 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add.7 = fadd float %add.6, %mul.7
BOs:
  %add.7 = fadd float %add.6, %mul.7
  %add.6 = fadd float %add.5, %mul.6
  %add.5 = fadd float %add.4, %mul.5
  %add.4 = fadd float %add.3, %mul.4
  %add.3 = fadd float %add.2, %mul.3
  %add.2 = fadd float %add.1, %mul.2
  %add.1 = fadd float %add, %mul.1
  %add = fadd float %dot.123, %mul
Operands:
  %mul = fmul float %0, %1
  %mul.1 = fmul float %2, %3
  %mul.2 = fmul float %4, %5
  %mul.3 = fmul float %6, %7
  %mul.4 = fmul float %8, %9
  %mul.5 = fmul float %10, %11
  %mul.6 = fmul float %12, %13
  %mul.7 = fmul float %14, %15
Operands:
  %mul = fmul float %0, %1
  %mul.1 = fmul float %2, %3
  %mul.2 = fmul float %4, %5
  %mul.3 = fmul float %6, %7
  %mul.4 = fmul float %8, %9
  %mul.5 = fmul float %10, %11
  %mul.6 = fmul float %12, %13
  %mul.7 = fmul float %14, %15
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
8 x 8
Final Match: 0
BinOp Seq
Creating Node
All the Same
Creating Node
match analysis
Match: 0
8 x 8
Final Match: 0
Int Seq
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 1
8 x 8
Final Match: 1
Matching
Creating Node
All the Same
Computing order of nodes for each lane
Hit: load
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
Hit: load
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
Hit: load
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
Hit: load
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
Hit: load
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
Hit: load
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
Hit: load
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Hit: load
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
Hit: load
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
Hit: load
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
Hit: load
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
Hit: load
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
Hit: load
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
Hit: load
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Schedulable: 1
Loop Rolling: vdotr
Generating tree
Generating MATCH
Match: 
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Generating BINOP
Generating IDENTICAL
Generating INTSEQ
Gen:   %17 = zext i8 %16 to i64
Closing BINOP
Gen:   %18 = or i64 %indvars.iv, %17
Operands done!
Generated:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Gen:   %19 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
Generating MATCH
Match: 
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
Operands done!
Generated:   %20 = load float, float* %19, align 1
Gen:   %20 = load float, float* %19, align 1
Generating MATCH
Match: 
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
Generating IDENTICAL
Generating IDENTICAL
Operands done!
Generated:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
Gen:   %21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %18
Generating MATCH
Match: 
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
Operands done!
Generated:   %22 = load float, float* %21, align 1
Gen:   %22 = load float, float* %21, align 1
Generating MATCH
Match: 
  %mul = fmul float %0, %1
  %mul.1 = fmul float %2, %3
  %mul.2 = fmul float %4, %5
  %mul.3 = fmul float %6, %7
  %mul.4 = fmul float %8, %9
  %mul.5 = fmul float %10, %11
  %mul.6 = fmul float %12, %13
  %mul.7 = fmul float %14, %15
Operands done!
Generated:   %23 = fmul float %20, %22
Gen:   %23 = fmul float %20, %22
Generating REDUCTION
Closing REDUCTION
Found use: 0:   ret float %add.7
Extracting:   %25 = fadd float %17, %24
Gen:   %25 = fadd float %17, %24
Graph code generated!
Root:
  %add.7 = fadd float %add.6, %mul.7
  %add.6 = fadd float %add.5, %mul.6
  %add.5 = fadd float %add.4, %mul.5
  %add.4 = fadd float %add.3, %mul.4
  %add.3 = fadd float %add.2, %mul.3
  %add.2 = fadd float %add.1, %mul.2
  %add.1 = fadd float %add, %mul.1
  %add = fadd float %dot.123, %mul
Root size: 8
digraph VTree {
0 [label="fadd red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="fmul", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
5 [label="0", style="filled" , fillcolor="#8ae18a", shape=box];
6 [label="or seq.", style="filled" , fillcolor="#8ae18a", shape=box];
7 [label="phi", style="filled" , fillcolor="#8ae18a", shape=box];
8 [label="0..7, 1", style="filled" , fillcolor="#8ae18a", shape=box];
9 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
10 [label="getelementptr", style="filled" , fillcolor="#8ae18a", shape=box];
11 [label="const", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->1 
9->1 
3->2 
4->3 
5->3 
6->3 
7->6 
8->6 
10->9 
11->10 
5->10 
6->10 
12 [label="ret", style="filled" , fillcolor="#f2eb5c", shape=box];
0->12
}

Gains: 101 - 14 = 87; Width: 8; Reduction Profitable; vdotr
Done!
NodeTypeFreq;
MISMATCH: 0
MATCH: 5
IDENTICAL: 4
CONSTEXPR: 0
BINOP: 1
INTSEQ: 1
ALTSEQ: 0
GEPSEQ: 0
REDUCTION: 1
RECURRENCE: 0
MULTI: 0
Done Loop Roller: 1/1
Optimizing: vbor
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 2
  %nl.0158 = phi i32 [ 0, %entry ], [ %inc77, %for.cond.cleanup4 ]
BlockSize: 4
Attempting Group:
Attempting Group:
BlockSize: 4
Attempting Group:
BlockSize: 67
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body5 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
Attempting Group:
Building reduction
  store float %mul72, float* %arrayidx74, align 4, !tbaa !4
  %mul72 = fmul float %mul69, %mul71
BOs:
  %mul72 = fmul float %mul69, %mul71
  %mul69 = fmul float %mul68, %5
  %mul68 = fmul float %3, %4
  %mul71 = fmul float %add67, %mul70
  %mul70 = fmul float %add59, %add42
Operands:
  %3 = load float, float* %arrayidx11, align 4, !tbaa !4
  %4 = load float, float* %arrayidx13, align 4, !tbaa !4
  %5 = load float, float* %arrayidx15, align 4, !tbaa !4
  %add67 = fadd float %mul66, %add64
  %add59 = fadd float %mul58, %add56
  %add42 = fadd float %mul41, %add39
Operands:
  %3 = load float, float* %arrayidx11, align 4, !tbaa !4
  %4 = load float, float* %arrayidx13, align 4, !tbaa !4
  %5 = load float, float* %arrayidx15, align 4, !tbaa !4
  %add42 = fadd float %mul41, %add39
  %add59 = fadd float %mul58, %add56
  %add67 = fadd float %mul66, %add64
ReductionNode
Creating Node
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
match analysis
comparing two instructions for matching
Match: 0
6 x 6
Final Match: 0
Mismatching
Computing order of nodes for each lane
Schedulable: 1
Loop Rolling: vbor
Generating tree
Generating REDUCTION
Generating Mismatch
Mismatched Values:
inst:   %3 = load float, float* %arrayidx11, align 4, !tbaa !4
inst:   %4 = load float, float* %arrayidx13, align 4, !tbaa !4
inst:   %5 = load float, float* %arrayidx15, align 4, !tbaa !4
inst:   %add42 = fadd float %mul41, %add39
inst:   %add59 = fadd float %mul58, %add56
inst:   %add67 = fadd float %mul66, %add64
Non constants
Array Type: 6:float
Created array:   %6 = alloca float, i8 6, align 4
Gen:   %15 = load float, float* %14, align 4
Closing REDUCTION
Found use: 0:   store float %mul72, float* %arrayidx74, align 4, !tbaa !4
Extracting:   %17 = fmul float %14, %16
Gen:   %17 = fmul float %14, %16
Graph code generated!
Root:
  %mul72 = fmul float %mul69, %mul71
  %mul69 = fmul float %mul68, %5
  %mul68 = fmul float %3, %4
  %mul71 = fmul float %add67, %mul70
  %mul70 = fmul float %add59, %add42
Root size: 5
digraph VTree {
0 [label="fmul red.", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
1->0 
2 [label="store", style="filled" , fillcolor="#f2eb5c", shape=box];
0->2
}

Gains: 5 - 78 = -73; Width: 5; Reduction Unprofitable; vbor
Done Loop Roller: 0/1
Optimizing: time_function
BlockSize: 28
Attempting Group:
Attempting Group:
Done Loop Roller: 0/0
Nothing found in: time_function
Optimizing: main
BlockSize: 229
Attempting Group:
Attempting Group:
Attempting Group:
Attempting Group:
Attempting Group:
Attempting Group:
Attempting Group:
Attempting Group:
Attempting Group:
Attempting Group:
Attempting Group:
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 2
Final Match: 0
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 2
Final Match: 0
%struct.anon.8 = type { float, float }
Indices:
i32 0
i32 1
GEP Seq
GEP Seq
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: load
  %9 = load float, float* %s2, align 4, !tbaa !11
Hit: store
  store float %9, float* %b8, align 4, !tbaa !15
Schedulable: 1
Loop Rolling: main
Generating tree
Generating GEPSEQ
Generating INTSEQ
Gen:   %29 = zext i8 %28 to i32
Closing GEPSEQ
Gen:   %30 = getelementptr float, float* %27, i32 %29
Generating MATCH
Match: 
  %8 = load float, float* %s1, align 4, !tbaa !11
  %9 = load float, float* %s2, align 4, !tbaa !11
Generating ALTSEQ
Values:
  %s1 = alloca float, align 4
  %s2 = alloca float, align 4
Generated Version 4:
  %31 = icmp eq i8 %28, 0
  %32 = select i1 %31, float* %s1, float* %s2
Operands done!
Generated:   %33 = load float, float* %32, align 1
Gen:   %33 = load float, float* %32, align 1
Generating MATCH
Match: 
  store float %8, float* %a7, align 4, !tbaa !13
  store float %9, float* %b8, align 4, !tbaa !15
Operands done!
Generated:   store float %33, float* %30, align 1
Gen:   store float %33, float* %30, align 1
Graph code generated!
Root:
  store float %8, float* %a7, align 4, !tbaa !13
  store float %9, float* %b8, align 4, !tbaa !15
Root size: 2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="load", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="alt: %s1, %s2", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
4 [label="0..1, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
3->0 
2->1 
4->3 
}

Gains: 10 - 13 = -3; Width: 2; Unprofitable; main
Trying AGAIN
match analysis
comparing two instructions for matching
Trying AGAIN
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Alt Seq
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 2
Final Match: 0
%struct.anon.6 = type { i32, i32 }
Indices:
i32 0
i32 1
GEP Seq
GEP Seq
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Computing order of nodes for each lane
Read/Write memory found in between
  %5 = load i32, i32* %n1, align 4, !tbaa !2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="alt: %5, 1", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="0..1, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->0 
3->2 
}

Trying AGAIN
match analysis
comparing two instructions for matching
Trying AGAIN
Creating Node
match analysis
comparing two instructions for matching
Match: 1
2 x 2
Final Match: 1
Matching
Creating Node
All the Same
Creating Node
match analysis
comparing two instructions for matching
Match: 0
2 x 2
Final Match: 0
%struct.anon.5 = type { i32, i32 }
Indices:
i32 0
i32 1
GEP Seq
GEP Seq
Creating Node
match analysis
Match: 0
2 x 2
Final Match: 0
Int Seq
Computing order of nodes for each lane
Hit: store
  store i32 1, i32* %b, align 4, !tbaa !8
Schedulable: 1
Loop Rolling: main
Generating tree
Generating GEPSEQ
Generating INTSEQ
Gen:   %29 = zext i8 %28 to i32
Closing GEPSEQ
Gen:   %30 = getelementptr i32, i32* %27, i32 %29
Generating MATCH
Match: 
  store i32 1, i32* %a, align 4, !tbaa !6
  store i32 1, i32* %b, align 4, !tbaa !8
Generating IDENTICAL
Operands done!
Generated:   store i32 1, i32* %30, align 1
Gen:   store i32 1, i32* %30, align 1
Graph code generated!
Root:
  store i32 1, i32* %a, align 4, !tbaa !6
  store i32 1, i32* %b, align 4, !tbaa !8
Root size: 2
digraph VTree {
0 [label="store", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="1", style="filled" , fillcolor="#8ae18a", shape=box];
2 [label="GEP seq.", style="filled" , fillcolor="#8ae18a", shape=box];
3 [label="0..1, 1", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->0 
3->2 
}

Gains: 6 - 10 = -4; Width: 2; Unprofitable; main
Trying AGAIN
match analysis
comparing two instructions for matching
Trying AGAIN
Creating Node
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
match analysis
comparing two instructions for matching
Call1
Call2
; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #12
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #11
  ret void
}

Call3
Match: 1
151 x 151
Final Match: 1
Matching
Creating Node
match analysis
Match: 0
151 x 151
Final Match: 0
Mismatching
Creating Node
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
match analysis
Match: 0
16 x 151
Final Match: 0
Mismatching
Creating Node
All the Same
Computing order of nodes for each lane
Read/Write memory found in between
  store i32 1, i32* %a, align 4, !tbaa !6
digraph VTree {
0 [label="call: time_function", style="filled" , fillcolor="#8ae18a", shape=box];
1 [label="constant mismatch", style="filled" , fillcolor="#ff6671", shape=box];
2 [label="mismatch", style="filled" , fillcolor="#ff6671", shape=box];
3 [label="func: time_function", style="filled" , fillcolor="#8ae18a", shape=box];
1->0 
2->0 
3->0 
}

Done Loop Roller: 0/2
