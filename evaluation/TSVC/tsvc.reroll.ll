; ModuleID = 'tsvc.unrolled.ll'
source_filename = "tsvc.unrolled.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.args_t = type { %struct.timeval, %struct.timeval, i8* }
%struct.timeval = type { i64, i64 }
%struct.anon = type { i32, i32 }
%struct.anon.0 = type { i32, i32 }
%struct.anon.1 = type { float, float }
%struct.anon.2 = type { i32*, float }
%struct.anon.3 = type { i32*, i32 }
%struct.anon.4 = type { i32*, i32, i32 }
%struct.anon.5 = type { i32, i32 }
%struct.anon.6 = type { i32, i32 }
%struct.anon.7 = type { i32 }
%struct.anon.8 = type { float, float }
%struct.anon.9 = type { i32*, float }
%struct.anon.10 = type { i32*, i32 }
%struct.anon.11 = type { i32*, i32, i32 }

@__func__.s000 = private unnamed_addr constant [5 x i8] c"s000\00", align 1
@b = dso_local global [32000 x float] zeroinitializer, align 64
@a = dso_local global [32000 x float] zeroinitializer, align 64
@c = dso_local global [32000 x float] zeroinitializer, align 64
@d = dso_local global [32000 x float] zeroinitializer, align 64
@e = dso_local global [32000 x float] zeroinitializer, align 64
@aa = dso_local global [256 x [256 x float]] zeroinitializer, align 64
@bb = dso_local global [256 x [256 x float]] zeroinitializer, align 64
@cc = dso_local global [256 x [256 x float]] zeroinitializer, align 64
@__func__.s111 = private unnamed_addr constant [5 x i8] c"s111\00", align 1
@__func__.s1111 = private unnamed_addr constant [6 x i8] c"s1111\00", align 1
@__func__.s112 = private unnamed_addr constant [5 x i8] c"s112\00", align 1
@__func__.s1112 = private unnamed_addr constant [6 x i8] c"s1112\00", align 1
@__func__.s113 = private unnamed_addr constant [5 x i8] c"s113\00", align 1
@__func__.s1113 = private unnamed_addr constant [6 x i8] c"s1113\00", align 1
@__func__.s114 = private unnamed_addr constant [5 x i8] c"s114\00", align 1
@__func__.s115 = private unnamed_addr constant [5 x i8] c"s115\00", align 1
@__func__.s1115 = private unnamed_addr constant [6 x i8] c"s1115\00", align 1
@__func__.s116 = private unnamed_addr constant [5 x i8] c"s116\00", align 1
@__func__.s118 = private unnamed_addr constant [5 x i8] c"s118\00", align 1
@__func__.s119 = private unnamed_addr constant [5 x i8] c"s119\00", align 1
@__func__.s1119 = private unnamed_addr constant [6 x i8] c"s1119\00", align 1
@__func__.s121 = private unnamed_addr constant [5 x i8] c"s121\00", align 1
@__func__.s122 = private unnamed_addr constant [5 x i8] c"s122\00", align 1
@__func__.s123 = private unnamed_addr constant [5 x i8] c"s123\00", align 1
@__func__.s124 = private unnamed_addr constant [5 x i8] c"s124\00", align 1
@__func__.s125 = private unnamed_addr constant [5 x i8] c"s125\00", align 1
@flat_2d_array = dso_local global [65536 x float] zeroinitializer, align 64
@__func__.s126 = private unnamed_addr constant [5 x i8] c"s126\00", align 1
@__func__.s127 = private unnamed_addr constant [5 x i8] c"s127\00", align 1
@__func__.s128 = private unnamed_addr constant [5 x i8] c"s128\00", align 1
@__func__.s131 = private unnamed_addr constant [5 x i8] c"s131\00", align 1
@__func__.s132 = private unnamed_addr constant [5 x i8] c"s132\00", align 1
@__func__.s141 = private unnamed_addr constant [5 x i8] c"s141\00", align 1
@__func__.s151 = private unnamed_addr constant [5 x i8] c"s151\00", align 1
@__func__.s152 = private unnamed_addr constant [5 x i8] c"s152\00", align 1
@__func__.s161 = private unnamed_addr constant [5 x i8] c"s161\00", align 1
@__func__.s1161 = private unnamed_addr constant [6 x i8] c"s1161\00", align 1
@__func__.s162 = private unnamed_addr constant [5 x i8] c"s162\00", align 1
@__func__.s171 = private unnamed_addr constant [5 x i8] c"s171\00", align 1
@__func__.s172 = private unnamed_addr constant [5 x i8] c"s172\00", align 1
@__func__.s173 = private unnamed_addr constant [5 x i8] c"s173\00", align 1
@__func__.s174 = private unnamed_addr constant [5 x i8] c"s174\00", align 1
@__func__.s175 = private unnamed_addr constant [5 x i8] c"s175\00", align 1
@__func__.s176 = private unnamed_addr constant [5 x i8] c"s176\00", align 1
@__func__.s211 = private unnamed_addr constant [5 x i8] c"s211\00", align 1
@__func__.s212 = private unnamed_addr constant [5 x i8] c"s212\00", align 1
@__func__.s1213 = private unnamed_addr constant [6 x i8] c"s1213\00", align 1
@__func__.s221 = private unnamed_addr constant [5 x i8] c"s221\00", align 1
@__func__.s1221 = private unnamed_addr constant [6 x i8] c"s1221\00", align 1
@__func__.s222 = private unnamed_addr constant [5 x i8] c"s222\00", align 1
@__func__.s231 = private unnamed_addr constant [5 x i8] c"s231\00", align 1
@__func__.s232 = private unnamed_addr constant [5 x i8] c"s232\00", align 1
@__func__.s1232 = private unnamed_addr constant [6 x i8] c"s1232\00", align 1
@__func__.s233 = private unnamed_addr constant [5 x i8] c"s233\00", align 1
@__func__.s2233 = private unnamed_addr constant [6 x i8] c"s2233\00", align 1
@__func__.s235 = private unnamed_addr constant [5 x i8] c"s235\00", align 1
@__func__.s241 = private unnamed_addr constant [5 x i8] c"s241\00", align 1
@__func__.s242 = private unnamed_addr constant [5 x i8] c"s242\00", align 1
@__func__.s243 = private unnamed_addr constant [5 x i8] c"s243\00", align 1
@__func__.s244 = private unnamed_addr constant [5 x i8] c"s244\00", align 1
@__func__.s1244 = private unnamed_addr constant [6 x i8] c"s1244\00", align 1
@__func__.s2244 = private unnamed_addr constant [6 x i8] c"s2244\00", align 1
@__func__.s251 = private unnamed_addr constant [5 x i8] c"s251\00", align 1
@__func__.s1251 = private unnamed_addr constant [6 x i8] c"s1251\00", align 1
@__func__.s2251 = private unnamed_addr constant [6 x i8] c"s2251\00", align 1
@__func__.s3251 = private unnamed_addr constant [6 x i8] c"s3251\00", align 1
@__func__.s252 = private unnamed_addr constant [5 x i8] c"s252\00", align 1
@__func__.s253 = private unnamed_addr constant [5 x i8] c"s253\00", align 1
@__func__.s254 = private unnamed_addr constant [5 x i8] c"s254\00", align 1
@__func__.s255 = private unnamed_addr constant [5 x i8] c"s255\00", align 1
@__func__.s256 = private unnamed_addr constant [5 x i8] c"s256\00", align 1
@__func__.s257 = private unnamed_addr constant [5 x i8] c"s257\00", align 1
@__func__.s258 = private unnamed_addr constant [5 x i8] c"s258\00", align 1
@__func__.s261 = private unnamed_addr constant [5 x i8] c"s261\00", align 1
@__func__.s271 = private unnamed_addr constant [5 x i8] c"s271\00", align 1
@__func__.s272 = private unnamed_addr constant [5 x i8] c"s272\00", align 1
@__func__.s273 = private unnamed_addr constant [5 x i8] c"s273\00", align 1
@__func__.s274 = private unnamed_addr constant [5 x i8] c"s274\00", align 1
@__func__.s275 = private unnamed_addr constant [5 x i8] c"s275\00", align 1
@__func__.s2275 = private unnamed_addr constant [6 x i8] c"s2275\00", align 1
@__func__.s276 = private unnamed_addr constant [5 x i8] c"s276\00", align 1
@__func__.s277 = private unnamed_addr constant [5 x i8] c"s277\00", align 1
@__func__.s278 = private unnamed_addr constant [5 x i8] c"s278\00", align 1
@__func__.s279 = private unnamed_addr constant [5 x i8] c"s279\00", align 1
@__func__.s1279 = private unnamed_addr constant [6 x i8] c"s1279\00", align 1
@__func__.s2710 = private unnamed_addr constant [6 x i8] c"s2710\00", align 1
@__func__.s2711 = private unnamed_addr constant [6 x i8] c"s2711\00", align 1
@__func__.s2712 = private unnamed_addr constant [6 x i8] c"s2712\00", align 1
@__func__.s281 = private unnamed_addr constant [5 x i8] c"s281\00", align 1
@__func__.s1281 = private unnamed_addr constant [6 x i8] c"s1281\00", align 1
@__func__.s291 = private unnamed_addr constant [5 x i8] c"s291\00", align 1
@__func__.s292 = private unnamed_addr constant [5 x i8] c"s292\00", align 1
@__func__.s293 = private unnamed_addr constant [5 x i8] c"s293\00", align 1
@__func__.s2101 = private unnamed_addr constant [6 x i8] c"s2101\00", align 1
@__func__.s2102 = private unnamed_addr constant [6 x i8] c"s2102\00", align 1
@__func__.s2111 = private unnamed_addr constant [6 x i8] c"s2111\00", align 1
@__func__.s311 = private unnamed_addr constant [5 x i8] c"s311\00", align 1
@__func__.s31111 = private unnamed_addr constant [7 x i8] c"s31111\00", align 1
@__func__.s312 = private unnamed_addr constant [5 x i8] c"s312\00", align 1
@__func__.s313 = private unnamed_addr constant [5 x i8] c"s313\00", align 1
@__func__.s314 = private unnamed_addr constant [5 x i8] c"s314\00", align 1
@__func__.s315 = private unnamed_addr constant [5 x i8] c"s315\00", align 1
@__func__.s316 = private unnamed_addr constant [5 x i8] c"s316\00", align 1
@__func__.s317 = private unnamed_addr constant [5 x i8] c"s317\00", align 1
@__func__.s318 = private unnamed_addr constant [5 x i8] c"s318\00", align 1
@__func__.s319 = private unnamed_addr constant [5 x i8] c"s319\00", align 1
@__func__.s3110 = private unnamed_addr constant [6 x i8] c"s3110\00", align 1
@__func__.s13110 = private unnamed_addr constant [7 x i8] c"s13110\00", align 1
@__func__.s3111 = private unnamed_addr constant [6 x i8] c"s3111\00", align 1
@__func__.s3112 = private unnamed_addr constant [6 x i8] c"s3112\00", align 1
@__func__.s3113 = private unnamed_addr constant [6 x i8] c"s3113\00", align 1
@__func__.s321 = private unnamed_addr constant [5 x i8] c"s321\00", align 1
@__func__.s322 = private unnamed_addr constant [5 x i8] c"s322\00", align 1
@__func__.s323 = private unnamed_addr constant [5 x i8] c"s323\00", align 1
@__func__.s331 = private unnamed_addr constant [5 x i8] c"s331\00", align 1
@__func__.s332 = private unnamed_addr constant [5 x i8] c"s332\00", align 1
@__func__.s341 = private unnamed_addr constant [5 x i8] c"s341\00", align 1
@__func__.s342 = private unnamed_addr constant [5 x i8] c"s342\00", align 1
@__func__.s343 = private unnamed_addr constant [5 x i8] c"s343\00", align 1
@__func__.s351 = private unnamed_addr constant [5 x i8] c"s351\00", align 1
@__func__.s1351 = private unnamed_addr constant [6 x i8] c"s1351\00", align 1
@__func__.s352 = private unnamed_addr constant [5 x i8] c"s352\00", align 1
@__func__.s353 = private unnamed_addr constant [5 x i8] c"s353\00", align 1
@__func__.s421 = private unnamed_addr constant [5 x i8] c"s421\00", align 1
@xx = dso_local local_unnamed_addr global float* null, align 8
@yy = dso_local local_unnamed_addr global float* null, align 8
@__func__.s1421 = private unnamed_addr constant [6 x i8] c"s1421\00", align 1
@__func__.s422 = private unnamed_addr constant [5 x i8] c"s422\00", align 1
@__func__.s423 = private unnamed_addr constant [5 x i8] c"s423\00", align 1
@__func__.s424 = private unnamed_addr constant [5 x i8] c"s424\00", align 1
@__func__.s431 = private unnamed_addr constant [5 x i8] c"s431\00", align 1
@__func__.s441 = private unnamed_addr constant [5 x i8] c"s441\00", align 1
@__func__.s442 = private unnamed_addr constant [5 x i8] c"s442\00", align 1
@indx = dso_local local_unnamed_addr global [32000 x i32] zeroinitializer, align 64
@__func__.s443 = private unnamed_addr constant [5 x i8] c"s443\00", align 1
@__func__.s451 = private unnamed_addr constant [5 x i8] c"s451\00", align 1
@__func__.s452 = private unnamed_addr constant [5 x i8] c"s452\00", align 1
@__func__.s453 = private unnamed_addr constant [5 x i8] c"s453\00", align 1
@__func__.s471 = private unnamed_addr constant [5 x i8] c"s471\00", align 1
@x = dso_local local_unnamed_addr global [32000 x float] zeroinitializer, align 64
@__func__.s481 = private unnamed_addr constant [5 x i8] c"s481\00", align 1
@__func__.s482 = private unnamed_addr constant [5 x i8] c"s482\00", align 1
@__func__.s491 = private unnamed_addr constant [5 x i8] c"s491\00", align 1
@__func__.s4112 = private unnamed_addr constant [6 x i8] c"s4112\00", align 1
@__func__.s4113 = private unnamed_addr constant [6 x i8] c"s4113\00", align 1
@__func__.s4114 = private unnamed_addr constant [6 x i8] c"s4114\00", align 1
@__func__.s4115 = private unnamed_addr constant [6 x i8] c"s4115\00", align 1
@__func__.s4116 = private unnamed_addr constant [6 x i8] c"s4116\00", align 1
@__func__.s4117 = private unnamed_addr constant [6 x i8] c"s4117\00", align 1
@__func__.s4121 = private unnamed_addr constant [6 x i8] c"s4121\00", align 1
@__func__.va = private unnamed_addr constant [3 x i8] c"va\00", align 1
@__func__.vag = private unnamed_addr constant [4 x i8] c"vag\00", align 1
@__func__.vas = private unnamed_addr constant [4 x i8] c"vas\00", align 1
@__func__.vif = private unnamed_addr constant [4 x i8] c"vif\00", align 1
@__func__.vpv = private unnamed_addr constant [4 x i8] c"vpv\00", align 1
@__func__.vtv = private unnamed_addr constant [4 x i8] c"vtv\00", align 1
@__func__.vpvtv = private unnamed_addr constant [6 x i8] c"vpvtv\00", align 1
@__func__.vpvts = private unnamed_addr constant [6 x i8] c"vpvts\00", align 1
@__func__.vpvpv = private unnamed_addr constant [6 x i8] c"vpvpv\00", align 1
@__func__.vtvtv = private unnamed_addr constant [6 x i8] c"vtvtv\00", align 1
@__func__.vsumr = private unnamed_addr constant [6 x i8] c"vsumr\00", align 1
@__func__.vdotr = private unnamed_addr constant [6 x i8] c"vdotr\00", align 1
@__func__.vbor = private unnamed_addr constant [5 x i8] c"vbor\00", align 1
@.str = private unnamed_addr constant [11 x i8] c"%10.3f\09%f\0A\00", align 1
@tt = dso_local local_unnamed_addr global [256 x [256 x float]] zeroinitializer, align 64
@str = private unnamed_addr constant [26 x i8] c"Loop \09Time(sec) \09Checksum\00", align 1

; Function Attrs: nounwind optsize uwtable
define dso_local float @s000(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s000, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.022 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call12 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call13 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s000, i64 0, i64 0)) #11
  ret float %call13

for.cond.cleanup4:                                ; preds = %for.body5
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc10 = add nuw nsw i32 %nl.022, 1
  %exitcond.not = icmp eq i32 %inc10, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !2

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %add = fadd float %0, 1.000000e+00
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !8
}

; Function Attrs: optsize
declare dso_local i32 @initialise_arrays(i8*) local_unnamed_addr #1

; Function Attrs: nofree nounwind optsize
declare dso_local noundef i32 @gettimeofday(%struct.timeval* nocapture noundef, i8* nocapture noundef) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: optsize
declare dso_local i32 @dummy(float*, float*, float*, float*, float*, [256 x float]*, [256 x float]*, [256 x float]*, float) local_unnamed_addr #1

; Function Attrs: optsize
declare dso_local float @calc_checksum(i8*) local_unnamed_addr #1

; Function Attrs: nounwind optsize uwtable
define dso_local float @s111(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s111, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.025 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s111, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc = add nuw nsw i32 %nl.025, 1
  %exitcond.not = icmp eq i32 %inc, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !9

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %0 = add nsw i64 %indvars.iv, -1
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %0
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx7, align 4, !tbaa !4
  %add = fadd float %1, %2
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx9, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2
  %3 = add nuw nsw i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %3
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add.1 = fadd float %4, %5
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 4
  %6 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %6
  %7 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %add.2 = fadd float %7, %8
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx9.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 6
  %9 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %9
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add.3 = fadd float %10, %11
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 8
  %12 = add nuw nsw i64 %indvars.iv, 7
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %12
  %13 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %add.4 = fadd float %13, %14
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx9.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 10
  %15 = add nuw nsw i64 %indvars.iv, 9
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %15
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add.5 = fadd float %16, %17
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 12
  %18 = add nuw nsw i64 %indvars.iv, 11
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
  %19 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %20 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %add.6 = fadd float %19, %20
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx9.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 14
  %21 = add nuw nsw i64 %indvars.iv, 13
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %21
  %22 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %23 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add.7 = fadd float %22, %23
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 16
  %cmp3.7 = icmp ult i64 %indvars.iv, 31984
  br i1 %cmp3.7, label %for.body5, label %for.cond.cleanup4, !llvm.loop !10
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1111(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1111, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.057 = phi i32 [ 0, %entry ], [ %inc36, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call38 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call39 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1111, i64 0, i64 0)) #11
  ret float %call39

for.cond.cleanup4:                                ; preds = %for.body5
  %call34 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc36 = add nuw nsw i32 %nl.057, 1
  %exitcond.not = icmp eq i32 %inc36, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !11

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %mul12 = fmul float %1, %2
  %add = fadd float %mul, %mul12
  %mul17 = fmul float %0, %0
  %add18 = fadd float %mul17, %add
  %add24 = fadd float %mul12, %add18
  %mul29 = fmul float %0, %2
  %add30 = fadd float %mul29, %add24
  %3 = shl nuw nsw i64 %indvar, 1
  %arrayidx33 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %3
  store float %add30, float* %arrayidx33, align 64, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 15999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !12
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s112(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s112, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.026 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s112, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc, 300000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !13

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 31998, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 8, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 8, !tbaa !4
  %add = fadd float %0, %1
  %2 = or i64 %indvars.iv, 1
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %2
  store float %add, float* %arrayidx10, align 4, !tbaa !4
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add.1 = fadd float %3, %4
  store float %add.1, float* %arrayidx, align 8, !tbaa !4
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %add.2 = fadd float %5, %6
  store float %add.2, float* %arrayidx.1, align 4, !tbaa !4
  %indvars.iv.next.2 = add nsw i64 %indvars.iv, -3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add.3 = fadd float %7, %8
  store float %add.3, float* %arrayidx.2, align 8, !tbaa !4
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, -4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %9 = load float, float* %arrayidx.4, align 8, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %10 = load float, float* %arrayidx7.4, align 8, !tbaa !4
  %add.4 = fadd float %9, %10
  store float %add.4, float* %arrayidx.3, align 4, !tbaa !4
  %indvars.iv.next.4 = add nsw i64 %indvars.iv, -5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add.5 = fadd float %11, %12
  store float %add.5, float* %arrayidx.4, align 8, !tbaa !4
  %indvars.iv.next.5 = add nsw i64 %indvars.iv, -6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %13 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %14 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %add.6 = fadd float %13, %14
  store float %add.6, float* %arrayidx.5, align 4, !tbaa !4
  %indvars.iv.next.6 = add nsw i64 %indvars.iv, -7
  %cmp3.6.not = icmp eq i64 %indvars.iv.next.5, 0
  br i1 %cmp3.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !14

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %16 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add.7 = fadd float %15, %16
  store float %add.7, float* %arrayidx.6, align 8, !tbaa !4
  %indvars.iv.next.7 = add nsw i64 %indvars.iv, -8
  br label %for.body5, !llvm.loop !16
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1112(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1112, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.022 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call11 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call12 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1112, i64 0, i64 0)) #11
  ret float %call12

for.cond.cleanup4:                                ; preds = %for.body5
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc = add nuw nsw i32 %nl.022, 1
  %exitcond.not = icmp eq i32 %inc, 300000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !17

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 31999, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %add = fadd float %0, 1.000000e+00
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx7, align 4, !tbaa !4
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %add.1 = fadd float %1, 1.000000e+00
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %2 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %add.2 = fadd float %2, 1.000000e+00
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nsw i64 %indvars.iv, -3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %add.3 = fadd float %3, 1.000000e+00
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, -4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %4 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %add.4 = fadd float %4, 1.000000e+00
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nsw i64 %indvars.iv, -5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %add.5 = fadd float %5, 1.000000e+00
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nsw i64 %indvars.iv, -6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %6 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %add.6 = fadd float %6, 1.000000e+00
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nsw i64 %indvars.iv, -7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %add.7 = fadd float %7, 1.000000e+00
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nsw i64 %indvars.iv, -8
  %cmp3.7.not = icmp eq i64 %indvars.iv.next.6, 0
  br i1 %cmp3.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !18
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s113(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s113, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.022 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call12 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call13 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s113, i64 0, i64 0)) #11
  ret float %call13

for.cond.cleanup4:                                ; preds = %for.body5
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc10 = add nuw nsw i32 %nl.022, 1
  %exitcond.not = icmp eq i32 %inc10, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !19

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %0 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %add = fadd float %0, %1
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx7, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %2 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %add.1 = fadd float %2, %3
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %4 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %add.2 = fadd float %4, %5
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %6 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %add.3 = fadd float %6, %7
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %8 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %9 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %add.4 = fadd float %8, %9
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %10 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %add.5 = fadd float %10, %11
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %12 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %13 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %add.6 = fadd float %12, %13
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 32000
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !20

for.body5.7:                                      ; preds = %for.body5
  %14 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %add.7 = fadd float %14, %15
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !21
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1113(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1113, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.022 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call12 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call13 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1113, i64 0, i64 0)) #11
  ret float %call13

for.cond.cleanup4:                                ; preds = %for.body5
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc10 = add nuw nsw i32 %nl.022, 1
  %exitcond.not = icmp eq i32 %inc10, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !22

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %0 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16000), align 64, !tbaa !4
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx, align 32, !tbaa !4
  %add = fadd float %0, %1
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !23
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s114(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s114, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.047 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call27 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call28 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s114, i64 0, i64 0)) #11
  ret float %call28

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv48 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next49, %for.cond.cleanup8 ]
  %cmp743.not = icmp eq i64 %indvars.iv48, 0
  br i1 %cmp743.not, label %for.cond.cleanup8, label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.cond6.preheader
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call23 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc25 = add nuw nsw i32 %nl.047, 1
  %exitcond51.not = icmp eq i32 %inc25, 78000
  br i1 %exitcond51.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !24

for.cond.cleanup8.loopexit:                       ; preds = %for.body9
  br label %for.cond.cleanup8

for.cond.cleanup8:                                ; preds = %for.cond.cleanup8.loopexit, %for.cond6.preheader
  %indvars.iv.next49 = add nuw nsw i64 %indvars.iv48, 1
  %exitcond50.not = icmp eq i64 %indvars.iv.next49, 256
  br i1 %exitcond50.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !25

for.body9:                                        ; preds = %for.body9.preheader, %for.body9
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body9 ], [ 0, %for.body9.preheader ]
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv48
  %0 = load float, float* %arrayidx11, align 4, !tbaa !4
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv48, i64 %indvars.iv
  %1 = load float, float* %arrayidx15, align 4, !tbaa !4
  %add = fadd float %0, %1
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv48, i64 %indvars.iv
  store float %add, float* %arrayidx19, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv48
  br i1 %exitcond.not, label %for.cond.cleanup8.loopexit, label %for.body9, !llvm.loop !26
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s115(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s115, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.040 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call23 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call24 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s115, i64 0, i64 0)) #11
  ret float %call24

for.cond2.loopexit.loopexit:                      ; preds = %for.body9
  br label %for.cond2.loopexit

for.cond2.loopexit:                               ; preds = %for.cond2.loopexit.loopexit, %for.body9.prol.loopexit, %for.body5
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next44, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !27

for.cond.cleanup4:                                ; preds = %for.cond2.loopexit
  %call19 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc21 = add nuw nsw i32 %nl.040, 1
  %exitcond45.not = icmp eq i32 %inc21, 390000
  br i1 %exitcond45.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !28

for.body5:                                        ; preds = %for.cond2.loopexit, %for.cond2.preheader
  %indvars.iv43 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next44, %for.cond2.loopexit ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next, %for.cond2.loopexit ]
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 1
  %cmp737 = icmp ult i64 %indvars.iv43, 255
  br i1 %cmp737, label %for.body9.lr.ph, label %for.cond2.loopexit

for.body9.lr.ph:                                  ; preds = %for.body5
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv43
  %0 = trunc i64 %indvars.iv43 to i32
  %1 = sub nsw i32 7, %0
  %xtraiter = and i32 %1, 7
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body9.prol.loopexit, label %for.body9.prol.preheader

for.body9.prol.preheader:                         ; preds = %for.body9.lr.ph
  br label %for.body9.prol

for.body9.prol:                                   ; preds = %for.body9.prol.preheader, %for.body9.prol
  %indvars.iv41.prol = phi i64 [ %indvars.iv.next42.prol, %for.body9.prol ], [ %indvars.iv, %for.body9.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body9.prol ], [ %xtraiter, %for.body9.prol.preheader ]
  %arrayidx11.prol = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv43, i64 %indvars.iv41.prol
  %2 = load float, float* %arrayidx11.prol, align 4, !tbaa !4
  %3 = load float, float* %arrayidx13, align 4, !tbaa !4
  %mul.prol = fmul float %2, %3
  %arrayidx15.prol = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv41.prol
  %4 = load float, float* %arrayidx15.prol, align 4, !tbaa !4
  %sub.prol = fsub float %4, %mul.prol
  store float %sub.prol, float* %arrayidx15.prol, align 4, !tbaa !4
  %indvars.iv.next42.prol = add nuw nsw i64 %indvars.iv41.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body9.prol.loopexit.loopexit, label %for.body9.prol, !llvm.loop !29

for.body9.prol.loopexit.loopexit:                 ; preds = %for.body9.prol
  %indvars.iv.next42.prol.lcssa = phi i64 [ %indvars.iv.next42.prol, %for.body9.prol ]
  br label %for.body9.prol.loopexit

for.body9.prol.loopexit:                          ; preds = %for.body9.prol.loopexit.loopexit, %for.body9.lr.ph
  %indvars.iv41.unr = phi i64 [ %indvars.iv, %for.body9.lr.ph ], [ %indvars.iv.next42.prol.lcssa, %for.body9.prol.loopexit.loopexit ]
  %5 = trunc i64 %indvars.iv43 to i32
  %6 = sub i32 254, %5
  %7 = icmp ult i32 %6, 7
  br i1 %7, label %for.cond2.loopexit, label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.body9.prol.loopexit
  %8 = sub i64 248, %indvars.iv41.unr
  %9 = lshr i64 %8, 3
  %10 = shl nuw i64 %9, 3
  %11 = add nuw nsw i64 %10, 7
  br label %for.body9

for.body9:                                        ; preds = %for.body9.preheader, %for.body9
  %indvar = phi i64 [ 0, %for.body9.preheader ], [ %indvar.next, %for.body9 ]
  %12 = add i64 %indvars.iv41.unr, %indvar
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv43, i64 %12
  %13 = load float, float* %arrayidx11, align 4, !tbaa !4
  %14 = load float, float* %arrayidx13, align 4, !tbaa !4
  %mul = fmul float %13, %14
  %arrayidx15 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %12
  %15 = load float, float* %arrayidx15, align 4, !tbaa !4
  %sub = fsub float %15, %mul
  store float %sub, float* %arrayidx15, align 4, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, %11
  br i1 %exitcond, label %for.cond2.loopexit.loopexit, label %for.body9, !llvm.loop !30
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1115(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1115, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.050 = phi i32 [ 0, %entry ], [ %inc29, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call31 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call32 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1115, i64 0, i64 0)) #11
  ret float %call32

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv51 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next52, %for.cond.cleanup8 ]
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call27 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc29 = add nuw nsw i32 %nl.050, 1
  %exitcond53.not = icmp eq i32 %inc29, 39000
  br i1 %exitcond53.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !31

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next52 = add nuw nsw i64 %indvars.iv51, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next52, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !32

for.body9:                                        ; preds = %for.body9, %for.cond6.preheader
  %indvar = phi i64 [ %indvar.next, %for.body9 ], [ 0, %for.cond6.preheader ]
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv51, i64 %indvar
  %0 = load float, float* %arrayidx11, align 32, !tbaa !4
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvar, i64 %indvars.iv51
  %1 = load float, float* %arrayidx15, align 4, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51, i64 %indvar
  %2 = load float, float* %arrayidx19, align 32, !tbaa !4
  %add = fadd float %mul, %2
  store float %add, float* %arrayidx11, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 255
  br i1 %exitcond, label %for.cond.cleanup8, label %for.body9, !llvm.loop !33
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s116(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s116, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.077 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call54 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call55 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s116, i64 0, i64 0)) #11
  ret float %call55

for.cond.cleanup4:                                ; preds = %for.body5
  %call51 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc = add nuw nsw i32 %nl.077, 1
  %exitcond.not = icmp eq i32 %inc, 1000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !34

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %9, %for.body5 ]
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body5 ]
  %1 = add nuw nsw i64 %indvars.iv, 1
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %1
  %2 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %mul = fmul float %2, %0
  store float %mul, float* %arrayidx7, align 4, !tbaa !4
  %3 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %3
  %4 = load float, float* %arrayidx12, align 4, !tbaa !4
  %mul16 = fmul float %2, %4
  store float %mul16, float* %arrayidx, align 4, !tbaa !4
  %5 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %5
  %6 = load float, float* %arrayidx22, align 4, !tbaa !4
  %mul26 = fmul float %4, %6
  store float %mul26, float* %arrayidx12, align 4, !tbaa !4
  %7 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx32 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %7
  %8 = load float, float* %arrayidx32, align 4, !tbaa !4
  %mul36 = fmul float %6, %8
  store float %mul36, float* %arrayidx22, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 5
  %arrayidx42 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %9 = load float, float* %arrayidx42, align 4, !tbaa !4
  %mul46 = fmul float %8, %9
  store float %mul46, float* %arrayidx32, align 4, !tbaa !4
  %cmp3 = icmp ult i64 %indvars.iv, 31990
  br i1 %cmp3, label %for.body5, label %for.cond.cleanup4, !llvm.loop !35
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s118(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s118, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.042 = phi i32 [ 0, %entry ], [ %inc23, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call25 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call26 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s118, i64 0, i64 0)) #11
  ret float %call26

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv44 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next45, %for.cond.cleanup8 ]
  %arrayidx17 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv44
  %.pre = load float, float* %arrayidx17, align 4, !tbaa !4
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call21 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc23 = add nuw nsw i32 %nl.042, 1
  %exitcond47.not = icmp eq i32 %inc23, 78000
  br i1 %exitcond47.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !36

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next45 = add nuw nsw i64 %indvars.iv44, 1
  %exitcond46.not = icmp eq i64 %indvars.iv.next45, 256
  br i1 %exitcond46.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !37

for.body9:                                        ; preds = %for.body9, %for.cond6.preheader
  %0 = phi float [ %.pre, %for.cond6.preheader ], [ %add, %for.body9 ]
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next, %for.body9 ]
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv44
  %1 = load float, float* %arrayidx11, align 4, !tbaa !4
  %2 = xor i64 %indvars.iv, -1
  %3 = add nsw i64 %indvars.iv44, %2
  %arrayidx15 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %3
  %4 = load float, float* %arrayidx15, align 4, !tbaa !4
  %mul = fmul float %1, %4
  %add = fadd float %0, %mul
  store float %add, float* %arrayidx17, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv44
  br i1 %exitcond.not, label %for.cond.cleanup8, label %for.body9, !llvm.loop !38
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s119(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s119, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.045 = phi i32 [ 0, %entry ], [ %inc26, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call28 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call29 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s119, i64 0, i64 0)) #11
  ret float %call29

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv47 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next48, %for.cond.cleanup8 ]
  %0 = add nsw i64 %indvars.iv47, -1
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call24 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc26 = add nuw nsw i32 %nl.045, 1
  %exitcond50.not = icmp eq i32 %inc26, 78000
  br i1 %exitcond50.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !39

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next48 = add nuw nsw i64 %indvars.iv47, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next48, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !40

for.body9:                                        ; preds = %for.body9.7, %for.cond6.preheader
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
  %1 = add nsw i64 %indvars.iv, -1
  %arrayidx12 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %1
  %2 = load float, float* %arrayidx12, align 4, !tbaa !4
  %arrayidx16 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv
  %3 = load float, float* %arrayidx16, align 4, !tbaa !4
  %add = fadd float %2, %3
  %arrayidx20 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv
  store float %add, float* %arrayidx20, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx12.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv
  %4 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %arrayidx16.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %add.1 = fadd float %4, %5
  %arrayidx20.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx20.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx12.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx12.2, align 4, !tbaa !4
  %arrayidx16.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx16.2, align 4, !tbaa !4
  %add.2 = fadd float %6, %7
  %arrayidx20.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx20.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx12.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx12.3, align 4, !tbaa !4
  %arrayidx16.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.2
  %9 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %add.3 = fadd float %8, %9
  %arrayidx20.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx20.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx12.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx12.4, align 4, !tbaa !4
  %arrayidx16.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.3
  %11 = load float, float* %arrayidx16.4, align 4, !tbaa !4
  %add.4 = fadd float %10, %11
  %arrayidx20.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx20.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx12.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.3
  %12 = load float, float* %arrayidx12.5, align 4, !tbaa !4
  %arrayidx16.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.4
  %13 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %add.5 = fadd float %12, %13
  %arrayidx20.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx20.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx12.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.4
  %14 = load float, float* %arrayidx12.6, align 4, !tbaa !4
  %arrayidx16.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.5
  %15 = load float, float* %arrayidx16.6, align 4, !tbaa !4
  %add.6 = fadd float %14, %15
  %arrayidx20.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx20.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 256
  br i1 %exitcond.6.not, label %for.cond.cleanup8, label %for.body9.7, !llvm.loop !41

for.body9.7:                                      ; preds = %for.body9
  %arrayidx12.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.5
  %16 = load float, float* %arrayidx12.7, align 4, !tbaa !4
  %arrayidx16.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.6
  %17 = load float, float* %arrayidx16.7, align 4, !tbaa !4
  %add.7 = fadd float %16, %17
  %arrayidx20.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv47, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx20.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body9, !llvm.loop !42
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1119(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1119, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.044 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call27 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call28 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1119, i64 0, i64 0)) #11
  ret float %call28

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv45 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next46, %for.cond.cleanup8 ]
  %0 = add nsw i64 %indvars.iv45, -1
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call23 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc25 = add nuw nsw i32 %nl.044, 1
  %exitcond48.not = icmp eq i32 %inc25, 78000
  br i1 %exitcond48.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !43

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next46 = add nuw nsw i64 %indvars.iv45, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next46, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !44

for.body9:                                        ; preds = %for.body9, %for.cond6.preheader
  %indvar = phi i64 [ %indvar.next, %for.body9 ], [ 0, %for.cond6.preheader ]
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvar
  %1 = load float, float* %arrayidx11, align 32, !tbaa !4
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv45, i64 %indvar
  %2 = load float, float* %arrayidx15, align 32, !tbaa !4
  %add = fadd float %1, %2
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv45, i64 %indvar
  store float %add, float* %arrayidx19, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 255
  br i1 %exitcond, label %for.cond.cleanup8, label %for.body9, !llvm.loop !45
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s121(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s121, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.027 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s121, i64 0, i64 0)) #11
  ret float %call16

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.027, 1
  %exitcond.not = icmp eq i32 %inc13, 300000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !46

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add8 = fadd float %0, %1
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add8, float* %arrayidx10, align 32, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %2 = load float, float* %arrayidx.1, align 8, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add8.1 = fadd float %2, %3
  store float %add8.1, float* %arrayidx, align 4, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %4 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %add8.2 = fadd float %4, %5
  store float %add8.2, float* %arrayidx.1, align 8, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %6 = load float, float* %arrayidx.3, align 16, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add8.3 = fadd float %6, %7
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %8 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %add8.4 = fadd float %8, %9
  store float %add8.4, float* %arrayidx.3, align 16, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %10 = load float, float* %arrayidx.5, align 8, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add8.5 = fadd float %10, %11
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %12 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %add8.6 = fadd float %12, %13
  store float %add8.6, float* %arrayidx.5, align 8, !tbaa !4
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !47

for.body5.7:                                      ; preds = %for.body5
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  %14 = load float, float* %arrayidx.7, align 32, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add8.7 = fadd float %14, %15
  store float %add8.7, float* %arrayidx.6, align 4, !tbaa !4
  br label %for.body5, !llvm.loop !48
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s122(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to %struct.anon**
  %1 = load %struct.anon*, %struct.anon** %0, align 8, !tbaa !49
  %a = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 0, i32 0
  %2 = load i32, i32* %a, align 4, !tbaa !54
  %b = getelementptr inbounds %struct.anon, %struct.anon* %1, i64 0, i32 1
  %3 = load i32, i32* %b, align 4, !tbaa !57
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s122, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %cmp330 = icmp slt i32 %2, 32001
  %4 = add i32 %2, -1
  %5 = sext i32 %4 to i64
  %6 = sext i32 %3 to i64
  %7 = add i32 %2, %3
  %8 = add i32 %7, -1
  %9 = icmp sgt i32 %8, 32000
  %smax = select i1 %9, i32 %8, i32 32000
  %10 = sub i32 %smax, %2
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s122, i64 0, i64 0)) #11
  ret float %call15

for.body:                                         ; preds = %for.cond.cleanup4, %entry
  %nl.033 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
  br i1 %cmp330, label %for.body5.preheader, label %for.cond.cleanup4

for.body5.preheader:                              ; preds = %for.body
  %11 = udiv i32 %10, %3
  %12 = add i32 %11, 1
  %xtraiter = and i32 %12, 7
  %13 = icmp ult i32 %11, 7
  br i1 %13, label %for.cond.cleanup4.loopexit.unr-lcssa, label %for.body5.preheader.new

for.body5.preheader.new:                          ; preds = %for.body5.preheader
  %unroll_iter = and i32 %12, -8
  br label %for.body5

for.cond.cleanup4.loopexit.unr-lcssa.loopexit:    ; preds = %for.body5
  %indvars.iv.next35.7.lcssa = phi i64 [ %indvars.iv.next35.7, %for.body5 ]
  %indvars.iv.next.7.lcssa = phi i64 [ %indvars.iv.next.7, %for.body5 ]
  br label %for.cond.cleanup4.loopexit.unr-lcssa

for.cond.cleanup4.loopexit.unr-lcssa:             ; preds = %for.cond.cleanup4.loopexit.unr-lcssa.loopexit, %for.body5.preheader
  %indvars.iv34.unr = phi i64 [ 0, %for.body5.preheader ], [ %indvars.iv.next35.7.lcssa, %for.cond.cleanup4.loopexit.unr-lcssa.loopexit ]
  %indvars.iv.unr = phi i64 [ %5, %for.body5.preheader ], [ %indvars.iv.next.7.lcssa, %for.cond.cleanup4.loopexit.unr-lcssa.loopexit ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup4, label %for.body5.epil.preheader

for.body5.epil.preheader:                         ; preds = %for.cond.cleanup4.loopexit.unr-lcssa
  br label %for.body5.epil

for.body5.epil:                                   ; preds = %for.body5.epil.preheader, %for.body5.epil
  %indvars.iv34.epil = phi i64 [ %indvars.iv.next35.epil, %for.body5.epil ], [ %indvars.iv34.unr, %for.body5.epil.preheader ]
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body5.epil ], [ %indvars.iv.unr, %for.body5.epil.preheader ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body5.epil ], [ %xtraiter, %for.body5.epil.preheader ]
  %indvars.iv.next35.epil = add nuw nsw i64 %indvars.iv34.epil, 1
  %14 = sub nsw i64 31999, %indvars.iv34.epil
  %arrayidx.epil = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %14
  %15 = load float, float* %arrayidx.epil, align 4, !tbaa !4
  %arrayidx8.epil = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.epil
  %16 = load float, float* %arrayidx8.epil, align 4, !tbaa !4
  %add9.epil = fadd float %15, %16
  store float %add9.epil, float* %arrayidx8.epil, align 4, !tbaa !4
  %indvars.iv.next.epil = add i64 %indvars.iv.epil, %6
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup4.loopexit, label %for.body5.epil, !llvm.loop !58

for.cond.cleanup4.loopexit:                       ; preds = %for.body5.epil
  br label %for.cond.cleanup4

for.cond.cleanup4:                                ; preds = %for.cond.cleanup4.loopexit, %for.cond.cleanup4.loopexit.unr-lcssa, %for.body
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc = add nuw nsw i32 %nl.033, 1
  %exitcond.not = icmp eq i32 %inc, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !59

for.body5:                                        ; preds = %for.body5, %for.body5.preheader.new
  %indvars.iv34 = phi i64 [ 0, %for.body5.preheader.new ], [ %indvars.iv.next35.7, %for.body5 ]
  %indvars.iv = phi i64 [ %5, %for.body5.preheader.new ], [ %indvars.iv.next.7, %for.body5 ]
  %niter = phi i32 [ %unroll_iter, %for.body5.preheader.new ], [ %niter.nsub.7, %for.body5 ]
  %17 = sub nsw i64 31999, %indvars.iv34
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %17
  %18 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %19 = load float, float* %arrayidx8, align 4, !tbaa !4
  %add9 = fadd float %18, %19
  store float %add9, float* %arrayidx8, align 4, !tbaa !4
  %indvars.iv.next = add i64 %indvars.iv, %6
  %20 = sub nsw i64 31998, %indvars.iv34
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %20
  %21 = load float, float* %arrayidx.1, align 8, !tbaa !4
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %22 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %add9.1 = fadd float %21, %22
  store float %add9.1, float* %arrayidx8.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add i64 %indvars.iv.next, %6
  %23 = sub nsw i64 31997, %indvars.iv34
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %23
  %24 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %25 = load float, float* %arrayidx8.2, align 4, !tbaa !4
  %add9.2 = fadd float %24, %25
  store float %add9.2, float* %arrayidx8.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add i64 %indvars.iv.next.1, %6
  %26 = sub nsw i64 31996, %indvars.iv34
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %26
  %27 = load float, float* %arrayidx.3, align 16, !tbaa !4
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %28 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %add9.3 = fadd float %27, %28
  store float %add9.3, float* %arrayidx8.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add i64 %indvars.iv.next.2, %6
  %29 = sub nsw i64 31995, %indvars.iv34
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %29
  %30 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %31 = load float, float* %arrayidx8.4, align 4, !tbaa !4
  %add9.4 = fadd float %30, %31
  store float %add9.4, float* %arrayidx8.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add i64 %indvars.iv.next.3, %6
  %32 = sub nsw i64 31994, %indvars.iv34
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %32
  %33 = load float, float* %arrayidx.5, align 8, !tbaa !4
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %34 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %add9.5 = fadd float %33, %34
  store float %add9.5, float* %arrayidx8.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add i64 %indvars.iv.next.4, %6
  %indvars.iv.next35.6 = or i64 %indvars.iv34, 7
  %35 = sub nsw i64 31993, %indvars.iv34
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %35
  %36 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %37 = load float, float* %arrayidx8.6, align 4, !tbaa !4
  %add9.6 = fadd float %36, %37
  store float %add9.6, float* %arrayidx8.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add i64 %indvars.iv.next.5, %6
  %indvars.iv.next35.7 = add nuw nsw i64 %indvars.iv34, 8
  %38 = sub nsw i64 31999, %indvars.iv.next35.6
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %38
  %39 = load float, float* %arrayidx.7, align 32, !tbaa !4
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %40 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %add9.7 = fadd float %39, %40
  store float %add9.7, float* %arrayidx8.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %6
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7.not = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7.not, label %for.cond.cleanup4.loopexit.unr-lcssa.loopexit, label %for.body5, !llvm.loop !60
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s123(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s123, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.051 = phi i32 [ 0, %entry ], [ %inc29, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call31 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call32 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s123, i64 0, i64 0)) #11
  ret float %call32

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call27 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc29 = add nuw nsw i32 %nl.051, 1
  %exitcond.not = icmp eq i32 %inc29, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !61

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %j.049 = phi i32 [ -1, %for.cond2.preheader ], [ %j.1.7, %for.inc.7 ]
  %inc = add nsw i32 %j.049, 1
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %mul = fmul float %1, %2
  %add = fadd float %0, %mul
  %idxprom10 = sext i32 %inc to i64
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom10
  store float %add, float* %arrayidx11, align 4, !tbaa !4
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx13, align 32, !tbaa !4
  %cmp14 = fcmp ogt float %3, 0.000000e+00
  br i1 %cmp14, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body5
  %inc15 = add nsw i32 %j.049, 2
  %add23 = fadd float %mul, %3
  %idxprom24 = sext i32 %inc15 to i64
  %arrayidx25 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom24
  store float %add23, float* %arrayidx25, align 4, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body5
  %j.1 = phi i32 [ %inc15, %if.then ], [ %inc, %for.body5 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %inc.1 = add nsw i32 %j.1, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %mul.1 = fmul float %5, %6
  %add.1 = fadd float %4, %mul.1
  %idxprom10.1 = sext i32 %inc.1 to i64
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom10.1
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx13.1, align 4, !tbaa !4
  %cmp14.1 = fcmp ogt float %7, 0.000000e+00
  br i1 %cmp14.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %inc15.1 = add nsw i32 %j.1, 2
  %add23.1 = fadd float %mul.1, %7
  %idxprom24.1 = sext i32 %inc15.1 to i64
  %arrayidx25.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom24.1
  store float %add23.1, float* %arrayidx25.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %j.1.1 = phi i32 [ %inc15.1, %if.then.1 ], [ %inc.1, %for.inc ]
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %inc.2 = add nsw i32 %j.1.1, 1
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %mul.2 = fmul float %9, %10
  %add.2 = fadd float %8, %mul.2
  %idxprom10.2 = sext i32 %inc.2 to i64
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom10.2
  store float %add.2, float* %arrayidx11.2, align 4, !tbaa !4
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx13.2, align 8, !tbaa !4
  %cmp14.2 = fcmp ogt float %11, 0.000000e+00
  br i1 %cmp14.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %inc15.2 = add nsw i32 %j.1.1, 2
  %add23.2 = fadd float %mul.2, %11
  %idxprom24.2 = sext i32 %inc15.2 to i64
  %arrayidx25.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom24.2
  store float %add23.2, float* %arrayidx25.2, align 4, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %j.1.2 = phi i32 [ %inc15.2, %if.then.2 ], [ %inc.2, %for.inc.1 ]
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %inc.3 = add nsw i32 %j.1.2, 1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %mul.3 = fmul float %13, %14
  %add.3 = fadd float %12, %mul.3
  %idxprom10.3 = sext i32 %inc.3 to i64
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom10.3
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx13.3, align 4, !tbaa !4
  %cmp14.3 = fcmp ogt float %15, 0.000000e+00
  br i1 %cmp14.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %inc15.3 = add nsw i32 %j.1.2, 2
  %add23.3 = fadd float %mul.3, %15
  %idxprom24.3 = sext i32 %inc15.3 to i64
  %arrayidx25.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom24.3
  store float %add23.3, float* %arrayidx25.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  %j.1.3 = phi i32 [ %inc15.3, %if.then.3 ], [ %inc.3, %for.inc.2 ]
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %inc.4 = add nsw i32 %j.1.3, 1
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %mul.4 = fmul float %17, %18
  %add.4 = fadd float %16, %mul.4
  %idxprom10.4 = sext i32 %inc.4 to i64
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom10.4
  store float %add.4, float* %arrayidx11.4, align 4, !tbaa !4
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx13.4, align 16, !tbaa !4
  %cmp14.4 = fcmp ogt float %19, 0.000000e+00
  br i1 %cmp14.4, label %if.then.4, label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %inc15.4 = add nsw i32 %j.1.3, 2
  %add23.4 = fadd float %mul.4, %19
  %idxprom24.4 = sext i32 %inc15.4 to i64
  %arrayidx25.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom24.4
  store float %add23.4, float* %arrayidx25.4, align 4, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %for.inc.3
  %j.1.4 = phi i32 [ %inc15.4, %if.then.4 ], [ %inc.4, %for.inc.3 ]
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %inc.5 = add nsw i32 %j.1.4, 1
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %mul.5 = fmul float %21, %22
  %add.5 = fadd float %20, %mul.5
  %idxprom10.5 = sext i32 %inc.5 to i64
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom10.5
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %23 = load float, float* %arrayidx13.5, align 4, !tbaa !4
  %cmp14.5 = fcmp ogt float %23, 0.000000e+00
  br i1 %cmp14.5, label %if.then.5, label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %inc15.5 = add nsw i32 %j.1.4, 2
  %add23.5 = fadd float %mul.5, %23
  %idxprom24.5 = sext i32 %inc15.5 to i64
  %arrayidx25.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom24.5
  store float %add23.5, float* %arrayidx25.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %for.inc.4
  %j.1.5 = phi i32 [ %inc15.5, %if.then.5 ], [ %inc.5, %for.inc.4 ]
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %inc.6 = add nsw i32 %j.1.5, 1
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %mul.6 = fmul float %25, %26
  %add.6 = fadd float %24, %mul.6
  %idxprom10.6 = sext i32 %inc.6 to i64
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom10.6
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !4
  %arrayidx13.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %27 = load float, float* %arrayidx13.6, align 8, !tbaa !4
  %cmp14.6 = fcmp ogt float %27, 0.000000e+00
  br i1 %cmp14.6, label %if.then.6, label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %inc15.6 = add nsw i32 %j.1.5, 2
  %add23.6 = fadd float %mul.6, %27
  %idxprom24.6 = sext i32 %inc15.6 to i64
  %arrayidx25.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom24.6
  store float %add23.6, float* %arrayidx25.6, align 4, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %for.inc.5
  %j.1.6 = phi i32 [ %inc15.6, %if.then.6 ], [ %inc.6, %for.inc.5 ]
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %inc.7 = add nsw i32 %j.1.6, 1
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %29 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %mul.7 = fmul float %29, %30
  %add.7 = fadd float %28, %mul.7
  %idxprom10.7 = sext i32 %inc.7 to i64
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom10.7
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
  %arrayidx13.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %31 = load float, float* %arrayidx13.7, align 4, !tbaa !4
  %cmp14.7 = fcmp ogt float %31, 0.000000e+00
  br i1 %cmp14.7, label %if.then.7, label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %inc15.7 = add nsw i32 %j.1.6, 2
  %add23.7 = fadd float %mul.7, %31
  %idxprom24.7 = sext i32 %inc15.7 to i64
  %arrayidx25.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom24.7
  store float %add23.7, float* %arrayidx25.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %for.inc.6
  %j.1.7 = phi i32 [ %inc15.7, %if.then.7 ], [ %inc.7, %for.inc.6 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 16000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !62
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s124(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s124, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.051 = phi i32 [ 0, %entry ], [ %inc29, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call31 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call32 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s124, i64 0, i64 0)) #11
  ret float %call32

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call27 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc29 = add nuw nsw i32 %nl.051, 1
  %exitcond.not = icmp eq i32 %inc29, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !63

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %j.049 = phi i32 [ -1, %for.cond2.preheader ], [ %inc.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp ogt float %0, 0.000000e+00
  %inc = add nsw i32 %j.049, 1
  br i1 %cmp6, label %for.inc, label %if.else

if.else:                                          ; preds = %for.body5
  %arrayidx17 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx17, align 32, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.else, %for.body5
  %.sink = phi float [ %1, %if.else ], [ %0, %for.body5 ]
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx10, align 32, !tbaa !4
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx12, align 32, !tbaa !4
  %mul = fmul float %2, %3
  %add = fadd float %.sink, %mul
  %idxprom13 = sext i32 %inc to i64
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom13
  store float %add, float* %arrayidx14, align 4, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ogt float %4, 0.000000e+00
  %inc.1 = add nsw i32 %j.049, 2
  br i1 %cmp6.1, label %for.inc.1, label %if.else.1

if.else.1:                                        ; preds = %for.inc
  %arrayidx17.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx17.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else.1, %for.inc
  %.sink54 = phi float [ %5, %if.else.1 ], [ %4, %for.inc ]
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %mul.1 = fmul float %6, %7
  %add.1 = fadd float %.sink54, %mul.1
  %idxprom13.1 = sext i32 %inc.1 to i64
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom13.1
  store float %add.1, float* %arrayidx14.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ogt float %8, 0.000000e+00
  %inc.2 = add nsw i32 %j.049, 3
  br i1 %cmp6.2, label %for.inc.2, label %if.else.2

if.else.2:                                        ; preds = %for.inc.1
  %arrayidx17.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx17.2, align 8, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.else.2, %for.inc.1
  %.sink57 = phi float [ %9, %if.else.2 ], [ %8, %for.inc.1 ]
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx12.2, align 8, !tbaa !4
  %mul.2 = fmul float %10, %11
  %add.2 = fadd float %.sink57, %mul.2
  %idxprom13.2 = sext i32 %inc.2 to i64
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom13.2
  store float %add.2, float* %arrayidx14.2, align 4, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ogt float %12, 0.000000e+00
  %inc.3 = add nsw i32 %j.049, 4
  br i1 %cmp6.3, label %for.inc.3, label %if.else.3

if.else.3:                                        ; preds = %for.inc.2
  %arrayidx17.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx17.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.else.3, %for.inc.2
  %.sink60 = phi float [ %13, %if.else.3 ], [ %12, %for.inc.2 ]
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx12.3, align 4, !tbaa !4
  %mul.3 = fmul float %14, %15
  %add.3 = fadd float %.sink60, %mul.3
  %idxprom13.3 = sext i32 %inc.3 to i64
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom13.3
  store float %add.3, float* %arrayidx14.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ogt float %16, 0.000000e+00
  %inc.4 = add nsw i32 %j.049, 5
  br i1 %cmp6.4, label %for.inc.4, label %if.else.4

if.else.4:                                        ; preds = %for.inc.3
  %arrayidx17.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx17.4, align 16, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.else.4, %for.inc.3
  %.sink63 = phi float [ %17, %if.else.4 ], [ %16, %for.inc.3 ]
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx12.4, align 16, !tbaa !4
  %mul.4 = fmul float %18, %19
  %add.4 = fadd float %.sink63, %mul.4
  %idxprom13.4 = sext i32 %inc.4 to i64
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom13.4
  store float %add.4, float* %arrayidx14.4, align 4, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ogt float %20, 0.000000e+00
  %inc.5 = add nsw i32 %j.049, 6
  br i1 %cmp6.5, label %for.inc.5, label %if.else.5

if.else.5:                                        ; preds = %for.inc.4
  %arrayidx17.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx17.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.else.5, %for.inc.4
  %.sink66 = phi float [ %21, %if.else.5 ], [ %20, %for.inc.4 ]
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %23 = load float, float* %arrayidx12.5, align 4, !tbaa !4
  %mul.5 = fmul float %22, %23
  %add.5 = fadd float %.sink66, %mul.5
  %idxprom13.5 = sext i32 %inc.5 to i64
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom13.5
  store float %add.5, float* %arrayidx14.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ogt float %24, 0.000000e+00
  %inc.6 = add nsw i32 %j.049, 7
  br i1 %cmp6.6, label %for.inc.6, label %if.else.6

if.else.6:                                        ; preds = %for.inc.5
  %arrayidx17.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx17.6, align 8, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.else.6, %for.inc.5
  %.sink69 = phi float [ %25, %if.else.6 ], [ %24, %for.inc.5 ]
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %27 = load float, float* %arrayidx12.6, align 8, !tbaa !4
  %mul.6 = fmul float %26, %27
  %add.6 = fadd float %.sink69, %mul.6
  %idxprom13.6 = sext i32 %inc.6 to i64
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom13.6
  store float %add.6, float* %arrayidx14.6, align 4, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ogt float %28, 0.000000e+00
  %inc.7 = add nsw i32 %j.049, 8
  br i1 %cmp6.7, label %for.inc.7, label %if.else.7

if.else.7:                                        ; preds = %for.inc.6
  %arrayidx17.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %29 = load float, float* %arrayidx17.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.else.7, %for.inc.6
  %.sink72 = phi float [ %29, %if.else.7 ], [ %28, %for.inc.6 ]
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %31 = load float, float* %arrayidx12.7, align 4, !tbaa !4
  %mul.7 = fmul float %30, %31
  %add.7 = fadd float %.sink72, %mul.7
  %idxprom13.7 = sext i32 %inc.7 to i64
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom13.7
  store float %add.7, float* %arrayidx14.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !64
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s125(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s125, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.051 = phi i32 [ 0, %entry ], [ %inc28, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call30 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call31 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s125, i64 0, i64 0)) #11
  ret float %call31

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv54 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next55, %for.cond.cleanup8 ]
  %k.049 = phi i64 [ -1, %for.cond2.preheader ], [ %indvars.iv.next53.7.lcssa, %for.cond.cleanup8 ]
  %sext = shl i64 %k.049, 32
  %0 = ashr exact i64 %sext, 32
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call26 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc28 = add nuw nsw i32 %nl.051, 1
  %exitcond56.not = icmp eq i32 %inc28, 39000
  br i1 %exitcond56.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !65

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next53.7.lcssa = phi i64 [ %indvars.iv.next53.7, %for.body9 ]
  %indvars.iv.next55 = add nuw nsw i64 %indvars.iv54, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next55, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !66

for.body9:                                        ; preds = %for.body9, %for.cond6.preheader
  %indvars.iv52 = phi i64 [ %0, %for.cond6.preheader ], [ %indvars.iv.next53.7, %for.body9 ]
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %indvars.iv.next53 = add nsw i64 %indvars.iv52, 1
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv
  %1 = load float, float* %arrayidx11, align 32, !tbaa !4
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv
  %2 = load float, float* %arrayidx15, align 32, !tbaa !4
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv
  %3 = load float, float* %arrayidx19, align 32, !tbaa !4
  %mul = fmul float %2, %3
  %add = fadd float %1, %mul
  %arrayidx21 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53
  store float %add, float* %arrayidx21, align 4, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %indvars.iv.next53.1 = add nsw i64 %indvars.iv52, 2
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx15.1, align 4, !tbaa !4
  %arrayidx19.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx19.1, align 4, !tbaa !4
  %mul.1 = fmul float %5, %6
  %add.1 = fadd float %4, %mul.1
  %arrayidx21.1 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.1
  store float %add.1, float* %arrayidx21.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %indvars.iv.next53.2 = add nsw i64 %indvars.iv52, 3
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx11.2, align 8, !tbaa !4
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx15.2, align 8, !tbaa !4
  %arrayidx19.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx19.2, align 8, !tbaa !4
  %mul.2 = fmul float %8, %9
  %add.2 = fadd float %7, %mul.2
  %arrayidx21.2 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.2
  store float %add.2, float* %arrayidx21.2, align 4, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %indvars.iv.next53.3 = add nsw i64 %indvars.iv52, 4
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx15.3, align 4, !tbaa !4
  %arrayidx19.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx19.3, align 4, !tbaa !4
  %mul.3 = fmul float %11, %12
  %add.3 = fadd float %10, %mul.3
  %arrayidx21.3 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.3
  store float %add.3, float* %arrayidx21.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %indvars.iv.next53.4 = add nsw i64 %indvars.iv52, 5
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx11.4, align 16, !tbaa !4
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx15.4, align 16, !tbaa !4
  %arrayidx19.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.3
  %15 = load float, float* %arrayidx19.4, align 16, !tbaa !4
  %mul.4 = fmul float %14, %15
  %add.4 = fadd float %13, %mul.4
  %arrayidx21.4 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.4
  store float %add.4, float* %arrayidx21.4, align 4, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %indvars.iv.next53.5 = add nsw i64 %indvars.iv52, 6
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx15.5, align 4, !tbaa !4
  %arrayidx19.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.4
  %18 = load float, float* %arrayidx19.5, align 4, !tbaa !4
  %mul.5 = fmul float %17, %18
  %add.5 = fadd float %16, %mul.5
  %arrayidx21.5 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.5
  store float %add.5, float* %arrayidx21.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %indvars.iv.next53.6 = add nsw i64 %indvars.iv52, 7
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx11.6, align 8, !tbaa !4
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.5
  %20 = load float, float* %arrayidx15.6, align 8, !tbaa !4
  %arrayidx19.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.5
  %21 = load float, float* %arrayidx19.6, align 8, !tbaa !4
  %mul.6 = fmul float %20, %21
  %add.6 = fadd float %19, %mul.6
  %arrayidx21.6 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.6
  store float %add.6, float* %arrayidx21.6, align 4, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %indvars.iv.next53.7 = add nsw i64 %indvars.iv52, 8
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx11.7, align 4, !tbaa !4
  %arrayidx15.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.6
  %23 = load float, float* %arrayidx15.7, align 4, !tbaa !4
  %arrayidx19.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv54, i64 %indvars.iv.next.6
  %24 = load float, float* %arrayidx19.7, align 4, !tbaa !4
  %mul.7 = fmul float %23, %24
  %add.7 = fadd float %22, %mul.7
  %arrayidx21.7 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next53.7
  store float %add.7, float* %arrayidx21.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 256
  br i1 %exitcond.7.not, label %for.cond.cleanup8, label %for.body9, !llvm.loop !67
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s126(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s126, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.054 = phi i32 [ 0, %entry ], [ %inc30, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call32 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call33 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s126, i64 0, i64 0)) #11
  ret float %call33

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv59 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next60, %for.cond.cleanup8 ]
  %k.052 = phi i32 [ 1, %for.cond2.preheader ], [ %inc24, %for.cond.cleanup8 ]
  %0 = sext i32 %k.052 to i64
  %arrayidx11.phi.trans.insert = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0, i64 %indvars.iv59
  %.pre = load float, float* %arrayidx11.phi.trans.insert, align 4, !tbaa !4
  %1 = add nsw i32 %k.052, 248
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call28 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc30 = add nuw nsw i32 %nl.054, 1
  %exitcond61.not = icmp eq i32 %inc30, 3900
  br i1 %exitcond61.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !68

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next57.5.lcssa = phi i64 [ %indvars.iv.next57.5, %for.body9 ]
  %2 = trunc i64 %indvars.iv.next57.5.lcssa to i32
  %inc24 = add nsw i32 %2, 2
  %indvars.iv.next60 = add nuw nsw i64 %indvars.iv59, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next60, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !69

for.body9:                                        ; preds = %for.body9.7, %for.cond6.preheader
  %3 = phi float [ %.pre, %for.cond6.preheader ], [ %add.7, %for.body9.7 ]
  %indvars.iv56 = phi i64 [ %0, %for.cond6.preheader ], [ %indvars.iv.next57.7, %for.body9.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
  %4 = add nsw i64 %indvars.iv56, -1
  %arrayidx14 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %4
  %5 = load float, float* %arrayidx14, align 4, !tbaa !4
  %arrayidx18 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv, i64 %indvars.iv59
  %6 = load float, float* %arrayidx18, align 4, !tbaa !4
  %mul = fmul float %5, %6
  %add = fadd float %3, %mul
  %arrayidx22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv59
  store float %add, float* %arrayidx22, align 4, !tbaa !4
  %indvars.iv.next57 = add nsw i64 %indvars.iv56, 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx14.1 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv56
  %7 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %arrayidx18.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next, i64 %indvars.iv59
  %8 = load float, float* %arrayidx18.1, align 4, !tbaa !4
  %mul.1 = fmul float %7, %8
  %add.1 = fadd float %add, %mul.1
  %arrayidx22.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv59
  store float %add.1, float* %arrayidx22.1, align 4, !tbaa !4
  %indvars.iv.next57.1 = add nsw i64 %indvars.iv56, 2
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx14.2 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next57
  %9 = load float, float* %arrayidx14.2, align 4, !tbaa !4
  %arrayidx18.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv59
  %10 = load float, float* %arrayidx18.2, align 4, !tbaa !4
  %mul.2 = fmul float %9, %10
  %add.2 = fadd float %add.1, %mul.2
  %arrayidx22.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv59
  store float %add.2, float* %arrayidx22.2, align 4, !tbaa !4
  %indvars.iv.next57.2 = add nsw i64 %indvars.iv56, 3
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx14.3 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next57.1
  %11 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %arrayidx18.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv59
  %12 = load float, float* %arrayidx18.3, align 4, !tbaa !4
  %mul.3 = fmul float %11, %12
  %add.3 = fadd float %add.2, %mul.3
  %arrayidx22.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv59
  store float %add.3, float* %arrayidx22.3, align 4, !tbaa !4
  %indvars.iv.next57.3 = add nsw i64 %indvars.iv56, 4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx14.4 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next57.2
  %13 = load float, float* %arrayidx14.4, align 4, !tbaa !4
  %arrayidx18.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv59
  %14 = load float, float* %arrayidx18.4, align 4, !tbaa !4
  %mul.4 = fmul float %13, %14
  %add.4 = fadd float %add.3, %mul.4
  %arrayidx22.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv59
  store float %add.4, float* %arrayidx22.4, align 4, !tbaa !4
  %indvars.iv.next57.4 = add nsw i64 %indvars.iv56, 5
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx14.5 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next57.3
  %15 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %arrayidx18.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv59
  %16 = load float, float* %arrayidx18.5, align 4, !tbaa !4
  %mul.5 = fmul float %15, %16
  %add.5 = fadd float %add.4, %mul.5
  %arrayidx22.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv59
  store float %add.5, float* %arrayidx22.5, align 4, !tbaa !4
  %indvars.iv.next57.5 = add nsw i64 %indvars.iv56, 6
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx14.6 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next57.4
  %17 = load float, float* %arrayidx14.6, align 4, !tbaa !4
  %arrayidx18.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv59
  %18 = load float, float* %arrayidx18.6, align 4, !tbaa !4
  %mul.6 = fmul float %17, %18
  %add.6 = fadd float %add.5, %mul.6
  %arrayidx22.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv59
  store float %add.6, float* %arrayidx22.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %19 = trunc i64 %indvars.iv56 to i32
  %exitcond.6.not = icmp eq i32 %1, %19
  br i1 %exitcond.6.not, label %for.cond.cleanup8, label %for.body9.7, !llvm.loop !70

for.body9.7:                                      ; preds = %for.body9
  %arrayidx14.7 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next57.5
  %20 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %arrayidx18.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv59
  %21 = load float, float* %arrayidx18.7, align 4, !tbaa !4
  %mul.7 = fmul float %20, %21
  %add.7 = fadd float %add.6, %mul.7
  %arrayidx22.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv59
  store float %add.7, float* %arrayidx22.7, align 4, !tbaa !4
  %indvars.iv.next57.7 = add nsw i64 %indvars.iv56, 8
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body9, !llvm.loop !71
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s127(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s127, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.047 = phi i32 [ 0, %entry ], [ %inc26, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call28 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call29 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s127, i64 0, i64 0)) #11
  ret float %call29

for.cond.cleanup4:                                ; preds = %for.body5
  %call24 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc26 = add nuw nsw i32 %nl.047, 1
  %exitcond.not = icmp eq i32 %inc26, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !72

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv48 = phi i64 [ -1, %for.cond2.preheader ], [ %indvars.iv.next49.7, %for.body5 ]
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %0 = add nsw i64 %indvars.iv48, 1
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx7, align 32, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx9, align 32, !tbaa !4
  %mul = fmul float %2, %3
  %add = fadd float %1, %mul
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %0
  store float %add, float* %arrayidx11, align 4, !tbaa !4
  %indvars.iv.next49 = add nsw i64 %indvars.iv48, 2
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx18, align 32, !tbaa !4
  %mul19 = fmul float %3, %4
  %add20 = fadd float %1, %mul19
  %arrayidx22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next49
  store float %add20, float* %arrayidx22, align 4, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %5 = add nsw i64 %indvars.iv48, 3
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %mul.1 = fmul float %7, %8
  %add.1 = fadd float %6, %mul.1
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %5
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  %indvars.iv.next49.1 = add nsw i64 %indvars.iv48, 4
  %arrayidx18.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %9 = load float, float* %arrayidx18.1, align 4, !tbaa !4
  %mul19.1 = fmul float %8, %9
  %add20.1 = fadd float %6, %mul19.1
  %arrayidx22.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next49.1
  store float %add20.1, float* %arrayidx22.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %10 = add nsw i64 %indvars.iv48, 5
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %12 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %13 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %mul.2 = fmul float %12, %13
  %add.2 = fadd float %11, %mul.2
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
  store float %add.2, float* %arrayidx11.2, align 4, !tbaa !4
  %indvars.iv.next49.2 = add nsw i64 %indvars.iv48, 6
  %arrayidx18.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %14 = load float, float* %arrayidx18.2, align 8, !tbaa !4
  %mul19.2 = fmul float %13, %14
  %add20.2 = fadd float %11, %mul19.2
  %arrayidx22.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next49.2
  store float %add20.2, float* %arrayidx22.2, align 4, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %15 = add nsw i64 %indvars.iv48, 7
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %16 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %17 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %18 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %mul.3 = fmul float %17, %18
  %add.3 = fadd float %16, %mul.3
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %15
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  %indvars.iv.next49.3 = add nsw i64 %indvars.iv48, 8
  %arrayidx18.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %19 = load float, float* %arrayidx18.3, align 4, !tbaa !4
  %mul19.3 = fmul float %18, %19
  %add20.3 = fadd float %16, %mul19.3
  %arrayidx22.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next49.3
  store float %add20.3, float* %arrayidx22.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %20 = add nsw i64 %indvars.iv48, 9
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %21 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %22 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %23 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %mul.4 = fmul float %22, %23
  %add.4 = fadd float %21, %mul.4
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
  store float %add.4, float* %arrayidx11.4, align 4, !tbaa !4
  %indvars.iv.next49.4 = add nsw i64 %indvars.iv48, 10
  %arrayidx18.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %24 = load float, float* %arrayidx18.4, align 16, !tbaa !4
  %mul19.4 = fmul float %23, %24
  %add20.4 = fadd float %21, %mul19.4
  %arrayidx22.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next49.4
  store float %add20.4, float* %arrayidx22.4, align 4, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %25 = add nsw i64 %indvars.iv48, 11
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %26 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %27 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %28 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %mul.5 = fmul float %27, %28
  %add.5 = fadd float %26, %mul.5
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %25
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  %indvars.iv.next49.5 = add nsw i64 %indvars.iv48, 12
  %arrayidx18.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %29 = load float, float* %arrayidx18.5, align 4, !tbaa !4
  %mul19.5 = fmul float %28, %29
  %add20.5 = fadd float %26, %mul19.5
  %arrayidx22.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next49.5
  store float %add20.5, float* %arrayidx22.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %30 = add nsw i64 %indvars.iv48, 13
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %31 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %32 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %33 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %mul.6 = fmul float %32, %33
  %add.6 = fadd float %31, %mul.6
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %30
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !4
  %indvars.iv.next49.6 = add nsw i64 %indvars.iv48, 14
  %arrayidx18.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %34 = load float, float* %arrayidx18.6, align 8, !tbaa !4
  %mul19.6 = fmul float %33, %34
  %add20.6 = fadd float %31, %mul19.6
  %arrayidx22.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next49.6
  store float %add20.6, float* %arrayidx22.6, align 4, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %35 = add nsw i64 %indvars.iv48, 15
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %36 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %37 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %38 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %mul.7 = fmul float %37, %38
  %add.7 = fadd float %36, %mul.7
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %35
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
  %indvars.iv.next49.7 = add nsw i64 %indvars.iv48, 16
  %arrayidx18.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %39 = load float, float* %arrayidx18.7, align 4, !tbaa !4
  %mul19.7 = fmul float %38, %39
  %add20.7 = fadd float %36, %mul19.7
  %arrayidx22.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next49.7
  store float %add20.7, float* %arrayidx22.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 16000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !73
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s128(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s128, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.039 = phi i32 [ 0, %entry ], [ %inc20, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call22 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call23 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s128, i64 0, i64 0)) #11
  ret float %call23

for.cond.cleanup4:                                ; preds = %for.body5
  %call18 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 1.000000e+00) #11
  %inc20 = add nuw nsw i32 %nl.039, 1
  %exitcond.not = icmp eq i32 %inc20, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !74

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv40 = phi i64 [ -1, %for.cond2.preheader ], [ %indvars.iv.next41.7, %for.body5 ]
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %0 = add nsw i64 %indvars.iv40, 1
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %0
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx7, align 32, !tbaa !4
  %sub = fsub float %1, %2
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %sub, float* %arrayidx9, align 32, !tbaa !4
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %0
  %3 = load float, float* %arrayidx14, align 4, !tbaa !4
  %add15 = fadd float %sub, %3
  store float %add15, float* %arrayidx, align 4, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %4 = add nsw i64 %indvars.iv40, 3
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %4
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %sub.1 = fsub float %5, %6
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %sub.1, float* %arrayidx9.1, align 4, !tbaa !4
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %4
  %7 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %add15.1 = fadd float %sub.1, %7
  store float %add15.1, float* %arrayidx.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %8 = add nsw i64 %indvars.iv40, 5
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %8
  %9 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %sub.2 = fsub float %9, %10
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %sub.2, float* %arrayidx9.2, align 8, !tbaa !4
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %8
  %11 = load float, float* %arrayidx14.2, align 4, !tbaa !4
  %add15.2 = fadd float %sub.2, %11
  store float %add15.2, float* %arrayidx.2, align 4, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %12 = add nsw i64 %indvars.iv40, 7
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %12
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %sub.3 = fsub float %13, %14
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %sub.3, float* %arrayidx9.3, align 4, !tbaa !4
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %12
  %15 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %add15.3 = fadd float %sub.3, %15
  store float %add15.3, float* %arrayidx.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %16 = add nsw i64 %indvars.iv40, 9
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %16
  %17 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %sub.4 = fsub float %17, %18
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %sub.4, float* %arrayidx9.4, align 16, !tbaa !4
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %16
  %19 = load float, float* %arrayidx14.4, align 4, !tbaa !4
  %add15.4 = fadd float %sub.4, %19
  store float %add15.4, float* %arrayidx.4, align 4, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %20 = add nsw i64 %indvars.iv40, 11
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %20
  %21 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %sub.5 = fsub float %21, %22
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %sub.5, float* %arrayidx9.5, align 4, !tbaa !4
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %20
  %23 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %add15.5 = fadd float %sub.5, %23
  store float %add15.5, float* %arrayidx.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %24 = add nsw i64 %indvars.iv40, 13
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %24
  %25 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %sub.6 = fsub float %25, %26
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %sub.6, float* %arrayidx9.6, align 8, !tbaa !4
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %24
  %27 = load float, float* %arrayidx14.6, align 4, !tbaa !4
  %add15.6 = fadd float %sub.6, %27
  store float %add15.6, float* %arrayidx.6, align 4, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %28 = add nsw i64 %indvars.iv40, 15
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %28
  %29 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %sub.7 = fsub float %29, %30
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %sub.7, float* %arrayidx9.7, align 4, !tbaa !4
  %indvars.iv.next41.7 = add nsw i64 %indvars.iv40, 16
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %28
  %31 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %add15.7 = fadd float %sub.7, %31
  store float %add15.7, float* %arrayidx.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 16000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !75
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s131(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s131, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.027 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s131, i64 0, i64 0)) #11
  ret float %call16

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.027, 1
  %exitcond.not = icmp eq i32 %inc13, 500000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !76

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add8 = fadd float %0, %1
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add8, float* %arrayidx10, align 32, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %2 = load float, float* %arrayidx.1, align 8, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add8.1 = fadd float %2, %3
  store float %add8.1, float* %arrayidx, align 4, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %4 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %add8.2 = fadd float %4, %5
  store float %add8.2, float* %arrayidx.1, align 8, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %6 = load float, float* %arrayidx.3, align 16, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add8.3 = fadd float %6, %7
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %8 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %add8.4 = fadd float %8, %9
  store float %add8.4, float* %arrayidx.3, align 16, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %10 = load float, float* %arrayidx.5, align 8, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add8.5 = fadd float %10, %11
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %12 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %add8.6 = fadd float %12, %13
  store float %add8.6, float* %arrayidx.5, align 8, !tbaa !4
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !77

for.body5.7:                                      ; preds = %for.body5
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  %14 = load float, float* %arrayidx.7, align 32, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add8.7 = fadd float %14, %15
  store float %add8.7, float* %arrayidx.6, align 4, !tbaa !4
  br label %for.body5, !llvm.loop !78
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s132(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s132, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.034 = phi i32 [ 0, %entry ], [ %inc17, %for.cond.cleanup4 ]
  %0 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 1), align 4, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call19 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call20 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s132, i64 0, i64 0)) #11
  ret float %call20

for.cond.cleanup4:                                ; preds = %for.body5
  %call15 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc17 = add nuw nsw i32 %nl.034, 1
  %exitcond.not = icmp eq i32 %inc17, 40000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !79

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %1 = add nsw i64 %indvars.iv, -1
  %arrayidx7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %1
  %2 = load float, float* %arrayidx7, align 4, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx9, align 4, !tbaa !4
  %mul = fmul float %3, %0
  %add10 = fadd float %2, %mul
  %arrayidx14 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv
  store float %add10, float* %arrayidx14, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx7.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %mul.1 = fmul float %5, %0
  %add10.1 = fadd float %4, %mul.1
  %arrayidx14.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next
  store float %add10.1, float* %arrayidx14.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx7.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx9.2, align 4, !tbaa !4
  %mul.2 = fmul float %7, %0
  %add10.2 = fadd float %6, %mul.2
  %arrayidx14.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.1
  store float %add10.2, float* %arrayidx14.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx7.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %9 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %mul.3 = fmul float %9, %0
  %add10.3 = fadd float %8, %mul.3
  %arrayidx14.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.2
  store float %add10.3, float* %arrayidx14.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx7.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %11 = load float, float* %arrayidx9.4, align 4, !tbaa !4
  %mul.4 = fmul float %11, %0
  %add10.4 = fadd float %10, %mul.4
  %arrayidx14.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.3
  store float %add10.4, float* %arrayidx14.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx7.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv.next.3
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %13 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %mul.5 = fmul float %13, %0
  %add10.5 = fadd float %12, %mul.5
  %arrayidx14.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.4
  store float %add10.5, float* %arrayidx14.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx7.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv.next.4
  %14 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %15 = load float, float* %arrayidx9.6, align 4, !tbaa !4
  %mul.6 = fmul float %15, %0
  %add10.6 = fadd float %14, %mul.6
  %arrayidx14.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.5
  store float %add10.6, float* %arrayidx14.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 256
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !80

for.body5.7:                                      ; preds = %for.body5
  %arrayidx7.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 1, i64 %indvars.iv.next.5
  %16 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %17 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %mul.7 = fmul float %17, %0
  %add10.7 = fadd float %16, %mul.7
  %arrayidx14.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.6
  store float %add10.7, float* %arrayidx14.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !81
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s141(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s141, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.050 = phi i32 [ 0, %entry ], [ %inc26, %for.cond.cleanup4 ]
  br label %for.body13.lr.ph

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call28 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call29 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s141, i64 0, i64 0)) #11
  ret float %call29

for.cond2.loopexit.loopexit:                      ; preds = %for.body13
  br label %for.cond2.loopexit

for.cond2.loopexit:                               ; preds = %for.cond2.loopexit.loopexit, %for.body13.prol.loopexit
  %exitcond.not = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.body13.lr.ph, !llvm.loop !82

for.cond.cleanup4:                                ; preds = %for.cond2.loopexit
  %call24 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc26 = add nuw nsw i32 %nl.050, 1
  %exitcond54.not = icmp eq i32 %inc26, 78000
  br i1 %exitcond54.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !83

for.body13.lr.ph:                                 ; preds = %for.cond2.loopexit, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.cond2.loopexit ]
  %i.049 = phi i32 [ 0, %for.cond2.preheader ], [ %add, %for.cond2.loopexit ]
  %0 = sub nsw i64 255, %indvars.iv
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %add = add nuw nsw i32 %i.049, 1
  %1 = trunc i64 %indvars.iv to i32
  %2 = sub i32 0, %1
  %3 = trunc i64 %indvars.iv to i32
  %4 = mul i32 %add, %3
  %div = lshr i32 %4, 1
  %5 = trunc i64 %indvars.iv to i32
  %sub9 = add nuw nsw i32 %div, %5
  %xtraiter = and i32 %2, 7
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body13.prol.loopexit, label %for.body13.prol.preheader

for.body13.prol.preheader:                        ; preds = %for.body13.lr.ph
  br label %for.body13.prol

for.body13.prol:                                  ; preds = %for.body13.prol.preheader, %for.body13.prol
  %indvars.iv51.prol = phi i64 [ %indvars.iv.next52.prol, %for.body13.prol ], [ %indvars.iv, %for.body13.prol.preheader ]
  %k.047.prol = phi i32 [ %add20.prol, %for.body13.prol ], [ %sub9, %for.body13.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body13.prol ], [ %xtraiter, %for.body13.prol.preheader ]
  %arrayidx15.prol = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51.prol, i64 %indvars.iv
  %6 = load float, float* %arrayidx15.prol, align 4, !tbaa !4
  %idxprom16.prol = zext i32 %k.047.prol to i64
  %arrayidx17.prol = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom16.prol
  %7 = load float, float* %arrayidx17.prol, align 4, !tbaa !4
  %add18.prol = fadd float %6, %7
  store float %add18.prol, float* %arrayidx17.prol, align 4, !tbaa !4
  %indvars.iv.next52.prol = add nuw nsw i64 %indvars.iv51.prol, 1
  %8 = trunc i64 %indvars.iv.next52.prol to i32
  %add20.prol = add nuw nsw i32 %k.047.prol, %8
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body13.prol.loopexit.loopexit, label %for.body13.prol, !llvm.loop !84

for.body13.prol.loopexit.loopexit:                ; preds = %for.body13.prol
  %indvars.iv.next52.prol.lcssa = phi i64 [ %indvars.iv.next52.prol, %for.body13.prol ]
  %add20.prol.lcssa = phi i32 [ %add20.prol, %for.body13.prol ]
  br label %for.body13.prol.loopexit

for.body13.prol.loopexit:                         ; preds = %for.body13.prol.loopexit.loopexit, %for.body13.lr.ph
  %indvars.iv51.unr = phi i64 [ %indvars.iv, %for.body13.lr.ph ], [ %indvars.iv.next52.prol.lcssa, %for.body13.prol.loopexit.loopexit ]
  %k.047.unr = phi i32 [ %sub9, %for.body13.lr.ph ], [ %add20.prol.lcssa, %for.body13.prol.loopexit.loopexit ]
  %9 = icmp ult i64 %0, 7
  br i1 %9, label %for.cond2.loopexit, label %for.body13.preheader

for.body13.preheader:                             ; preds = %for.body13.prol.loopexit
  br label %for.body13

for.body13:                                       ; preds = %for.body13.preheader, %for.body13
  %indvars.iv51 = phi i64 [ %indvars.iv.next52.7, %for.body13 ], [ %indvars.iv51.unr, %for.body13.preheader ]
  %k.047 = phi i32 [ %add20.7, %for.body13 ], [ %k.047.unr, %for.body13.preheader ]
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv51, i64 %indvars.iv
  %10 = load float, float* %arrayidx15, align 4, !tbaa !4
  %idxprom16 = zext i32 %k.047 to i64
  %arrayidx17 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom16
  %11 = load float, float* %arrayidx17, align 4, !tbaa !4
  %add18 = fadd float %10, %11
  store float %add18, float* %arrayidx17, align 4, !tbaa !4
  %indvars.iv.next52 = add nuw nsw i64 %indvars.iv51, 1
  %12 = trunc i64 %indvars.iv.next52 to i32
  %add20 = add nuw nsw i32 %k.047, %12
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next52, i64 %indvars.iv
  %13 = load float, float* %arrayidx15.1, align 4, !tbaa !4
  %idxprom16.1 = zext i32 %add20 to i64
  %arrayidx17.1 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom16.1
  %14 = load float, float* %arrayidx17.1, align 4, !tbaa !4
  %add18.1 = fadd float %13, %14
  store float %add18.1, float* %arrayidx17.1, align 4, !tbaa !4
  %indvars.iv.next52.1 = add nuw nsw i64 %indvars.iv51, 2
  %15 = trunc i64 %indvars.iv.next52.1 to i32
  %add20.1 = add nuw nsw i32 %add20, %15
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next52.1, i64 %indvars.iv
  %16 = load float, float* %arrayidx15.2, align 4, !tbaa !4
  %idxprom16.2 = zext i32 %add20.1 to i64
  %arrayidx17.2 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom16.2
  %17 = load float, float* %arrayidx17.2, align 4, !tbaa !4
  %add18.2 = fadd float %16, %17
  store float %add18.2, float* %arrayidx17.2, align 4, !tbaa !4
  %indvars.iv.next52.2 = add nuw nsw i64 %indvars.iv51, 3
  %18 = trunc i64 %indvars.iv.next52.2 to i32
  %add20.2 = add nuw nsw i32 %add20.1, %18
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next52.2, i64 %indvars.iv
  %19 = load float, float* %arrayidx15.3, align 4, !tbaa !4
  %idxprom16.3 = zext i32 %add20.2 to i64
  %arrayidx17.3 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom16.3
  %20 = load float, float* %arrayidx17.3, align 4, !tbaa !4
  %add18.3 = fadd float %19, %20
  store float %add18.3, float* %arrayidx17.3, align 4, !tbaa !4
  %indvars.iv.next52.3 = add nuw nsw i64 %indvars.iv51, 4
  %21 = trunc i64 %indvars.iv.next52.3 to i32
  %add20.3 = add nuw nsw i32 %add20.2, %21
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next52.3, i64 %indvars.iv
  %22 = load float, float* %arrayidx15.4, align 4, !tbaa !4
  %idxprom16.4 = zext i32 %add20.3 to i64
  %arrayidx17.4 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom16.4
  %23 = load float, float* %arrayidx17.4, align 4, !tbaa !4
  %add18.4 = fadd float %22, %23
  store float %add18.4, float* %arrayidx17.4, align 4, !tbaa !4
  %indvars.iv.next52.4 = add nuw nsw i64 %indvars.iv51, 5
  %24 = trunc i64 %indvars.iv.next52.4 to i32
  %add20.4 = add nuw nsw i32 %add20.3, %24
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next52.4, i64 %indvars.iv
  %25 = load float, float* %arrayidx15.5, align 4, !tbaa !4
  %idxprom16.5 = zext i32 %add20.4 to i64
  %arrayidx17.5 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom16.5
  %26 = load float, float* %arrayidx17.5, align 4, !tbaa !4
  %add18.5 = fadd float %25, %26
  store float %add18.5, float* %arrayidx17.5, align 4, !tbaa !4
  %indvars.iv.next52.5 = add nuw nsw i64 %indvars.iv51, 6
  %27 = trunc i64 %indvars.iv.next52.5 to i32
  %add20.5 = add nuw nsw i32 %add20.4, %27
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next52.5, i64 %indvars.iv
  %28 = load float, float* %arrayidx15.6, align 4, !tbaa !4
  %idxprom16.6 = zext i32 %add20.5 to i64
  %arrayidx17.6 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom16.6
  %29 = load float, float* %arrayidx17.6, align 4, !tbaa !4
  %add18.6 = fadd float %28, %29
  store float %add18.6, float* %arrayidx17.6, align 4, !tbaa !4
  %indvars.iv.next52.6 = add nuw nsw i64 %indvars.iv51, 7
  %30 = trunc i64 %indvars.iv.next52.6 to i32
  %add20.6 = add nuw nsw i32 %add20.5, %30
  %arrayidx15.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next52.6, i64 %indvars.iv
  %31 = load float, float* %arrayidx15.7, align 4, !tbaa !4
  %idxprom16.7 = zext i32 %add20.6 to i64
  %arrayidx17.7 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom16.7
  %32 = load float, float* %arrayidx17.7, align 4, !tbaa !4
  %add18.7 = fadd float %31, %32
  store float %add18.7, float* %arrayidx17.7, align 4, !tbaa !4
  %indvars.iv.next52.7 = add nuw nsw i64 %indvars.iv51, 8
  %33 = trunc i64 %indvars.iv.next52.7 to i32
  %add20.7 = add nuw nsw i32 %add20.6, %33
  %exitcond.7.not = icmp eq i64 %indvars.iv.next52.7, 256
  br i1 %exitcond.7.not, label %for.cond2.loopexit.loopexit, label %for.body13, !llvm.loop !85
}

; Function Attrs: nofree norecurse nounwind optsize uwtable
define dso_local void @s151s(float* nocapture %a, float* nocapture readonly %b, i32 %m) local_unnamed_addr #4 {
entry:
  %0 = sext i32 %m to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void

for.body:                                         ; preds = %for.body.7, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body.7 ]
  %1 = add nsw i64 %indvars.iv, %0
  %arrayidx = getelementptr inbounds float, float* %a, i64 %1
  %2 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx2 = getelementptr inbounds float, float* %b, i64 %indvars.iv
  %3 = load float, float* %arrayidx2, align 4, !tbaa !4
  %add3 = fadd float %2, %3
  %arrayidx5 = getelementptr inbounds float, float* %a, i64 %indvars.iv
  store float %add3, float* %arrayidx5, align 4, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %4 = add nsw i64 %indvars.iv.next, %0
  %arrayidx.1 = getelementptr inbounds float, float* %a, i64 %4
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx2.1 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx2.1, align 4, !tbaa !4
  %add3.1 = fadd float %5, %6
  %arrayidx5.1 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next
  store float %add3.1, float* %arrayidx5.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %7 = add nsw i64 %indvars.iv.next.1, %0
  %arrayidx.2 = getelementptr inbounds float, float* %a, i64 %7
  %8 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx2.2 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx2.2, align 4, !tbaa !4
  %add3.2 = fadd float %8, %9
  %arrayidx5.2 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next.1
  store float %add3.2, float* %arrayidx5.2, align 4, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %10 = add nsw i64 %indvars.iv.next.2, %0
  %arrayidx.3 = getelementptr inbounds float, float* %a, i64 %10
  %11 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx2.3 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx2.3, align 4, !tbaa !4
  %add3.3 = fadd float %11, %12
  %arrayidx5.3 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next.2
  store float %add3.3, float* %arrayidx5.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %13 = add nsw i64 %indvars.iv.next.3, %0
  %arrayidx.4 = getelementptr inbounds float, float* %a, i64 %13
  %14 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx2.4 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next.3
  %15 = load float, float* %arrayidx2.4, align 4, !tbaa !4
  %add3.4 = fadd float %14, %15
  %arrayidx5.4 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next.3
  store float %add3.4, float* %arrayidx5.4, align 4, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %16 = add nsw i64 %indvars.iv.next.4, %0
  %arrayidx.5 = getelementptr inbounds float, float* %a, i64 %16
  %17 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx2.5 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next.4
  %18 = load float, float* %arrayidx2.5, align 4, !tbaa !4
  %add3.5 = fadd float %17, %18
  %arrayidx5.5 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next.4
  store float %add3.5, float* %arrayidx5.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %19 = add nsw i64 %indvars.iv.next.5, %0
  %arrayidx.6 = getelementptr inbounds float, float* %a, i64 %19
  %20 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx2.6 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next.5
  %21 = load float, float* %arrayidx2.6, align 4, !tbaa !4
  %add3.6 = fadd float %20, %21
  %arrayidx5.6 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next.5
  store float %add3.6, float* %arrayidx5.6, align 4, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup, label %for.body.7, !llvm.loop !86

for.body.7:                                       ; preds = %for.body
  %22 = add nsw i64 %indvars.iv.next.6, %0
  %arrayidx.7 = getelementptr inbounds float, float* %a, i64 %22
  %23 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx2.7 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next.6
  %24 = load float, float* %arrayidx2.7, align 4, !tbaa !4
  %add3.7 = fadd float %23, %24
  %arrayidx5.7 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next.6
  store float %add3.7, float* %arrayidx5.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body, !llvm.loop !87
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s151(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s151, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call3 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call4 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s151, i64 0, i64 0)) #11
  ret float %call4

for.body:                                         ; preds = %for.body, %entry
  %nl.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  tail call void @s151s(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), i32 1) #12
  %call2 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc = add nuw nsw i32 %nl.08, 1
  %exitcond.not = icmp eq i32 %inc, 500000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !88
}

; Function Attrs: nofree norecurse nounwind optsize uwtable
define dso_local void @s152s(float* nocapture %a, float* nocapture readonly %b, float* nocapture readonly %c, i32 %i) local_unnamed_addr #4 {
entry:
  %idxprom = sext i32 %i to i64
  %arrayidx = getelementptr inbounds float, float* %b, i64 %idxprom
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx2 = getelementptr inbounds float, float* %c, i64 %idxprom
  %1 = load float, float* %arrayidx2, align 4, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx4 = getelementptr inbounds float, float* %a, i64 %idxprom
  %2 = load float, float* %arrayidx4, align 4, !tbaa !4
  %add = fadd float %2, %mul
  store float %add, float* %arrayidx4, align 4, !tbaa !4
  ret void
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s152(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s152, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.027 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s152, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.027, 1
  %exitcond.not = icmp eq i32 %inc12, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !89

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  store float %mul, float* %arrayidx9, align 32, !tbaa !4
  %arrayidx2.i = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx2.i, align 32, !tbaa !4
  %mul.i = fmul float %mul, %2
  %arrayidx4.i = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %3 = load float, float* %arrayidx4.i, align 32, !tbaa !4
  %add.i = fadd float %3, %mul.i
  store float %add.i, float* %arrayidx4.i, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !90
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s161(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s161, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.048 = phi i32 [ 0, %entry ], [ %inc28, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call30 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call31 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s161, i64 0, i64 0)) #11
  ret float %call31

for.cond.cleanup4:                                ; preds = %for.inc.6
  %call26 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc28 = add nuw nsw i32 %nl.048, 1
  %exitcond.not = icmp eq i32 %inc28, 50000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !91

for.body5:                                        ; preds = %for.body5.backedge, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.be, %for.body5.backedge ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %cmp6 = fcmp olt float %0, 0.000000e+00
  br i1 %cmp6, label %L20, label %if.end

if.end:                                           ; preds = %for.body5
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx8, align 4, !tbaa !4
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx10, align 4, !tbaa !4
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx12, align 4, !tbaa !4
  %mul = fmul float %2, %3
  %add = fadd float %1, %mul
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx14, align 4, !tbaa !4
  %.pre = add nuw nsw i64 %indvars.iv, 1
  br label %for.inc

L20:                                              ; preds = %for.body5
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx16, align 4, !tbaa !4
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %5 = load float, float* %arrayidx18, align 4, !tbaa !4
  %mul21 = fmul float %5, %5
  %add22 = fadd float %4, %mul21
  %6 = add nuw nsw i64 %indvars.iv, 1
  %arrayidx25 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %6
  store float %add22, float* %arrayidx25, align 4, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %L20, %if.end
  %indvars.iv.next.pre-phi = phi i64 [ %.pre, %if.end ], [ %6, %L20 ]
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.pre-phi
  %7 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp olt float %7, 0.000000e+00
  br i1 %cmp6.1, label %L20.1, label %if.end.1

if.end.1:                                         ; preds = %for.inc
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.pre-phi
  %8 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.pre-phi
  %9 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.pre-phi
  %10 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %mul.1 = fmul float %9, %10
  %add.1 = fadd float %8, %mul.1
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.pre-phi
  store float %add.1, float* %arrayidx14.1, align 4, !tbaa !4
  %.pre50 = add nuw nsw i64 %indvars.iv.next.pre-phi, 1
  br label %for.inc.1

L20.1:                                            ; preds = %for.inc
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.pre-phi
  %11 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %arrayidx18.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.pre-phi
  %12 = load float, float* %arrayidx18.1, align 4, !tbaa !4
  %mul21.1 = fmul float %12, %12
  %add22.1 = fadd float %11, %mul21.1
  %13 = add nuw nsw i64 %indvars.iv.next.pre-phi, 1
  %arrayidx25.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %13
  store float %add22.1, float* %arrayidx25.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %L20.1, %if.end.1
  %indvars.iv.next.1.pre-phi = phi i64 [ %13, %L20.1 ], [ %.pre50, %if.end.1 ]
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1.pre-phi
  %14 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %cmp6.2 = fcmp olt float %14, 0.000000e+00
  br i1 %cmp6.2, label %L20.2, label %if.end.2

if.end.2:                                         ; preds = %for.inc.1
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1.pre-phi
  %15 = load float, float* %arrayidx8.2, align 4, !tbaa !4
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1.pre-phi
  %16 = load float, float* %arrayidx10.2, align 4, !tbaa !4
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1.pre-phi
  %17 = load float, float* %arrayidx12.2, align 4, !tbaa !4
  %mul.2 = fmul float %16, %17
  %add.2 = fadd float %15, %mul.2
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1.pre-phi
  store float %add.2, float* %arrayidx14.2, align 4, !tbaa !4
  %.pre51 = add nuw nsw i64 %indvars.iv.next.1.pre-phi, 1
  br label %for.inc.2

L20.2:                                            ; preds = %for.inc.1
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1.pre-phi
  %18 = load float, float* %arrayidx16.2, align 4, !tbaa !4
  %arrayidx18.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1.pre-phi
  %19 = load float, float* %arrayidx18.2, align 4, !tbaa !4
  %mul21.2 = fmul float %19, %19
  %add22.2 = fadd float %18, %mul21.2
  %20 = add nuw nsw i64 %indvars.iv.next.1.pre-phi, 1
  %arrayidx25.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %20
  store float %add22.2, float* %arrayidx25.2, align 4, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %L20.2, %if.end.2
  %indvars.iv.next.2.pre-phi = phi i64 [ %20, %L20.2 ], [ %.pre51, %if.end.2 ]
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2.pre-phi
  %21 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp olt float %21, 0.000000e+00
  br i1 %cmp6.3, label %L20.3, label %if.end.3

if.end.3:                                         ; preds = %for.inc.2
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2.pre-phi
  %22 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2.pre-phi
  %23 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2.pre-phi
  %24 = load float, float* %arrayidx12.3, align 4, !tbaa !4
  %mul.3 = fmul float %23, %24
  %add.3 = fadd float %22, %mul.3
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2.pre-phi
  store float %add.3, float* %arrayidx14.3, align 4, !tbaa !4
  %.pre52 = add nuw nsw i64 %indvars.iv.next.2.pre-phi, 1
  br label %for.inc.3

L20.3:                                            ; preds = %for.inc.2
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2.pre-phi
  %25 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %arrayidx18.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2.pre-phi
  %26 = load float, float* %arrayidx18.3, align 4, !tbaa !4
  %mul21.3 = fmul float %26, %26
  %add22.3 = fadd float %25, %mul21.3
  %27 = add nuw nsw i64 %indvars.iv.next.2.pre-phi, 1
  %arrayidx25.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %27
  store float %add22.3, float* %arrayidx25.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %L20.3, %if.end.3
  %indvars.iv.next.3.pre-phi = phi i64 [ %27, %L20.3 ], [ %.pre52, %if.end.3 ]
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3.pre-phi
  %28 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %cmp6.4 = fcmp olt float %28, 0.000000e+00
  br i1 %cmp6.4, label %L20.4, label %if.end.4

if.end.4:                                         ; preds = %for.inc.3
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3.pre-phi
  %29 = load float, float* %arrayidx8.4, align 4, !tbaa !4
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3.pre-phi
  %30 = load float, float* %arrayidx10.4, align 4, !tbaa !4
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3.pre-phi
  %31 = load float, float* %arrayidx12.4, align 4, !tbaa !4
  %mul.4 = fmul float %30, %31
  %add.4 = fadd float %29, %mul.4
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3.pre-phi
  store float %add.4, float* %arrayidx14.4, align 4, !tbaa !4
  %.pre53 = add nuw nsw i64 %indvars.iv.next.3.pre-phi, 1
  br label %for.inc.4

L20.4:                                            ; preds = %for.inc.3
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3.pre-phi
  %32 = load float, float* %arrayidx16.4, align 4, !tbaa !4
  %arrayidx18.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3.pre-phi
  %33 = load float, float* %arrayidx18.4, align 4, !tbaa !4
  %mul21.4 = fmul float %33, %33
  %add22.4 = fadd float %32, %mul21.4
  %34 = add nuw nsw i64 %indvars.iv.next.3.pre-phi, 1
  %arrayidx25.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %34
  store float %add22.4, float* %arrayidx25.4, align 4, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %L20.4, %if.end.4
  %indvars.iv.next.4.pre-phi = phi i64 [ %34, %L20.4 ], [ %.pre53, %if.end.4 ]
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4.pre-phi
  %35 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp olt float %35, 0.000000e+00
  br i1 %cmp6.5, label %L20.5, label %if.end.5

if.end.5:                                         ; preds = %for.inc.4
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4.pre-phi
  %36 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4.pre-phi
  %37 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4.pre-phi
  %38 = load float, float* %arrayidx12.5, align 4, !tbaa !4
  %mul.5 = fmul float %37, %38
  %add.5 = fadd float %36, %mul.5
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4.pre-phi
  store float %add.5, float* %arrayidx14.5, align 4, !tbaa !4
  %.pre54 = add nuw nsw i64 %indvars.iv.next.4.pre-phi, 1
  br label %for.inc.5

L20.5:                                            ; preds = %for.inc.4
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4.pre-phi
  %39 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %arrayidx18.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4.pre-phi
  %40 = load float, float* %arrayidx18.5, align 4, !tbaa !4
  %mul21.5 = fmul float %40, %40
  %add22.5 = fadd float %39, %mul21.5
  %41 = add nuw nsw i64 %indvars.iv.next.4.pre-phi, 1
  %arrayidx25.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %41
  store float %add22.5, float* %arrayidx25.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %L20.5, %if.end.5
  %indvars.iv.next.5.pre-phi = phi i64 [ %41, %L20.5 ], [ %.pre54, %if.end.5 ]
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5.pre-phi
  %42 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %cmp6.6 = fcmp olt float %42, 0.000000e+00
  br i1 %cmp6.6, label %L20.6, label %if.end.6

if.end.6:                                         ; preds = %for.inc.5
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5.pre-phi
  %43 = load float, float* %arrayidx8.6, align 4, !tbaa !4
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5.pre-phi
  %44 = load float, float* %arrayidx10.6, align 4, !tbaa !4
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5.pre-phi
  %45 = load float, float* %arrayidx12.6, align 4, !tbaa !4
  %mul.6 = fmul float %44, %45
  %add.6 = fadd float %43, %mul.6
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5.pre-phi
  store float %add.6, float* %arrayidx14.6, align 4, !tbaa !4
  %.pre55 = add nuw nsw i64 %indvars.iv.next.5.pre-phi, 1
  br label %for.inc.6

L20.6:                                            ; preds = %for.inc.5
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5.pre-phi
  %46 = load float, float* %arrayidx16.6, align 4, !tbaa !4
  %arrayidx18.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5.pre-phi
  %47 = load float, float* %arrayidx18.6, align 4, !tbaa !4
  %mul21.6 = fmul float %47, %47
  %add22.6 = fadd float %46, %mul21.6
  %48 = add nuw nsw i64 %indvars.iv.next.5.pre-phi, 1
  %arrayidx25.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %48
  store float %add22.6, float* %arrayidx25.6, align 4, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %L20.6, %if.end.6
  %indvars.iv.next.6.pre-phi = phi i64 [ %48, %L20.6 ], [ %.pre55, %if.end.6 ]
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6.pre-phi, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !92

for.body5.7:                                      ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6.pre-phi
  %49 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp olt float %49, 0.000000e+00
  br i1 %cmp6.7, label %L20.7, label %if.end.7

if.end.7:                                         ; preds = %for.body5.7
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6.pre-phi
  %50 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6.pre-phi
  %51 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6.pre-phi
  %52 = load float, float* %arrayidx12.7, align 4, !tbaa !4
  %mul.7 = fmul float %51, %52
  %add.7 = fadd float %50, %mul.7
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6.pre-phi
  store float %add.7, float* %arrayidx14.7, align 4, !tbaa !4
  %.pre56 = add nuw nsw i64 %indvars.iv.next.6.pre-phi, 1
  br label %for.body5.backedge

L20.7:                                            ; preds = %for.body5.7
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6.pre-phi
  %53 = load float, float* %arrayidx16.7, align 4, !tbaa !4
  %arrayidx18.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6.pre-phi
  %54 = load float, float* %arrayidx18.7, align 4, !tbaa !4
  %mul21.7 = fmul float %54, %54
  %add22.7 = fadd float %53, %mul21.7
  %55 = add nuw nsw i64 %indvars.iv.next.6.pre-phi, 1
  %arrayidx25.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %55
  store float %add22.7, float* %arrayidx25.7, align 4, !tbaa !4
  br label %for.body5.backedge

for.body5.backedge:                               ; preds = %L20.7, %if.end.7
  %indvars.iv.be = phi i64 [ %55, %L20.7 ], [ %.pre56, %if.end.7 ]
  br label %for.body5, !llvm.loop !93
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1161(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1161, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.046 = phi i32 [ 0, %entry ], [ %inc27, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call29 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call30 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1161, i64 0, i64 0)) #11
  ret float %call30

for.cond.cleanup4:                                ; preds = %for.inc.6
  %call25 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc27 = add nuw nsw i32 %nl.046, 1
  %exitcond.not = icmp eq i32 %inc27, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !94

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp olt float %0, 0.000000e+00
  br i1 %cmp6, label %L20, label %if.end

if.end:                                           ; preds = %for.body5
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx10, align 32, !tbaa !4
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx12, align 32, !tbaa !4
  %mul = fmul float %1, %2
  br label %for.inc

L20:                                              ; preds = %for.body5
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx16, align 32, !tbaa !4
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx18, align 32, !tbaa !4
  %mul21 = fmul float %4, %4
  br label %for.inc

for.inc:                                          ; preds = %L20, %if.end
  %mul.sink = phi float [ %mul, %if.end ], [ %mul21, %L20 ]
  %.sink = phi float [ %0, %if.end ], [ %3, %L20 ]
  %a.sink = phi [32000 x float]* [ @a, %if.end ], [ @b, %L20 ]
  %add = fadd float %.sink, %mul.sink
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* %a.sink, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx14, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp olt float %5, 0.000000e+00
  br i1 %cmp6.1, label %L20.1, label %if.end.1

if.end.1:                                         ; preds = %for.inc
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %mul.1 = fmul float %6, %7
  br label %for.inc.1

L20.1:                                            ; preds = %for.inc
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %arrayidx18.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %9 = load float, float* %arrayidx18.1, align 4, !tbaa !4
  %mul21.1 = fmul float %9, %9
  br label %for.inc.1

for.inc.1:                                        ; preds = %L20.1, %if.end.1
  %mul21.1.sink = phi float [ %mul21.1, %L20.1 ], [ %mul.1, %if.end.1 ]
  %.sink47 = phi float [ %8, %L20.1 ], [ %5, %if.end.1 ]
  %b.sink = phi [32000 x float]* [ @b, %L20.1 ], [ @a, %if.end.1 ]
  %add22.1 = fadd float %.sink47, %mul21.1.sink
  %arrayidx24.1 = getelementptr inbounds [32000 x float], [32000 x float]* %b.sink, i64 0, i64 %indvars.iv.next
  store float %add22.1, float* %arrayidx24.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp olt float %10, 0.000000e+00
  br i1 %cmp6.2, label %L20.2, label %if.end.2

if.end.2:                                         ; preds = %for.inc.1
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %12 = load float, float* %arrayidx12.2, align 8, !tbaa !4
  %mul.2 = fmul float %11, %12
  br label %for.inc.2

L20.2:                                            ; preds = %for.inc.1
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %13 = load float, float* %arrayidx16.2, align 8, !tbaa !4
  %arrayidx18.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %14 = load float, float* %arrayidx18.2, align 8, !tbaa !4
  %mul21.2 = fmul float %14, %14
  br label %for.inc.2

for.inc.2:                                        ; preds = %L20.2, %if.end.2
  %mul21.2.sink = phi float [ %mul21.2, %L20.2 ], [ %mul.2, %if.end.2 ]
  %.sink49 = phi float [ %13, %L20.2 ], [ %10, %if.end.2 ]
  %b.sink48 = phi [32000 x float]* [ @b, %L20.2 ], [ @a, %if.end.2 ]
  %add22.2 = fadd float %.sink49, %mul21.2.sink
  %arrayidx24.2 = getelementptr inbounds [32000 x float], [32000 x float]* %b.sink48, i64 0, i64 %indvars.iv.next.1
  store float %add22.2, float* %arrayidx24.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp olt float %15, 0.000000e+00
  br i1 %cmp6.3, label %L20.3, label %if.end.3

if.end.3:                                         ; preds = %for.inc.2
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %16 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %17 = load float, float* %arrayidx12.3, align 4, !tbaa !4
  %mul.3 = fmul float %16, %17
  br label %for.inc.3

L20.3:                                            ; preds = %for.inc.2
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %18 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %arrayidx18.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %19 = load float, float* %arrayidx18.3, align 4, !tbaa !4
  %mul21.3 = fmul float %19, %19
  br label %for.inc.3

for.inc.3:                                        ; preds = %L20.3, %if.end.3
  %mul21.3.sink = phi float [ %mul21.3, %L20.3 ], [ %mul.3, %if.end.3 ]
  %.sink51 = phi float [ %18, %L20.3 ], [ %15, %if.end.3 ]
  %b.sink50 = phi [32000 x float]* [ @b, %L20.3 ], [ @a, %if.end.3 ]
  %add22.3 = fadd float %.sink51, %mul21.3.sink
  %arrayidx24.3 = getelementptr inbounds [32000 x float], [32000 x float]* %b.sink50, i64 0, i64 %indvars.iv.next.2
  store float %add22.3, float* %arrayidx24.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %20 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp olt float %20, 0.000000e+00
  br i1 %cmp6.4, label %L20.4, label %if.end.4

if.end.4:                                         ; preds = %for.inc.3
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %21 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %22 = load float, float* %arrayidx12.4, align 16, !tbaa !4
  %mul.4 = fmul float %21, %22
  br label %for.inc.4

L20.4:                                            ; preds = %for.inc.3
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %23 = load float, float* %arrayidx16.4, align 16, !tbaa !4
  %arrayidx18.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %24 = load float, float* %arrayidx18.4, align 16, !tbaa !4
  %mul21.4 = fmul float %24, %24
  br label %for.inc.4

for.inc.4:                                        ; preds = %L20.4, %if.end.4
  %mul21.4.sink = phi float [ %mul21.4, %L20.4 ], [ %mul.4, %if.end.4 ]
  %.sink53 = phi float [ %23, %L20.4 ], [ %20, %if.end.4 ]
  %b.sink52 = phi [32000 x float]* [ @b, %L20.4 ], [ @a, %if.end.4 ]
  %add22.4 = fadd float %.sink53, %mul21.4.sink
  %arrayidx24.4 = getelementptr inbounds [32000 x float], [32000 x float]* %b.sink52, i64 0, i64 %indvars.iv.next.3
  store float %add22.4, float* %arrayidx24.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp olt float %25, 0.000000e+00
  br i1 %cmp6.5, label %L20.5, label %if.end.5

if.end.5:                                         ; preds = %for.inc.4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %26 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %27 = load float, float* %arrayidx12.5, align 4, !tbaa !4
  %mul.5 = fmul float %26, %27
  br label %for.inc.5

L20.5:                                            ; preds = %for.inc.4
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %28 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %arrayidx18.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %29 = load float, float* %arrayidx18.5, align 4, !tbaa !4
  %mul21.5 = fmul float %29, %29
  br label %for.inc.5

for.inc.5:                                        ; preds = %L20.5, %if.end.5
  %mul21.5.sink = phi float [ %mul21.5, %L20.5 ], [ %mul.5, %if.end.5 ]
  %.sink55 = phi float [ %28, %L20.5 ], [ %25, %if.end.5 ]
  %b.sink54 = phi [32000 x float]* [ @b, %L20.5 ], [ @a, %if.end.5 ]
  %add22.5 = fadd float %.sink55, %mul21.5.sink
  %arrayidx24.5 = getelementptr inbounds [32000 x float], [32000 x float]* %b.sink54, i64 0, i64 %indvars.iv.next.4
  store float %add22.5, float* %arrayidx24.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %30 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp olt float %30, 0.000000e+00
  br i1 %cmp6.6, label %L20.6, label %if.end.6

if.end.6:                                         ; preds = %for.inc.5
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %31 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %32 = load float, float* %arrayidx12.6, align 8, !tbaa !4
  %mul.6 = fmul float %31, %32
  br label %for.inc.6

L20.6:                                            ; preds = %for.inc.5
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %33 = load float, float* %arrayidx16.6, align 8, !tbaa !4
  %arrayidx18.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %34 = load float, float* %arrayidx18.6, align 8, !tbaa !4
  %mul21.6 = fmul float %34, %34
  br label %for.inc.6

for.inc.6:                                        ; preds = %L20.6, %if.end.6
  %mul21.6.sink = phi float [ %mul21.6, %L20.6 ], [ %mul.6, %if.end.6 ]
  %.sink57 = phi float [ %33, %L20.6 ], [ %30, %if.end.6 ]
  %b.sink56 = phi [32000 x float]* [ @b, %L20.6 ], [ @a, %if.end.6 ]
  %add22.6 = fadd float %.sink57, %mul21.6.sink
  %arrayidx24.6 = getelementptr inbounds [32000 x float], [32000 x float]* %b.sink56, i64 0, i64 %indvars.iv.next.5
  store float %add22.6, float* %arrayidx24.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !95

for.body5.7:                                      ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %35 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp olt float %35, 0.000000e+00
  br i1 %cmp6.7, label %L20.7, label %if.end.7

if.end.7:                                         ; preds = %for.body5.7
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %36 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %37 = load float, float* %arrayidx12.7, align 4, !tbaa !4
  %mul.7 = fmul float %36, %37
  br label %for.inc.7

L20.7:                                            ; preds = %for.body5.7
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %38 = load float, float* %arrayidx16.7, align 4, !tbaa !4
  %arrayidx18.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %39 = load float, float* %arrayidx18.7, align 4, !tbaa !4
  %mul21.7 = fmul float %39, %39
  br label %for.inc.7

for.inc.7:                                        ; preds = %L20.7, %if.end.7
  %mul21.7.sink = phi float [ %mul21.7, %L20.7 ], [ %mul.7, %if.end.7 ]
  %.sink59 = phi float [ %38, %L20.7 ], [ %35, %if.end.7 ]
  %b.sink58 = phi [32000 x float]* [ @b, %L20.7 ], [ @a, %if.end.7 ]
  %add22.7 = fadd float %.sink59, %mul21.7.sink
  %arrayidx24.7 = getelementptr inbounds [32000 x float], [32000 x float]* %b.sink58, i64 0, i64 %indvars.iv.next.6
  store float %add22.7, float* %arrayidx24.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !96
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s162(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %2 = load i32, i32* %1, align 4, !tbaa !97
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s162, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %cmp2 = icmp sgt i32 %2, 0
  %3 = sext i32 %2 to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call18 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call19 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s162, i64 0, i64 0)) #11
  ret float %call19

for.body:                                         ; preds = %if.end, %entry
  %nl.033 = phi i32 [ 0, %entry ], [ %inc16, %if.end ]
  br i1 %cmp2, label %for.body6.preheader, label %if.end

for.body6.preheader:                              ; preds = %for.body
  br label %for.body6

for.body6:                                        ; preds = %for.body6.preheader, %for.body6.7
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body6.7 ], [ 0, %for.body6.preheader ]
  %4 = add nsw i64 %indvars.iv, %3
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %4
  %5 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %6 = load float, float* %arrayidx8, align 32, !tbaa !4
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %7 = load float, float* %arrayidx10, align 32, !tbaa !4
  %mul = fmul float %6, %7
  %add11 = fadd float %5, %mul
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add11, float* %arrayidx13, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %8 = add nsw i64 %indvars.iv.next, %3
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %8
  %9 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %10 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %11 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %mul.1 = fmul float %10, %11
  %add11.1 = fadd float %9, %mul.1
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add11.1, float* %arrayidx13.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %12 = add nsw i64 %indvars.iv.next.1, %3
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %12
  %13 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %14 = load float, float* %arrayidx8.2, align 8, !tbaa !4
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %15 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %mul.2 = fmul float %14, %15
  %add11.2 = fadd float %13, %mul.2
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add11.2, float* %arrayidx13.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %16 = add nsw i64 %indvars.iv.next.2, %3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %16
  %17 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %18 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %19 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %mul.3 = fmul float %18, %19
  %add11.3 = fadd float %17, %mul.3
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add11.3, float* %arrayidx13.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %20 = add nsw i64 %indvars.iv.next.3, %3
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
  %21 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %22 = load float, float* %arrayidx8.4, align 16, !tbaa !4
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %23 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %mul.4 = fmul float %22, %23
  %add11.4 = fadd float %21, %mul.4
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add11.4, float* %arrayidx13.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %24 = add nsw i64 %indvars.iv.next.4, %3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %24
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %26 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %27 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %mul.5 = fmul float %26, %27
  %add11.5 = fadd float %25, %mul.5
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add11.5, float* %arrayidx13.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %28 = add nsw i64 %indvars.iv.next.5, %3
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
  %29 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %30 = load float, float* %arrayidx8.6, align 8, !tbaa !4
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %31 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %mul.6 = fmul float %30, %31
  %add11.6 = fadd float %29, %mul.6
  %arrayidx13.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add11.6, float* %arrayidx13.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %if.end.loopexit, label %for.body6.7, !llvm.loop !98

if.end.loopexit:                                  ; preds = %for.body6
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %for.body
  %call14 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc16 = add nuw nsw i32 %nl.033, 1
  %exitcond.not = icmp eq i32 %inc16, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !99

for.body6.7:                                      ; preds = %for.body6
  %32 = add nsw i64 %indvars.iv.next.6, %3
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %32
  %33 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %34 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %35 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %mul.7 = fmul float %34, %35
  %add11.7 = fadd float %33, %mul.7
  %arrayidx13.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add11.7, float* %arrayidx13.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body6, !llvm.loop !100
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s171(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %2 = load i32, i32* %1, align 4, !tbaa !97
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s171, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %3 = sext i32 %2 to i64
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.025 = phi i32 [ 0, %entry ], [ %inc11, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call13 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call14 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s171, i64 0, i64 0)) #11
  ret float %call14

for.cond.cleanup4:                                ; preds = %for.body5
  %call9 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc11 = add nuw nsw i32 %nl.025, 1
  %exitcond.not = icmp eq i32 %inc11, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !101

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %4 = load float, float* %arrayidx, align 32, !tbaa !4
  %5 = mul nsw i64 %indvar, %3
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %5
  %6 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add = fadd float %4, %6
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !102
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s172(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to %struct.anon.0**
  %1 = load %struct.anon.0*, %struct.anon.0** %0, align 8, !tbaa !49
  %a = getelementptr inbounds %struct.anon.0, %struct.anon.0* %1, i64 0, i32 0
  %2 = load i32, i32* %a, align 4, !tbaa !54
  %b = getelementptr inbounds %struct.anon.0, %struct.anon.0* %1, i64 0, i32 1
  %3 = load i32, i32* %b, align 4, !tbaa !57
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s172, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %cmp326 = icmp slt i32 %2, 32001
  %4 = add i32 %2, -1
  %5 = sext i32 %4 to i64
  %6 = sext i32 %3 to i64
  %7 = add i32 %2, %3
  %8 = add i32 %7, -1
  %9 = icmp sgt i32 %8, 32000
  %smax = select i1 %9, i32 %8, i32 32000
  %10 = sub i32 %smax, %2
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call12 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call13 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s172, i64 0, i64 0)) #11
  ret float %call13

for.body:                                         ; preds = %for.cond.cleanup4, %entry
  %nl.028 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
  br i1 %cmp326, label %for.body5.preheader, label %for.cond.cleanup4

for.body5.preheader:                              ; preds = %for.body
  %11 = udiv i32 %10, %3
  %12 = add i32 %11, 1
  %xtraiter = and i32 %12, 7
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body5.prol.loopexit, label %for.body5.prol.preheader

for.body5.prol.preheader:                         ; preds = %for.body5.preheader
  br label %for.body5.prol

for.body5.prol:                                   ; preds = %for.body5.prol.preheader, %for.body5.prol
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %for.body5.prol ], [ %5, %for.body5.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body5.prol ], [ %xtraiter, %for.body5.prol.preheader ]
  %arrayidx.prol = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.prol
  %13 = load float, float* %arrayidx.prol, align 4, !tbaa !4
  %arrayidx7.prol = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.prol
  %14 = load float, float* %arrayidx7.prol, align 4, !tbaa !4
  %add.prol = fadd float %13, %14
  store float %add.prol, float* %arrayidx7.prol, align 4, !tbaa !4
  %indvars.iv.next.prol = add i64 %indvars.iv.prol, %6
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body5.prol.loopexit.loopexit, label %for.body5.prol, !llvm.loop !103

for.body5.prol.loopexit.loopexit:                 ; preds = %for.body5.prol
  %indvars.iv.next.prol.lcssa = phi i64 [ %indvars.iv.next.prol, %for.body5.prol ]
  br label %for.body5.prol.loopexit

for.body5.prol.loopexit:                          ; preds = %for.body5.prol.loopexit.loopexit, %for.body5.preheader
  %indvars.iv.unr = phi i64 [ %5, %for.body5.preheader ], [ %indvars.iv.next.prol.lcssa, %for.body5.prol.loopexit.loopexit ]
  %15 = icmp ult i32 %11, 7
  br i1 %15, label %for.cond.cleanup4, label %for.body5.preheader1

for.body5.preheader1:                             ; preds = %for.body5.prol.loopexit
  br label %for.body5

for.cond.cleanup4.loopexit:                       ; preds = %for.body5
  br label %for.cond.cleanup4

for.cond.cleanup4:                                ; preds = %for.cond.cleanup4.loopexit, %for.body5.prol.loopexit, %for.body
  %call9 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc = add nuw nsw i32 %nl.028, 1
  %exitcond.not = icmp eq i32 %inc, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !104

for.body5:                                        ; preds = %for.body5.preheader1, %for.body5
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body5 ], [ %indvars.iv.unr, %for.body5.preheader1 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %16 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %17 = load float, float* %arrayidx7, align 4, !tbaa !4
  %add = fadd float %16, %17
  store float %add, float* %arrayidx7, align 4, !tbaa !4
  %indvars.iv.next = add i64 %indvars.iv, %6
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %18 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %19 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add.1 = fadd float %18, %19
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add i64 %indvars.iv.next, %6
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %20 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %21 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %add.2 = fadd float %20, %21
  store float %add.2, float* %arrayidx7.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add i64 %indvars.iv.next.1, %6
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %22 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %23 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add.3 = fadd float %22, %23
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add i64 %indvars.iv.next.2, %6
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %24 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %25 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %add.4 = fadd float %24, %25
  store float %add.4, float* %arrayidx7.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add i64 %indvars.iv.next.3, %6
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %26 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %27 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add.5 = fadd float %26, %27
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add i64 %indvars.iv.next.4, %6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %28 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %29 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %add.6 = fadd float %28, %29
  store float %add.6, float* %arrayidx7.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add i64 %indvars.iv.next.5, %6
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %31 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add.7 = fadd float %30, %31
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %6
  %cmp3.7 = icmp slt i64 %indvars.iv.next.7, 32000
  br i1 %cmp3.7, label %for.body5, label %for.cond.cleanup4.loopexit, !llvm.loop !105
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s173(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s173, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.027 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s173, i64 0, i64 0)) #11
  ret float %call16

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.027, 1
  %exitcond.not = icmp eq i32 %inc13, 1000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !106

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add = fadd float %0, %1
  %2 = add nuw nsw i64 %indvars.iv, 16000
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %2
  store float %add, float* %arrayidx10, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add.1 = fadd float %3, %4
  %5 = add nuw nsw i64 %indvars.iv, 16001
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %5
  store float %add.1, float* %arrayidx10.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %add.2 = fadd float %6, %7
  %8 = add nuw nsw i64 %indvars.iv, 16002
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %8
  store float %add.2, float* %arrayidx10.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add.3 = fadd float %9, %10
  %11 = add nuw nsw i64 %indvars.iv, 16003
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %11
  store float %add.3, float* %arrayidx10.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %add.4 = fadd float %12, %13
  %14 = add nuw nsw i64 %indvars.iv, 16004
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %14
  store float %add.4, float* %arrayidx10.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add.5 = fadd float %15, %16
  %17 = add nuw nsw i64 %indvars.iv, 16005
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %17
  store float %add.5, float* %arrayidx10.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %add.6 = fadd float %18, %19
  %20 = add nuw nsw i64 %indvars.iv, 16006
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
  store float %add.6, float* %arrayidx10.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add.7 = fadd float %21, %22
  %23 = add nuw nsw i64 %indvars.iv, 16007
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %23
  store float %add.7, float* %arrayidx10.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 16000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !107
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s174(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %2 = load i32, i32* %1, align 4, !tbaa !97
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s174, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %cmp328 = icmp sgt i32 %2, 0
  %3 = sext i32 %2 to i64
  %wide.trip.count = zext i32 %2 to i64
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.030 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
  br i1 %cmp328, label %for.body5.preheader, label %for.cond.cleanup4

for.body5.preheader:                              ; preds = %for.cond2.preheader
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s174, i64 0, i64 0)) #11
  ret float %call16

for.cond.cleanup4.loopexit:                       ; preds = %for.body5
  br label %for.cond.cleanup4

for.cond.cleanup4:                                ; preds = %for.cond.cleanup4.loopexit, %for.cond2.preheader
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.030, 1
  %exitcond32.not = icmp eq i32 %inc13, 1000000
  br i1 %exitcond32.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !108

for.body5:                                        ; preds = %for.body5.preheader, %for.body5
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.body5.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %5 = load float, float* %arrayidx7, align 4, !tbaa !4
  %add = fadd float %4, %5
  %6 = add nsw i64 %indvars.iv, %3
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %6
  store float %add, float* %arrayidx10, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup4.loopexit, label %for.body5, !llvm.loop !109
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s175(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %2 = load i32, i32* %1, align 4, !tbaa !97
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s175, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %3 = sext i32 %2 to i64
  %4 = udiv i32 31998, %2
  %5 = add nuw nsw i32 %4, 1
  %xtraiter = and i32 %5, 7
  %6 = icmp ugt i32 %2, 4571
  %unroll_iter = and i32 %5, 65528
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.030 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
  br i1 %6, label %for.cond.cleanup4.unr-lcssa, label %for.body5.preheader

for.body5.preheader:                              ; preds = %for.cond2.preheader
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call16 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call17 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s175, i64 0, i64 0)) #11
  ret float %call17

for.cond.cleanup4.unr-lcssa.loopexit:             ; preds = %for.body5
  %indvars.iv.next.7.lcssa = phi i64 [ %indvars.iv.next.7, %for.body5 ]
  br label %for.cond.cleanup4.unr-lcssa

for.cond.cleanup4.unr-lcssa:                      ; preds = %for.cond.cleanup4.unr-lcssa.loopexit, %for.cond2.preheader
  %indvars.iv.unr = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7.lcssa, %for.cond.cleanup4.unr-lcssa.loopexit ]
  br i1 %lcmp.mod.not, label %for.cond.cleanup4, label %for.body5.epil.preheader

for.body5.epil.preheader:                         ; preds = %for.cond.cleanup4.unr-lcssa
  br label %for.body5.epil

for.body5.epil:                                   ; preds = %for.body5.epil.preheader, %for.body5.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body5.epil ], [ %indvars.iv.unr, %for.body5.epil.preheader ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body5.epil ], [ %xtraiter, %for.body5.epil.preheader ]
  %indvars.iv.next.epil = add nsw i64 %indvars.iv.epil, %3
  %arrayidx.epil = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.epil
  %7 = load float, float* %arrayidx.epil, align 4, !tbaa !4
  %arrayidx7.epil = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.epil
  %8 = load float, float* %arrayidx7.epil, align 4, !tbaa !4
  %add8.epil = fadd float %7, %8
  %arrayidx10.epil = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.epil
  store float %add8.epil, float* %arrayidx10.epil, align 4, !tbaa !4
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup4.loopexit, label %for.body5.epil, !llvm.loop !110

for.cond.cleanup4.loopexit:                       ; preds = %for.body5.epil
  br label %for.cond.cleanup4

for.cond.cleanup4:                                ; preds = %for.cond.cleanup4.loopexit, %for.cond.cleanup4.unr-lcssa
  %call12 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc14 = add nuw nsw i32 %nl.030, 1
  %exitcond.not = icmp eq i32 %inc14, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !111

for.body5:                                        ; preds = %for.body5.preheader, %for.body5
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body5 ], [ 0, %for.body5.preheader ]
  %niter = phi i32 [ %niter.nsub.7, %for.body5 ], [ %unroll_iter, %for.body5.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, %3
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %9 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %10 = load float, float* %arrayidx7, align 4, !tbaa !4
  %add8 = fadd float %9, %10
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add8, float* %arrayidx10, align 4, !tbaa !4
  %indvars.iv.next.1 = add nsw i64 %indvars.iv.next, %3
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %12 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add8.1 = fadd float %11, %12
  store float %add8.1, float* %arrayidx, align 4, !tbaa !4
  %indvars.iv.next.2 = add nsw i64 %indvars.iv.next.1, %3
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %14 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %add8.2 = fadd float %13, %14
  store float %add8.2, float* %arrayidx.1, align 4, !tbaa !4
  %indvars.iv.next.3 = add nsw i64 %indvars.iv.next.2, %3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %16 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add8.3 = fadd float %15, %16
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !4
  %indvars.iv.next.4 = add nsw i64 %indvars.iv.next.3, %3
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %add8.4 = fadd float %17, %18
  store float %add8.4, float* %arrayidx.3, align 4, !tbaa !4
  %indvars.iv.next.5 = add nsw i64 %indvars.iv.next.4, %3
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %20 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add8.5 = fadd float %19, %20
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !4
  %indvars.iv.next.6 = add nsw i64 %indvars.iv.next.5, %3
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %21 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %22 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %add8.6 = fadd float %21, %22
  store float %add8.6, float* %arrayidx.5, align 4, !tbaa !4
  %indvars.iv.next.7 = add nsw i64 %indvars.iv.next.6, %3
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  %23 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %24 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add8.7 = fadd float %23, %24
  store float %add8.7, float* %arrayidx.6, align 4, !tbaa !4
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7.not = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7.not, label %for.cond.cleanup4.unr-lcssa.loopexit, label %for.body5, !llvm.loop !112
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s176(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s176, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.040 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call23 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call24 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s176, i64 0, i64 0)) #11
  ret float %call24

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv42 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next43, %for.cond.cleanup8 ]
  %0 = sub nuw nsw i64 15999, %indvars.iv42
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv42
  %1 = load float, float* %arrayidx12, align 4, !tbaa !4
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call19 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc21 = add nuw nsw i32 %nl.040, 1
  %exitcond45.not = icmp eq i32 %inc21, 12
  br i1 %exitcond45.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !113

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next43 = add nuw nsw i64 %indvars.iv42, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next43, 16000
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !114

for.body9:                                        ; preds = %for.body9, %for.cond6.preheader
  %indvar = phi i64 [ %indvar.next, %for.body9 ], [ 0, %for.cond6.preheader ]
  %2 = add nuw nsw i64 %0, %indvar
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %2
  %3 = load float, float* %arrayidx, align 4, !tbaa !4
  %mul = fmul float %3, %1
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %4 = load float, float* %arrayidx14, align 32, !tbaa !4
  %add15 = fadd float %4, %mul
  store float %add15, float* %arrayidx14, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 15999
  br i1 %exitcond, label %for.cond.cleanup8, label %for.body9, !llvm.loop !115
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s211(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s211, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.043 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call27 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call28 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s211, i64 0, i64 0)) #11
  ret float %call28

for.cond.cleanup4:                                ; preds = %for.body5
  %call23 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc25 = add nuw nsw i32 %nl.043, 1
  %exitcond.not = icmp eq i32 %inc25, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !116

for.body5:                                        ; preds = %for.body5.6, %for.cond2.preheader
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %sub20.7, %for.body5.6 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.6 ]
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 4, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx9, align 4, !tbaa !4
  %mul = fmul float %1, %2
  %add = fadd float %0, %mul
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx11, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx14, align 4, !tbaa !4
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx16, align 4, !tbaa !4
  %mul19 = fmul float %2, %4
  %sub20 = fsub float %3, %mul19
  %arrayidx22 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  store float %sub20, float* %arrayidx22, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %mul.1 = fmul float %5, %6
  %add.1 = fadd float %sub20, %mul.1
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %mul19.1 = fmul float %6, %8
  %sub20.1 = fsub float %7, %mul19.1
  store float %sub20.1, float* %arrayidx14, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx9.2, align 4, !tbaa !4
  %mul.2 = fmul float %9, %10
  %add.2 = fadd float %sub20.1, %mul.2
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx11.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx14.2, align 4, !tbaa !4
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %12 = load float, float* %arrayidx16.2, align 4, !tbaa !4
  %mul19.2 = fmul float %10, %12
  %sub20.2 = fsub float %11, %mul19.2
  store float %sub20.2, float* %arrayidx14.1, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %mul.3 = fmul float %13, %14
  %add.3 = fadd float %sub20.2, %mul.3
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %15 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %16 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %mul19.3 = fmul float %14, %16
  %sub20.3 = fsub float %15, %mul19.3
  store float %sub20.3, float* %arrayidx14.2, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx9.4, align 4, !tbaa !4
  %mul.4 = fmul float %17, %18
  %add.4 = fadd float %sub20.3, %mul.4
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx11.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %19 = load float, float* %arrayidx14.4, align 4, !tbaa !4
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %20 = load float, float* %arrayidx16.4, align 4, !tbaa !4
  %mul19.4 = fmul float %18, %20
  %sub20.4 = fsub float %19, %mul19.4
  store float %sub20.4, float* %arrayidx14.3, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %mul.5 = fmul float %21, %22
  %add.5 = fadd float %sub20.4, %mul.5
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %23 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %24 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %mul19.5 = fmul float %22, %24
  %sub20.5 = fsub float %23, %mul19.5
  store float %sub20.5, float* %arrayidx14.4, align 4, !tbaa !4
  %exitcond.5.not = icmp eq i64 %indvars.iv.next.5, 31999
  br i1 %exitcond.5.not, label %for.cond.cleanup4, label %for.body5.6, !llvm.loop !117

for.body5.6:                                      ; preds = %for.body5
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx9.6, align 4, !tbaa !4
  %mul.6 = fmul float %25, %26
  %add.6 = fadd float %sub20.5, %mul.6
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %27 = load float, float* %arrayidx14.6, align 4, !tbaa !4
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %28 = load float, float* %arrayidx16.6, align 4, !tbaa !4
  %mul19.6 = fmul float %26, %28
  %sub20.6 = fsub float %27, %mul19.6
  store float %sub20.6, float* %arrayidx14.5, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %29 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %mul.7 = fmul float %29, %30
  %add.7 = fadd float %sub20.6, %mul.7
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.7
  %31 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %32 = load float, float* %arrayidx16.7, align 4, !tbaa !4
  %mul19.7 = fmul float %30, %32
  %sub20.7 = fsub float %31, %mul19.7
  store float %sub20.7, float* %arrayidx14.6, align 4, !tbaa !4
  br label %for.body5, !llvm.loop !118
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s212(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s212, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.033 = phi i32 [ 0, %entry ], [ %inc18, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call20 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call21 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s212, i64 0, i64 0)) #11
  ret float %call21

for.cond.cleanup4:                                ; preds = %for.body5
  %call16 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc18 = add nuw nsw i32 %nl.033, 1
  %exitcond.not = icmp eq i32 %inc18, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !119

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %30, %for.body5.7 ]
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %mul = fmul float %1, %0
  store float %mul, float* %arrayidx7, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx9, align 4, !tbaa !4
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx11, align 32, !tbaa !4
  %mul12 = fmul float %2, %3
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx14, align 32, !tbaa !4
  %add15 = fadd float %4, %mul12
  store float %add15, float* %arrayidx14, align 32, !tbaa !4
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %mul.1 = fmul float %5, %2
  store float %mul.1, float* %arrayidx9, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx9.1, align 8, !tbaa !4
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %mul12.1 = fmul float %6, %7
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %add15.1 = fadd float %8, %mul12.1
  store float %add15.1, float* %arrayidx14.1, align 4, !tbaa !4
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %mul.2 = fmul float %9, %6
  store float %mul.2, float* %arrayidx9.1, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx9.2, align 4, !tbaa !4
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx11.2, align 8, !tbaa !4
  %mul12.2 = fmul float %10, %11
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %12 = load float, float* %arrayidx14.2, align 8, !tbaa !4
  %add15.2 = fadd float %12, %mul12.2
  store float %add15.2, float* %arrayidx14.2, align 8, !tbaa !4
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %mul.3 = fmul float %13, %10
  store float %mul.3, float* %arrayidx9.2, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx9.3, align 16, !tbaa !4
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %mul12.3 = fmul float %14, %15
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %16 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %add15.3 = fadd float %16, %mul12.3
  store float %add15.3, float* %arrayidx14.3, align 4, !tbaa !4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %mul.4 = fmul float %17, %14
  store float %mul.4, float* %arrayidx9.3, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %18 = load float, float* %arrayidx9.4, align 4, !tbaa !4
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx11.4, align 16, !tbaa !4
  %mul12.4 = fmul float %18, %19
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %20 = load float, float* %arrayidx14.4, align 16, !tbaa !4
  %add15.4 = fadd float %20, %mul12.4
  store float %add15.4, float* %arrayidx14.4, align 16, !tbaa !4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %mul.5 = fmul float %21, %18
  store float %mul.5, float* %arrayidx9.4, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %22 = load float, float* %arrayidx9.5, align 8, !tbaa !4
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %23 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %mul12.5 = fmul float %22, %23
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %24 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %add15.5 = fadd float %24, %mul12.5
  store float %add15.5, float* %arrayidx14.5, align 4, !tbaa !4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %mul.6 = fmul float %25, %22
  store float %mul.6, float* %arrayidx9.5, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %26 = load float, float* %arrayidx9.6, align 4, !tbaa !4
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %27 = load float, float* %arrayidx11.6, align 8, !tbaa !4
  %mul12.6 = fmul float %26, %27
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %28 = load float, float* %arrayidx14.6, align 8, !tbaa !4
  %add15.6 = fadd float %28, %mul12.6
  store float %add15.6, float* %arrayidx14.6, align 8, !tbaa !4
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !120

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %29 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %mul.7 = fmul float %29, %26
  store float %mul.7, float* %arrayidx9.6, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  %30 = load float, float* %arrayidx9.7, align 32, !tbaa !4
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %31 = load float, float* %arrayidx11.7, align 4, !tbaa !4
  %mul12.7 = fmul float %30, %31
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %32 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %add15.7 = fadd float %32, %mul12.7
  store float %add15.7, float* %arrayidx14.7, align 4, !tbaa !4
  br label %for.body5, !llvm.loop !121
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1213(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1213, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.035 = phi i32 [ 0, %entry ], [ %inc19, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call21 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call22 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1213, i64 0, i64 0)) #11
  ret float %call22

for.cond.cleanup4:                                ; preds = %for.body5
  %call17 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc19 = add nuw nsw i32 %nl.035, 1
  %exitcond.not = icmp eq i32 %inc19, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !122

for.body5:                                        ; preds = %for.body5.6, %for.cond2.preheader
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %mul.7, %for.body5.6 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.6 ]
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 4, !tbaa !4
  %add = fadd float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx9, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx12, align 4, !tbaa !4
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx14, align 4, !tbaa !4
  %mul = fmul float %2, %3
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  store float %mul, float* %arrayidx16, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add.1 = fadd float %mul, %4
  store float %add.1, float* %arrayidx12, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %mul.1 = fmul float %5, %6
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  store float %mul.1, float* %arrayidx16.1, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %add.2 = fadd float %mul.1, %7
  store float %add.2, float* %arrayidx12.1, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %8 = load float, float* %arrayidx12.2, align 4, !tbaa !4
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx14.2, align 4, !tbaa !4
  %mul.2 = fmul float %8, %9
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  store float %mul.2, float* %arrayidx16.2, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add.3 = fadd float %mul.2, %10
  store float %add.3, float* %arrayidx12.2, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %11 = load float, float* %arrayidx12.3, align 4, !tbaa !4
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %mul.3 = fmul float %11, %12
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  store float %mul.3, float* %arrayidx16.3, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %add.4 = fadd float %mul.3, %13
  store float %add.4, float* %arrayidx12.3, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %14 = load float, float* %arrayidx12.4, align 4, !tbaa !4
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %15 = load float, float* %arrayidx14.4, align 4, !tbaa !4
  %mul.4 = fmul float %14, %15
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  store float %mul.4, float* %arrayidx16.4, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add.5 = fadd float %mul.4, %16
  store float %add.5, float* %arrayidx12.4, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %17 = load float, float* %arrayidx12.5, align 4, !tbaa !4
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %18 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %mul.5 = fmul float %17, %18
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  store float %mul.5, float* %arrayidx16.5, align 4, !tbaa !4
  %exitcond.5.not = icmp eq i64 %indvars.iv.next.5, 31999
  br i1 %exitcond.5.not, label %for.cond.cleanup4, label %for.body5.6, !llvm.loop !123

for.body5.6:                                      ; preds = %for.body5
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %add.6 = fadd float %mul.5, %19
  store float %add.6, float* %arrayidx12.5, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %20 = load float, float* %arrayidx12.6, align 4, !tbaa !4
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %21 = load float, float* %arrayidx14.6, align 4, !tbaa !4
  %mul.6 = fmul float %20, %21
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  store float %mul.6, float* %arrayidx16.6, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add.7 = fadd float %mul.6, %22
  store float %add.7, float* %arrayidx12.6, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  %23 = load float, float* %arrayidx12.7, align 4, !tbaa !4
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %24 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %mul.7 = fmul float %23, %24
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  store float %mul.7, float* %arrayidx16.7, align 4, !tbaa !4
  br label %for.body5, !llvm.loop !124
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s221(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s221, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.039 = phi i32 [ 0, %entry ], [ %inc22, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call24 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call25 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s221, i64 0, i64 0)) #11
  ret float %call25

for.cond.cleanup4:                                ; preds = %for.body5
  %call20 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc22 = add nuw nsw i32 %nl.039, 1
  %exitcond.not = icmp eq i32 %inc22, 50000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !125

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add17.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx7, align 4, !tbaa !4
  %mul = fmul float %1, %2
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx9, align 4, !tbaa !4
  %add = fadd float %3, %mul
  store float %add, float* %arrayidx9, align 4, !tbaa !4
  %add14 = fadd float %add, %0
  %add17 = fadd float %2, %add14
  %arrayidx19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  store float %add17, float* %arrayidx19, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %mul.1 = fmul float %4, %5
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %add.1 = fadd float %6, %mul.1
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  %add14.1 = fadd float %add.1, %add17
  %add17.1 = fadd float %5, %add14.1
  %arrayidx19.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  store float %add17.1, float* %arrayidx19.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %mul.2 = fmul float %7, %8
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx9.2, align 4, !tbaa !4
  %add.2 = fadd float %9, %mul.2
  store float %add.2, float* %arrayidx9.2, align 4, !tbaa !4
  %add14.2 = fadd float %add.2, %add17.1
  %add17.2 = fadd float %8, %add14.2
  %arrayidx19.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  store float %add17.2, float* %arrayidx19.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %mul.3 = fmul float %10, %11
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %add.3 = fadd float %12, %mul.3
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
  %add14.3 = fadd float %add.3, %add17.2
  %add17.3 = fadd float %11, %add14.3
  %arrayidx19.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  store float %add17.3, float* %arrayidx19.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %mul.4 = fmul float %13, %14
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %15 = load float, float* %arrayidx9.4, align 4, !tbaa !4
  %add.4 = fadd float %15, %mul.4
  store float %add.4, float* %arrayidx9.4, align 4, !tbaa !4
  %add14.4 = fadd float %add.4, %add17.3
  %add17.4 = fadd float %14, %add14.4
  %arrayidx19.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  store float %add17.4, float* %arrayidx19.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %mul.5 = fmul float %16, %17
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %18 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %add.5 = fadd float %18, %mul.5
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
  %add14.5 = fadd float %add.5, %add17.4
  %add17.5 = fadd float %17, %add14.5
  %arrayidx19.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  store float %add17.5, float* %arrayidx19.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %20 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %mul.6 = fmul float %19, %20
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %21 = load float, float* %arrayidx9.6, align 4, !tbaa !4
  %add.6 = fadd float %21, %mul.6
  store float %add.6, float* %arrayidx9.6, align 4, !tbaa !4
  %add14.6 = fadd float %add.6, %add17.5
  %add17.6 = fadd float %20, %add14.6
  %arrayidx19.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  store float %add17.6, float* %arrayidx19.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 32000
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !126

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %23 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %mul.7 = fmul float %22, %23
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %24 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %add.7 = fadd float %24, %mul.7
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
  %add14.7 = fadd float %add.7, %add17.6
  %add17.7 = fadd float %23, %add14.7
  %arrayidx19.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  store float %add17.7, float* %arrayidx19.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !127
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1221(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1221, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.025 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1221, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.025, 1
  %exitcond.not = icmp eq i32 %inc12, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !128

for.body5:                                        ; preds = %for.body5.4, %for.cond2.preheader
  %indvars.iv = phi i64 [ 4, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.4 ]
  %0 = add nsw i64 %indvars.iv, -4
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %0
  %1 = load float, float* %arrayidx, align 16, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx7, align 16, !tbaa !4
  %add = fadd float %1, %2
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx9, align 16, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %3 = add nsw i64 %indvars.iv, -3
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %3
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add.1 = fadd float %4, %5
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %6 = add nsw i64 %indvars.iv, -2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %6
  %7 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %add.2 = fadd float %7, %8
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %9 = add nsw i64 %indvars.iv, -1
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %9
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add.3 = fadd float %10, %11
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %exitcond.3.not = icmp eq i64 %indvars.iv.next.3, 32000
  br i1 %exitcond.3.not, label %for.cond.cleanup4, label %for.body5.4, !llvm.loop !129

for.body5.4:                                      ; preds = %for.body5
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %12 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %add.4 = fadd float %add, %12
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %13 = or i64 %indvars.iv, 1
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %13
  %14 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %15 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add.5 = fadd float %14, %15
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %16 = or i64 %indvars.iv, 2
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %16
  %17 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %18 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %add.6 = fadd float %17, %18
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %19 = or i64 %indvars.iv, 3
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %19
  %20 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %21 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add.7 = fadd float %20, %21
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !130
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s222(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s222, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.047 = phi i32 [ 0, %entry ], [ %inc28, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call30 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call31 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s222, i64 0, i64 0)) #11
  ret float %call31

for.cond.cleanup4:                                ; preds = %for.body5
  %call26 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc28 = add nuw nsw i32 %nl.047, 1
  %exitcond.not = icmp eq i32 %inc28, 50000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !131

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %mul15.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx7, align 4, !tbaa !4
  %mul = fmul float %1, %2
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx9, align 4, !tbaa !4
  %add = fadd float %3, %mul
  %mul15 = fmul float %0, %0
  %arrayidx17 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  store float %mul15, float* %arrayidx17, align 4, !tbaa !4
  %sub25 = fsub float %add, %mul
  store float %sub25, float* %arrayidx9, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %mul.1 = fmul float %4, %5
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %add.1 = fadd float %6, %mul.1
  %mul15.1 = fmul float %mul15, %mul15
  %arrayidx17.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  store float %mul15.1, float* %arrayidx17.1, align 4, !tbaa !4
  %sub25.1 = fsub float %add.1, %mul.1
  store float %sub25.1, float* %arrayidx9.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %mul.2 = fmul float %7, %8
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx9.2, align 4, !tbaa !4
  %add.2 = fadd float %9, %mul.2
  %mul15.2 = fmul float %mul15.1, %mul15.1
  %arrayidx17.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  store float %mul15.2, float* %arrayidx17.2, align 4, !tbaa !4
  %sub25.2 = fsub float %add.2, %mul.2
  store float %sub25.2, float* %arrayidx9.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %mul.3 = fmul float %10, %11
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %add.3 = fadd float %12, %mul.3
  %mul15.3 = fmul float %mul15.2, %mul15.2
  %arrayidx17.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  store float %mul15.3, float* %arrayidx17.3, align 4, !tbaa !4
  %sub25.3 = fsub float %add.3, %mul.3
  store float %sub25.3, float* %arrayidx9.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %mul.4 = fmul float %13, %14
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %15 = load float, float* %arrayidx9.4, align 4, !tbaa !4
  %add.4 = fadd float %15, %mul.4
  %mul15.4 = fmul float %mul15.3, %mul15.3
  %arrayidx17.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  store float %mul15.4, float* %arrayidx17.4, align 4, !tbaa !4
  %sub25.4 = fsub float %add.4, %mul.4
  store float %sub25.4, float* %arrayidx9.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %mul.5 = fmul float %16, %17
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %18 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %add.5 = fadd float %18, %mul.5
  %mul15.5 = fmul float %mul15.4, %mul15.4
  %arrayidx17.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  store float %mul15.5, float* %arrayidx17.5, align 4, !tbaa !4
  %sub25.5 = fsub float %add.5, %mul.5
  store float %sub25.5, float* %arrayidx9.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %20 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %mul.6 = fmul float %19, %20
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %21 = load float, float* %arrayidx9.6, align 4, !tbaa !4
  %add.6 = fadd float %21, %mul.6
  %mul15.6 = fmul float %mul15.5, %mul15.5
  %arrayidx17.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  store float %mul15.6, float* %arrayidx17.6, align 4, !tbaa !4
  %sub25.6 = fsub float %add.6, %mul.6
  store float %sub25.6, float* %arrayidx9.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 32000
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !132

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %23 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %mul.7 = fmul float %22, %23
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %24 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %add.7 = fadd float %24, %mul.7
  %mul15.7 = fmul float %mul15.6, %mul15.6
  %arrayidx17.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  store float %mul15.7, float* %arrayidx17.7, align 4, !tbaa !4
  %sub25.7 = fsub float %add.7, %mul.7
  store float %sub25.7, float* %arrayidx9.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !133
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s231(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s231, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.044 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call27 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call28 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s231, i64 0, i64 0)) #11
  ret float %call28

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv46 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next47, %for.cond.cleanup8 ]
  %arrayidx11.phi.trans.insert = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv46
  %.pre = load float, float* %arrayidx11.phi.trans.insert, align 4, !tbaa !4
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call23 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc25 = add nuw nsw i32 %nl.044, 1
  %exitcond48.not = icmp eq i32 %inc25, 39000
  br i1 %exitcond48.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !134

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next47 = add nuw nsw i64 %indvars.iv46, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next47, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !135

for.body9:                                        ; preds = %for.body9.7, %for.cond6.preheader
  %0 = phi float [ %.pre, %for.cond6.preheader ], [ %add.7, %for.body9.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv46
  %1 = load float, float* %arrayidx15, align 4, !tbaa !4
  %add = fadd float %0, %1
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv46
  store float %add, float* %arrayidx19, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv46
  %2 = load float, float* %arrayidx15.1, align 4, !tbaa !4
  %add.1 = fadd float %add, %2
  %arrayidx19.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv46
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv46
  %3 = load float, float* %arrayidx15.2, align 4, !tbaa !4
  %add.2 = fadd float %add.1, %3
  %arrayidx19.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv46
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv46
  %4 = load float, float* %arrayidx15.3, align 4, !tbaa !4
  %add.3 = fadd float %add.2, %4
  %arrayidx19.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv46
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv46
  %5 = load float, float* %arrayidx15.4, align 4, !tbaa !4
  %add.4 = fadd float %add.3, %5
  %arrayidx19.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv46
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv46
  %6 = load float, float* %arrayidx15.5, align 4, !tbaa !4
  %add.5 = fadd float %add.4, %6
  %arrayidx19.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv46
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv46
  %7 = load float, float* %arrayidx15.6, align 4, !tbaa !4
  %add.6 = fadd float %add.5, %7
  %arrayidx19.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv46
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 256
  br i1 %exitcond.6.not, label %for.cond.cleanup8, label %for.body9.7, !llvm.loop !136

for.body9.7:                                      ; preds = %for.body9
  %arrayidx15.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv46
  %8 = load float, float* %arrayidx15.7, align 4, !tbaa !4
  %add.7 = fadd float %add.6, %8
  %arrayidx19.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv46
  store float %add.7, float* %arrayidx19.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body9, !llvm.loop !137
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s232(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s232, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.052 = phi i32 [ 0, %entry ], [ %inc30, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call32 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call33 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s232, i64 0, i64 0)) #11
  ret float %call33

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv58 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next59, %for.cond.cleanup8 ]
  %indvars.iv56 = phi i64 [ 2, %for.cond2.preheader ], [ %indvars.iv.next57, %for.cond.cleanup8 ]
  %arrayidx11.phi.trans.insert = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv58, i64 0
  %.pre = load float, float* %arrayidx11.phi.trans.insert, align 64, !tbaa !4
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call28 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 1.000000e+00) #11
  %inc30 = add nuw nsw i32 %nl.052, 1
  %exitcond61.not = icmp eq i32 %inc30, 39000
  br i1 %exitcond61.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !138

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next59 = add nuw nsw i64 %indvars.iv58, 1
  %indvars.iv.next57 = add nuw nsw i64 %indvars.iv56, 1
  %exitcond60.not = icmp eq i64 %indvars.iv.next59, 256
  br i1 %exitcond60.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !139

for.body9:                                        ; preds = %for.body9, %for.cond6.preheader
  %0 = phi float [ %.pre, %for.cond6.preheader ], [ %add, %for.body9 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next, %for.body9 ]
  %mul = fmul float %0, %0
  %arrayidx20 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv58, i64 %indvars.iv
  %1 = load float, float* %arrayidx20, align 4, !tbaa !4
  %add = fadd float %mul, %1
  %arrayidx24 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv58, i64 %indvars.iv
  store float %add, float* %arrayidx24, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv56
  br i1 %exitcond.not, label %for.cond.cleanup8, label %for.body9, !llvm.loop !140
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1232(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1232, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.047 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
  br label %for.body9.lr.ph

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call27 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call28 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1232, i64 0, i64 0)) #11
  ret float %call28

for.body9.lr.ph:                                  ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.cond.cleanup8 ]
  %0 = sub nsw i64 255, %indvars.iv
  %1 = trunc i64 %indvars.iv to i32
  %2 = sub i32 0, %1
  %xtraiter = and i32 %2, 7
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body9.prol.loopexit, label %for.body9.prol.preheader

for.body9.prol.preheader:                         ; preds = %for.body9.lr.ph
  br label %for.body9.prol

for.body9.prol:                                   ; preds = %for.body9.prol.preheader, %for.body9.prol
  %indvars.iv48.prol = phi i64 [ %indvars.iv.next49.prol, %for.body9.prol ], [ %indvars.iv, %for.body9.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body9.prol ], [ %xtraiter, %for.body9.prol.preheader ]
  %arrayidx11.prol = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv48.prol, i64 %indvars.iv
  %3 = load float, float* %arrayidx11.prol, align 4, !tbaa !4
  %arrayidx15.prol = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv48.prol, i64 %indvars.iv
  %4 = load float, float* %arrayidx15.prol, align 4, !tbaa !4
  %add.prol = fadd float %3, %4
  %arrayidx19.prol = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv48.prol, i64 %indvars.iv
  store float %add.prol, float* %arrayidx19.prol, align 4, !tbaa !4
  %indvars.iv.next49.prol = add nuw nsw i64 %indvars.iv48.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body9.prol.loopexit.loopexit, label %for.body9.prol, !llvm.loop !141

for.body9.prol.loopexit.loopexit:                 ; preds = %for.body9.prol
  %indvars.iv.next49.prol.lcssa = phi i64 [ %indvars.iv.next49.prol, %for.body9.prol ]
  br label %for.body9.prol.loopexit

for.body9.prol.loopexit:                          ; preds = %for.body9.prol.loopexit.loopexit, %for.body9.lr.ph
  %indvars.iv48.unr = phi i64 [ %indvars.iv, %for.body9.lr.ph ], [ %indvars.iv.next49.prol.lcssa, %for.body9.prol.loopexit.loopexit ]
  %5 = icmp ult i64 %0, 7
  br i1 %5, label %for.cond.cleanup8, label %for.body9.preheader

for.body9.preheader:                              ; preds = %for.body9.prol.loopexit
  %6 = sub i64 248, %indvars.iv48.unr
  %7 = lshr i64 %6, 3
  %8 = shl nuw i64 %7, 3
  %9 = add nuw nsw i64 %8, 7
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call23 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 1.000000e+00) #11
  %inc25 = add nuw nsw i32 %nl.047, 1
  %exitcond50.not = icmp eq i32 %inc25, 39000
  br i1 %exitcond50.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !142

for.cond.cleanup8.loopexit:                       ; preds = %for.body9
  br label %for.cond.cleanup8

for.cond.cleanup8:                                ; preds = %for.cond.cleanup8.loopexit, %for.body9.prol.loopexit
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.body9.lr.ph, !llvm.loop !143

for.body9:                                        ; preds = %for.body9.preheader, %for.body9
  %indvar = phi i64 [ 0, %for.body9.preheader ], [ %indvar.next, %for.body9 ]
  %10 = add i64 %indvars.iv48.unr, %indvar
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %10, i64 %indvars.iv
  %11 = load float, float* %arrayidx11, align 4, !tbaa !4
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %10, i64 %indvars.iv
  %12 = load float, float* %arrayidx15, align 4, !tbaa !4
  %add = fadd float %11, %12
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %10, i64 %indvars.iv
  store float %add, float* %arrayidx19, align 4, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, %9
  br i1 %exitcond, label %for.cond.cleanup8.loopexit, label %for.body9, !llvm.loop !144
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s233(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s233, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.075 = phi i32 [ 0, %entry ], [ %inc47, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call49 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call50 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s233, i64 0, i64 0)) #11
  ret float %call50

for.cond6.preheader:                              ; preds = %for.cond.cleanup23, %for.cond2.preheader
  %indvars.iv80 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next81, %for.cond.cleanup23 ]
  %arrayidx11.phi.trans.insert = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv80
  %.pre = load float, float* %arrayidx11.phi.trans.insert, align 4, !tbaa !4
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup23
  %call45 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc47 = add nuw nsw i32 %nl.075, 1
  %exitcond83.not = icmp eq i32 %inc47, 39000
  br i1 %exitcond83.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !145

for.cond21.preheader:                             ; preds = %for.body9
  %0 = add nsw i64 %indvars.iv80, -1
  br label %for.body24

for.body9:                                        ; preds = %for.body9.7, %for.cond6.preheader
  %1 = phi float [ %.pre, %for.cond6.preheader ], [ %add.7, %for.body9.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv, i64 %indvars.iv80
  %2 = load float, float* %arrayidx15, align 4, !tbaa !4
  %add = fadd float %1, %2
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv80
  store float %add, float* %arrayidx19, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next, i64 %indvars.iv80
  %3 = load float, float* %arrayidx15.1, align 4, !tbaa !4
  %add.1 = fadd float %add, %3
  %arrayidx19.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv80
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv80
  %4 = load float, float* %arrayidx15.2, align 4, !tbaa !4
  %add.2 = fadd float %add.1, %4
  %arrayidx19.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv80
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv80
  %5 = load float, float* %arrayidx15.3, align 4, !tbaa !4
  %add.3 = fadd float %add.2, %5
  %arrayidx19.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv80
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv80
  %6 = load float, float* %arrayidx15.4, align 4, !tbaa !4
  %add.4 = fadd float %add.3, %6
  %arrayidx19.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv80
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv80
  %7 = load float, float* %arrayidx15.5, align 4, !tbaa !4
  %add.5 = fadd float %add.4, %7
  %arrayidx19.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv80
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv80
  %8 = load float, float* %arrayidx15.6, align 4, !tbaa !4
  %add.6 = fadd float %add.5, %8
  %arrayidx19.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv80
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 256
  br i1 %exitcond.6.not, label %for.cond21.preheader, label %for.body9.7, !llvm.loop !146

for.cond.cleanup23:                               ; preds = %for.body24
  %indvars.iv.next81 = add nuw nsw i64 %indvars.iv80, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next81, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !147

for.body24:                                       ; preds = %for.body24.7, %for.cond21.preheader
  %indvars.iv77 = phi i64 [ 1, %for.cond21.preheader ], [ %indvars.iv.next78.7, %for.body24.7 ]
  %arrayidx29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv77, i64 %0
  %9 = load float, float* %arrayidx29, align 4, !tbaa !4
  %arrayidx33 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv77, i64 %indvars.iv80
  %10 = load float, float* %arrayidx33, align 4, !tbaa !4
  %add34 = fadd float %9, %10
  %arrayidx38 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv77, i64 %indvars.iv80
  store float %add34, float* %arrayidx38, align 4, !tbaa !4
  %indvars.iv.next78 = add nuw nsw i64 %indvars.iv77, 1
  %arrayidx29.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78, i64 %0
  %11 = load float, float* %arrayidx29.1, align 4, !tbaa !4
  %arrayidx33.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next78, i64 %indvars.iv80
  %12 = load float, float* %arrayidx33.1, align 4, !tbaa !4
  %add34.1 = fadd float %11, %12
  %arrayidx38.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78, i64 %indvars.iv80
  store float %add34.1, float* %arrayidx38.1, align 4, !tbaa !4
  %indvars.iv.next78.1 = add nuw nsw i64 %indvars.iv77, 2
  %arrayidx29.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78.1, i64 %0
  %13 = load float, float* %arrayidx29.2, align 4, !tbaa !4
  %arrayidx33.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next78.1, i64 %indvars.iv80
  %14 = load float, float* %arrayidx33.2, align 4, !tbaa !4
  %add34.2 = fadd float %13, %14
  %arrayidx38.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78.1, i64 %indvars.iv80
  store float %add34.2, float* %arrayidx38.2, align 4, !tbaa !4
  %indvars.iv.next78.2 = add nuw nsw i64 %indvars.iv77, 3
  %arrayidx29.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78.2, i64 %0
  %15 = load float, float* %arrayidx29.3, align 4, !tbaa !4
  %arrayidx33.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next78.2, i64 %indvars.iv80
  %16 = load float, float* %arrayidx33.3, align 4, !tbaa !4
  %add34.3 = fadd float %15, %16
  %arrayidx38.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78.2, i64 %indvars.iv80
  store float %add34.3, float* %arrayidx38.3, align 4, !tbaa !4
  %indvars.iv.next78.3 = add nuw nsw i64 %indvars.iv77, 4
  %arrayidx29.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78.3, i64 %0
  %17 = load float, float* %arrayidx29.4, align 4, !tbaa !4
  %arrayidx33.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next78.3, i64 %indvars.iv80
  %18 = load float, float* %arrayidx33.4, align 4, !tbaa !4
  %add34.4 = fadd float %17, %18
  %arrayidx38.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78.3, i64 %indvars.iv80
  store float %add34.4, float* %arrayidx38.4, align 4, !tbaa !4
  %indvars.iv.next78.4 = add nuw nsw i64 %indvars.iv77, 5
  %arrayidx29.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78.4, i64 %0
  %19 = load float, float* %arrayidx29.5, align 4, !tbaa !4
  %arrayidx33.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next78.4, i64 %indvars.iv80
  %20 = load float, float* %arrayidx33.5, align 4, !tbaa !4
  %add34.5 = fadd float %19, %20
  %arrayidx38.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78.4, i64 %indvars.iv80
  store float %add34.5, float* %arrayidx38.5, align 4, !tbaa !4
  %indvars.iv.next78.5 = add nuw nsw i64 %indvars.iv77, 6
  %arrayidx29.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78.5, i64 %0
  %21 = load float, float* %arrayidx29.6, align 4, !tbaa !4
  %arrayidx33.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next78.5, i64 %indvars.iv80
  %22 = load float, float* %arrayidx33.6, align 4, !tbaa !4
  %add34.6 = fadd float %21, %22
  %arrayidx38.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78.5, i64 %indvars.iv80
  store float %add34.6, float* %arrayidx38.6, align 4, !tbaa !4
  %indvars.iv.next78.6 = add nuw nsw i64 %indvars.iv77, 7
  %exitcond.679.not = icmp eq i64 %indvars.iv.next78.6, 256
  br i1 %exitcond.679.not, label %for.cond.cleanup23, label %for.body24.7, !llvm.loop !148

for.body9.7:                                      ; preds = %for.body9
  %arrayidx15.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv80
  %23 = load float, float* %arrayidx15.7, align 4, !tbaa !4
  %add.7 = fadd float %add.6, %23
  %arrayidx19.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv80
  store float %add.7, float* %arrayidx19.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body9, !llvm.loop !149

for.body24.7:                                     ; preds = %for.body24
  %arrayidx29.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78.6, i64 %0
  %24 = load float, float* %arrayidx29.7, align 4, !tbaa !4
  %arrayidx33.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next78.6, i64 %indvars.iv80
  %25 = load float, float* %arrayidx33.7, align 4, !tbaa !4
  %add34.7 = fadd float %24, %25
  %arrayidx38.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next78.6, i64 %indvars.iv80
  store float %add34.7, float* %arrayidx38.7, align 4, !tbaa !4
  %indvars.iv.next78.7 = add nuw nsw i64 %indvars.iv77, 8
  br label %for.body24, !llvm.loop !150
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s2233(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2233, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.075 = phi i32 [ 0, %entry ], [ %inc47, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call49 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call50 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2233, i64 0, i64 0)) #11
  ret float %call50

for.cond6.preheader:                              ; preds = %for.cond.cleanup23, %for.cond2.preheader
  %indvars.iv80 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next81, %for.cond.cleanup23 ]
  %arrayidx11.phi.trans.insert = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv80
  %.pre = load float, float* %arrayidx11.phi.trans.insert, align 4, !tbaa !4
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup23
  %call45 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc47 = add nuw nsw i32 %nl.075, 1
  %exitcond83.not = icmp eq i32 %inc47, 39000
  br i1 %exitcond83.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !151

for.cond21.preheader:                             ; preds = %for.body9
  %0 = add nsw i64 %indvars.iv80, -1
  br label %for.body24

for.body9:                                        ; preds = %for.body9.7, %for.cond6.preheader
  %1 = phi float [ %.pre, %for.cond6.preheader ], [ %add.7, %for.body9.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv, i64 %indvars.iv80
  %2 = load float, float* %arrayidx15, align 4, !tbaa !4
  %add = fadd float %1, %2
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv80
  store float %add, float* %arrayidx19, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx15.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next, i64 %indvars.iv80
  %3 = load float, float* %arrayidx15.1, align 4, !tbaa !4
  %add.1 = fadd float %add, %3
  %arrayidx19.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv80
  store float %add.1, float* %arrayidx19.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx15.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv80
  %4 = load float, float* %arrayidx15.2, align 4, !tbaa !4
  %add.2 = fadd float %add.1, %4
  %arrayidx19.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv80
  store float %add.2, float* %arrayidx19.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx15.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv80
  %5 = load float, float* %arrayidx15.3, align 4, !tbaa !4
  %add.3 = fadd float %add.2, %5
  %arrayidx19.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv80
  store float %add.3, float* %arrayidx19.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx15.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv80
  %6 = load float, float* %arrayidx15.4, align 4, !tbaa !4
  %add.4 = fadd float %add.3, %6
  %arrayidx19.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv80
  store float %add.4, float* %arrayidx19.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx15.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv80
  %7 = load float, float* %arrayidx15.5, align 4, !tbaa !4
  %add.5 = fadd float %add.4, %7
  %arrayidx19.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv80
  store float %add.5, float* %arrayidx19.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx15.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv80
  %8 = load float, float* %arrayidx15.6, align 4, !tbaa !4
  %add.6 = fadd float %add.5, %8
  %arrayidx19.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv80
  store float %add.6, float* %arrayidx19.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 256
  br i1 %exitcond.6.not, label %for.cond21.preheader, label %for.body9.7, !llvm.loop !152

for.cond.cleanup23:                               ; preds = %for.body24
  %indvars.iv.next81 = add nuw nsw i64 %indvars.iv80, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next81, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !153

for.body24:                                       ; preds = %for.body24.7, %for.cond21.preheader
  %indvars.iv77 = phi i64 [ 1, %for.cond21.preheader ], [ %indvars.iv.next78.7, %for.body24.7 ]
  %arrayidx29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %0, i64 %indvars.iv77
  %9 = load float, float* %arrayidx29, align 4, !tbaa !4
  %arrayidx33 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv80, i64 %indvars.iv77
  %10 = load float, float* %arrayidx33, align 4, !tbaa !4
  %add34 = fadd float %9, %10
  %arrayidx38 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv80, i64 %indvars.iv77
  store float %add34, float* %arrayidx38, align 4, !tbaa !4
  %indvars.iv.next78 = add nuw nsw i64 %indvars.iv77, 1
  %arrayidx29.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %0, i64 %indvars.iv.next78
  %11 = load float, float* %arrayidx29.1, align 4, !tbaa !4
  %arrayidx33.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78
  %12 = load float, float* %arrayidx33.1, align 4, !tbaa !4
  %add34.1 = fadd float %11, %12
  %arrayidx38.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78
  store float %add34.1, float* %arrayidx38.1, align 4, !tbaa !4
  %indvars.iv.next78.1 = add nuw nsw i64 %indvars.iv77, 2
  %arrayidx29.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %0, i64 %indvars.iv.next78.1
  %13 = load float, float* %arrayidx29.2, align 4, !tbaa !4
  %arrayidx33.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78.1
  %14 = load float, float* %arrayidx33.2, align 4, !tbaa !4
  %add34.2 = fadd float %13, %14
  %arrayidx38.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78.1
  store float %add34.2, float* %arrayidx38.2, align 4, !tbaa !4
  %indvars.iv.next78.2 = add nuw nsw i64 %indvars.iv77, 3
  %arrayidx29.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %0, i64 %indvars.iv.next78.2
  %15 = load float, float* %arrayidx29.3, align 4, !tbaa !4
  %arrayidx33.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78.2
  %16 = load float, float* %arrayidx33.3, align 4, !tbaa !4
  %add34.3 = fadd float %15, %16
  %arrayidx38.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78.2
  store float %add34.3, float* %arrayidx38.3, align 4, !tbaa !4
  %indvars.iv.next78.3 = add nuw nsw i64 %indvars.iv77, 4
  %arrayidx29.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %0, i64 %indvars.iv.next78.3
  %17 = load float, float* %arrayidx29.4, align 4, !tbaa !4
  %arrayidx33.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78.3
  %18 = load float, float* %arrayidx33.4, align 4, !tbaa !4
  %add34.4 = fadd float %17, %18
  %arrayidx38.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78.3
  store float %add34.4, float* %arrayidx38.4, align 4, !tbaa !4
  %indvars.iv.next78.4 = add nuw nsw i64 %indvars.iv77, 5
  %arrayidx29.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %0, i64 %indvars.iv.next78.4
  %19 = load float, float* %arrayidx29.5, align 4, !tbaa !4
  %arrayidx33.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78.4
  %20 = load float, float* %arrayidx33.5, align 4, !tbaa !4
  %add34.5 = fadd float %19, %20
  %arrayidx38.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78.4
  store float %add34.5, float* %arrayidx38.5, align 4, !tbaa !4
  %indvars.iv.next78.5 = add nuw nsw i64 %indvars.iv77, 6
  %arrayidx29.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %0, i64 %indvars.iv.next78.5
  %21 = load float, float* %arrayidx29.6, align 4, !tbaa !4
  %arrayidx33.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78.5
  %22 = load float, float* %arrayidx33.6, align 4, !tbaa !4
  %add34.6 = fadd float %21, %22
  %arrayidx38.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78.5
  store float %add34.6, float* %arrayidx38.6, align 4, !tbaa !4
  %indvars.iv.next78.6 = add nuw nsw i64 %indvars.iv77, 7
  %exitcond.679.not = icmp eq i64 %indvars.iv.next78.6, 256
  br i1 %exitcond.679.not, label %for.cond.cleanup23, label %for.body24.7, !llvm.loop !154

for.body9.7:                                      ; preds = %for.body9
  %arrayidx15.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv80
  %23 = load float, float* %arrayidx15.7, align 4, !tbaa !4
  %add.7 = fadd float %add.6, %23
  %arrayidx19.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv80
  store float %add.7, float* %arrayidx19.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body9, !llvm.loop !155

for.body24.7:                                     ; preds = %for.body24
  %arrayidx29.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %0, i64 %indvars.iv.next78.6
  %24 = load float, float* %arrayidx29.7, align 4, !tbaa !4
  %arrayidx33.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78.6
  %25 = load float, float* %arrayidx33.7, align 4, !tbaa !4
  %add34.7 = fadd float %24, %25
  %arrayidx38.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv80, i64 %indvars.iv.next78.6
  store float %add34.7, float* %arrayidx38.7, align 4, !tbaa !4
  %indvars.iv.next78.7 = add nuw nsw i64 %indvars.iv77, 8
  br label %for.body24, !llvm.loop !156
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s235(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s235, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.058 = phi i32 [ 0, %entry ], [ %inc35, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call37 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call38 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s235, i64 0, i64 0)) #11
  ret float %call38

for.cond.cleanup4:                                ; preds = %for.cond.cleanup12
  %call33 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc35 = add nuw nsw i32 %nl.058, 1
  %exitcond62.not = icmp eq i32 %inc35, 78000
  br i1 %exitcond62.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !157

for.body5:                                        ; preds = %for.cond.cleanup12, %for.cond2.preheader
  %indvars.iv60 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next61, %for.cond.cleanup12 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv60
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv60
  %1 = load float, float* %arrayidx7, align 4, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv60
  %2 = load float, float* %arrayidx9, align 4, !tbaa !4
  %add = fadd float %2, %mul
  store float %add, float* %arrayidx9, align 4, !tbaa !4
  %arrayidx17.phi.trans.insert = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv60
  %.pre = load float, float* %arrayidx17.phi.trans.insert, align 4, !tbaa !4
  br label %for.body13

for.cond.cleanup12:                               ; preds = %for.body13
  %indvars.iv.next61 = add nuw nsw i64 %indvars.iv60, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next61, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !158

for.body13:                                       ; preds = %for.body13.7, %for.body5
  %3 = phi float [ %.pre, %for.body5 ], [ %add25.7, %for.body13.7 ]
  %indvars.iv = phi i64 [ 1, %for.body5 ], [ %indvars.iv.next.7, %for.body13.7 ]
  %arrayidx21 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv60
  %4 = load float, float* %arrayidx21, align 4, !tbaa !4
  %mul24 = fmul float %add, %4
  %add25 = fadd float %3, %mul24
  %arrayidx29 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv60
  store float %add25, float* %arrayidx29, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx21.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv60
  %5 = load float, float* %arrayidx21.1, align 4, !tbaa !4
  %mul24.1 = fmul float %add, %5
  %add25.1 = fadd float %add25, %mul24.1
  %arrayidx29.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv60
  store float %add25.1, float* %arrayidx29.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx21.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv60
  %6 = load float, float* %arrayidx21.2, align 4, !tbaa !4
  %mul24.2 = fmul float %add, %6
  %add25.2 = fadd float %add25.1, %mul24.2
  %arrayidx29.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv60
  store float %add25.2, float* %arrayidx29.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx21.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv60
  %7 = load float, float* %arrayidx21.3, align 4, !tbaa !4
  %mul24.3 = fmul float %add, %7
  %add25.3 = fadd float %add25.2, %mul24.3
  %arrayidx29.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv60
  store float %add25.3, float* %arrayidx29.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx21.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv60
  %8 = load float, float* %arrayidx21.4, align 4, !tbaa !4
  %mul24.4 = fmul float %add, %8
  %add25.4 = fadd float %add25.3, %mul24.4
  %arrayidx29.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv60
  store float %add25.4, float* %arrayidx29.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx21.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv60
  %9 = load float, float* %arrayidx21.5, align 4, !tbaa !4
  %mul24.5 = fmul float %add, %9
  %add25.5 = fadd float %add25.4, %mul24.5
  %arrayidx29.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv60
  store float %add25.5, float* %arrayidx29.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx21.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv60
  %10 = load float, float* %arrayidx21.6, align 4, !tbaa !4
  %mul24.6 = fmul float %add, %10
  %add25.6 = fadd float %add25.5, %mul24.6
  %arrayidx29.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv60
  store float %add25.6, float* %arrayidx29.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 256
  br i1 %exitcond.6.not, label %for.cond.cleanup12, label %for.body13.7, !llvm.loop !159

for.body13.7:                                     ; preds = %for.body13
  %arrayidx21.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv60
  %11 = load float, float* %arrayidx21.7, align 4, !tbaa !4
  %mul24.7 = fmul float %add, %11
  %add25.7 = fadd float %add25.6, %mul24.7
  %arrayidx29.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv60
  store float %add25.7, float* %arrayidx29.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body13, !llvm.loop !160
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s241(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s241, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.043 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call27 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call28 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s241, i64 0, i64 0)) #11
  ret float %call28

for.cond.cleanup4:                                ; preds = %for.body5
  %call23 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc25 = add nuw nsw i32 %nl.043, 1
  %exitcond.not = icmp eq i32 %inc25, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !161

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %mul10 = fmul float %mul, %2
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %mul10, float* %arrayidx12, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx16, align 4, !tbaa !4
  %mul17 = fmul float %mul10, %3
  %mul20 = fmul float %2, %mul17
  store float %mul20, float* %arrayidx, align 32, !tbaa !4
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %mul.1 = fmul float %4, %5
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %mul10.1 = fmul float %mul.1, %6
  store float %mul10.1, float* %arrayidx16, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx16.1, align 8, !tbaa !4
  %mul17.1 = fmul float %mul10.1, %7
  %mul20.1 = fmul float %6, %mul17.1
  store float %mul20.1, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %mul.2 = fmul float %8, %9
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %mul10.2 = fmul float %mul.2, %10
  store float %mul10.2, float* %arrayidx16.1, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx16.2, align 4, !tbaa !4
  %mul17.2 = fmul float %mul10.2, %11
  %mul20.2 = fmul float %10, %mul17.2
  store float %mul20.2, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %mul.3 = fmul float %12, %13
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %mul10.3 = fmul float %mul.3, %14
  store float %mul10.3, float* %arrayidx16.2, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %15 = load float, float* %arrayidx16.3, align 16, !tbaa !4
  %mul17.3 = fmul float %mul10.3, %15
  %mul20.3 = fmul float %14, %mul17.3
  store float %mul20.3, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %mul.4 = fmul float %16, %17
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %mul10.4 = fmul float %mul.4, %18
  store float %mul10.4, float* %arrayidx16.3, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %19 = load float, float* %arrayidx16.4, align 4, !tbaa !4
  %mul17.4 = fmul float %mul10.4, %19
  %mul20.4 = fmul float %18, %mul17.4
  store float %mul20.4, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %mul.5 = fmul float %20, %21
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %mul10.5 = fmul float %mul.5, %22
  store float %mul10.5, float* %arrayidx16.4, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %23 = load float, float* %arrayidx16.5, align 8, !tbaa !4
  %mul17.5 = fmul float %mul10.5, %23
  %mul20.5 = fmul float %22, %mul17.5
  store float %mul20.5, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %mul.6 = fmul float %24, %25
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %mul10.6 = fmul float %mul.6, %26
  store float %mul10.6, float* %arrayidx16.5, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %27 = load float, float* %arrayidx16.6, align 4, !tbaa !4
  %mul17.6 = fmul float %mul10.6, %27
  %mul20.6 = fmul float %26, %mul17.6
  store float %mul20.6, float* %arrayidx.6, align 8, !tbaa !4
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !162

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %29 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %mul.7 = fmul float %28, %29
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %mul10.7 = fmul float %mul.7, %30
  store float %mul10.7, float* %arrayidx16.6, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  %31 = load float, float* %arrayidx16.7, align 32, !tbaa !4
  %mul17.7 = fmul float %mul10.7, %31
  %mul20.7 = fmul float %30, %mul17.7
  store float %mul20.7, float* %arrayidx.7, align 4, !tbaa !4
  br label %for.body5, !llvm.loop !163
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s242(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to %struct.anon.1**
  %1 = load %struct.anon.1*, %struct.anon.1** %0, align 8, !tbaa !49
  %a = getelementptr inbounds %struct.anon.1, %struct.anon.1* %1, i64 0, i32 0
  %2 = load float, float* %a, align 4, !tbaa !164
  %b = getelementptr inbounds %struct.anon.1, %struct.anon.1* %1, i64 0, i32 1
  %3 = load float, float* %b, align 4, !tbaa !166
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s242, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.040 = phi i32 [ 0, %entry ], [ %inc20, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call22 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call23 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s242, i64 0, i64 0)) #11
  ret float %call23

for.cond.cleanup4:                                ; preds = %for.body5
  %call18 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc20 = add nuw nsw i32 %nl.040, 1
  %exitcond.not = icmp eq i32 %inc20, 20000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !167

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %4 = phi float [ %.pre, %for.cond2.preheader ], [ %add15.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %add = fadd float %2, %4
  %add6 = fadd float %3, %add
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %5 = load float, float* %arrayidx8, align 4, !tbaa !4
  %add9 = fadd float %5, %add6
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %6 = load float, float* %arrayidx11, align 4, !tbaa !4
  %add12 = fadd float %6, %add9
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %7 = load float, float* %arrayidx14, align 4, !tbaa !4
  %add15 = fadd float %7, %add12
  %arrayidx17 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add15, float* %arrayidx17, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %add.1 = fadd float %2, %add15
  %add6.1 = fadd float %3, %add.1
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %add9.1 = fadd float %8, %add6.1
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %9 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %add12.1 = fadd float %9, %add9.1
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %10 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %add15.1 = fadd float %10, %add12.1
  %arrayidx17.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add15.1, float* %arrayidx17.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %add.2 = fadd float %2, %add15.1
  %add6.2 = fadd float %3, %add.2
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx8.2, align 4, !tbaa !4
  %add9.2 = fadd float %11, %add6.2
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %12 = load float, float* %arrayidx11.2, align 4, !tbaa !4
  %add12.2 = fadd float %12, %add9.2
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %13 = load float, float* %arrayidx14.2, align 4, !tbaa !4
  %add15.2 = fadd float %13, %add12.2
  %arrayidx17.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add15.2, float* %arrayidx17.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %add.3 = fadd float %2, %add15.2
  %add6.3 = fadd float %3, %add.3
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %add9.3 = fadd float %14, %add6.3
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %add12.3 = fadd float %15, %add9.3
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %16 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %add15.3 = fadd float %16, %add12.3
  %arrayidx17.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add15.3, float* %arrayidx17.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %add.4 = fadd float %2, %add15.3
  %add6.4 = fadd float %3, %add.4
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx8.4, align 4, !tbaa !4
  %add9.4 = fadd float %17, %add6.4
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx11.4, align 4, !tbaa !4
  %add12.4 = fadd float %18, %add9.4
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx14.4, align 4, !tbaa !4
  %add15.4 = fadd float %19, %add12.4
  %arrayidx17.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add15.4, float* %arrayidx17.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %add.5 = fadd float %2, %add15.4
  %add6.5 = fadd float %3, %add.5
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %20 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %add9.5 = fadd float %20, %add6.5
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %add12.5 = fadd float %21, %add9.5
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %add15.5 = fadd float %22, %add12.5
  %arrayidx17.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add15.5, float* %arrayidx17.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %add.6 = fadd float %2, %add15.5
  %add6.6 = fadd float %3, %add.6
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %23 = load float, float* %arrayidx8.6, align 4, !tbaa !4
  %add9.6 = fadd float %23, %add6.6
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %24 = load float, float* %arrayidx11.6, align 4, !tbaa !4
  %add12.6 = fadd float %24, %add9.6
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx14.6, align 4, !tbaa !4
  %add15.6 = fadd float %25, %add12.6
  %arrayidx17.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add15.6, float* %arrayidx17.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 32000
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !168

for.body5.7:                                      ; preds = %for.body5
  %add.7 = fadd float %2, %add15.6
  %add6.7 = fadd float %3, %add.7
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %26 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %add9.7 = fadd float %26, %add6.7
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %27 = load float, float* %arrayidx11.7, align 4, !tbaa !4
  %add12.7 = fadd float %27, %add9.7
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %28 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %add15.7 = fadd float %28, %add12.7
  %arrayidx17.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add15.7, float* %arrayidx17.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !169
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s243(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s243, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.057 = phi i32 [ 0, %entry ], [ %inc35, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call37 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call38 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s243, i64 0, i64 0)) #11
  ret float %call38

for.cond.cleanup4:                                ; preds = %for.body5
  %call33 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc35 = add nuw nsw i32 %nl.057, 1
  %exitcond.not = icmp eq i32 %inc35, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !170

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %mul = fmul float %1, %2
  %add = fadd float %0, %mul
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %arrayidx17 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx17, align 32, !tbaa !4
  %mul18 = fmul float %2, %3
  %add19 = fadd float %add, %mul18
  store float %add19, float* %arrayidx, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx26 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx26, align 4, !tbaa !4
  %mul29 = fmul float %2, %4
  %add30 = fadd float %add19, %mul29
  store float %add30, float* %arrayidx11, align 32, !tbaa !4
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %mul.1 = fmul float %6, %7
  %add.1 = fadd float %5, %mul.1
  %arrayidx17.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx17.1, align 4, !tbaa !4
  %mul18.1 = fmul float %7, %8
  %add19.1 = fadd float %add.1, %mul18.1
  store float %add19.1, float* %arrayidx.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx26.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx26.1, align 8, !tbaa !4
  %mul29.1 = fmul float %7, %9
  %add30.1 = fadd float %add19.1, %mul29.1
  store float %add30.1, float* %arrayidx26, align 4, !tbaa !4
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %12 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %mul.2 = fmul float %11, %12
  %add.2 = fadd float %10, %mul.2
  %arrayidx17.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %13 = load float, float* %arrayidx17.2, align 8, !tbaa !4
  %mul18.2 = fmul float %12, %13
  %add19.2 = fadd float %add.2, %mul18.2
  store float %add19.2, float* %arrayidx.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx26.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx26.2, align 4, !tbaa !4
  %mul29.2 = fmul float %12, %14
  %add30.2 = fadd float %add19.2, %mul29.2
  store float %add30.2, float* %arrayidx26.1, align 8, !tbaa !4
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %16 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %17 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %mul.3 = fmul float %16, %17
  %add.3 = fadd float %15, %mul.3
  %arrayidx17.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %18 = load float, float* %arrayidx17.3, align 4, !tbaa !4
  %mul18.3 = fmul float %17, %18
  %add19.3 = fadd float %add.3, %mul18.3
  store float %add19.3, float* %arrayidx.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx26.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx26.3, align 16, !tbaa !4
  %mul29.3 = fmul float %17, %19
  %add30.3 = fadd float %add19.3, %mul29.3
  store float %add30.3, float* %arrayidx26.2, align 4, !tbaa !4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %20 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %21 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %22 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %mul.4 = fmul float %21, %22
  %add.4 = fadd float %20, %mul.4
  %arrayidx17.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %23 = load float, float* %arrayidx17.4, align 16, !tbaa !4
  %mul18.4 = fmul float %22, %23
  %add19.4 = fadd float %add.4, %mul18.4
  store float %add19.4, float* %arrayidx.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx26.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %24 = load float, float* %arrayidx26.4, align 4, !tbaa !4
  %mul29.4 = fmul float %22, %24
  %add30.4 = fadd float %add19.4, %mul29.4
  store float %add30.4, float* %arrayidx26.3, align 16, !tbaa !4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %26 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %27 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %mul.5 = fmul float %26, %27
  %add.5 = fadd float %25, %mul.5
  %arrayidx17.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %28 = load float, float* %arrayidx17.5, align 4, !tbaa !4
  %mul18.5 = fmul float %27, %28
  %add19.5 = fadd float %add.5, %mul18.5
  store float %add19.5, float* %arrayidx.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx26.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %29 = load float, float* %arrayidx26.5, align 8, !tbaa !4
  %mul29.5 = fmul float %27, %29
  %add30.5 = fadd float %add19.5, %mul29.5
  store float %add30.5, float* %arrayidx26.4, align 4, !tbaa !4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %30 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %31 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %32 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %mul.6 = fmul float %31, %32
  %add.6 = fadd float %30, %mul.6
  %arrayidx17.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %33 = load float, float* %arrayidx17.6, align 8, !tbaa !4
  %mul18.6 = fmul float %32, %33
  %add19.6 = fadd float %add.6, %mul18.6
  store float %add19.6, float* %arrayidx.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx26.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %34 = load float, float* %arrayidx26.6, align 4, !tbaa !4
  %mul29.6 = fmul float %32, %34
  %add30.6 = fadd float %add19.6, %mul29.6
  store float %add30.6, float* %arrayidx26.5, align 8, !tbaa !4
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !171

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %35 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %36 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %37 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %mul.7 = fmul float %36, %37
  %add.7 = fadd float %35, %mul.7
  %arrayidx17.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %38 = load float, float* %arrayidx17.7, align 4, !tbaa !4
  %mul18.7 = fmul float %37, %38
  %add19.7 = fadd float %add.7, %mul18.7
  store float %add19.7, float* %arrayidx.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx26.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  %39 = load float, float* %arrayidx26.7, align 32, !tbaa !4
  %mul29.7 = fmul float %37, %39
  %add30.7 = fadd float %add19.7, %mul29.7
  store float %add30.7, float* %arrayidx26.6, align 4, !tbaa !4
  br label %for.body5, !llvm.loop !172
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s244(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s244, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.054 = phi i32 [ 0, %entry ], [ %inc33, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call35 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call36 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s244, i64 0, i64 0)) #11
  ret float %call36

for.cond.cleanup4:                                ; preds = %for.body5
  %call31 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc33 = add nuw nsw i32 %nl.054, 1
  %exitcond.not = icmp eq i32 %inc33, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !173

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %mul = fmul float %1, %2
  %add = fadd float %0, %mul
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx11, align 32, !tbaa !4
  %add16 = fadd float %0, %1
  store float %add16, float* %arrayidx, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx23 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %mul.1 = fmul float %4, %5
  %add.1 = fadd float %3, %mul.1
  store float %add.1, float* %arrayidx23, align 4, !tbaa !4
  %add16.1 = fadd float %3, %4
  store float %add16.1, float* %arrayidx.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx23.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %mul.2 = fmul float %7, %8
  %add.2 = fadd float %6, %mul.2
  store float %add.2, float* %arrayidx23.1, align 8, !tbaa !4
  %add16.2 = fadd float %6, %7
  store float %add16.2, float* %arrayidx.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx23.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %mul.3 = fmul float %10, %11
  %add.3 = fadd float %9, %mul.3
  store float %add.3, float* %arrayidx23.2, align 4, !tbaa !4
  %add16.3 = fadd float %9, %10
  store float %add16.3, float* %arrayidx.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx23.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %mul.4 = fmul float %13, %14
  %add.4 = fadd float %12, %mul.4
  store float %add.4, float* %arrayidx23.3, align 16, !tbaa !4
  %add16.4 = fadd float %12, %13
  store float %add16.4, float* %arrayidx.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx23.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %mul.5 = fmul float %16, %17
  %add.5 = fadd float %15, %mul.5
  store float %add.5, float* %arrayidx23.4, align 4, !tbaa !4
  %add16.5 = fadd float %15, %16
  store float %add16.5, float* %arrayidx.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx23.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %mul.6 = fmul float %19, %20
  %add.6 = fadd float %18, %mul.6
  store float %add.6, float* %arrayidx23.5, align 8, !tbaa !4
  %add16.6 = fadd float %18, %19
  store float %add16.6, float* %arrayidx.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx23.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %21 = load float, float* %arrayidx23.6, align 4, !tbaa !4
  %mul26.6 = fmul float %20, %21
  %add27.6 = fadd float %add16.6, %mul26.6
  store float %add27.6, float* %arrayidx23.6, align 4, !tbaa !4
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !174

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %23 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %24 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %mul.7 = fmul float %23, %24
  %add.7 = fadd float %22, %mul.7
  store float %add.7, float* %arrayidx23.6, align 4, !tbaa !4
  %add16.7 = fadd float %22, %23
  store float %add16.7, float* %arrayidx.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx23.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  %25 = load float, float* %arrayidx23.7, align 32, !tbaa !4
  %mul26.7 = fmul float %24, %25
  %add27.7 = fadd float %add16.7, %mul26.7
  store float %add27.7, float* %arrayidx23.7, align 32, !tbaa !4
  br label %for.body5, !llvm.loop !175
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1244(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1244, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.051 = phi i32 [ 0, %entry ], [ %inc31, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call33 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call34 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1244, i64 0, i64 0)) #11
  ret float %call34

for.cond.cleanup4:                                ; preds = %for.body5
  %call29 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc31 = add nuw nsw i32 %nl.051, 1
  %exitcond.not = icmp eq i32 %inc31, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !176

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %1, %1
  %add = fadd float %0, %mul
  %mul14 = fmul float %0, %0
  %add15 = fadd float %mul14, %add
  %add18 = fadd float %1, %add15
  %arrayidx20 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add18, float* %arrayidx20, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx25 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx25, align 4, !tbaa !4
  %add26 = fadd float %2, %add18
  %arrayidx28 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  store float %add26, float* %arrayidx28, align 32, !tbaa !4
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %mul.1 = fmul float %4, %4
  %add.1 = fadd float %3, %mul.1
  %mul14.1 = fmul float %3, %3
  %add15.1 = fadd float %mul14.1, %add.1
  %add18.1 = fadd float %4, %add15.1
  store float %add18.1, float* %arrayidx25, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx25.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx25.1, align 8, !tbaa !4
  %add26.1 = fadd float %5, %add18.1
  %arrayidx28.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  store float %add26.1, float* %arrayidx28.1, align 4, !tbaa !4
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %mul.2 = fmul float %7, %7
  %add.2 = fadd float %6, %mul.2
  %mul14.2 = fmul float %6, %6
  %add15.2 = fadd float %mul14.2, %add.2
  %add18.2 = fadd float %7, %add15.2
  store float %add18.2, float* %arrayidx25.1, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx25.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %8 = load float, float* %arrayidx25.2, align 4, !tbaa !4
  %add26.2 = fadd float %8, %add18.2
  %arrayidx28.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  store float %add26.2, float* %arrayidx28.2, align 8, !tbaa !4
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %mul.3 = fmul float %10, %10
  %add.3 = fadd float %9, %mul.3
  %mul14.3 = fmul float %9, %9
  %add15.3 = fadd float %mul14.3, %add.3
  %add18.3 = fadd float %10, %add15.3
  store float %add18.3, float* %arrayidx25.2, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx25.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %11 = load float, float* %arrayidx25.3, align 16, !tbaa !4
  %add26.3 = fadd float %11, %add18.3
  %arrayidx28.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  store float %add26.3, float* %arrayidx28.3, align 4, !tbaa !4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %mul.4 = fmul float %13, %13
  %add.4 = fadd float %12, %mul.4
  %mul14.4 = fmul float %12, %12
  %add15.4 = fadd float %mul14.4, %add.4
  %add18.4 = fadd float %13, %add15.4
  store float %add18.4, float* %arrayidx25.3, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx25.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %14 = load float, float* %arrayidx25.4, align 4, !tbaa !4
  %add26.4 = fadd float %14, %add18.4
  %arrayidx28.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  store float %add26.4, float* %arrayidx28.4, align 16, !tbaa !4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %mul.5 = fmul float %16, %16
  %add.5 = fadd float %15, %mul.5
  %mul14.5 = fmul float %15, %15
  %add15.5 = fadd float %mul14.5, %add.5
  %add18.5 = fadd float %16, %add15.5
  store float %add18.5, float* %arrayidx25.4, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx25.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %17 = load float, float* %arrayidx25.5, align 8, !tbaa !4
  %add26.5 = fadd float %17, %add18.5
  %arrayidx28.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  store float %add26.5, float* %arrayidx28.5, align 4, !tbaa !4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %mul.6 = fmul float %19, %19
  %add.6 = fadd float %18, %mul.6
  %mul14.6 = fmul float %18, %18
  %add15.6 = fadd float %mul14.6, %add.6
  %add18.6 = fadd float %19, %add15.6
  store float %add18.6, float* %arrayidx25.5, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx25.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %20 = load float, float* %arrayidx25.6, align 4, !tbaa !4
  %add26.6 = fadd float %20, %add18.6
  %arrayidx28.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  store float %add26.6, float* %arrayidx28.6, align 8, !tbaa !4
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !177

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %mul.7 = fmul float %22, %22
  %add.7 = fadd float %21, %mul.7
  %mul14.7 = fmul float %21, %21
  %add15.7 = fadd float %mul14.7, %add.7
  %add18.7 = fadd float %22, %add15.7
  store float %add18.7, float* %arrayidx25.6, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx25.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  %23 = load float, float* %arrayidx25.7, align 32, !tbaa !4
  %add26.7 = fadd float %23, %add18.7
  %arrayidx28.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  store float %add26.7, float* %arrayidx28.7, align 4, !tbaa !4
  br label %for.body5, !llvm.loop !178
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s2244(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2244, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.036 = phi i32 [ 0, %entry ], [ %inc20, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call22 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call23 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2244, i64 0, i64 0)) #11
  ret float %call23

for.cond.cleanup4:                                ; preds = %for.body5
  %call18 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc20 = add nuw nsw i32 %nl.036, 1
  %exitcond.not = icmp eq i32 %inc20, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !179

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx14, align 32, !tbaa !4
  %add15 = fadd float %0, %1
  %arrayidx17 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add15, float* %arrayidx17, align 32, !tbaa !4
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %add15.1 = fadd float %2, %3
  store float %add15.1, float* %arrayidx10, align 4, !tbaa !4
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx14.2, align 8, !tbaa !4
  %add15.2 = fadd float %4, %5
  store float %add15.2, float* %arrayidx10.1, align 8, !tbaa !4
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %7 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %add15.3 = fadd float %6, %7
  store float %add15.3, float* %arrayidx10.2, align 4, !tbaa !4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %9 = load float, float* %arrayidx14.4, align 16, !tbaa !4
  %add15.4 = fadd float %8, %9
  store float %add15.4, float* %arrayidx10.3, align 16, !tbaa !4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %11 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %add15.5 = fadd float %10, %11
  store float %add15.5, float* %arrayidx10.4, align 4, !tbaa !4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %add.6 = fadd float %12, %13
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add.6, float* %arrayidx10.6, align 4, !tbaa !4
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %14 = load float, float* %arrayidx14.6, align 8, !tbaa !4
  %add15.6 = fadd float %12, %14
  store float %add15.6, float* %arrayidx10.5, align 8, !tbaa !4
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !180

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %16 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add.7 = fadd float %15, %16
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  store float %add.7, float* %arrayidx10.7, align 32, !tbaa !4
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %17 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %add15.7 = fadd float %15, %17
  store float %add15.7, float* %arrayidx10.6, align 4, !tbaa !4
  br label %for.body5, !llvm.loop !181
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s251(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s251, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.031 = phi i32 [ 0, %entry ], [ %inc15, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call17 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call18 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s251, i64 0, i64 0)) #11
  ret float %call18

for.cond.cleanup4:                                ; preds = %for.body5
  %call13 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc15 = add nuw nsw i32 %nl.031, 1
  %exitcond.not = icmp eq i32 %inc15, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !182

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %mul = fmul float %1, %2
  %add = fadd float %0, %mul
  %mul10 = fmul float %add, %add
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  store float %mul10, float* %arrayidx12, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !183
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1251(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1251, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.039 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call23 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call24 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1251, i64 0, i64 0)) #11
  ret float %call24

for.cond.cleanup4:                                ; preds = %for.body5
  %call19 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc21 = add nuw nsw i32 %nl.039, 1
  %exitcond.not = icmp eq i32 %inc21, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !184

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add = fadd float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvar
  %3 = load float, float* %arrayidx11, align 32, !tbaa !4
  %add12 = fadd float %2, %3
  store float %add12, float* %arrayidx, align 32, !tbaa !4
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvar
  %4 = load float, float* %arrayidx16, align 32, !tbaa !4
  %mul = fmul float %add, %4
  store float %mul, float* %arrayidx9, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !185
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s2251(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2251, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.040 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call23 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call24 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2251, i64 0, i64 0)) #11
  ret float %call24

for.cond.cleanup4:                                ; preds = %for.body5
  %call19 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc21 = add nuw nsw i32 %nl.040, 1
  %exitcond.not = icmp eq i32 %inc21, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !186

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %s.038 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %mul = fmul float %s.038, %0
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %mul, float* %arrayidx7, align 32, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx9, align 32, !tbaa !4
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx11, align 32, !tbaa !4
  %add = fadd float %1, %2
  %arrayidx15 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx15, align 32, !tbaa !4
  %add16 = fadd float %mul, %3
  store float %add16, float* %arrayidx9, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %mul.1 = fmul float %add, %4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %mul.1, float* %arrayidx7.1, align 4, !tbaa !4
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %add.1 = fadd float %5, %6
  %arrayidx15.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx15.1, align 4, !tbaa !4
  %add16.1 = fadd float %mul.1, %7
  store float %add16.1, float* %arrayidx9.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %mul.2 = fmul float %add.1, %8
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %mul.2, float* %arrayidx7.2, align 8, !tbaa !4
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx11.2, align 8, !tbaa !4
  %add.2 = fadd float %9, %10
  %arrayidx15.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx15.2, align 8, !tbaa !4
  %add16.2 = fadd float %mul.2, %11
  store float %add16.2, float* %arrayidx9.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %mul.3 = fmul float %add.2, %12
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %mul.3, float* %arrayidx7.3, align 4, !tbaa !4
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %add.3 = fadd float %13, %14
  %arrayidx15.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx15.3, align 4, !tbaa !4
  %add16.3 = fadd float %mul.3, %15
  store float %add16.3, float* %arrayidx9.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %mul.4 = fmul float %add.3, %16
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %mul.4, float* %arrayidx7.4, align 16, !tbaa !4
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx11.4, align 16, !tbaa !4
  %add.4 = fadd float %17, %18
  %arrayidx15.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx15.4, align 16, !tbaa !4
  %add16.4 = fadd float %mul.4, %19
  store float %add16.4, float* %arrayidx9.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %mul.5 = fmul float %add.4, %20
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %mul.5, float* %arrayidx7.5, align 4, !tbaa !4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %add.5 = fadd float %21, %22
  %arrayidx15.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %23 = load float, float* %arrayidx15.5, align 4, !tbaa !4
  %add16.5 = fadd float %mul.5, %23
  store float %add16.5, float* %arrayidx9.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %mul.6 = fmul float %add.5, %24
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %mul.6, float* %arrayidx7.6, align 8, !tbaa !4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx11.6, align 8, !tbaa !4
  %add.6 = fadd float %25, %26
  %arrayidx15.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %27 = load float, float* %arrayidx15.6, align 8, !tbaa !4
  %add16.6 = fadd float %mul.6, %27
  store float %add16.6, float* %arrayidx9.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %mul.7 = fmul float %add.6, %28
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %mul.7, float* %arrayidx7.7, align 4, !tbaa !4
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %29 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx11.7, align 4, !tbaa !4
  %add.7 = fadd float %29, %30
  %arrayidx15.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %31 = load float, float* %arrayidx15.7, align 4, !tbaa !4
  %add16.7 = fadd float %mul.7, %31
  store float %add16.7, float* %arrayidx9.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !187
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s3251(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s3251, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.045 = phi i32 [ 0, %entry ], [ %inc26, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call28 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call29 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s3251, i64 0, i64 0)) #11
  ret float %call29

for.cond.cleanup4:                                ; preds = %for.body5
  %call24 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc26 = add nuw nsw i32 %nl.045, 1
  %exitcond.not = icmp eq i32 %inc26, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !188

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add = fadd float %1, %2
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add, float* %arrayidx10, align 4, !tbaa !4
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx14, align 32, !tbaa !4
  %mul = fmul float %2, %3
  store float %mul, float* %arrayidx, align 32, !tbaa !4
  %mul21 = fmul float %3, %0
  %arrayidx23 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  store float %mul21, float* %arrayidx23, align 32, !tbaa !4
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add.1 = fadd float %4, %5
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add.1, float* %arrayidx10.1, align 8, !tbaa !4
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %mul.1 = fmul float %5, %6
  store float %mul.1, float* %arrayidx.1, align 4, !tbaa !4
  %mul21.1 = fmul float %6, %add
  %arrayidx23.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  store float %mul21.1, float* %arrayidx23.1, align 4, !tbaa !4
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %add.2 = fadd float %7, %8
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add.2, float* %arrayidx10.2, align 4, !tbaa !4
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx14.2, align 8, !tbaa !4
  %mul.2 = fmul float %8, %9
  store float %mul.2, float* %arrayidx.2, align 8, !tbaa !4
  %mul21.2 = fmul float %9, %add.1
  %arrayidx23.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  store float %mul21.2, float* %arrayidx23.2, align 8, !tbaa !4
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add.3 = fadd float %10, %11
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add.3, float* %arrayidx10.3, align 16, !tbaa !4
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %mul.3 = fmul float %11, %12
  store float %mul.3, float* %arrayidx.3, align 4, !tbaa !4
  %mul21.3 = fmul float %12, %add.2
  %arrayidx23.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  store float %mul21.3, float* %arrayidx23.3, align 4, !tbaa !4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %add.4 = fadd float %13, %14
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add.4, float* %arrayidx10.4, align 4, !tbaa !4
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %15 = load float, float* %arrayidx14.4, align 16, !tbaa !4
  %mul.4 = fmul float %14, %15
  store float %mul.4, float* %arrayidx.4, align 16, !tbaa !4
  %mul21.4 = fmul float %15, %add.3
  %arrayidx23.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  store float %mul21.4, float* %arrayidx23.4, align 16, !tbaa !4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add.5 = fadd float %16, %17
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add.5, float* %arrayidx10.5, align 8, !tbaa !4
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %18 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %mul.5 = fmul float %17, %18
  store float %mul.5, float* %arrayidx.5, align 4, !tbaa !4
  %mul21.5 = fmul float %18, %add.4
  %arrayidx23.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  store float %mul21.5, float* %arrayidx23.5, align 4, !tbaa !4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %20 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %add.6 = fadd float %19, %20
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add.6, float* %arrayidx10.6, align 4, !tbaa !4
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %21 = load float, float* %arrayidx14.6, align 8, !tbaa !4
  %mul.6 = fmul float %20, %21
  store float %mul.6, float* %arrayidx.6, align 8, !tbaa !4
  %mul21.6 = fmul float %21, %add.5
  %arrayidx23.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  store float %mul21.6, float* %arrayidx23.6, align 8, !tbaa !4
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !189

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %23 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add.7 = fadd float %22, %23
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  store float %add.7, float* %arrayidx10.7, align 32, !tbaa !4
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %24 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %mul.7 = fmul float %23, %24
  store float %mul.7, float* %arrayidx.7, align 4, !tbaa !4
  %mul21.7 = fmul float %24, %add.6
  %arrayidx23.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  store float %mul21.7, float* %arrayidx23.7, align 4, !tbaa !4
  br label %for.body5, !llvm.loop !190
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s252(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s252, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.029 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s252, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.029, 1
  %exitcond.not = icmp eq i32 %inc12, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !191

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %t.027 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %mul.7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %add = fadd float %t.027, %mul
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx9, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %mul.1 = fmul float %2, %3
  %add.1 = fadd float %mul, %mul.1
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %mul.2 = fmul float %4, %5
  %add.2 = fadd float %mul.1, %mul.2
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %mul.3 = fmul float %6, %7
  %add.3 = fadd float %mul.2, %mul.3
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %9 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %mul.4 = fmul float %8, %9
  %add.4 = fadd float %mul.3, %mul.4
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %mul.5 = fmul float %10, %11
  %add.5 = fadd float %mul.4, %mul.5
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %13 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %mul.6 = fmul float %12, %13
  %add.6 = fadd float %mul.5, %mul.6
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %mul.7 = fmul float %14, %15
  %add.7 = fadd float %mul.6, %mul.7
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !192
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s253(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s253, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.041 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call23 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call24 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s253, i64 0, i64 0)) #11
  ret float %call24

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call19 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc21 = add nuw nsw i32 %nl.041, 1
  %exitcond.not = icmp eq i32 %inc21, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !193

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %cmp8 = fcmp ogt float %0, %1
  br i1 %cmp8, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body5
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx14, align 32, !tbaa !4
  %mul = fmul float %1, %2
  %sub = fsub float %0, %mul
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx16, align 32, !tbaa !4
  %add = fadd float %3, %sub
  store float %add, float* %arrayidx16, align 32, !tbaa !4
  store float %sub, float* %arrayidx, align 32, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body5
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %cmp8.1 = fcmp ogt float %4, %5
  br i1 %cmp8.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %mul.1 = fmul float %5, %6
  %sub.1 = fsub float %4, %mul.1
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %add.1 = fadd float %7, %sub.1
  store float %add.1, float* %arrayidx16.1, align 4, !tbaa !4
  store float %sub.1, float* %arrayidx.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %cmp8.2 = fcmp ogt float %8, %9
  br i1 %cmp8.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx14.2, align 8, !tbaa !4
  %mul.2 = fmul float %9, %10
  %sub.2 = fsub float %8, %mul.2
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx16.2, align 8, !tbaa !4
  %add.2 = fadd float %11, %sub.2
  store float %add.2, float* %arrayidx16.2, align 8, !tbaa !4
  store float %sub.2, float* %arrayidx.2, align 8, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %cmp8.3 = fcmp ogt float %12, %13
  br i1 %cmp8.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %mul.3 = fmul float %13, %14
  %sub.3 = fsub float %12, %mul.3
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %add.3 = fadd float %15, %sub.3
  store float %add.3, float* %arrayidx16.3, align 4, !tbaa !4
  store float %sub.3, float* %arrayidx.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %cmp8.4 = fcmp ogt float %16, %17
  br i1 %cmp8.4, label %if.then.4, label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx14.4, align 16, !tbaa !4
  %mul.4 = fmul float %17, %18
  %sub.4 = fsub float %16, %mul.4
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx16.4, align 16, !tbaa !4
  %add.4 = fadd float %19, %sub.4
  store float %add.4, float* %arrayidx16.4, align 16, !tbaa !4
  store float %sub.4, float* %arrayidx.4, align 16, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %for.inc.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %cmp8.5 = fcmp ogt float %20, %21
  br i1 %cmp8.5, label %if.then.5, label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %mul.5 = fmul float %21, %22
  %sub.5 = fsub float %20, %mul.5
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %23 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %add.5 = fadd float %23, %sub.5
  store float %add.5, float* %arrayidx16.5, align 4, !tbaa !4
  store float %sub.5, float* %arrayidx.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %for.inc.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %cmp8.6 = fcmp ogt float %24, %25
  br i1 %cmp8.6, label %if.then.6, label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx14.6, align 8, !tbaa !4
  %mul.6 = fmul float %25, %26
  %sub.6 = fsub float %24, %mul.6
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %27 = load float, float* %arrayidx16.6, align 8, !tbaa !4
  %add.6 = fadd float %27, %sub.6
  store float %add.6, float* %arrayidx16.6, align 8, !tbaa !4
  store float %sub.6, float* %arrayidx.6, align 8, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %for.inc.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %29 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %cmp8.7 = fcmp ogt float %28, %29
  br i1 %cmp8.7, label %if.then.7, label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %mul.7 = fmul float %29, %30
  %sub.7 = fsub float %28, %mul.7
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %31 = load float, float* %arrayidx16.7, align 4, !tbaa !4
  %add.7 = fadd float %31, %sub.7
  store float %add.7, float* %arrayidx16.7, align 4, !tbaa !4
  store float %sub.7, float* %arrayidx.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %for.inc.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !194
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s254(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s254, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.027 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
  %x.0.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 31999), align 4, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s254, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.027, 1
  %exitcond.not = icmp eq i32 %inc12, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !195

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %x.0 = phi float [ %x.0.pre, %for.cond2.preheader ], [ %7, %for.body5 ]
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %add = fadd float %x.0, %0
  %mul = fmul float %add, 5.000000e-01
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %mul, float* %arrayidx7, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %add.1 = fadd float %0, %1
  %mul.1 = fmul float %add.1, 5.000000e-01
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %mul.1, float* %arrayidx7.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %add.2 = fadd float %1, %2
  %mul.2 = fmul float %add.2, 5.000000e-01
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %mul.2, float* %arrayidx7.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %add.3 = fadd float %2, %3
  %mul.3 = fmul float %add.3, 5.000000e-01
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %mul.3, float* %arrayidx7.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %add.4 = fadd float %3, %4
  %mul.4 = fmul float %add.4, 5.000000e-01
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %mul.4, float* %arrayidx7.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %add.5 = fadd float %4, %5
  %mul.5 = fmul float %add.5, 5.000000e-01
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %mul.5, float* %arrayidx7.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %add.6 = fadd float %5, %6
  %mul.6 = fmul float %add.6, 5.000000e-01
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %mul.6, float* %arrayidx7.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %add.7 = fadd float %6, %7
  %mul.7 = fmul float %add.7, 5.000000e-01
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %mul.7, float* %arrayidx7.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !196
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s255(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s255, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s255, i64 0, i64 0)) #11
  ret float %call16

for.body:                                         ; preds = %for.cond.cleanup4, %entry
  %nl.032 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
  %0 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 31998), align 8, !tbaa !4
  %x.031.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 31999), align 4, !tbaa !4
  br label %for.body5

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.032, 1
  %exitcond.not = icmp eq i32 %inc13, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !197

for.body5:                                        ; preds = %for.body5, %for.body
  %x.031 = phi float [ %x.031.pre, %for.body ], [ %8, %for.body5 ]
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next.7, %for.body5 ]
  %y.029 = phi float [ %0, %for.body ], [ %7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 32, !tbaa !4
  %add = fadd float %x.031, %1
  %add6 = fadd float %y.029, %add
  %mul = fmul float %add6, 0x3FD54FDF40000000
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %mul, float* %arrayidx8, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %add.1 = fadd float %1, %2
  %add6.1 = fadd float %x.031, %add.1
  %mul.1 = fmul float %add6.1, 0x3FD54FDF40000000
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %mul.1, float* %arrayidx8.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %3 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %add.2 = fadd float %2, %3
  %add6.2 = fadd float %1, %add.2
  %mul.2 = fmul float %add6.2, 0x3FD54FDF40000000
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %mul.2, float* %arrayidx8.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %4 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %add.3 = fadd float %3, %4
  %add6.3 = fadd float %2, %add.3
  %mul.3 = fmul float %add6.3, 0x3FD54FDF40000000
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %mul.3, float* %arrayidx8.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %5 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %add.4 = fadd float %4, %5
  %add6.4 = fadd float %3, %add.4
  %mul.4 = fmul float %add6.4, 0x3FD54FDF40000000
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %mul.4, float* %arrayidx8.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %6 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %add.5 = fadd float %5, %6
  %add6.5 = fadd float %4, %add.5
  %mul.5 = fmul float %add6.5, 0x3FD54FDF40000000
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %mul.5, float* %arrayidx8.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %7 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %add.6 = fadd float %6, %7
  %add6.6 = fadd float %5, %add.6
  %mul.6 = fmul float %add6.6, 0x3FD54FDF40000000
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %mul.6, float* %arrayidx8.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %8 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %add.7 = fadd float %7, %8
  %add6.7 = fadd float %6, %add.7
  %mul.7 = fmul float %add6.7, 0x3FD54FDF40000000
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %mul.7, float* %arrayidx8.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !198
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s256(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s256, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.051 = phi i32 [ 0, %entry ], [ %inc30, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call32 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call33 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s256, i64 0, i64 0)) #11
  ret float %call33

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv53 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next54, %for.cond.cleanup8 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call28 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc30 = add nuw nsw i32 %nl.051, 1
  %exitcond55.not = icmp eq i32 %inc30, 3900
  br i1 %exitcond55.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !199

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next54 = add nuw nsw i64 %indvars.iv53, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next54, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !200

for.body9:                                        ; preds = %for.body9.7, %for.cond6.preheader
  %0 = phi float [ %.pre, %for.cond6.preheader ], [ %sub10.7, %for.body9.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
  %sub10 = fsub float 1.000000e+00, %0
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %sub10, float* %arrayidx12, align 4, !tbaa !4
  %arrayidx18 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv53
  %1 = load float, float* %arrayidx18, align 4, !tbaa !4
  %arrayidx20 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx20, align 4, !tbaa !4
  %mul = fmul float %1, %2
  %add = fadd float %sub10, %mul
  %arrayidx24 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv53
  store float %add, float* %arrayidx24, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %sub10.1 = fsub float 1.000000e+00, %sub10
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %sub10.1, float* %arrayidx12.1, align 4, !tbaa !4
  %arrayidx18.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv53
  %3 = load float, float* %arrayidx18.1, align 4, !tbaa !4
  %arrayidx20.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx20.1, align 4, !tbaa !4
  %mul.1 = fmul float %3, %4
  %add.1 = fadd float %sub10.1, %mul.1
  %arrayidx24.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv53
  store float %add.1, float* %arrayidx24.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %sub10.2 = fsub float 1.000000e+00, %sub10.1
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %sub10.2, float* %arrayidx12.2, align 4, !tbaa !4
  %arrayidx18.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv53
  %5 = load float, float* %arrayidx18.2, align 4, !tbaa !4
  %arrayidx20.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx20.2, align 4, !tbaa !4
  %mul.2 = fmul float %5, %6
  %add.2 = fadd float %sub10.2, %mul.2
  %arrayidx24.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv53
  store float %add.2, float* %arrayidx24.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %sub10.3 = fsub float 1.000000e+00, %sub10.2
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %sub10.3, float* %arrayidx12.3, align 4, !tbaa !4
  %arrayidx18.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv53
  %7 = load float, float* %arrayidx18.3, align 4, !tbaa !4
  %arrayidx20.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %8 = load float, float* %arrayidx20.3, align 4, !tbaa !4
  %mul.3 = fmul float %7, %8
  %add.3 = fadd float %sub10.3, %mul.3
  %arrayidx24.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv53
  store float %add.3, float* %arrayidx24.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %sub10.4 = fsub float 1.000000e+00, %sub10.3
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %sub10.4, float* %arrayidx12.4, align 4, !tbaa !4
  %arrayidx18.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv53
  %9 = load float, float* %arrayidx18.4, align 4, !tbaa !4
  %arrayidx20.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %10 = load float, float* %arrayidx20.4, align 4, !tbaa !4
  %mul.4 = fmul float %9, %10
  %add.4 = fadd float %sub10.4, %mul.4
  %arrayidx24.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv53
  store float %add.4, float* %arrayidx24.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %sub10.5 = fsub float 1.000000e+00, %sub10.4
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %sub10.5, float* %arrayidx12.5, align 4, !tbaa !4
  %arrayidx18.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv53
  %11 = load float, float* %arrayidx18.5, align 4, !tbaa !4
  %arrayidx20.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %12 = load float, float* %arrayidx20.5, align 4, !tbaa !4
  %mul.5 = fmul float %11, %12
  %add.5 = fadd float %sub10.5, %mul.5
  %arrayidx24.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv53
  store float %add.5, float* %arrayidx24.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %sub10.6 = fsub float 1.000000e+00, %sub10.5
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %sub10.6, float* %arrayidx12.6, align 4, !tbaa !4
  %arrayidx18.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv53
  %13 = load float, float* %arrayidx18.6, align 4, !tbaa !4
  %arrayidx20.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %14 = load float, float* %arrayidx20.6, align 4, !tbaa !4
  %mul.6 = fmul float %13, %14
  %add.6 = fadd float %sub10.6, %mul.6
  %arrayidx24.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv53
  store float %add.6, float* %arrayidx24.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 256
  br i1 %exitcond.6.not, label %for.cond.cleanup8, label %for.body9.7, !llvm.loop !201

for.body9.7:                                      ; preds = %for.body9
  %sub10.7 = fsub float 1.000000e+00, %sub10.6
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %sub10.7, float* %arrayidx12.7, align 4, !tbaa !4
  %arrayidx18.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv53
  %15 = load float, float* %arrayidx18.7, align 4, !tbaa !4
  %arrayidx20.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %16 = load float, float* %arrayidx20.7, align 4, !tbaa !4
  %mul.7 = fmul float %15, %16
  %add.7 = fadd float %sub10.7, %mul.7
  %arrayidx24.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv53
  store float %add.7, float* %arrayidx24.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body9, !llvm.loop !202
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s257(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s257, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.054 = phi i32 [ 0, %entry ], [ %inc32, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call34 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call35 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s257, i64 0, i64 0)) #11
  ret float %call35

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv55 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next56, %for.cond.cleanup8 ]
  %0 = add nsw i64 %indvars.iv55, -1
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %0
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv55
  %.pre = load float, float* %arrayidx13, align 4, !tbaa !4
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call30 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc32 = add nuw nsw i32 %nl.054, 1
  %exitcond58.not = icmp eq i32 %inc32, 3900
  br i1 %exitcond58.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !203

for.cond.cleanup8:                                ; preds = %for.body9
  %sub14.7.lcssa = phi float [ %sub14.7, %for.body9 ]
  store float %sub14.7.lcssa, float* %arrayidx16, align 4, !tbaa !4
  %indvars.iv.next56 = add nuw nsw i64 %indvars.iv55, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next56, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !204

for.body9:                                        ; preds = %for.body9, %for.cond6.preheader
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv55
  %1 = load float, float* %arrayidx11, align 4, !tbaa !4
  %sub14 = fsub float %1, %.pre
  %arrayidx22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv55
  %2 = load float, float* %arrayidx22, align 4, !tbaa !4
  %add = fadd float %sub14, %2
  store float %add, float* %arrayidx11, align 4, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv55
  %3 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %sub14.1 = fsub float %3, %.pre
  %arrayidx22.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv55
  %4 = load float, float* %arrayidx22.1, align 4, !tbaa !4
  %add.1 = fadd float %sub14.1, %4
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv55
  %5 = load float, float* %arrayidx11.2, align 4, !tbaa !4
  %sub14.2 = fsub float %5, %.pre
  %arrayidx22.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv55
  %6 = load float, float* %arrayidx22.2, align 4, !tbaa !4
  %add.2 = fadd float %sub14.2, %6
  store float %add.2, float* %arrayidx11.2, align 4, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv55
  %7 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %sub14.3 = fsub float %7, %.pre
  %arrayidx22.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv55
  %8 = load float, float* %arrayidx22.3, align 4, !tbaa !4
  %add.3 = fadd float %sub14.3, %8
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv55
  %9 = load float, float* %arrayidx11.4, align 4, !tbaa !4
  %sub14.4 = fsub float %9, %.pre
  %arrayidx22.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv55
  %10 = load float, float* %arrayidx22.4, align 4, !tbaa !4
  %add.4 = fadd float %sub14.4, %10
  store float %add.4, float* %arrayidx11.4, align 4, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv55
  %11 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %sub14.5 = fsub float %11, %.pre
  %arrayidx22.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv55
  %12 = load float, float* %arrayidx22.5, align 4, !tbaa !4
  %add.5 = fadd float %sub14.5, %12
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv55
  %13 = load float, float* %arrayidx11.6, align 4, !tbaa !4
  %sub14.6 = fsub float %13, %.pre
  %arrayidx22.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv55
  %14 = load float, float* %arrayidx22.6, align 4, !tbaa !4
  %add.6 = fadd float %sub14.6, %14
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv55
  %15 = load float, float* %arrayidx11.7, align 4, !tbaa !4
  %sub14.7 = fsub float %15, %.pre
  %arrayidx22.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv55
  %16 = load float, float* %arrayidx22.7, align 4, !tbaa !4
  %add.7 = fadd float %sub14.7, %16
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 256
  br i1 %exitcond.7.not, label %for.cond.cleanup8, label %for.body9, !llvm.loop !205
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s258(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s258, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.048 = phi i32 [ 0, %entry ], [ %inc27, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call29 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call30 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s258, i64 0, i64 0)) #11
  ret float %call30

for.cond.cleanup4:                                ; preds = %for.body5
  %call25 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc27 = add nuw nsw i32 %nl.048, 1
  %exitcond.not = icmp eq i32 %inc27, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !206

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %s.046 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %s.1.7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp ogt float %0, 0.000000e+00
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx9, align 32, !tbaa !4
  %mul = fmul float %1, %1
  %s.1 = select i1 %cmp6, float %mul, float %s.046
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx13, align 32, !tbaa !4
  %mul14 = fmul float %s.1, %2
  %add = fadd float %mul14, %1
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx18, align 32, !tbaa !4
  %add19 = fadd float %s.1, 1.000000e+00
  %arrayidx21 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx21, align 32, !tbaa !4
  %mul22 = fmul float %add19, %3
  %arrayidx24 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  store float %mul22, float* %arrayidx24, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ogt float %4, 0.000000e+00
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %mul.1 = fmul float %5, %5
  %.pre56 = fadd float %mul.1, 1.000000e+00
  %add19.1.pre-phi = select i1 %cmp6.1, float %.pre56, float %add19
  %s.1.1 = select i1 %cmp6.1, float %mul.1, float %s.1
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx13.1, align 4, !tbaa !4
  %mul14.1 = fmul float %s.1.1, %6
  %add.1 = fadd float %mul14.1, %5
  %arrayidx18.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx18.1, align 4, !tbaa !4
  %arrayidx21.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx21.1, align 4, !tbaa !4
  %mul22.1 = fmul float %add19.1.pre-phi, %7
  %arrayidx24.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  store float %mul22.1, float* %arrayidx24.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ogt float %8, 0.000000e+00
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %mul.2 = fmul float %9, %9
  %.pre57 = fadd float %mul.2, 1.000000e+00
  %add19.2.pre-phi = select i1 %cmp6.2, float %.pre57, float %add19.1.pre-phi
  %s.1.2 = select i1 %cmp6.2, float %mul.2, float %s.1.1
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx13.2, align 8, !tbaa !4
  %mul14.2 = fmul float %s.1.2, %10
  %add.2 = fadd float %mul14.2, %9
  %arrayidx18.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx18.2, align 8, !tbaa !4
  %arrayidx21.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx21.2, align 8, !tbaa !4
  %mul22.2 = fmul float %add19.2.pre-phi, %11
  %arrayidx24.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  store float %mul22.2, float* %arrayidx24.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ogt float %12, 0.000000e+00
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %mul.3 = fmul float %13, %13
  %.pre58 = fadd float %mul.3, 1.000000e+00
  %add19.3.pre-phi = select i1 %cmp6.3, float %.pre58, float %add19.2.pre-phi
  %s.1.3 = select i1 %cmp6.3, float %mul.3, float %s.1.2
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx13.3, align 4, !tbaa !4
  %mul14.3 = fmul float %s.1.3, %14
  %add.3 = fadd float %mul14.3, %13
  %arrayidx18.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx18.3, align 4, !tbaa !4
  %arrayidx21.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx21.3, align 4, !tbaa !4
  %mul22.3 = fmul float %add19.3.pre-phi, %15
  %arrayidx24.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  store float %mul22.3, float* %arrayidx24.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ogt float %16, 0.000000e+00
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %mul.4 = fmul float %17, %17
  %.pre59 = fadd float %mul.4, 1.000000e+00
  %add19.4.pre-phi = select i1 %cmp6.4, float %.pre59, float %add19.3.pre-phi
  %s.1.4 = select i1 %cmp6.4, float %mul.4, float %s.1.3
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx13.4, align 16, !tbaa !4
  %mul14.4 = fmul float %s.1.4, %18
  %add.4 = fadd float %mul14.4, %17
  %arrayidx18.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx18.4, align 16, !tbaa !4
  %arrayidx21.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx21.4, align 16, !tbaa !4
  %mul22.4 = fmul float %add19.4.pre-phi, %19
  %arrayidx24.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  store float %mul22.4, float* %arrayidx24.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ogt float %20, 0.000000e+00
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %mul.5 = fmul float %21, %21
  %.pre60 = fadd float %mul.5, 1.000000e+00
  %add19.5.pre-phi = select i1 %cmp6.5, float %.pre60, float %add19.4.pre-phi
  %s.1.5 = select i1 %cmp6.5, float %mul.5, float %s.1.4
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx13.5, align 4, !tbaa !4
  %mul14.5 = fmul float %s.1.5, %22
  %add.5 = fadd float %mul14.5, %21
  %arrayidx18.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx18.5, align 4, !tbaa !4
  %arrayidx21.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.4
  %23 = load float, float* %arrayidx21.5, align 4, !tbaa !4
  %mul22.5 = fmul float %add19.5.pre-phi, %23
  %arrayidx24.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  store float %mul22.5, float* %arrayidx24.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ogt float %24, 0.000000e+00
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %mul.6 = fmul float %25, %25
  %.pre61 = fadd float %mul.6, 1.000000e+00
  %add19.6.pre-phi = select i1 %cmp6.6, float %.pre61, float %add19.5.pre-phi
  %s.1.6 = select i1 %cmp6.6, float %mul.6, float %s.1.5
  %arrayidx13.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx13.6, align 8, !tbaa !4
  %mul14.6 = fmul float %s.1.6, %26
  %add.6 = fadd float %mul14.6, %25
  %arrayidx18.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx18.6, align 8, !tbaa !4
  %arrayidx21.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.5
  %27 = load float, float* %arrayidx21.6, align 8, !tbaa !4
  %mul22.6 = fmul float %add19.6.pre-phi, %27
  %arrayidx24.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  store float %mul22.6, float* %arrayidx24.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ogt float %28, 0.000000e+00
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %29 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %mul.7 = fmul float %29, %29
  %.pre62 = fadd float %mul.7, 1.000000e+00
  %add19.7.pre-phi = select i1 %cmp6.7, float %.pre62, float %add19.6.pre-phi
  %s.1.7 = select i1 %cmp6.7, float %mul.7, float %s.1.6
  %arrayidx13.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx13.7, align 4, !tbaa !4
  %mul14.7 = fmul float %s.1.7, %30
  %add.7 = fadd float %mul14.7, %29
  %arrayidx18.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx18.7, align 4, !tbaa !4
  %arrayidx21.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv.next.6
  %31 = load float, float* %arrayidx21.7, align 4, !tbaa !4
  %mul22.7 = fmul float %add19.7.pre-phi, %31
  %arrayidx24.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  store float %mul22.7, float* %arrayidx24.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 256
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !207
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s261(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s261, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.040 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call23 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call24 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s261, i64 0, i64 0)) #11
  ret float %call24

for.cond.cleanup4:                                ; preds = %for.body5
  %call19 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc21 = add nuw nsw i32 %nl.040, 1
  %exitcond.not = icmp eq i32 %inc21, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !208

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %mul.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx7, align 4, !tbaa !4
  %add = fadd float %1, %2
  %add10 = fadd float %add, %0
  store float %add10, float* %arrayidx, align 4, !tbaa !4
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx14, align 4, !tbaa !4
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx16, align 4, !tbaa !4
  %mul = fmul float %3, %4
  store float %mul, float* %arrayidx14, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add.1 = fadd float %5, %6
  %add10.1 = fadd float %add.1, %mul
  store float %add10.1, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %mul.1 = fmul float %7, %8
  store float %mul.1, float* %arrayidx14.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %add.2 = fadd float %9, %10
  %add10.2 = fadd float %add.2, %mul.1
  store float %add10.2, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx14.2, align 4, !tbaa !4
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %12 = load float, float* %arrayidx16.2, align 4, !tbaa !4
  %mul.2 = fmul float %11, %12
  store float %mul.2, float* %arrayidx14.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add.3 = fadd float %13, %14
  %add10.3 = fadd float %add.3, %mul.2
  store float %add10.3, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %16 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %mul.3 = fmul float %15, %16
  store float %mul.3, float* %arrayidx14.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %add.4 = fadd float %17, %18
  %add10.4 = fadd float %add.4, %mul.3
  store float %add10.4, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx14.4, align 4, !tbaa !4
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %20 = load float, float* %arrayidx16.4, align 4, !tbaa !4
  %mul.4 = fmul float %19, %20
  store float %mul.4, float* %arrayidx14.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add.5 = fadd float %21, %22
  %add10.5 = fadd float %add.5, %mul.4
  store float %add10.5, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %23 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %24 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %mul.5 = fmul float %23, %24
  store float %mul.5, float* %arrayidx14.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %add.6 = fadd float %25, %26
  %add10.6 = fadd float %add.6, %mul.5
  store float %add10.6, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %27 = load float, float* %arrayidx14.6, align 4, !tbaa !4
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %28 = load float, float* %arrayidx16.6, align 4, !tbaa !4
  %mul.6 = fmul float %27, %28
  store float %mul.6, float* %arrayidx14.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 32000
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !209

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %29 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add.7 = fadd float %29, %30
  %add10.7 = fadd float %add.7, %mul.6
  store float %add10.7, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %31 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %32 = load float, float* %arrayidx16.7, align 4, !tbaa !4
  %mul.7 = fmul float %31, %32
  store float %mul.7, float* %arrayidx14.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !210
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s271(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s271, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.029 = phi i32 [ 0, %entry ], [ %inc15, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call17 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call18 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s271, i64 0, i64 0)) #11
  ret float %call18

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call13 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc15 = add nuw nsw i32 %nl.029, 1
  %exitcond.not = icmp eq i32 %inc15, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !211

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp ogt float %0, 0.000000e+00
  br i1 %cmp6, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body5
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx10, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx12, align 32, !tbaa !4
  %add = fadd float %2, %mul
  store float %add, float* %arrayidx12, align 32, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body5
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ogt float %3, 0.000000e+00
  br i1 %cmp6.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %mul.1 = fmul float %3, %4
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %add.1 = fadd float %5, %mul.1
  store float %add.1, float* %arrayidx12.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ogt float %6, 0.000000e+00
  br i1 %cmp6.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %mul.2 = fmul float %6, %7
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx12.2, align 8, !tbaa !4
  %add.2 = fadd float %8, %mul.2
  store float %add.2, float* %arrayidx12.2, align 8, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ogt float %9, 0.000000e+00
  br i1 %cmp6.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %mul.3 = fmul float %9, %10
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx12.3, align 4, !tbaa !4
  %add.3 = fadd float %11, %mul.3
  store float %add.3, float* %arrayidx12.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ogt float %12, 0.000000e+00
  br i1 %cmp6.4, label %if.then.4, label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %mul.4 = fmul float %12, %13
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx12.4, align 16, !tbaa !4
  %add.4 = fadd float %14, %mul.4
  store float %add.4, float* %arrayidx12.4, align 16, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %for.inc.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ogt float %15, 0.000000e+00
  br i1 %cmp6.5, label %if.then.5, label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %mul.5 = fmul float %15, %16
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx12.5, align 4, !tbaa !4
  %add.5 = fadd float %17, %mul.5
  store float %add.5, float* %arrayidx12.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %for.inc.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ogt float %18, 0.000000e+00
  br i1 %cmp6.6, label %if.then.6, label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %mul.6 = fmul float %18, %19
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %20 = load float, float* %arrayidx12.6, align 8, !tbaa !4
  %add.6 = fadd float %20, %mul.6
  store float %add.6, float* %arrayidx12.6, align 8, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %for.inc.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ogt float %21, 0.000000e+00
  br i1 %cmp6.7, label %if.then.7, label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %mul.7 = fmul float %21, %22
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %23 = load float, float* %arrayidx12.7, align 4, !tbaa !4
  %add.7 = fadd float %23, %mul.7
  store float %add.7, float* %arrayidx12.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %for.inc.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !212
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s272(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %2 = load i32, i32* %1, align 4, !tbaa !97
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s272, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %conv = sitofp i32 %2 to float
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.043 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call26 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call27 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s272, i64 0, i64 0)) #11
  ret float %call27

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call22 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc24 = add nuw nsw i32 %nl.043, 1
  %exitcond.not = icmp eq i32 %inc24, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !213

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp ult float %3, %conv
  br i1 %cmp6, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body5
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx9, align 32, !tbaa !4
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %5 = load float, float* %arrayidx11, align 32, !tbaa !4
  %mul = fmul float %4, %5
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %6 = load float, float* %arrayidx13, align 32, !tbaa !4
  %add = fadd float %6, %mul
  store float %add, float* %arrayidx13, align 32, !tbaa !4
  %mul18 = fmul float %4, %4
  %arrayidx20 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %7 = load float, float* %arrayidx20, align 32, !tbaa !4
  %add21 = fadd float %mul18, %7
  store float %add21, float* %arrayidx20, align 32, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body5
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ult float %8, %conv
  br i1 %cmp6.1, label %for.inc.1, label %if.then.1

if.then.1:                                        ; preds = %for.inc
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %9 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %10 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %mul.1 = fmul float %9, %10
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %11 = load float, float* %arrayidx13.1, align 4, !tbaa !4
  %add.1 = fadd float %11, %mul.1
  store float %add.1, float* %arrayidx13.1, align 4, !tbaa !4
  %mul18.1 = fmul float %9, %9
  %arrayidx20.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %12 = load float, float* %arrayidx20.1, align 4, !tbaa !4
  %add21.1 = fadd float %mul18.1, %12
  store float %add21.1, float* %arrayidx20.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %13 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ult float %13, %conv
  br i1 %cmp6.2, label %for.inc.2, label %if.then.2

if.then.2:                                        ; preds = %for.inc.1
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %14 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %15 = load float, float* %arrayidx11.2, align 8, !tbaa !4
  %mul.2 = fmul float %14, %15
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %16 = load float, float* %arrayidx13.2, align 8, !tbaa !4
  %add.2 = fadd float %16, %mul.2
  store float %add.2, float* %arrayidx13.2, align 8, !tbaa !4
  %mul18.2 = fmul float %14, %14
  %arrayidx20.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %17 = load float, float* %arrayidx20.2, align 8, !tbaa !4
  %add21.2 = fadd float %mul18.2, %17
  store float %add21.2, float* %arrayidx20.2, align 8, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %18 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ult float %18, %conv
  br i1 %cmp6.3, label %for.inc.3, label %if.then.3

if.then.3:                                        ; preds = %for.inc.2
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %19 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %20 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %mul.3 = fmul float %19, %20
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %21 = load float, float* %arrayidx13.3, align 4, !tbaa !4
  %add.3 = fadd float %21, %mul.3
  store float %add.3, float* %arrayidx13.3, align 4, !tbaa !4
  %mul18.3 = fmul float %19, %19
  %arrayidx20.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %22 = load float, float* %arrayidx20.3, align 4, !tbaa !4
  %add21.3 = fadd float %mul18.3, %22
  store float %add21.3, float* %arrayidx20.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %23 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ult float %23, %conv
  br i1 %cmp6.4, label %for.inc.4, label %if.then.4

if.then.4:                                        ; preds = %for.inc.3
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %24 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %25 = load float, float* %arrayidx11.4, align 16, !tbaa !4
  %mul.4 = fmul float %24, %25
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %26 = load float, float* %arrayidx13.4, align 16, !tbaa !4
  %add.4 = fadd float %26, %mul.4
  store float %add.4, float* %arrayidx13.4, align 16, !tbaa !4
  %mul18.4 = fmul float %24, %24
  %arrayidx20.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %27 = load float, float* %arrayidx20.4, align 16, !tbaa !4
  %add21.4 = fadd float %mul18.4, %27
  store float %add21.4, float* %arrayidx20.4, align 16, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %for.inc.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %28 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ult float %28, %conv
  br i1 %cmp6.5, label %for.inc.5, label %if.then.5

if.then.5:                                        ; preds = %for.inc.4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %29 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %30 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %mul.5 = fmul float %29, %30
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %31 = load float, float* %arrayidx13.5, align 4, !tbaa !4
  %add.5 = fadd float %31, %mul.5
  store float %add.5, float* %arrayidx13.5, align 4, !tbaa !4
  %mul18.5 = fmul float %29, %29
  %arrayidx20.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %32 = load float, float* %arrayidx20.5, align 4, !tbaa !4
  %add21.5 = fadd float %mul18.5, %32
  store float %add21.5, float* %arrayidx20.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %for.inc.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %33 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ult float %33, %conv
  br i1 %cmp6.6, label %for.inc.6, label %if.then.6

if.then.6:                                        ; preds = %for.inc.5
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %34 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %35 = load float, float* %arrayidx11.6, align 8, !tbaa !4
  %mul.6 = fmul float %34, %35
  %arrayidx13.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %36 = load float, float* %arrayidx13.6, align 8, !tbaa !4
  %add.6 = fadd float %36, %mul.6
  store float %add.6, float* %arrayidx13.6, align 8, !tbaa !4
  %mul18.6 = fmul float %34, %34
  %arrayidx20.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %37 = load float, float* %arrayidx20.6, align 8, !tbaa !4
  %add21.6 = fadd float %mul18.6, %37
  store float %add21.6, float* %arrayidx20.6, align 8, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %for.inc.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %38 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ult float %38, %conv
  br i1 %cmp6.7, label %for.inc.7, label %if.then.7

if.then.7:                                        ; preds = %for.inc.6
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %39 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %40 = load float, float* %arrayidx11.7, align 4, !tbaa !4
  %mul.7 = fmul float %39, %40
  %arrayidx13.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %41 = load float, float* %arrayidx13.7, align 4, !tbaa !4
  %add.7 = fadd float %41, %mul.7
  store float %add.7, float* %arrayidx13.7, align 4, !tbaa !4
  %mul18.7 = fmul float %39, %39
  %arrayidx20.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %42 = load float, float* %arrayidx20.7, align 4, !tbaa !4
  %add21.7 = fadd float %mul18.7, %42
  store float %add21.7, float* %arrayidx20.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %for.inc.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !214
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s273(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s273, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.051 = phi i32 [ 0, %entry ], [ %inc31, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call33 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call34 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s273, i64 0, i64 0)) #11
  ret float %call34

for.cond.cleanup4:                                ; preds = %if.end.7
  %call29 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc31 = add nuw nsw i32 %nl.051, 1
  %exitcond.not = icmp eq i32 %inc31, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !215

for.body5:                                        ; preds = %if.end.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %if.end.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %add = fadd float %2, %mul
  store float %add, float* %arrayidx9, align 32, !tbaa !4
  %cmp12 = fcmp olt float %add, 0.000000e+00
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %for.body5
  %arrayidx19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx19, align 32, !tbaa !4
  %add20 = fadd float %mul, %3
  store float %add20, float* %arrayidx19, align 32, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body5
  %mul25 = fmul float %0, %add
  %arrayidx27 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx27, align 32, !tbaa !4
  %add28 = fadd float %mul25, %4
  store float %add28, float* %arrayidx27, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %mul.1 = fmul float %5, %6
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %add.1 = fadd float %7, %mul.1
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  %cmp12.1 = fcmp olt float %add.1, 0.000000e+00
  br i1 %cmp12.1, label %if.then.1, label %if.end.1

if.then.1:                                        ; preds = %if.end
  %arrayidx19.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx19.1, align 4, !tbaa !4
  %add20.1 = fadd float %mul.1, %8
  store float %add20.1, float* %arrayidx19.1, align 4, !tbaa !4
  br label %if.end.1

if.end.1:                                         ; preds = %if.then.1, %if.end
  %mul25.1 = fmul float %5, %add.1
  %arrayidx27.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %9 = load float, float* %arrayidx27.1, align 4, !tbaa !4
  %add28.1 = fadd float %mul25.1, %9
  store float %add28.1, float* %arrayidx27.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %mul.2 = fmul float %10, %11
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %12 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %add.2 = fadd float %12, %mul.2
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !4
  %cmp12.2 = fcmp olt float %add.2, 0.000000e+00
  br i1 %cmp12.2, label %if.then.2, label %if.end.2

if.then.2:                                        ; preds = %if.end.1
  %arrayidx19.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %13 = load float, float* %arrayidx19.2, align 8, !tbaa !4
  %add20.2 = fadd float %mul.2, %13
  store float %add20.2, float* %arrayidx19.2, align 8, !tbaa !4
  br label %if.end.2

if.end.2:                                         ; preds = %if.then.2, %if.end.1
  %mul25.2 = fmul float %10, %add.2
  %arrayidx27.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %14 = load float, float* %arrayidx27.2, align 8, !tbaa !4
  %add28.2 = fadd float %mul25.2, %14
  store float %add28.2, float* %arrayidx27.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %16 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %mul.3 = fmul float %15, %16
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %17 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %add.3 = fadd float %17, %mul.3
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
  %cmp12.3 = fcmp olt float %add.3, 0.000000e+00
  br i1 %cmp12.3, label %if.then.3, label %if.end.3

if.then.3:                                        ; preds = %if.end.2
  %arrayidx19.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %18 = load float, float* %arrayidx19.3, align 4, !tbaa !4
  %add20.3 = fadd float %mul.3, %18
  store float %add20.3, float* %arrayidx19.3, align 4, !tbaa !4
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.3, %if.end.2
  %mul25.3 = fmul float %15, %add.3
  %arrayidx27.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %19 = load float, float* %arrayidx27.3, align 4, !tbaa !4
  %add28.3 = fadd float %mul25.3, %19
  store float %add28.3, float* %arrayidx27.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %20 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %21 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %mul.4 = fmul float %20, %21
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %22 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %add.4 = fadd float %22, %mul.4
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !4
  %cmp12.4 = fcmp olt float %add.4, 0.000000e+00
  br i1 %cmp12.4, label %if.then.4, label %if.end.4

if.then.4:                                        ; preds = %if.end.3
  %arrayidx19.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %23 = load float, float* %arrayidx19.4, align 16, !tbaa !4
  %add20.4 = fadd float %mul.4, %23
  store float %add20.4, float* %arrayidx19.4, align 16, !tbaa !4
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.4, %if.end.3
  %mul25.4 = fmul float %20, %add.4
  %arrayidx27.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %24 = load float, float* %arrayidx27.4, align 16, !tbaa !4
  %add28.4 = fadd float %mul25.4, %24
  store float %add28.4, float* %arrayidx27.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %26 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %mul.5 = fmul float %25, %26
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %27 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %add.5 = fadd float %27, %mul.5
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
  %cmp12.5 = fcmp olt float %add.5, 0.000000e+00
  br i1 %cmp12.5, label %if.then.5, label %if.end.5

if.then.5:                                        ; preds = %if.end.4
  %arrayidx19.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %28 = load float, float* %arrayidx19.5, align 4, !tbaa !4
  %add20.5 = fadd float %mul.5, %28
  store float %add20.5, float* %arrayidx19.5, align 4, !tbaa !4
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.5, %if.end.4
  %mul25.5 = fmul float %25, %add.5
  %arrayidx27.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %29 = load float, float* %arrayidx27.5, align 4, !tbaa !4
  %add28.5 = fadd float %mul25.5, %29
  store float %add28.5, float* %arrayidx27.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %30 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %31 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %mul.6 = fmul float %30, %31
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %32 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %add.6 = fadd float %32, %mul.6
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !4
  %cmp12.6 = fcmp olt float %add.6, 0.000000e+00
  br i1 %cmp12.6, label %if.then.6, label %if.end.6

if.then.6:                                        ; preds = %if.end.5
  %arrayidx19.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %33 = load float, float* %arrayidx19.6, align 8, !tbaa !4
  %add20.6 = fadd float %mul.6, %33
  store float %add20.6, float* %arrayidx19.6, align 8, !tbaa !4
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.6, %if.end.5
  %mul25.6 = fmul float %30, %add.6
  %arrayidx27.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %34 = load float, float* %arrayidx27.6, align 8, !tbaa !4
  %add28.6 = fadd float %mul25.6, %34
  store float %add28.6, float* %arrayidx27.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %35 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %36 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %mul.7 = fmul float %35, %36
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %37 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %add.7 = fadd float %37, %mul.7
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
  %cmp12.7 = fcmp olt float %add.7, 0.000000e+00
  br i1 %cmp12.7, label %if.then.7, label %if.end.7

if.then.7:                                        ; preds = %if.end.6
  %arrayidx19.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %38 = load float, float* %arrayidx19.7, align 4, !tbaa !4
  %add20.7 = fadd float %mul.7, %38
  store float %add20.7, float* %arrayidx19.7, align 4, !tbaa !4
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.7, %if.end.6
  %mul25.7 = fmul float %35, %add.7
  %arrayidx27.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %39 = load float, float* %arrayidx27.7, align 4, !tbaa !4
  %add28.7 = fadd float %mul25.7, %39
  store float %add28.7, float* %arrayidx27.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !216
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s274(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s274, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.052 = phi i32 [ 0, %entry ], [ %inc31, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call33 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call34 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s274, i64 0, i64 0)) #11
  ret float %call34

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call29 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc31 = add nuw nsw i32 %nl.052, 1
  %exitcond.not = icmp eq i32 %inc31, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !217

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %mul = fmul float %1, %2
  %add = fadd float %0, %mul
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx11, align 32, !tbaa !4
  %cmp14 = fcmp ogt float %add, 0.000000e+00
  br i1 %cmp14, label %if.then, label %if.else

if.then:                                          ; preds = %for.body5
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx18, align 32, !tbaa !4
  %add19 = fadd float %add, %3
  store float %add19, float* %arrayidx18, align 32, !tbaa !4
  br label %for.inc

if.else:                                          ; preds = %for.body5
  store float %mul, float* %arrayidx11, align 32, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.else, %if.then
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %mul.1 = fmul float %5, %6
  %add.1 = fadd float %4, %mul.1
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  %cmp14.1 = fcmp ogt float %add.1, 0.000000e+00
  br i1 %cmp14.1, label %if.then.1, label %if.else.1

if.else.1:                                        ; preds = %for.inc
  store float %mul.1, float* %arrayidx11.1, align 4, !tbaa !4
  br label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %arrayidx18.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx18.1, align 4, !tbaa !4
  %add19.1 = fadd float %add.1, %7
  store float %add19.1, float* %arrayidx18.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %if.else.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %mul.2 = fmul float %9, %10
  %add.2 = fadd float %8, %mul.2
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !4
  %cmp14.2 = fcmp ogt float %add.2, 0.000000e+00
  br i1 %cmp14.2, label %if.then.2, label %if.else.2

if.else.2:                                        ; preds = %for.inc.1
  store float %mul.2, float* %arrayidx11.2, align 8, !tbaa !4
  br label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %arrayidx18.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx18.2, align 8, !tbaa !4
  %add19.2 = fadd float %add.2, %11
  store float %add19.2, float* %arrayidx18.2, align 8, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %if.else.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %mul.3 = fmul float %13, %14
  %add.3 = fadd float %12, %mul.3
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  %cmp14.3 = fcmp ogt float %add.3, 0.000000e+00
  br i1 %cmp14.3, label %if.then.3, label %if.else.3

if.else.3:                                        ; preds = %for.inc.2
  store float %mul.3, float* %arrayidx11.3, align 4, !tbaa !4
  br label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %arrayidx18.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx18.3, align 4, !tbaa !4
  %add19.3 = fadd float %add.3, %15
  store float %add19.3, float* %arrayidx18.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %if.else.3
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %mul.4 = fmul float %17, %18
  %add.4 = fadd float %16, %mul.4
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !4
  %cmp14.4 = fcmp ogt float %add.4, 0.000000e+00
  br i1 %cmp14.4, label %if.then.4, label %if.else.4

if.else.4:                                        ; preds = %for.inc.3
  store float %mul.4, float* %arrayidx11.4, align 16, !tbaa !4
  br label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %arrayidx18.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx18.4, align 16, !tbaa !4
  %add19.4 = fadd float %add.4, %19
  store float %add19.4, float* %arrayidx18.4, align 16, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %if.else.4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %mul.5 = fmul float %21, %22
  %add.5 = fadd float %20, %mul.5
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  %cmp14.5 = fcmp ogt float %add.5, 0.000000e+00
  br i1 %cmp14.5, label %if.then.5, label %if.else.5

if.else.5:                                        ; preds = %for.inc.4
  store float %mul.5, float* %arrayidx11.5, align 4, !tbaa !4
  br label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %arrayidx18.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %23 = load float, float* %arrayidx18.5, align 4, !tbaa !4
  %add19.5 = fadd float %add.5, %23
  store float %add19.5, float* %arrayidx18.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %if.else.5
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %mul.6 = fmul float %25, %26
  %add.6 = fadd float %24, %mul.6
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !4
  %cmp14.6 = fcmp ogt float %add.6, 0.000000e+00
  br i1 %cmp14.6, label %if.then.6, label %if.else.6

if.else.6:                                        ; preds = %for.inc.5
  store float %mul.6, float* %arrayidx11.6, align 8, !tbaa !4
  br label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %arrayidx18.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %27 = load float, float* %arrayidx18.6, align 8, !tbaa !4
  %add19.6 = fadd float %add.6, %27
  store float %add19.6, float* %arrayidx18.6, align 8, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %if.else.6
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %29 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %mul.7 = fmul float %29, %30
  %add.7 = fadd float %28, %mul.7
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
  %cmp14.7 = fcmp ogt float %add.7, 0.000000e+00
  br i1 %cmp14.7, label %if.then.7, label %if.else.7

if.else.7:                                        ; preds = %for.inc.6
  store float %mul.7, float* %arrayidx11.7, align 4, !tbaa !4
  br label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %arrayidx18.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %31 = load float, float* %arrayidx18.7, align 4, !tbaa !4
  %add19.7 = fadd float %add.7, %31
  store float %add19.7, float* %arrayidx18.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %if.else.7
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !218
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s275(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s275, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.054 = phi i32 [ 0, %entry ], [ %inc32, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call34 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call35 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s275, i64 0, i64 0)) #11
  ret float %call35

for.cond.cleanup4:                                ; preds = %for.inc27
  %call30 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc32 = add nuw nsw i32 %nl.054, 1
  %exitcond58.not = icmp eq i32 %inc32, 3900
  br i1 %exitcond58.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !219

for.body5:                                        ; preds = %for.inc27, %for.cond2.preheader
  %indvars.iv56 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next57, %for.inc27 ]
  %arrayidx = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv56
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %cmp6 = fcmp ogt float %0, 0.000000e+00
  br i1 %cmp6, label %for.body10.preheader, label %for.inc27

for.body10.preheader:                             ; preds = %for.body5
  br label %for.body10

for.body10:                                       ; preds = %for.body10.preheader, %for.body10.7
  %1 = phi float [ %add.7, %for.body10.7 ], [ %0, %for.body10.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body10.7 ], [ 1, %for.body10.preheader ]
  %arrayidx18 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv56
  %2 = load float, float* %arrayidx18, align 4, !tbaa !4
  %arrayidx22 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv, i64 %indvars.iv56
  %3 = load float, float* %arrayidx22, align 4, !tbaa !4
  %mul = fmul float %2, %3
  %add = fadd float %1, %mul
  %arrayidx26 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv56
  store float %add, float* %arrayidx26, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx18.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv56
  %4 = load float, float* %arrayidx18.1, align 4, !tbaa !4
  %arrayidx22.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next, i64 %indvars.iv56
  %5 = load float, float* %arrayidx22.1, align 4, !tbaa !4
  %mul.1 = fmul float %4, %5
  %add.1 = fadd float %add, %mul.1
  %arrayidx26.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv56
  store float %add.1, float* %arrayidx26.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx18.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv56
  %6 = load float, float* %arrayidx18.2, align 4, !tbaa !4
  %arrayidx22.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv56
  %7 = load float, float* %arrayidx22.2, align 4, !tbaa !4
  %mul.2 = fmul float %6, %7
  %add.2 = fadd float %add.1, %mul.2
  %arrayidx26.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv56
  store float %add.2, float* %arrayidx26.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx18.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv56
  %8 = load float, float* %arrayidx18.3, align 4, !tbaa !4
  %arrayidx22.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv56
  %9 = load float, float* %arrayidx22.3, align 4, !tbaa !4
  %mul.3 = fmul float %8, %9
  %add.3 = fadd float %add.2, %mul.3
  %arrayidx26.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv56
  store float %add.3, float* %arrayidx26.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx18.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv56
  %10 = load float, float* %arrayidx18.4, align 4, !tbaa !4
  %arrayidx22.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv56
  %11 = load float, float* %arrayidx22.4, align 4, !tbaa !4
  %mul.4 = fmul float %10, %11
  %add.4 = fadd float %add.3, %mul.4
  %arrayidx26.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv56
  store float %add.4, float* %arrayidx26.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx18.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv56
  %12 = load float, float* %arrayidx18.5, align 4, !tbaa !4
  %arrayidx22.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv56
  %13 = load float, float* %arrayidx22.5, align 4, !tbaa !4
  %mul.5 = fmul float %12, %13
  %add.5 = fadd float %add.4, %mul.5
  %arrayidx26.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv56
  store float %add.5, float* %arrayidx26.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx18.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv56
  %14 = load float, float* %arrayidx18.6, align 4, !tbaa !4
  %arrayidx22.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv56
  %15 = load float, float* %arrayidx22.6, align 4, !tbaa !4
  %mul.6 = fmul float %14, %15
  %add.6 = fadd float %add.5, %mul.6
  %arrayidx26.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv56
  store float %add.6, float* %arrayidx26.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 256
  br i1 %exitcond.6.not, label %for.inc27.loopexit, label %for.body10.7, !llvm.loop !220

for.inc27.loopexit:                               ; preds = %for.body10
  br label %for.inc27

for.inc27:                                        ; preds = %for.inc27.loopexit, %for.body5
  %indvars.iv.next57 = add nuw nsw i64 %indvars.iv56, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next57, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !221

for.body10.7:                                     ; preds = %for.body10
  %arrayidx18.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv56
  %16 = load float, float* %arrayidx18.7, align 4, !tbaa !4
  %arrayidx22.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv56
  %17 = load float, float* %arrayidx22.7, align 4, !tbaa !4
  %mul.7 = fmul float %16, %17
  %add.7 = fadd float %add.6, %mul.7
  %arrayidx26.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv56
  store float %add.7, float* %arrayidx26.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body10, !llvm.loop !222
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s2275(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2275, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.064 = phi i32 [ 0, %entry ], [ %inc39, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call41 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call42 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2275, i64 0, i64 0)) #11
  ret float %call42

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv65 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next66, %for.cond.cleanup8 ]
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call37 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc39 = add nuw nsw i32 %nl.064, 1
  %exitcond67.not = icmp eq i32 %inc39, 39000
  br i1 %exitcond67.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !223

for.cond.cleanup8:                                ; preds = %for.body9
  %arrayidx25 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv65
  %0 = load float, float* %arrayidx25, align 4, !tbaa !4
  %arrayidx27 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv65
  %1 = load float, float* %arrayidx27, align 4, !tbaa !4
  %arrayidx29 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv65
  %2 = load float, float* %arrayidx29, align 4, !tbaa !4
  %mul30 = fmul float %1, %2
  %add31 = fadd float %0, %mul30
  %arrayidx33 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv65
  store float %add31, float* %arrayidx33, align 4, !tbaa !4
  %indvars.iv.next66 = add nuw nsw i64 %indvars.iv65, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next66, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !224

for.body9:                                        ; preds = %for.body9, %for.cond6.preheader
  %indvar = phi i64 [ %indvar.next, %for.body9 ], [ 0, %for.cond6.preheader ]
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvar, i64 %indvars.iv65
  %3 = load float, float* %arrayidx11, align 4, !tbaa !4
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvar, i64 %indvars.iv65
  %4 = load float, float* %arrayidx15, align 4, !tbaa !4
  %arrayidx19 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvar, i64 %indvars.iv65
  %5 = load float, float* %arrayidx19, align 4, !tbaa !4
  %mul = fmul float %4, %5
  %add = fadd float %3, %mul
  store float %add, float* %arrayidx11, align 4, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 255
  br i1 %exitcond, label %for.cond.cleanup8, label %for.body9, !llvm.loop !225
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s276(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s276, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.040 = phi i32 [ 0, %entry ], [ %inc22, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call24 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call25 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s276, i64 0, i64 0)) #11
  ret float %call25

for.cond.cleanup4:                                ; preds = %for.inc.6
  %call20 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc22 = add nuw nsw i32 %nl.040, 1
  %exitcond.not = icmp eq i32 %inc22, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !226

for.body5:                                        ; preds = %for.inc.6, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.6 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %cmp6 = icmp ult i64 %indvars.iv, 15999
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  br i1 %cmp6, label %for.inc, label %for.inc.thread

for.inc.thread:                                   ; preds = %for.body5
  %arrayidx15 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx15, align 32, !tbaa !4
  %mul16 = fmul float %0, %1
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx18, align 32, !tbaa !4
  %add19 = fadd float %2, %mul16
  store float %add19, float* %arrayidx18, align 32, !tbaa !4
  %indvars.iv.next.141 = or i64 %indvars.iv, 2
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx13.1, align 4, !tbaa !4
  %arrayidx15.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx15.1, align 4, !tbaa !4
  %mul16.1 = fmul float %3, %4
  %arrayidx18.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx18.1, align 4, !tbaa !4
  %add19.1 = fadd float %5, %mul16.1
  store float %add19.1, float* %arrayidx18.1, align 4, !tbaa !4
  %indvars.iv.next.246 = or i64 %indvars.iv, 3
  br label %for.inc.2.thread

for.inc:                                          ; preds = %for.body5
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %6 = load float, float* %arrayidx8, align 32, !tbaa !4
  %mul = fmul float %0, %6
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %7 = load float, float* %arrayidx10, align 32, !tbaa !4
  %add11 = fadd float %7, %mul
  store float %add11, float* %arrayidx10, align 32, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %9 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %mul.1 = fmul float %8, %9
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %10 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %add11.1 = fadd float %10, %mul.1
  store float %add11.1, float* %arrayidx10.1, align 4, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %cmp6.2 = icmp ult i64 %indvars.iv, 15997
  br i1 %cmp6.2, label %for.inc.2, label %for.inc.2.thread

for.inc.2.thread:                                 ; preds = %for.inc, %for.inc.thread
  %indvars.iv.next.250 = phi i64 [ %indvars.iv.next.246, %for.inc.thread ], [ %indvars.iv.next.2, %for.inc ]
  %indvars.iv.next.14348 = phi i64 [ %indvars.iv.next.141, %for.inc.thread ], [ %indvars.iv.next.1, %for.inc ]
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.14348
  %11 = load float, float* %arrayidx13.2, align 8, !tbaa !4
  %arrayidx15.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.14348
  %12 = load float, float* %arrayidx15.2, align 8, !tbaa !4
  %mul16.2 = fmul float %11, %12
  %arrayidx18.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.14348
  %13 = load float, float* %arrayidx18.2, align 8, !tbaa !4
  %add19.2 = fadd float %13, %mul16.2
  store float %add19.2, float* %arrayidx18.2, align 8, !tbaa !4
  %indvars.iv.next.352 = or i64 %indvars.iv, 4
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.250
  %14 = load float, float* %arrayidx13.3, align 4, !tbaa !4
  %arrayidx15.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.250
  %15 = load float, float* %arrayidx15.3, align 4, !tbaa !4
  %mul16.3 = fmul float %14, %15
  %arrayidx18.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.250
  %16 = load float, float* %arrayidx18.3, align 4, !tbaa !4
  %add19.3 = fadd float %16, %mul16.3
  store float %add19.3, float* %arrayidx18.3, align 4, !tbaa !4
  %indvars.iv.next.458 = or i64 %indvars.iv, 5
  br label %for.inc.4.thread

for.inc.2:                                        ; preds = %for.inc
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %17 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %18 = load float, float* %arrayidx8.2, align 8, !tbaa !4
  %mul.2 = fmul float %17, %18
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %19 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %add11.2 = fadd float %19, %mul.2
  store float %add11.2, float* %arrayidx10.2, align 8, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %20 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %21 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %mul.3 = fmul float %20, %21
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %22 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %add11.3 = fadd float %22, %mul.3
  store float %add11.3, float* %arrayidx10.3, align 4, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %cmp6.4 = icmp ult i64 %indvars.iv, 15995
  br i1 %cmp6.4, label %for.inc.4, label %for.inc.4.thread

for.inc.4.thread:                                 ; preds = %for.inc.2, %for.inc.2.thread
  %indvars.iv.next.462 = phi i64 [ %indvars.iv.next.458, %for.inc.2.thread ], [ %indvars.iv.next.4, %for.inc.2 ]
  %indvars.iv.next.35560 = phi i64 [ %indvars.iv.next.352, %for.inc.2.thread ], [ %indvars.iv.next.3, %for.inc.2 ]
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.35560
  %23 = load float, float* %arrayidx13.4, align 16, !tbaa !4
  %arrayidx15.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.35560
  %24 = load float, float* %arrayidx15.4, align 16, !tbaa !4
  %mul16.4 = fmul float %23, %24
  %arrayidx18.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.35560
  %25 = load float, float* %arrayidx18.4, align 16, !tbaa !4
  %add19.4 = fadd float %25, %mul16.4
  store float %add19.4, float* %arrayidx18.4, align 16, !tbaa !4
  %indvars.iv.next.564 = or i64 %indvars.iv, 6
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.462
  %26 = load float, float* %arrayidx13.5, align 4, !tbaa !4
  %arrayidx15.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.462
  %27 = load float, float* %arrayidx15.5, align 4, !tbaa !4
  %mul16.5 = fmul float %26, %27
  %arrayidx18.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.462
  %28 = load float, float* %arrayidx18.5, align 4, !tbaa !4
  %add19.5 = fadd float %28, %mul16.5
  store float %add19.5, float* %arrayidx18.5, align 4, !tbaa !4
  %indvars.iv.next.670 = or i64 %indvars.iv, 7
  br label %if.else.6

for.inc.4:                                        ; preds = %for.inc.2
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %29 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %30 = load float, float* %arrayidx8.4, align 16, !tbaa !4
  %mul.4 = fmul float %29, %30
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %31 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %add11.4 = fadd float %31, %mul.4
  store float %add11.4, float* %arrayidx10.4, align 16, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %32 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %33 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %mul.5 = fmul float %32, %33
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %34 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %add11.5 = fadd float %34, %mul.5
  store float %add11.5, float* %arrayidx10.5, align 4, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %cmp6.6 = icmp ult i64 %indvars.iv, 15993
  br i1 %cmp6.6, label %if.then.6, label %if.else.6

if.else.6:                                        ; preds = %for.inc.4, %for.inc.4.thread
  %indvars.iv.next.674 = phi i64 [ %indvars.iv.next.670, %for.inc.4.thread ], [ %indvars.iv.next.6, %for.inc.4 ]
  %indvars.iv.next.56772 = phi i64 [ %indvars.iv.next.564, %for.inc.4.thread ], [ %indvars.iv.next.5, %for.inc.4 ]
  %arrayidx15.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.56772
  br label %for.inc.6

if.then.6:                                        ; preds = %for.inc.4
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %if.else.6
  %arrayidx8.6.sink = phi float* [ %arrayidx8.6, %if.then.6 ], [ %arrayidx15.6, %if.else.6 ]
  %indvars.iv.next.5.sink = phi i64 [ %indvars.iv.next.5, %if.then.6 ], [ %indvars.iv.next.56772, %if.else.6 ]
  %indvars.iv.next.673 = phi i64 [ %indvars.iv.next.6, %if.then.6 ], [ %indvars.iv.next.674, %if.else.6 ]
  %.sink.in = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5.sink
  %.sink = load float, float* %.sink.in, align 8, !tbaa !4
  %35 = load float, float* %arrayidx8.6.sink, align 8, !tbaa !4
  %mul.6 = fmul float %.sink, %35
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5.sink
  %36 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %add11.6 = fadd float %36, %mul.6
  store float %add11.6, float* %arrayidx10.6, align 8, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %cmp6.7 = icmp ult i64 %indvars.iv.next.673, 15999
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.673
  %37 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %c.sink = select i1 %cmp6.7, [32000 x float]* @c, [32000 x float]* @d
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* %c.sink, i64 0, i64 %indvars.iv.next.673
  %38 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %mul.7 = fmul float %37, %38
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.673
  %39 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %add11.7 = fadd float %39, %mul.7
  store float %add11.7, float* %arrayidx10.7, align 4, !tbaa !4
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !227
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s277(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s277, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.050 = phi i32 [ 0, %entry ], [ %inc31, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call33 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call34 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s277, i64 0, i64 0)) #11
  ret float %call34

for.cond.cleanup4:                                ; preds = %for.inc.6
  %call29 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc31 = add nuw nsw i32 %nl.050, 1
  %exitcond.not = icmp eq i32 %inc31, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !228

for.body5:                                        ; preds = %for.body5.backedge, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.be, %for.body5.backedge ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %cmp6 = fcmp ult float %0, 0.000000e+00
  br i1 %cmp6, label %if.end, label %for.body5.for.inc_crit_edge

for.body5.for.inc_crit_edge:                      ; preds = %for.body5
  %.pre67 = add nuw nsw i64 %indvars.iv, 1
  br label %for.inc

if.end:                                           ; preds = %for.body5
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx8, align 4, !tbaa !4
  %cmp9 = fcmp ult float %1, 0.000000e+00
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx13, align 4, !tbaa !4
  %arrayidx15 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx15, align 4, !tbaa !4
  br i1 %cmp9, label %if.end11, label %L30

if.end11:                                         ; preds = %if.end
  %mul = fmul float %2, %3
  %add = fadd float %0, %mul
  store float %add, float* %arrayidx, align 4, !tbaa !4
  br label %L30

L30:                                              ; preds = %if.end11, %if.end
  %arrayidx23 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx23, align 4, !tbaa !4
  %mul24 = fmul float %3, %4
  %add25 = fadd float %2, %mul24
  %5 = add nuw nsw i64 %indvars.iv, 1
  %arrayidx28 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %5
  store float %add25, float* %arrayidx28, align 4, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %L30, %for.body5.for.inc_crit_edge
  %indvars.iv.next.pre-phi = phi i64 [ %.pre67, %for.body5.for.inc_crit_edge ], [ %5, %L30 ]
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.pre-phi
  %6 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ult float %6, 0.000000e+00
  br i1 %cmp6.1, label %if.end.1, label %for.inc.for.inc.1_crit_edge

for.inc.for.inc.1_crit_edge:                      ; preds = %for.inc
  %.pre68 = add nuw nsw i64 %indvars.iv.next.pre-phi, 1
  br label %for.inc.1

if.end.1:                                         ; preds = %for.inc
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.pre-phi
  %7 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %cmp9.1 = fcmp ult float %7, 0.000000e+00
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.pre-phi
  %8 = load float, float* %arrayidx13.1, align 4, !tbaa !4
  %arrayidx15.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.pre-phi
  %9 = load float, float* %arrayidx15.1, align 4, !tbaa !4
  br i1 %cmp9.1, label %if.end11.1, label %L30.1

if.end11.1:                                       ; preds = %if.end.1
  %mul.1 = fmul float %8, %9
  %add.1 = fadd float %6, %mul.1
  store float %add.1, float* %arrayidx.1, align 4, !tbaa !4
  br label %L30.1

L30.1:                                            ; preds = %if.end11.1, %if.end.1
  %arrayidx23.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.pre-phi
  %10 = load float, float* %arrayidx23.1, align 4, !tbaa !4
  %mul24.1 = fmul float %9, %10
  %add25.1 = fadd float %8, %mul24.1
  %11 = add nuw nsw i64 %indvars.iv.next.pre-phi, 1
  %arrayidx28.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %11
  store float %add25.1, float* %arrayidx28.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %L30.1, %for.inc.for.inc.1_crit_edge
  %indvars.iv.next.1.pre-phi = phi i64 [ %.pre68, %for.inc.for.inc.1_crit_edge ], [ %11, %L30.1 ]
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1.pre-phi
  %12 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %cmp6.2 = fcmp ult float %12, 0.000000e+00
  br i1 %cmp6.2, label %if.end.2, label %for.inc.1.for.inc.2_crit_edge

for.inc.1.for.inc.2_crit_edge:                    ; preds = %for.inc.1
  %.pre69 = add nuw nsw i64 %indvars.iv.next.1.pre-phi, 1
  br label %for.inc.2

if.end.2:                                         ; preds = %for.inc.1
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1.pre-phi
  %13 = load float, float* %arrayidx8.2, align 4, !tbaa !4
  %cmp9.2 = fcmp ult float %13, 0.000000e+00
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1.pre-phi
  %14 = load float, float* %arrayidx13.2, align 4, !tbaa !4
  %arrayidx15.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1.pre-phi
  %15 = load float, float* %arrayidx15.2, align 4, !tbaa !4
  br i1 %cmp9.2, label %if.end11.2, label %L30.2

if.end11.2:                                       ; preds = %if.end.2
  %mul.2 = fmul float %14, %15
  %add.2 = fadd float %12, %mul.2
  store float %add.2, float* %arrayidx.2, align 4, !tbaa !4
  br label %L30.2

L30.2:                                            ; preds = %if.end11.2, %if.end.2
  %arrayidx23.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1.pre-phi
  %16 = load float, float* %arrayidx23.2, align 4, !tbaa !4
  %mul24.2 = fmul float %15, %16
  %add25.2 = fadd float %14, %mul24.2
  %17 = add nuw nsw i64 %indvars.iv.next.1.pre-phi, 1
  %arrayidx28.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %17
  store float %add25.2, float* %arrayidx28.2, align 4, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %L30.2, %for.inc.1.for.inc.2_crit_edge
  %indvars.iv.next.2.pre-phi = phi i64 [ %.pre69, %for.inc.1.for.inc.2_crit_edge ], [ %17, %L30.2 ]
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2.pre-phi
  %18 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ult float %18, 0.000000e+00
  br i1 %cmp6.3, label %if.end.3, label %for.inc.2.for.inc.3_crit_edge

for.inc.2.for.inc.3_crit_edge:                    ; preds = %for.inc.2
  %.pre70 = add nuw nsw i64 %indvars.iv.next.2.pre-phi, 1
  br label %for.inc.3

if.end.3:                                         ; preds = %for.inc.2
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2.pre-phi
  %19 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %cmp9.3 = fcmp ult float %19, 0.000000e+00
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2.pre-phi
  %20 = load float, float* %arrayidx13.3, align 4, !tbaa !4
  %arrayidx15.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2.pre-phi
  %21 = load float, float* %arrayidx15.3, align 4, !tbaa !4
  br i1 %cmp9.3, label %if.end11.3, label %L30.3

if.end11.3:                                       ; preds = %if.end.3
  %mul.3 = fmul float %20, %21
  %add.3 = fadd float %18, %mul.3
  store float %add.3, float* %arrayidx.3, align 4, !tbaa !4
  br label %L30.3

L30.3:                                            ; preds = %if.end11.3, %if.end.3
  %arrayidx23.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2.pre-phi
  %22 = load float, float* %arrayidx23.3, align 4, !tbaa !4
  %mul24.3 = fmul float %21, %22
  %add25.3 = fadd float %20, %mul24.3
  %23 = add nuw nsw i64 %indvars.iv.next.2.pre-phi, 1
  %arrayidx28.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %23
  store float %add25.3, float* %arrayidx28.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %L30.3, %for.inc.2.for.inc.3_crit_edge
  %indvars.iv.next.3.pre-phi = phi i64 [ %.pre70, %for.inc.2.for.inc.3_crit_edge ], [ %23, %L30.3 ]
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3.pre-phi
  %24 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %cmp6.4 = fcmp ult float %24, 0.000000e+00
  br i1 %cmp6.4, label %if.end.4, label %for.inc.3.for.inc.4_crit_edge

for.inc.3.for.inc.4_crit_edge:                    ; preds = %for.inc.3
  %.pre71 = add nuw nsw i64 %indvars.iv.next.3.pre-phi, 1
  br label %for.inc.4

if.end.4:                                         ; preds = %for.inc.3
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3.pre-phi
  %25 = load float, float* %arrayidx8.4, align 4, !tbaa !4
  %cmp9.4 = fcmp ult float %25, 0.000000e+00
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3.pre-phi
  %26 = load float, float* %arrayidx13.4, align 4, !tbaa !4
  %arrayidx15.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3.pre-phi
  %27 = load float, float* %arrayidx15.4, align 4, !tbaa !4
  br i1 %cmp9.4, label %if.end11.4, label %L30.4

if.end11.4:                                       ; preds = %if.end.4
  %mul.4 = fmul float %26, %27
  %add.4 = fadd float %24, %mul.4
  store float %add.4, float* %arrayidx.4, align 4, !tbaa !4
  br label %L30.4

L30.4:                                            ; preds = %if.end11.4, %if.end.4
  %arrayidx23.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3.pre-phi
  %28 = load float, float* %arrayidx23.4, align 4, !tbaa !4
  %mul24.4 = fmul float %27, %28
  %add25.4 = fadd float %26, %mul24.4
  %29 = add nuw nsw i64 %indvars.iv.next.3.pre-phi, 1
  %arrayidx28.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %29
  store float %add25.4, float* %arrayidx28.4, align 4, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %L30.4, %for.inc.3.for.inc.4_crit_edge
  %indvars.iv.next.4.pre-phi = phi i64 [ %.pre71, %for.inc.3.for.inc.4_crit_edge ], [ %29, %L30.4 ]
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4.pre-phi
  %30 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ult float %30, 0.000000e+00
  br i1 %cmp6.5, label %if.end.5, label %for.inc.4.for.inc.5_crit_edge

for.inc.4.for.inc.5_crit_edge:                    ; preds = %for.inc.4
  %.pre72 = add nuw nsw i64 %indvars.iv.next.4.pre-phi, 1
  br label %for.inc.5

if.end.5:                                         ; preds = %for.inc.4
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4.pre-phi
  %31 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %cmp9.5 = fcmp ult float %31, 0.000000e+00
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4.pre-phi
  %32 = load float, float* %arrayidx13.5, align 4, !tbaa !4
  %arrayidx15.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4.pre-phi
  %33 = load float, float* %arrayidx15.5, align 4, !tbaa !4
  br i1 %cmp9.5, label %if.end11.5, label %L30.5

if.end11.5:                                       ; preds = %if.end.5
  %mul.5 = fmul float %32, %33
  %add.5 = fadd float %30, %mul.5
  store float %add.5, float* %arrayidx.5, align 4, !tbaa !4
  br label %L30.5

L30.5:                                            ; preds = %if.end11.5, %if.end.5
  %arrayidx23.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4.pre-phi
  %34 = load float, float* %arrayidx23.5, align 4, !tbaa !4
  %mul24.5 = fmul float %33, %34
  %add25.5 = fadd float %32, %mul24.5
  %35 = add nuw nsw i64 %indvars.iv.next.4.pre-phi, 1
  %arrayidx28.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %35
  store float %add25.5, float* %arrayidx28.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %L30.5, %for.inc.4.for.inc.5_crit_edge
  %indvars.iv.next.5.pre-phi = phi i64 [ %.pre72, %for.inc.4.for.inc.5_crit_edge ], [ %35, %L30.5 ]
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5.pre-phi
  %36 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %cmp6.6 = fcmp ult float %36, 0.000000e+00
  br i1 %cmp6.6, label %if.end.6, label %for.inc.5.for.inc.6_crit_edge

for.inc.5.for.inc.6_crit_edge:                    ; preds = %for.inc.5
  %.pre73 = add nuw nsw i64 %indvars.iv.next.5.pre-phi, 1
  br label %for.inc.6

if.end.6:                                         ; preds = %for.inc.5
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5.pre-phi
  %37 = load float, float* %arrayidx8.6, align 4, !tbaa !4
  %cmp9.6 = fcmp ult float %37, 0.000000e+00
  %arrayidx13.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5.pre-phi
  %38 = load float, float* %arrayidx13.6, align 4, !tbaa !4
  %arrayidx15.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5.pre-phi
  %39 = load float, float* %arrayidx15.6, align 4, !tbaa !4
  br i1 %cmp9.6, label %if.end11.6, label %L30.6

if.end11.6:                                       ; preds = %if.end.6
  %mul.6 = fmul float %38, %39
  %add.6 = fadd float %36, %mul.6
  store float %add.6, float* %arrayidx.6, align 4, !tbaa !4
  br label %L30.6

L30.6:                                            ; preds = %if.end11.6, %if.end.6
  %arrayidx23.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5.pre-phi
  %40 = load float, float* %arrayidx23.6, align 4, !tbaa !4
  %mul24.6 = fmul float %39, %40
  %add25.6 = fadd float %38, %mul24.6
  %41 = add nuw nsw i64 %indvars.iv.next.5.pre-phi, 1
  %arrayidx28.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %41
  store float %add25.6, float* %arrayidx28.6, align 4, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %L30.6, %for.inc.5.for.inc.6_crit_edge
  %indvars.iv.next.6.pre-phi = phi i64 [ %.pre73, %for.inc.5.for.inc.6_crit_edge ], [ %41, %L30.6 ]
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6.pre-phi, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !229

for.body5.7:                                      ; preds = %for.inc.6
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6.pre-phi
  %42 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ult float %42, 0.000000e+00
  br i1 %cmp6.7, label %if.end.7, label %for.body5.7.for.inc.7_crit_edge

for.body5.7.for.inc.7_crit_edge:                  ; preds = %for.body5.7
  %.pre74 = add nuw nsw i64 %indvars.iv.next.6.pre-phi, 1
  br label %for.body5.backedge

for.body5.backedge:                               ; preds = %L30.7, %for.body5.7.for.inc.7_crit_edge
  %indvars.iv.be = phi i64 [ %.pre74, %for.body5.7.for.inc.7_crit_edge ], [ %47, %L30.7 ]
  br label %for.body5, !llvm.loop !230

if.end.7:                                         ; preds = %for.body5.7
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6.pre-phi
  %43 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %cmp9.7 = fcmp ult float %43, 0.000000e+00
  %arrayidx13.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6.pre-phi
  %44 = load float, float* %arrayidx13.7, align 4, !tbaa !4
  %arrayidx15.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6.pre-phi
  %45 = load float, float* %arrayidx15.7, align 4, !tbaa !4
  br i1 %cmp9.7, label %if.end11.7, label %L30.7

if.end11.7:                                       ; preds = %if.end.7
  %mul.7 = fmul float %44, %45
  %add.7 = fadd float %42, %mul.7
  store float %add.7, float* %arrayidx.7, align 4, !tbaa !4
  br label %L30.7

L30.7:                                            ; preds = %if.end11.7, %if.end.7
  %arrayidx23.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6.pre-phi
  %46 = load float, float* %arrayidx23.7, align 4, !tbaa !4
  %mul24.7 = fmul float %45, %46
  %add25.7 = fadd float %44, %mul24.7
  %47 = add nuw nsw i64 %indvars.iv.next.6.pre-phi, 1
  %arrayidx28.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %47
  store float %add25.7, float* %arrayidx28.7, align 4, !tbaa !4
  br label %for.body5.backedge
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s278(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s278, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.061 = phi i32 [ 0, %entry ], [ %inc38, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call40 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call41 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s278, i64 0, i64 0)) #11
  ret float %call41

for.cond.cleanup4:                                ; preds = %L30.7
  %call36 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc38 = add nuw nsw i32 %nl.061, 1
  %exitcond.not = icmp eq i32 %inc38, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !231

for.body5:                                        ; preds = %L30.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %L30.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp ogt float %0, 0.000000e+00
  br i1 %cmp6, label %L20, label %if.end

if.end:                                           ; preds = %for.body5
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx8, align 32, !tbaa !4
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx10, align 32, !tbaa !4
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx12, align 32, !tbaa !4
  %mul = fmul float %2, %3
  %add = fsub float %mul, %1
  store float %add, float* %arrayidx8, align 32, !tbaa !4
  %arrayidx29.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %.pre62 = load float, float* %arrayidx29.phi.trans.insert, align 32, !tbaa !4
  br label %L30

L20:                                              ; preds = %for.body5
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx16, align 32, !tbaa !4
  %arrayidx19 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %5 = load float, float* %arrayidx19, align 32, !tbaa !4
  %arrayidx21 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %6 = load float, float* %arrayidx21, align 32, !tbaa !4
  %mul22 = fmul float %5, %6
  %add23 = fsub float %mul22, %4
  store float %add23, float* %arrayidx16, align 32, !tbaa !4
  %arrayidx27.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %.pre = load float, float* %arrayidx27.phi.trans.insert, align 32, !tbaa !4
  br label %L30

L30:                                              ; preds = %L20, %if.end
  %7 = phi float [ %5, %L20 ], [ %2, %if.end ]
  %8 = phi float [ %add23, %L20 ], [ %.pre62, %if.end ]
  %9 = phi float [ %.pre, %L20 ], [ %add, %if.end ]
  %mul32 = fmul float %8, %7
  %add33 = fadd float %9, %mul32
  store float %add33, float* %arrayidx, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %10 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ogt float %10, 0.000000e+00
  br i1 %cmp6.1, label %L20.1, label %if.end.1

if.end.1:                                         ; preds = %L30
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %11 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %12 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %13 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %mul.1 = fmul float %12, %13
  %add.1 = fsub float %mul.1, %11
  store float %add.1, float* %arrayidx8.1, align 4, !tbaa !4
  %arrayidx29.1.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %.pre64 = load float, float* %arrayidx29.1.phi.trans.insert, align 4, !tbaa !4
  br label %L30.1

L20.1:                                            ; preds = %L30
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %14 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %arrayidx19.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %15 = load float, float* %arrayidx19.1, align 4, !tbaa !4
  %arrayidx21.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %16 = load float, float* %arrayidx21.1, align 4, !tbaa !4
  %mul22.1 = fmul float %15, %16
  %add23.1 = fsub float %mul22.1, %14
  store float %add23.1, float* %arrayidx16.1, align 4, !tbaa !4
  %arrayidx27.1.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %.pre63 = load float, float* %arrayidx27.1.phi.trans.insert, align 4, !tbaa !4
  br label %L30.1

L30.1:                                            ; preds = %L20.1, %if.end.1
  %17 = phi float [ %15, %L20.1 ], [ %12, %if.end.1 ]
  %18 = phi float [ %add23.1, %L20.1 ], [ %.pre64, %if.end.1 ]
  %19 = phi float [ %.pre63, %L20.1 ], [ %add.1, %if.end.1 ]
  %mul32.1 = fmul float %18, %17
  %add33.1 = fadd float %19, %mul32.1
  store float %add33.1, float* %arrayidx.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %20 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ogt float %20, 0.000000e+00
  br i1 %cmp6.2, label %L20.2, label %if.end.2

if.end.2:                                         ; preds = %L30.1
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %21 = load float, float* %arrayidx8.2, align 8, !tbaa !4
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %22 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %23 = load float, float* %arrayidx12.2, align 8, !tbaa !4
  %mul.2 = fmul float %22, %23
  %add.2 = fsub float %mul.2, %21
  store float %add.2, float* %arrayidx8.2, align 8, !tbaa !4
  %arrayidx29.2.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %.pre66 = load float, float* %arrayidx29.2.phi.trans.insert, align 8, !tbaa !4
  br label %L30.2

L20.2:                                            ; preds = %L30.1
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %24 = load float, float* %arrayidx16.2, align 8, !tbaa !4
  %arrayidx19.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %25 = load float, float* %arrayidx19.2, align 8, !tbaa !4
  %arrayidx21.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %26 = load float, float* %arrayidx21.2, align 8, !tbaa !4
  %mul22.2 = fmul float %25, %26
  %add23.2 = fsub float %mul22.2, %24
  store float %add23.2, float* %arrayidx16.2, align 8, !tbaa !4
  %arrayidx27.2.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %.pre65 = load float, float* %arrayidx27.2.phi.trans.insert, align 8, !tbaa !4
  br label %L30.2

L30.2:                                            ; preds = %L20.2, %if.end.2
  %27 = phi float [ %25, %L20.2 ], [ %22, %if.end.2 ]
  %28 = phi float [ %add23.2, %L20.2 ], [ %.pre66, %if.end.2 ]
  %29 = phi float [ %.pre65, %L20.2 ], [ %add.2, %if.end.2 ]
  %mul32.2 = fmul float %28, %27
  %add33.2 = fadd float %29, %mul32.2
  store float %add33.2, float* %arrayidx.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %30 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ogt float %30, 0.000000e+00
  br i1 %cmp6.3, label %L20.3, label %if.end.3

if.end.3:                                         ; preds = %L30.2
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %31 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %32 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %33 = load float, float* %arrayidx12.3, align 4, !tbaa !4
  %mul.3 = fmul float %32, %33
  %add.3 = fsub float %mul.3, %31
  store float %add.3, float* %arrayidx8.3, align 4, !tbaa !4
  %arrayidx29.3.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %.pre68 = load float, float* %arrayidx29.3.phi.trans.insert, align 4, !tbaa !4
  br label %L30.3

L20.3:                                            ; preds = %L30.2
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %34 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %arrayidx19.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %35 = load float, float* %arrayidx19.3, align 4, !tbaa !4
  %arrayidx21.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %36 = load float, float* %arrayidx21.3, align 4, !tbaa !4
  %mul22.3 = fmul float %35, %36
  %add23.3 = fsub float %mul22.3, %34
  store float %add23.3, float* %arrayidx16.3, align 4, !tbaa !4
  %arrayidx27.3.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %.pre67 = load float, float* %arrayidx27.3.phi.trans.insert, align 4, !tbaa !4
  br label %L30.3

L30.3:                                            ; preds = %L20.3, %if.end.3
  %37 = phi float [ %35, %L20.3 ], [ %32, %if.end.3 ]
  %38 = phi float [ %add23.3, %L20.3 ], [ %.pre68, %if.end.3 ]
  %39 = phi float [ %.pre67, %L20.3 ], [ %add.3, %if.end.3 ]
  %mul32.3 = fmul float %38, %37
  %add33.3 = fadd float %39, %mul32.3
  store float %add33.3, float* %arrayidx.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %40 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ogt float %40, 0.000000e+00
  br i1 %cmp6.4, label %L20.4, label %if.end.4

if.end.4:                                         ; preds = %L30.3
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %41 = load float, float* %arrayidx8.4, align 16, !tbaa !4
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %42 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %43 = load float, float* %arrayidx12.4, align 16, !tbaa !4
  %mul.4 = fmul float %42, %43
  %add.4 = fsub float %mul.4, %41
  store float %add.4, float* %arrayidx8.4, align 16, !tbaa !4
  %arrayidx29.4.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %.pre70 = load float, float* %arrayidx29.4.phi.trans.insert, align 16, !tbaa !4
  br label %L30.4

L20.4:                                            ; preds = %L30.3
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %44 = load float, float* %arrayidx16.4, align 16, !tbaa !4
  %arrayidx19.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %45 = load float, float* %arrayidx19.4, align 16, !tbaa !4
  %arrayidx21.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %46 = load float, float* %arrayidx21.4, align 16, !tbaa !4
  %mul22.4 = fmul float %45, %46
  %add23.4 = fsub float %mul22.4, %44
  store float %add23.4, float* %arrayidx16.4, align 16, !tbaa !4
  %arrayidx27.4.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %.pre69 = load float, float* %arrayidx27.4.phi.trans.insert, align 16, !tbaa !4
  br label %L30.4

L30.4:                                            ; preds = %L20.4, %if.end.4
  %47 = phi float [ %45, %L20.4 ], [ %42, %if.end.4 ]
  %48 = phi float [ %add23.4, %L20.4 ], [ %.pre70, %if.end.4 ]
  %49 = phi float [ %.pre69, %L20.4 ], [ %add.4, %if.end.4 ]
  %mul32.4 = fmul float %48, %47
  %add33.4 = fadd float %49, %mul32.4
  store float %add33.4, float* %arrayidx.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %50 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ogt float %50, 0.000000e+00
  br i1 %cmp6.5, label %L20.5, label %if.end.5

if.end.5:                                         ; preds = %L30.4
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %51 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %52 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %53 = load float, float* %arrayidx12.5, align 4, !tbaa !4
  %mul.5 = fmul float %52, %53
  %add.5 = fsub float %mul.5, %51
  store float %add.5, float* %arrayidx8.5, align 4, !tbaa !4
  %arrayidx29.5.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %.pre72 = load float, float* %arrayidx29.5.phi.trans.insert, align 4, !tbaa !4
  br label %L30.5

L20.5:                                            ; preds = %L30.4
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %54 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %arrayidx19.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %55 = load float, float* %arrayidx19.5, align 4, !tbaa !4
  %arrayidx21.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %56 = load float, float* %arrayidx21.5, align 4, !tbaa !4
  %mul22.5 = fmul float %55, %56
  %add23.5 = fsub float %mul22.5, %54
  store float %add23.5, float* %arrayidx16.5, align 4, !tbaa !4
  %arrayidx27.5.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %.pre71 = load float, float* %arrayidx27.5.phi.trans.insert, align 4, !tbaa !4
  br label %L30.5

L30.5:                                            ; preds = %L20.5, %if.end.5
  %57 = phi float [ %55, %L20.5 ], [ %52, %if.end.5 ]
  %58 = phi float [ %add23.5, %L20.5 ], [ %.pre72, %if.end.5 ]
  %59 = phi float [ %.pre71, %L20.5 ], [ %add.5, %if.end.5 ]
  %mul32.5 = fmul float %58, %57
  %add33.5 = fadd float %59, %mul32.5
  store float %add33.5, float* %arrayidx.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %60 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ogt float %60, 0.000000e+00
  br i1 %cmp6.6, label %L20.6, label %if.end.6

if.end.6:                                         ; preds = %L30.5
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %61 = load float, float* %arrayidx8.6, align 8, !tbaa !4
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %62 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %63 = load float, float* %arrayidx12.6, align 8, !tbaa !4
  %mul.6 = fmul float %62, %63
  %add.6 = fsub float %mul.6, %61
  store float %add.6, float* %arrayidx8.6, align 8, !tbaa !4
  %arrayidx29.6.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %.pre74 = load float, float* %arrayidx29.6.phi.trans.insert, align 8, !tbaa !4
  br label %L30.6

L20.6:                                            ; preds = %L30.5
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %64 = load float, float* %arrayidx16.6, align 8, !tbaa !4
  %arrayidx19.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %65 = load float, float* %arrayidx19.6, align 8, !tbaa !4
  %arrayidx21.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %66 = load float, float* %arrayidx21.6, align 8, !tbaa !4
  %mul22.6 = fmul float %65, %66
  %add23.6 = fsub float %mul22.6, %64
  store float %add23.6, float* %arrayidx16.6, align 8, !tbaa !4
  %arrayidx27.6.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %.pre73 = load float, float* %arrayidx27.6.phi.trans.insert, align 8, !tbaa !4
  br label %L30.6

L30.6:                                            ; preds = %L20.6, %if.end.6
  %67 = phi float [ %65, %L20.6 ], [ %62, %if.end.6 ]
  %68 = phi float [ %add23.6, %L20.6 ], [ %.pre74, %if.end.6 ]
  %69 = phi float [ %.pre73, %L20.6 ], [ %add.6, %if.end.6 ]
  %mul32.6 = fmul float %68, %67
  %add33.6 = fadd float %69, %mul32.6
  store float %add33.6, float* %arrayidx.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %70 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ogt float %70, 0.000000e+00
  br i1 %cmp6.7, label %L20.7, label %if.end.7

if.end.7:                                         ; preds = %L30.6
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %71 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %72 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %73 = load float, float* %arrayidx12.7, align 4, !tbaa !4
  %mul.7 = fmul float %72, %73
  %add.7 = fsub float %mul.7, %71
  store float %add.7, float* %arrayidx8.7, align 4, !tbaa !4
  %arrayidx29.7.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %.pre76 = load float, float* %arrayidx29.7.phi.trans.insert, align 4, !tbaa !4
  br label %L30.7

L20.7:                                            ; preds = %L30.6
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %74 = load float, float* %arrayidx16.7, align 4, !tbaa !4
  %arrayidx19.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %75 = load float, float* %arrayidx19.7, align 4, !tbaa !4
  %arrayidx21.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %76 = load float, float* %arrayidx21.7, align 4, !tbaa !4
  %mul22.7 = fmul float %75, %76
  %add23.7 = fsub float %mul22.7, %74
  store float %add23.7, float* %arrayidx16.7, align 4, !tbaa !4
  %arrayidx27.7.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %.pre75 = load float, float* %arrayidx27.7.phi.trans.insert, align 4, !tbaa !4
  br label %L30.7

L30.7:                                            ; preds = %L20.7, %if.end.7
  %77 = phi float [ %75, %L20.7 ], [ %72, %if.end.7 ]
  %78 = phi float [ %add23.7, %L20.7 ], [ %.pre76, %if.end.7 ]
  %79 = phi float [ %.pre75, %L20.7 ], [ %add.7, %if.end.7 ]
  %mul32.7 = fmul float %78, %77
  %add33.7 = fadd float %79, %mul32.7
  store float %add33.7, float* %arrayidx.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !232
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s279(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s279, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.081 = phi i32 [ 0, %entry ], [ %inc53, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call55 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call56 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s279, i64 0, i64 0)) #11
  ret float %call56

for.cond.cleanup4:                                ; preds = %L30.7
  %call51 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc53 = add nuw nsw i32 %nl.081, 1
  %exitcond.not = icmp eq i32 %inc53, 50000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !233

for.body5:                                        ; preds = %L30.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %L30.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp ogt float %0, 0.000000e+00
  br i1 %cmp6, label %L20, label %if.end

if.end:                                           ; preds = %for.body5
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx8, align 32, !tbaa !4
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx10, align 32, !tbaa !4
  %mul = fmul float %2, %2
  %add = fsub float %mul, %1
  store float %add, float* %arrayidx8, align 32, !tbaa !4
  %cmp19 = fcmp ugt float %add, %0
  br i1 %cmp19, label %if.end21, label %if.end.L30_crit_edge

if.end.L30_crit_edge:                             ; preds = %if.end
  %arrayidx44.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %.pre82 = load float, float* %arrayidx44.phi.trans.insert, align 32, !tbaa !4
  br label %L30

if.end21:                                         ; preds = %if.end
  %arrayidx25 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx25, align 32, !tbaa !4
  %mul26 = fmul float %2, %3
  %arrayidx28 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx28, align 32, !tbaa !4
  %add29 = fadd float %4, %mul26
  store float %add29, float* %arrayidx28, align 32, !tbaa !4
  br label %L30

L20:                                              ; preds = %for.body5
  %arrayidx31 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %5 = load float, float* %arrayidx31, align 32, !tbaa !4
  %arrayidx34 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %6 = load float, float* %arrayidx34, align 32, !tbaa !4
  %mul37 = fmul float %6, %6
  %add38 = fsub float %mul37, %5
  store float %add38, float* %arrayidx31, align 32, !tbaa !4
  %arrayidx42.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %.pre = load float, float* %arrayidx42.phi.trans.insert, align 32, !tbaa !4
  %arrayidx46.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %.pre83 = load float, float* %arrayidx46.phi.trans.insert, align 32, !tbaa !4
  br label %L30

L30:                                              ; preds = %L20, %if.end21, %if.end.L30_crit_edge
  %7 = phi float [ %2, %if.end.L30_crit_edge ], [ %.pre83, %L20 ], [ %2, %if.end21 ]
  %8 = phi float [ %.pre82, %if.end.L30_crit_edge ], [ %add38, %L20 ], [ %add29, %if.end21 ]
  %9 = phi float [ %add, %if.end.L30_crit_edge ], [ %.pre, %L20 ], [ %add, %if.end21 ]
  %mul47 = fmul float %8, %7
  %add48 = fadd float %9, %mul47
  store float %add48, float* %arrayidx, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %10 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ogt float %10, 0.000000e+00
  br i1 %cmp6.1, label %L20.1, label %if.end.1

if.end.1:                                         ; preds = %L30
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %11 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %12 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %mul.1 = fmul float %12, %12
  %add.1 = fsub float %mul.1, %11
  store float %add.1, float* %arrayidx8.1, align 4, !tbaa !4
  %cmp19.1 = fcmp ugt float %add.1, %10
  br i1 %cmp19.1, label %if.end21.1, label %if.end.1.L30.1_crit_edge

if.end.1.L30.1_crit_edge:                         ; preds = %if.end.1
  %arrayidx44.1.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %.pre85 = load float, float* %arrayidx44.1.phi.trans.insert, align 4, !tbaa !4
  br label %L30.1

if.end21.1:                                       ; preds = %if.end.1
  %arrayidx25.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %13 = load float, float* %arrayidx25.1, align 4, !tbaa !4
  %mul26.1 = fmul float %12, %13
  %arrayidx28.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %14 = load float, float* %arrayidx28.1, align 4, !tbaa !4
  %add29.1 = fadd float %14, %mul26.1
  store float %add29.1, float* %arrayidx28.1, align 4, !tbaa !4
  br label %L30.1

L20.1:                                            ; preds = %L30
  %arrayidx31.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %15 = load float, float* %arrayidx31.1, align 4, !tbaa !4
  %arrayidx34.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %16 = load float, float* %arrayidx34.1, align 4, !tbaa !4
  %mul37.1 = fmul float %16, %16
  %add38.1 = fsub float %mul37.1, %15
  store float %add38.1, float* %arrayidx31.1, align 4, !tbaa !4
  %arrayidx42.1.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %.pre84 = load float, float* %arrayidx42.1.phi.trans.insert, align 4, !tbaa !4
  %arrayidx46.1.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %.pre86 = load float, float* %arrayidx46.1.phi.trans.insert, align 4, !tbaa !4
  br label %L30.1

L30.1:                                            ; preds = %L20.1, %if.end21.1, %if.end.1.L30.1_crit_edge
  %17 = phi float [ %.pre86, %L20.1 ], [ %12, %if.end21.1 ], [ %12, %if.end.1.L30.1_crit_edge ]
  %18 = phi float [ %add38.1, %L20.1 ], [ %add29.1, %if.end21.1 ], [ %.pre85, %if.end.1.L30.1_crit_edge ]
  %19 = phi float [ %.pre84, %L20.1 ], [ %add.1, %if.end21.1 ], [ %add.1, %if.end.1.L30.1_crit_edge ]
  %mul47.1 = fmul float %18, %17
  %add48.1 = fadd float %19, %mul47.1
  store float %add48.1, float* %arrayidx.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %20 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ogt float %20, 0.000000e+00
  br i1 %cmp6.2, label %L20.2, label %if.end.2

if.end.2:                                         ; preds = %L30.1
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %21 = load float, float* %arrayidx8.2, align 8, !tbaa !4
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %22 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %mul.2 = fmul float %22, %22
  %add.2 = fsub float %mul.2, %21
  store float %add.2, float* %arrayidx8.2, align 8, !tbaa !4
  %cmp19.2 = fcmp ugt float %add.2, %20
  br i1 %cmp19.2, label %if.end21.2, label %if.end.2.L30.2_crit_edge

if.end.2.L30.2_crit_edge:                         ; preds = %if.end.2
  %arrayidx44.2.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %.pre88 = load float, float* %arrayidx44.2.phi.trans.insert, align 8, !tbaa !4
  br label %L30.2

if.end21.2:                                       ; preds = %if.end.2
  %arrayidx25.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %23 = load float, float* %arrayidx25.2, align 8, !tbaa !4
  %mul26.2 = fmul float %22, %23
  %arrayidx28.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %24 = load float, float* %arrayidx28.2, align 8, !tbaa !4
  %add29.2 = fadd float %24, %mul26.2
  store float %add29.2, float* %arrayidx28.2, align 8, !tbaa !4
  br label %L30.2

L20.2:                                            ; preds = %L30.1
  %arrayidx31.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %25 = load float, float* %arrayidx31.2, align 8, !tbaa !4
  %arrayidx34.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %26 = load float, float* %arrayidx34.2, align 8, !tbaa !4
  %mul37.2 = fmul float %26, %26
  %add38.2 = fsub float %mul37.2, %25
  store float %add38.2, float* %arrayidx31.2, align 8, !tbaa !4
  %arrayidx42.2.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %.pre87 = load float, float* %arrayidx42.2.phi.trans.insert, align 8, !tbaa !4
  %arrayidx46.2.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %.pre89 = load float, float* %arrayidx46.2.phi.trans.insert, align 8, !tbaa !4
  br label %L30.2

L30.2:                                            ; preds = %L20.2, %if.end21.2, %if.end.2.L30.2_crit_edge
  %27 = phi float [ %.pre89, %L20.2 ], [ %22, %if.end21.2 ], [ %22, %if.end.2.L30.2_crit_edge ]
  %28 = phi float [ %add38.2, %L20.2 ], [ %add29.2, %if.end21.2 ], [ %.pre88, %if.end.2.L30.2_crit_edge ]
  %29 = phi float [ %.pre87, %L20.2 ], [ %add.2, %if.end21.2 ], [ %add.2, %if.end.2.L30.2_crit_edge ]
  %mul47.2 = fmul float %28, %27
  %add48.2 = fadd float %29, %mul47.2
  store float %add48.2, float* %arrayidx.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %30 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ogt float %30, 0.000000e+00
  br i1 %cmp6.3, label %L20.3, label %if.end.3

if.end.3:                                         ; preds = %L30.2
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %31 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %32 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %mul.3 = fmul float %32, %32
  %add.3 = fsub float %mul.3, %31
  store float %add.3, float* %arrayidx8.3, align 4, !tbaa !4
  %cmp19.3 = fcmp ugt float %add.3, %30
  br i1 %cmp19.3, label %if.end21.3, label %if.end.3.L30.3_crit_edge

if.end.3.L30.3_crit_edge:                         ; preds = %if.end.3
  %arrayidx44.3.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %.pre91 = load float, float* %arrayidx44.3.phi.trans.insert, align 4, !tbaa !4
  br label %L30.3

if.end21.3:                                       ; preds = %if.end.3
  %arrayidx25.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %33 = load float, float* %arrayidx25.3, align 4, !tbaa !4
  %mul26.3 = fmul float %32, %33
  %arrayidx28.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %34 = load float, float* %arrayidx28.3, align 4, !tbaa !4
  %add29.3 = fadd float %34, %mul26.3
  store float %add29.3, float* %arrayidx28.3, align 4, !tbaa !4
  br label %L30.3

L20.3:                                            ; preds = %L30.2
  %arrayidx31.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %35 = load float, float* %arrayidx31.3, align 4, !tbaa !4
  %arrayidx34.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %36 = load float, float* %arrayidx34.3, align 4, !tbaa !4
  %mul37.3 = fmul float %36, %36
  %add38.3 = fsub float %mul37.3, %35
  store float %add38.3, float* %arrayidx31.3, align 4, !tbaa !4
  %arrayidx42.3.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %.pre90 = load float, float* %arrayidx42.3.phi.trans.insert, align 4, !tbaa !4
  %arrayidx46.3.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %.pre92 = load float, float* %arrayidx46.3.phi.trans.insert, align 4, !tbaa !4
  br label %L30.3

L30.3:                                            ; preds = %L20.3, %if.end21.3, %if.end.3.L30.3_crit_edge
  %37 = phi float [ %.pre92, %L20.3 ], [ %32, %if.end21.3 ], [ %32, %if.end.3.L30.3_crit_edge ]
  %38 = phi float [ %add38.3, %L20.3 ], [ %add29.3, %if.end21.3 ], [ %.pre91, %if.end.3.L30.3_crit_edge ]
  %39 = phi float [ %.pre90, %L20.3 ], [ %add.3, %if.end21.3 ], [ %add.3, %if.end.3.L30.3_crit_edge ]
  %mul47.3 = fmul float %38, %37
  %add48.3 = fadd float %39, %mul47.3
  store float %add48.3, float* %arrayidx.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %40 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ogt float %40, 0.000000e+00
  br i1 %cmp6.4, label %L20.4, label %if.end.4

if.end.4:                                         ; preds = %L30.3
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %41 = load float, float* %arrayidx8.4, align 16, !tbaa !4
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %42 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %mul.4 = fmul float %42, %42
  %add.4 = fsub float %mul.4, %41
  store float %add.4, float* %arrayidx8.4, align 16, !tbaa !4
  %cmp19.4 = fcmp ugt float %add.4, %40
  br i1 %cmp19.4, label %if.end21.4, label %if.end.4.L30.4_crit_edge

if.end.4.L30.4_crit_edge:                         ; preds = %if.end.4
  %arrayidx44.4.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %.pre94 = load float, float* %arrayidx44.4.phi.trans.insert, align 16, !tbaa !4
  br label %L30.4

if.end21.4:                                       ; preds = %if.end.4
  %arrayidx25.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %43 = load float, float* %arrayidx25.4, align 16, !tbaa !4
  %mul26.4 = fmul float %42, %43
  %arrayidx28.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %44 = load float, float* %arrayidx28.4, align 16, !tbaa !4
  %add29.4 = fadd float %44, %mul26.4
  store float %add29.4, float* %arrayidx28.4, align 16, !tbaa !4
  br label %L30.4

L20.4:                                            ; preds = %L30.3
  %arrayidx31.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %45 = load float, float* %arrayidx31.4, align 16, !tbaa !4
  %arrayidx34.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %46 = load float, float* %arrayidx34.4, align 16, !tbaa !4
  %mul37.4 = fmul float %46, %46
  %add38.4 = fsub float %mul37.4, %45
  store float %add38.4, float* %arrayidx31.4, align 16, !tbaa !4
  %arrayidx42.4.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %.pre93 = load float, float* %arrayidx42.4.phi.trans.insert, align 16, !tbaa !4
  %arrayidx46.4.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %.pre95 = load float, float* %arrayidx46.4.phi.trans.insert, align 16, !tbaa !4
  br label %L30.4

L30.4:                                            ; preds = %L20.4, %if.end21.4, %if.end.4.L30.4_crit_edge
  %47 = phi float [ %.pre95, %L20.4 ], [ %42, %if.end21.4 ], [ %42, %if.end.4.L30.4_crit_edge ]
  %48 = phi float [ %add38.4, %L20.4 ], [ %add29.4, %if.end21.4 ], [ %.pre94, %if.end.4.L30.4_crit_edge ]
  %49 = phi float [ %.pre93, %L20.4 ], [ %add.4, %if.end21.4 ], [ %add.4, %if.end.4.L30.4_crit_edge ]
  %mul47.4 = fmul float %48, %47
  %add48.4 = fadd float %49, %mul47.4
  store float %add48.4, float* %arrayidx.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %50 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ogt float %50, 0.000000e+00
  br i1 %cmp6.5, label %L20.5, label %if.end.5

if.end.5:                                         ; preds = %L30.4
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %51 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %52 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %mul.5 = fmul float %52, %52
  %add.5 = fsub float %mul.5, %51
  store float %add.5, float* %arrayidx8.5, align 4, !tbaa !4
  %cmp19.5 = fcmp ugt float %add.5, %50
  br i1 %cmp19.5, label %if.end21.5, label %if.end.5.L30.5_crit_edge

if.end.5.L30.5_crit_edge:                         ; preds = %if.end.5
  %arrayidx44.5.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %.pre97 = load float, float* %arrayidx44.5.phi.trans.insert, align 4, !tbaa !4
  br label %L30.5

if.end21.5:                                       ; preds = %if.end.5
  %arrayidx25.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %53 = load float, float* %arrayidx25.5, align 4, !tbaa !4
  %mul26.5 = fmul float %52, %53
  %arrayidx28.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %54 = load float, float* %arrayidx28.5, align 4, !tbaa !4
  %add29.5 = fadd float %54, %mul26.5
  store float %add29.5, float* %arrayidx28.5, align 4, !tbaa !4
  br label %L30.5

L20.5:                                            ; preds = %L30.4
  %arrayidx31.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %55 = load float, float* %arrayidx31.5, align 4, !tbaa !4
  %arrayidx34.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %56 = load float, float* %arrayidx34.5, align 4, !tbaa !4
  %mul37.5 = fmul float %56, %56
  %add38.5 = fsub float %mul37.5, %55
  store float %add38.5, float* %arrayidx31.5, align 4, !tbaa !4
  %arrayidx42.5.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %.pre96 = load float, float* %arrayidx42.5.phi.trans.insert, align 4, !tbaa !4
  %arrayidx46.5.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %.pre98 = load float, float* %arrayidx46.5.phi.trans.insert, align 4, !tbaa !4
  br label %L30.5

L30.5:                                            ; preds = %L20.5, %if.end21.5, %if.end.5.L30.5_crit_edge
  %57 = phi float [ %.pre98, %L20.5 ], [ %52, %if.end21.5 ], [ %52, %if.end.5.L30.5_crit_edge ]
  %58 = phi float [ %add38.5, %L20.5 ], [ %add29.5, %if.end21.5 ], [ %.pre97, %if.end.5.L30.5_crit_edge ]
  %59 = phi float [ %.pre96, %L20.5 ], [ %add.5, %if.end21.5 ], [ %add.5, %if.end.5.L30.5_crit_edge ]
  %mul47.5 = fmul float %58, %57
  %add48.5 = fadd float %59, %mul47.5
  store float %add48.5, float* %arrayidx.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %60 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ogt float %60, 0.000000e+00
  br i1 %cmp6.6, label %L20.6, label %if.end.6

if.end.6:                                         ; preds = %L30.5
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %61 = load float, float* %arrayidx8.6, align 8, !tbaa !4
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %62 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %mul.6 = fmul float %62, %62
  %add.6 = fsub float %mul.6, %61
  store float %add.6, float* %arrayidx8.6, align 8, !tbaa !4
  %cmp19.6 = fcmp ugt float %add.6, %60
  br i1 %cmp19.6, label %if.end21.6, label %if.end.6.L30.6_crit_edge

if.end.6.L30.6_crit_edge:                         ; preds = %if.end.6
  %arrayidx44.6.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %.pre100 = load float, float* %arrayidx44.6.phi.trans.insert, align 8, !tbaa !4
  br label %L30.6

if.end21.6:                                       ; preds = %if.end.6
  %arrayidx25.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %63 = load float, float* %arrayidx25.6, align 8, !tbaa !4
  %mul26.6 = fmul float %62, %63
  %arrayidx28.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %64 = load float, float* %arrayidx28.6, align 8, !tbaa !4
  %add29.6 = fadd float %64, %mul26.6
  store float %add29.6, float* %arrayidx28.6, align 8, !tbaa !4
  br label %L30.6

L20.6:                                            ; preds = %L30.5
  %arrayidx31.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %65 = load float, float* %arrayidx31.6, align 8, !tbaa !4
  %arrayidx34.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %66 = load float, float* %arrayidx34.6, align 8, !tbaa !4
  %mul37.6 = fmul float %66, %66
  %add38.6 = fsub float %mul37.6, %65
  store float %add38.6, float* %arrayidx31.6, align 8, !tbaa !4
  %arrayidx42.6.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %.pre99 = load float, float* %arrayidx42.6.phi.trans.insert, align 8, !tbaa !4
  %arrayidx46.6.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %.pre101 = load float, float* %arrayidx46.6.phi.trans.insert, align 8, !tbaa !4
  br label %L30.6

L30.6:                                            ; preds = %L20.6, %if.end21.6, %if.end.6.L30.6_crit_edge
  %67 = phi float [ %.pre101, %L20.6 ], [ %62, %if.end21.6 ], [ %62, %if.end.6.L30.6_crit_edge ]
  %68 = phi float [ %add38.6, %L20.6 ], [ %add29.6, %if.end21.6 ], [ %.pre100, %if.end.6.L30.6_crit_edge ]
  %69 = phi float [ %.pre99, %L20.6 ], [ %add.6, %if.end21.6 ], [ %add.6, %if.end.6.L30.6_crit_edge ]
  %mul47.6 = fmul float %68, %67
  %add48.6 = fadd float %69, %mul47.6
  store float %add48.6, float* %arrayidx.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %70 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ogt float %70, 0.000000e+00
  br i1 %cmp6.7, label %L20.7, label %if.end.7

if.end.7:                                         ; preds = %L30.6
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %71 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %72 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %mul.7 = fmul float %72, %72
  %add.7 = fsub float %mul.7, %71
  store float %add.7, float* %arrayidx8.7, align 4, !tbaa !4
  %cmp19.7 = fcmp ugt float %add.7, %70
  br i1 %cmp19.7, label %if.end21.7, label %if.end.7.L30.7_crit_edge

if.end.7.L30.7_crit_edge:                         ; preds = %if.end.7
  %arrayidx44.7.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %.pre103 = load float, float* %arrayidx44.7.phi.trans.insert, align 4, !tbaa !4
  br label %L30.7

if.end21.7:                                       ; preds = %if.end.7
  %arrayidx25.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %73 = load float, float* %arrayidx25.7, align 4, !tbaa !4
  %mul26.7 = fmul float %72, %73
  %arrayidx28.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %74 = load float, float* %arrayidx28.7, align 4, !tbaa !4
  %add29.7 = fadd float %74, %mul26.7
  store float %add29.7, float* %arrayidx28.7, align 4, !tbaa !4
  br label %L30.7

L20.7:                                            ; preds = %L30.6
  %arrayidx31.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %75 = load float, float* %arrayidx31.7, align 4, !tbaa !4
  %arrayidx34.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %76 = load float, float* %arrayidx34.7, align 4, !tbaa !4
  %mul37.7 = fmul float %76, %76
  %add38.7 = fsub float %mul37.7, %75
  store float %add38.7, float* %arrayidx31.7, align 4, !tbaa !4
  %arrayidx42.7.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %.pre102 = load float, float* %arrayidx42.7.phi.trans.insert, align 4, !tbaa !4
  %arrayidx46.7.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %.pre104 = load float, float* %arrayidx46.7.phi.trans.insert, align 4, !tbaa !4
  br label %L30.7

L30.7:                                            ; preds = %L20.7, %if.end21.7, %if.end.7.L30.7_crit_edge
  %77 = phi float [ %.pre104, %L20.7 ], [ %72, %if.end21.7 ], [ %72, %if.end.7.L30.7_crit_edge ]
  %78 = phi float [ %add38.7, %L20.7 ], [ %add29.7, %if.end21.7 ], [ %.pre103, %if.end.7.L30.7_crit_edge ]
  %79 = phi float [ %.pre102, %L20.7 ], [ %add.7, %if.end21.7 ], [ %add.7, %if.end.7.L30.7_crit_edge ]
  %mul47.7 = fmul float %78, %77
  %add48.7 = fadd float %79, %mul47.7
  store float %add48.7, float* %arrayidx.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !234
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1279(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1279, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.038 = phi i32 [ 0, %entry ], [ %inc22, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call24 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call25 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1279, i64 0, i64 0)) #11
  ret float %call25

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call20 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc22 = add nuw nsw i32 %nl.038, 1
  %exitcond.not = icmp eq i32 %inc22, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !235

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp olt float %0, 0.000000e+00
  br i1 %cmp6, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body5
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx8, align 32, !tbaa !4
  %cmp11 = fcmp ogt float %1, %0
  br i1 %cmp11, label %if.then12, label %for.inc

if.then12:                                        ; preds = %if.then
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx14, align 32, !tbaa !4
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx16, align 32, !tbaa !4
  %mul = fmul float %2, %3
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx18, align 32, !tbaa !4
  %add = fadd float %4, %mul
  store float %add, float* %arrayidx18, align 32, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.then12, %if.then, %for.body5
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp olt float %5, 0.000000e+00
  br i1 %cmp6.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %cmp11.1 = fcmp ogt float %6, %5
  br i1 %cmp11.1, label %if.then12.1, label %for.inc.1

if.then12.1:                                      ; preds = %if.then.1
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %mul.1 = fmul float %7, %8
  %arrayidx18.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %9 = load float, float* %arrayidx18.1, align 4, !tbaa !4
  %add.1 = fadd float %9, %mul.1
  store float %add.1, float* %arrayidx18.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then12.1, %if.then.1, %for.inc
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp olt float %10, 0.000000e+00
  br i1 %cmp6.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx8.2, align 8, !tbaa !4
  %cmp11.2 = fcmp ogt float %11, %10
  br i1 %cmp11.2, label %if.then12.2, label %for.inc.2

if.then12.2:                                      ; preds = %if.then.2
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %12 = load float, float* %arrayidx14.2, align 8, !tbaa !4
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %13 = load float, float* %arrayidx16.2, align 8, !tbaa !4
  %mul.2 = fmul float %12, %13
  %arrayidx18.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %14 = load float, float* %arrayidx18.2, align 8, !tbaa !4
  %add.2 = fadd float %14, %mul.2
  store float %add.2, float* %arrayidx18.2, align 8, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then12.2, %if.then.2, %for.inc.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp olt float %15, 0.000000e+00
  br i1 %cmp6.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %16 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %cmp11.3 = fcmp ogt float %16, %15
  br i1 %cmp11.3, label %if.then12.3, label %for.inc.3

if.then12.3:                                      ; preds = %if.then.3
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %17 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %18 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %mul.3 = fmul float %17, %18
  %arrayidx18.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %19 = load float, float* %arrayidx18.3, align 4, !tbaa !4
  %add.3 = fadd float %19, %mul.3
  store float %add.3, float* %arrayidx18.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then12.3, %if.then.3, %for.inc.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %20 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp olt float %20, 0.000000e+00
  br i1 %cmp6.4, label %if.then.4, label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %21 = load float, float* %arrayidx8.4, align 16, !tbaa !4
  %cmp11.4 = fcmp ogt float %21, %20
  br i1 %cmp11.4, label %if.then12.4, label %for.inc.4

if.then12.4:                                      ; preds = %if.then.4
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %22 = load float, float* %arrayidx14.4, align 16, !tbaa !4
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %23 = load float, float* %arrayidx16.4, align 16, !tbaa !4
  %mul.4 = fmul float %22, %23
  %arrayidx18.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %24 = load float, float* %arrayidx18.4, align 16, !tbaa !4
  %add.4 = fadd float %24, %mul.4
  store float %add.4, float* %arrayidx18.4, align 16, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then12.4, %if.then.4, %for.inc.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %25 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp olt float %25, 0.000000e+00
  br i1 %cmp6.5, label %if.then.5, label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %26 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %cmp11.5 = fcmp ogt float %26, %25
  br i1 %cmp11.5, label %if.then12.5, label %for.inc.5

if.then12.5:                                      ; preds = %if.then.5
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %27 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %28 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %mul.5 = fmul float %27, %28
  %arrayidx18.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %29 = load float, float* %arrayidx18.5, align 4, !tbaa !4
  %add.5 = fadd float %29, %mul.5
  store float %add.5, float* %arrayidx18.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then12.5, %if.then.5, %for.inc.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %30 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp olt float %30, 0.000000e+00
  br i1 %cmp6.6, label %if.then.6, label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %31 = load float, float* %arrayidx8.6, align 8, !tbaa !4
  %cmp11.6 = fcmp ogt float %31, %30
  br i1 %cmp11.6, label %if.then12.6, label %for.inc.6

if.then12.6:                                      ; preds = %if.then.6
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %32 = load float, float* %arrayidx14.6, align 8, !tbaa !4
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %33 = load float, float* %arrayidx16.6, align 8, !tbaa !4
  %mul.6 = fmul float %32, %33
  %arrayidx18.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %34 = load float, float* %arrayidx18.6, align 8, !tbaa !4
  %add.6 = fadd float %34, %mul.6
  store float %add.6, float* %arrayidx18.6, align 8, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then12.6, %if.then.6, %for.inc.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %35 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp olt float %35, 0.000000e+00
  br i1 %cmp6.7, label %if.then.7, label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %36 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %cmp11.7 = fcmp ogt float %36, %35
  br i1 %cmp11.7, label %if.then12.7, label %for.inc.7

if.then12.7:                                      ; preds = %if.then.7
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %37 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %38 = load float, float* %arrayidx16.7, align 4, !tbaa !4
  %mul.7 = fmul float %37, %38
  %arrayidx18.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %39 = load float, float* %arrayidx18.7, align 4, !tbaa !4
  %add.7 = fadd float %39, %mul.7
  store float %add.7, float* %arrayidx18.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then12.7, %if.then.7, %for.inc.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !236
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s2710(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %2 = load i32, i32* %1, align 4, !tbaa !97
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2710, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %cmp33 = icmp sgt i32 %2, 0
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.090 = phi i32 [ 0, %entry ], [ %inc58, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call60 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call61 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2710, i64 0, i64 0)) #11
  ret float %call61

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call56 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc58 = add nuw nsw i32 %nl.090, 1
  %exitcond.not = icmp eq i32 %inc58, 50000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !237

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx7, align 32, !tbaa !4
  %cmp8 = fcmp ogt float %3, %4
  br i1 %cmp8, label %if.then, label %if.else

if.then:                                          ; preds = %for.body5
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %5 = load float, float* %arrayidx12, align 32, !tbaa !4
  %mul = fmul float %4, %5
  %add = fadd float %3, %mul
  store float %add, float* %arrayidx, align 32, !tbaa !4
  %mul19 = fmul float %5, %5
  %arrayidx21 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %6 = load float, float* %arrayidx21, align 32, !tbaa !4
  %add22 = fadd float %mul19, %6
  store float %add22, float* %arrayidx21, align 32, !tbaa !4
  br label %for.inc

if.else:                                          ; preds = %for.body5
  %arrayidx26 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %7 = load float, float* %arrayidx26, align 32, !tbaa !4
  %mul29 = fmul float %7, %7
  %add30 = fadd float %3, %mul29
  store float %add30, float* %arrayidx7, align 32, !tbaa !4
  br i1 %cmp33, label %if.then35, label %if.else46

if.then35:                                        ; preds = %if.else
  %arrayidx39 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %8 = load float, float* %arrayidx39, align 32, !tbaa !4
  %mul42 = fmul float %8, %8
  %add43 = fadd float %3, %mul42
  %arrayidx45 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  store float %add43, float* %arrayidx45, align 32, !tbaa !4
  br label %for.inc

if.else46:                                        ; preds = %if.else
  %arrayidx53 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %9 = load float, float* %arrayidx53, align 32, !tbaa !4
  %add54 = fadd float %mul29, %9
  store float %add54, float* %arrayidx53, align 32, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.else46, %if.then35, %if.then
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %10 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %11 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %cmp8.1 = fcmp ogt float %10, %11
  br i1 %cmp8.1, label %if.then.1, label %if.else.1

if.else.1:                                        ; preds = %for.inc
  %arrayidx26.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %12 = load float, float* %arrayidx26.1, align 4, !tbaa !4
  %mul29.1 = fmul float %12, %12
  %add30.1 = fadd float %10, %mul29.1
  store float %add30.1, float* %arrayidx7.1, align 4, !tbaa !4
  br i1 %cmp33, label %if.then35.1, label %if.else46.1

if.else46.1:                                      ; preds = %if.else.1
  %arrayidx53.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %13 = load float, float* %arrayidx53.1, align 4, !tbaa !4
  %add54.1 = fadd float %mul29.1, %13
  store float %add54.1, float* %arrayidx53.1, align 4, !tbaa !4
  br label %for.inc.1

if.then35.1:                                      ; preds = %if.else.1
  %arrayidx39.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %14 = load float, float* %arrayidx39.1, align 4, !tbaa !4
  %mul42.1 = fmul float %14, %14
  %add43.1 = fadd float %10, %mul42.1
  %arrayidx45.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  store float %add43.1, float* %arrayidx45.1, align 4, !tbaa !4
  br label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %15 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %mul.1 = fmul float %11, %15
  %add.1 = fadd float %10, %mul.1
  store float %add.1, float* %arrayidx.1, align 4, !tbaa !4
  %mul19.1 = fmul float %15, %15
  %arrayidx21.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %16 = load float, float* %arrayidx21.1, align 4, !tbaa !4
  %add22.1 = fadd float %mul19.1, %16
  store float %add22.1, float* %arrayidx21.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %if.then35.1, %if.else46.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %17 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %18 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %cmp8.2 = fcmp ogt float %17, %18
  br i1 %cmp8.2, label %if.then.2, label %if.else.2

if.else.2:                                        ; preds = %for.inc.1
  %arrayidx26.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %19 = load float, float* %arrayidx26.2, align 8, !tbaa !4
  %mul29.2 = fmul float %19, %19
  %add30.2 = fadd float %17, %mul29.2
  store float %add30.2, float* %arrayidx7.2, align 8, !tbaa !4
  br i1 %cmp33, label %if.then35.2, label %if.else46.2

if.else46.2:                                      ; preds = %if.else.2
  %arrayidx53.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %20 = load float, float* %arrayidx53.2, align 8, !tbaa !4
  %add54.2 = fadd float %mul29.2, %20
  store float %add54.2, float* %arrayidx53.2, align 8, !tbaa !4
  br label %for.inc.2

if.then35.2:                                      ; preds = %if.else.2
  %arrayidx39.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %21 = load float, float* %arrayidx39.2, align 8, !tbaa !4
  %mul42.2 = fmul float %21, %21
  %add43.2 = fadd float %17, %mul42.2
  %arrayidx45.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  store float %add43.2, float* %arrayidx45.2, align 8, !tbaa !4
  br label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %22 = load float, float* %arrayidx12.2, align 8, !tbaa !4
  %mul.2 = fmul float %18, %22
  %add.2 = fadd float %17, %mul.2
  store float %add.2, float* %arrayidx.2, align 8, !tbaa !4
  %mul19.2 = fmul float %22, %22
  %arrayidx21.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %23 = load float, float* %arrayidx21.2, align 8, !tbaa !4
  %add22.2 = fadd float %mul19.2, %23
  store float %add22.2, float* %arrayidx21.2, align 8, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %if.then35.2, %if.else46.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %24 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %25 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %cmp8.3 = fcmp ogt float %24, %25
  br i1 %cmp8.3, label %if.then.3, label %if.else.3

if.else.3:                                        ; preds = %for.inc.2
  %arrayidx26.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %26 = load float, float* %arrayidx26.3, align 4, !tbaa !4
  %mul29.3 = fmul float %26, %26
  %add30.3 = fadd float %24, %mul29.3
  store float %add30.3, float* %arrayidx7.3, align 4, !tbaa !4
  br i1 %cmp33, label %if.then35.3, label %if.else46.3

if.else46.3:                                      ; preds = %if.else.3
  %arrayidx53.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %27 = load float, float* %arrayidx53.3, align 4, !tbaa !4
  %add54.3 = fadd float %mul29.3, %27
  store float %add54.3, float* %arrayidx53.3, align 4, !tbaa !4
  br label %for.inc.3

if.then35.3:                                      ; preds = %if.else.3
  %arrayidx39.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %28 = load float, float* %arrayidx39.3, align 4, !tbaa !4
  %mul42.3 = fmul float %28, %28
  %add43.3 = fadd float %24, %mul42.3
  %arrayidx45.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  store float %add43.3, float* %arrayidx45.3, align 4, !tbaa !4
  br label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %29 = load float, float* %arrayidx12.3, align 4, !tbaa !4
  %mul.3 = fmul float %25, %29
  %add.3 = fadd float %24, %mul.3
  store float %add.3, float* %arrayidx.3, align 4, !tbaa !4
  %mul19.3 = fmul float %29, %29
  %arrayidx21.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %30 = load float, float* %arrayidx21.3, align 4, !tbaa !4
  %add22.3 = fadd float %mul19.3, %30
  store float %add22.3, float* %arrayidx21.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %if.then35.3, %if.else46.3
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %31 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %32 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %cmp8.4 = fcmp ogt float %31, %32
  br i1 %cmp8.4, label %if.then.4, label %if.else.4

if.else.4:                                        ; preds = %for.inc.3
  %arrayidx26.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %33 = load float, float* %arrayidx26.4, align 16, !tbaa !4
  %mul29.4 = fmul float %33, %33
  %add30.4 = fadd float %31, %mul29.4
  store float %add30.4, float* %arrayidx7.4, align 16, !tbaa !4
  br i1 %cmp33, label %if.then35.4, label %if.else46.4

if.else46.4:                                      ; preds = %if.else.4
  %arrayidx53.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %34 = load float, float* %arrayidx53.4, align 16, !tbaa !4
  %add54.4 = fadd float %mul29.4, %34
  store float %add54.4, float* %arrayidx53.4, align 16, !tbaa !4
  br label %for.inc.4

if.then35.4:                                      ; preds = %if.else.4
  %arrayidx39.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %35 = load float, float* %arrayidx39.4, align 16, !tbaa !4
  %mul42.4 = fmul float %35, %35
  %add43.4 = fadd float %31, %mul42.4
  %arrayidx45.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  store float %add43.4, float* %arrayidx45.4, align 16, !tbaa !4
  br label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %36 = load float, float* %arrayidx12.4, align 16, !tbaa !4
  %mul.4 = fmul float %32, %36
  %add.4 = fadd float %31, %mul.4
  store float %add.4, float* %arrayidx.4, align 16, !tbaa !4
  %mul19.4 = fmul float %36, %36
  %arrayidx21.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %37 = load float, float* %arrayidx21.4, align 16, !tbaa !4
  %add22.4 = fadd float %mul19.4, %37
  store float %add22.4, float* %arrayidx21.4, align 16, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %if.then35.4, %if.else46.4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %38 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %39 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %cmp8.5 = fcmp ogt float %38, %39
  br i1 %cmp8.5, label %if.then.5, label %if.else.5

if.else.5:                                        ; preds = %for.inc.4
  %arrayidx26.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %40 = load float, float* %arrayidx26.5, align 4, !tbaa !4
  %mul29.5 = fmul float %40, %40
  %add30.5 = fadd float %38, %mul29.5
  store float %add30.5, float* %arrayidx7.5, align 4, !tbaa !4
  br i1 %cmp33, label %if.then35.5, label %if.else46.5

if.else46.5:                                      ; preds = %if.else.5
  %arrayidx53.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %41 = load float, float* %arrayidx53.5, align 4, !tbaa !4
  %add54.5 = fadd float %mul29.5, %41
  store float %add54.5, float* %arrayidx53.5, align 4, !tbaa !4
  br label %for.inc.5

if.then35.5:                                      ; preds = %if.else.5
  %arrayidx39.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %42 = load float, float* %arrayidx39.5, align 4, !tbaa !4
  %mul42.5 = fmul float %42, %42
  %add43.5 = fadd float %38, %mul42.5
  %arrayidx45.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  store float %add43.5, float* %arrayidx45.5, align 4, !tbaa !4
  br label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %43 = load float, float* %arrayidx12.5, align 4, !tbaa !4
  %mul.5 = fmul float %39, %43
  %add.5 = fadd float %38, %mul.5
  store float %add.5, float* %arrayidx.5, align 4, !tbaa !4
  %mul19.5 = fmul float %43, %43
  %arrayidx21.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %44 = load float, float* %arrayidx21.5, align 4, !tbaa !4
  %add22.5 = fadd float %mul19.5, %44
  store float %add22.5, float* %arrayidx21.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %if.then35.5, %if.else46.5
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %45 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %46 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %cmp8.6 = fcmp ogt float %45, %46
  br i1 %cmp8.6, label %if.then.6, label %if.else.6

if.else.6:                                        ; preds = %for.inc.5
  %arrayidx26.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %47 = load float, float* %arrayidx26.6, align 8, !tbaa !4
  %mul29.6 = fmul float %47, %47
  %add30.6 = fadd float %45, %mul29.6
  store float %add30.6, float* %arrayidx7.6, align 8, !tbaa !4
  br i1 %cmp33, label %if.then35.6, label %if.else46.6

if.else46.6:                                      ; preds = %if.else.6
  %arrayidx53.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %48 = load float, float* %arrayidx53.6, align 8, !tbaa !4
  %add54.6 = fadd float %mul29.6, %48
  store float %add54.6, float* %arrayidx53.6, align 8, !tbaa !4
  br label %for.inc.6

if.then35.6:                                      ; preds = %if.else.6
  %arrayidx39.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %49 = load float, float* %arrayidx39.6, align 8, !tbaa !4
  %mul42.6 = fmul float %49, %49
  %add43.6 = fadd float %45, %mul42.6
  %arrayidx45.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  store float %add43.6, float* %arrayidx45.6, align 8, !tbaa !4
  br label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %50 = load float, float* %arrayidx12.6, align 8, !tbaa !4
  %mul.6 = fmul float %46, %50
  %add.6 = fadd float %45, %mul.6
  store float %add.6, float* %arrayidx.6, align 8, !tbaa !4
  %mul19.6 = fmul float %50, %50
  %arrayidx21.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %51 = load float, float* %arrayidx21.6, align 8, !tbaa !4
  %add22.6 = fadd float %mul19.6, %51
  store float %add22.6, float* %arrayidx21.6, align 8, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %if.then35.6, %if.else46.6
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %52 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %53 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %cmp8.7 = fcmp ogt float %52, %53
  br i1 %cmp8.7, label %if.then.7, label %if.else.7

if.else.7:                                        ; preds = %for.inc.6
  %arrayidx26.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %54 = load float, float* %arrayidx26.7, align 4, !tbaa !4
  %mul29.7 = fmul float %54, %54
  %add30.7 = fadd float %52, %mul29.7
  store float %add30.7, float* %arrayidx7.7, align 4, !tbaa !4
  br i1 %cmp33, label %if.then35.7, label %if.else46.7

if.else46.7:                                      ; preds = %if.else.7
  %arrayidx53.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %55 = load float, float* %arrayidx53.7, align 4, !tbaa !4
  %add54.7 = fadd float %mul29.7, %55
  store float %add54.7, float* %arrayidx53.7, align 4, !tbaa !4
  br label %for.inc.7

if.then35.7:                                      ; preds = %if.else.7
  %arrayidx39.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %56 = load float, float* %arrayidx39.7, align 4, !tbaa !4
  %mul42.7 = fmul float %56, %56
  %add43.7 = fadd float %52, %mul42.7
  %arrayidx45.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  store float %add43.7, float* %arrayidx45.7, align 4, !tbaa !4
  br label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %57 = load float, float* %arrayidx12.7, align 4, !tbaa !4
  %mul.7 = fmul float %53, %57
  %add.7 = fadd float %52, %mul.7
  store float %add.7, float* %arrayidx.7, align 4, !tbaa !4
  %mul19.7 = fmul float %57, %57
  %arrayidx21.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %58 = load float, float* %arrayidx21.7, align 4, !tbaa !4
  %add22.7 = fadd float %mul19.7, %58
  store float %add22.7, float* %arrayidx21.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %if.then35.7, %if.else46.7
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !238
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s2711(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2711, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.029 = phi i32 [ 0, %entry ], [ %inc15, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call17 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call18 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2711, i64 0, i64 0)) #11
  ret float %call18

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call13 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc15 = add nuw nsw i32 %nl.029, 1
  %exitcond.not = icmp eq i32 %inc15, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !239

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp une float %0, 0.000000e+00
  br i1 %cmp6, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body5
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx10, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx12, align 32, !tbaa !4
  %add = fadd float %2, %mul
  store float %add, float* %arrayidx12, align 32, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body5
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp une float %3, 0.000000e+00
  br i1 %cmp6.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %mul.1 = fmul float %3, %4
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %add.1 = fadd float %5, %mul.1
  store float %add.1, float* %arrayidx12.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp une float %6, 0.000000e+00
  br i1 %cmp6.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %mul.2 = fmul float %6, %7
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx12.2, align 8, !tbaa !4
  %add.2 = fadd float %8, %mul.2
  store float %add.2, float* %arrayidx12.2, align 8, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp une float %9, 0.000000e+00
  br i1 %cmp6.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %mul.3 = fmul float %9, %10
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx12.3, align 4, !tbaa !4
  %add.3 = fadd float %11, %mul.3
  store float %add.3, float* %arrayidx12.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp une float %12, 0.000000e+00
  br i1 %cmp6.4, label %if.then.4, label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %mul.4 = fmul float %12, %13
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx12.4, align 16, !tbaa !4
  %add.4 = fadd float %14, %mul.4
  store float %add.4, float* %arrayidx12.4, align 16, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %for.inc.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp une float %15, 0.000000e+00
  br i1 %cmp6.5, label %if.then.5, label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %mul.5 = fmul float %15, %16
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx12.5, align 4, !tbaa !4
  %add.5 = fadd float %17, %mul.5
  store float %add.5, float* %arrayidx12.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %for.inc.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp une float %18, 0.000000e+00
  br i1 %cmp6.6, label %if.then.6, label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %mul.6 = fmul float %18, %19
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %20 = load float, float* %arrayidx12.6, align 8, !tbaa !4
  %add.6 = fadd float %20, %mul.6
  store float %add.6, float* %arrayidx12.6, align 8, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %for.inc.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp une float %21, 0.000000e+00
  br i1 %cmp6.7, label %if.then.7, label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %mul.7 = fmul float %21, %22
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %23 = load float, float* %arrayidx12.7, align 4, !tbaa !4
  %add.7 = fadd float %23, %mul.7
  store float %add.7, float* %arrayidx12.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %for.inc.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !240
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s2712(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2712, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.033 = phi i32 [ 0, %entry ], [ %inc17, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call19 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call20 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2712, i64 0, i64 0)) #11
  ret float %call20

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call15 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc17 = add nuw nsw i32 %nl.033, 1
  %exitcond.not = icmp eq i32 %inc17, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !241

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %cmp8 = fcmp ogt float %0, %1
  br i1 %cmp8, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body5
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx12, align 32, !tbaa !4
  %mul = fmul float %1, %2
  %add = fadd float %0, %mul
  store float %add, float* %arrayidx, align 32, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body5
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %cmp8.1 = fcmp ogt float %3, %4
  br i1 %cmp8.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %mul.1 = fmul float %4, %5
  %add.1 = fadd float %3, %mul.1
  store float %add.1, float* %arrayidx.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %cmp8.2 = fcmp ogt float %6, %7
  br i1 %cmp8.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx12.2, align 8, !tbaa !4
  %mul.2 = fmul float %7, %8
  %add.2 = fadd float %6, %mul.2
  store float %add.2, float* %arrayidx.2, align 8, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %cmp8.3 = fcmp ogt float %9, %10
  br i1 %cmp8.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx12.3, align 4, !tbaa !4
  %mul.3 = fmul float %10, %11
  %add.3 = fadd float %9, %mul.3
  store float %add.3, float* %arrayidx.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %cmp8.4 = fcmp ogt float %12, %13
  br i1 %cmp8.4, label %if.then.4, label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx12.4, align 16, !tbaa !4
  %mul.4 = fmul float %13, %14
  %add.4 = fadd float %12, %mul.4
  store float %add.4, float* %arrayidx.4, align 16, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %for.inc.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %cmp8.5 = fcmp ogt float %15, %16
  br i1 %cmp8.5, label %if.then.5, label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx12.5, align 4, !tbaa !4
  %mul.5 = fmul float %16, %17
  %add.5 = fadd float %15, %mul.5
  store float %add.5, float* %arrayidx.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %for.inc.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %cmp8.6 = fcmp ogt float %18, %19
  br i1 %cmp8.6, label %if.then.6, label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %20 = load float, float* %arrayidx12.6, align 8, !tbaa !4
  %mul.6 = fmul float %19, %20
  %add.6 = fadd float %18, %mul.6
  store float %add.6, float* %arrayidx.6, align 8, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %for.inc.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %cmp8.7 = fcmp ogt float %21, %22
  br i1 %cmp8.7, label %if.then.7, label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %23 = load float, float* %arrayidx12.7, align 4, !tbaa !4
  %mul.7 = fmul float %22, %23
  %add.7 = fadd float %21, %mul.7
  store float %add.7, float* %arrayidx.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %for.inc.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !242
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s281(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s281, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.035 = phi i32 [ 0, %entry ], [ %inc18, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call20 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call21 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s281, i64 0, i64 0)) #11
  ret float %call21

for.cond.cleanup4:                                ; preds = %for.body5
  %call16 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc18 = add nuw nsw i32 %nl.035, 1
  %exitcond.not = icmp eq i32 %inc18, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !243

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %0 = sub nuw nsw i64 31999, %indvars.iv
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %0
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx8, align 32, !tbaa !4
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx10, align 32, !tbaa !4
  %mul = fmul float %2, %3
  %add = fadd float %1, %mul
  %sub11 = fadd float %add, -1.000000e+00
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %sub11, float* %arrayidx13, align 32, !tbaa !4
  store float %add, float* %arrayidx8, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %4 = sub nsw i64 31998, %indvars.iv
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %4
  %5 = load float, float* %arrayidx.1, align 8, !tbaa !4
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %mul.1 = fmul float %6, %7
  %add.1 = fadd float %5, %mul.1
  %sub11.1 = fadd float %add.1, -1.000000e+00
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %sub11.1, float* %arrayidx13.1, align 4, !tbaa !4
  store float %add.1, float* %arrayidx8.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %8 = sub nsw i64 31997, %indvars.iv
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %8
  %9 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx8.2, align 8, !tbaa !4
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %mul.2 = fmul float %10, %11
  %add.2 = fadd float %9, %mul.2
  %sub11.2 = fadd float %add.2, -1.000000e+00
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %sub11.2, float* %arrayidx13.2, align 8, !tbaa !4
  store float %add.2, float* %arrayidx8.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %12 = sub nsw i64 31996, %indvars.iv
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %12
  %13 = load float, float* %arrayidx.3, align 16, !tbaa !4
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %mul.3 = fmul float %14, %15
  %add.3 = fadd float %13, %mul.3
  %sub11.3 = fadd float %add.3, -1.000000e+00
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %sub11.3, float* %arrayidx13.3, align 4, !tbaa !4
  store float %add.3, float* %arrayidx8.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %16 = sub nsw i64 31995, %indvars.iv
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %16
  %17 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx8.4, align 16, !tbaa !4
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %mul.4 = fmul float %18, %19
  %add.4 = fadd float %17, %mul.4
  %sub11.4 = fadd float %add.4, -1.000000e+00
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %sub11.4, float* %arrayidx13.4, align 16, !tbaa !4
  store float %add.4, float* %arrayidx8.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %20 = sub nsw i64 31994, %indvars.iv
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %20
  %21 = load float, float* %arrayidx.5, align 8, !tbaa !4
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %23 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %mul.5 = fmul float %22, %23
  %add.5 = fadd float %21, %mul.5
  %sub11.5 = fadd float %add.5, -1.000000e+00
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %sub11.5, float* %arrayidx13.5, align 4, !tbaa !4
  store float %add.5, float* %arrayidx8.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %24 = sub nsw i64 31993, %indvars.iv
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %24
  %25 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx8.6, align 8, !tbaa !4
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %27 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %mul.6 = fmul float %26, %27
  %add.6 = fadd float %25, %mul.6
  %sub11.6 = fadd float %add.6, -1.000000e+00
  %arrayidx13.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %sub11.6, float* %arrayidx13.6, align 8, !tbaa !4
  store float %add.6, float* %arrayidx8.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %28 = sub nsw i64 31992, %indvars.iv
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %28
  %29 = load float, float* %arrayidx.7, align 32, !tbaa !4
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %31 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %mul.7 = fmul float %30, %31
  %add.7 = fadd float %29, %mul.7
  %sub11.7 = fadd float %add.7, -1.000000e+00
  %arrayidx13.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %sub11.7, float* %arrayidx13.7, align 4, !tbaa !4
  store float %add.7, float* %arrayidx8.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !244
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1281(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1281, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.041 = phi i32 [ 0, %entry ], [ %inc22, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call24 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call25 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1281, i64 0, i64 0)) #11
  ret float %call25

for.cond.cleanup4:                                ; preds = %for.body5
  %call20 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc22 = add nuw nsw i32 %nl.041, 1
  %exitcond.not = icmp eq i32 %inc22, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !245

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvar
  %3 = load float, float* %arrayidx11, align 32, !tbaa !4
  %mul12 = fmul float %2, %3
  %add = fadd float %mul, %mul12
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvar
  %4 = load float, float* %arrayidx14, align 32, !tbaa !4
  %add15 = fadd float %4, %add
  %sub = fadd float %add15, -1.000000e+00
  store float %sub, float* %arrayidx9, align 32, !tbaa !4
  store float %add15, float* %arrayidx, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !246
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s291(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s291, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.027 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s291, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.027, 1
  %exitcond.not = icmp eq i32 %inc12, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !247

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %im1.025 = phi i64 [ 31999, %for.cond2.preheader ], [ %indvars.iv.next.6, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %idxprom6 = and i64 %im1.025, 4294967295
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6
  %1 = load float, float* %arrayidx7, align 4, !tbaa !4
  %add = fadd float %0, %1
  %mul = fmul float %add, 5.000000e-01
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %mul, float* %arrayidx9, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %idxprom6.1 = and i64 %indvars.iv, 4294967288
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.1
  %3 = load float, float* %arrayidx7.1, align 32, !tbaa !4
  %add.1 = fadd float %2, %3
  %mul.1 = fmul float %add.1, 5.000000e-01
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %mul.1, float* %arrayidx9.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %idxprom6.2 = and i64 %indvars.iv.next, 4294967289
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.2
  %5 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %add.2 = fadd float %4, %5
  %mul.2 = fmul float %add.2, 5.000000e-01
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %mul.2, float* %arrayidx9.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %idxprom6.3 = and i64 %indvars.iv.next.1, 4294967290
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.3
  %7 = load float, float* %arrayidx7.3, align 8, !tbaa !4
  %add.3 = fadd float %6, %7
  %mul.3 = fmul float %add.3, 5.000000e-01
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %mul.3, float* %arrayidx9.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %idxprom6.4 = and i64 %indvars.iv.next.2, 4294967291
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.4
  %9 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %add.4 = fadd float %8, %9
  %mul.4 = fmul float %add.4, 5.000000e-01
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %mul.4, float* %arrayidx9.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %idxprom6.5 = and i64 %indvars.iv.next.3, 4294967292
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.5
  %11 = load float, float* %arrayidx7.5, align 16, !tbaa !4
  %add.5 = fadd float %10, %11
  %mul.5 = fmul float %add.5, 5.000000e-01
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %mul.5, float* %arrayidx9.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %idxprom6.6 = and i64 %indvars.iv.next.4, 4294967293
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.6
  %13 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %add.6 = fadd float %12, %13
  %mul.6 = fmul float %add.6, 5.000000e-01
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %mul.6, float* %arrayidx9.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %idxprom6.7 = and i64 %indvars.iv.next.5, 4294967294
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.7
  %15 = load float, float* %arrayidx7.7, align 8, !tbaa !4
  %add.7 = fadd float %14, %15
  %mul.7 = fmul float %add.7, 5.000000e-01
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %mul.7, float* %arrayidx9.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !248
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s292(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s292, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.034 = phi i32 [ 0, %entry ], [ %inc15, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 31998), align 8, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call17 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call18 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s292, i64 0, i64 0)) #11
  ret float %call18

for.cond.cleanup4:                                ; preds = %for.body5
  %call13 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc15 = add nuw nsw i32 %nl.034, 1
  %exitcond.not = icmp eq i32 %inc15, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !249

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %16, %for.body5 ]
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %im1.031 = phi i64 [ 31999, %for.cond2.preheader ], [ %indvars.iv.next.6, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 32, !tbaa !4
  %idxprom6 = and i64 %im1.031, 4294967295
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6
  %2 = load float, float* %arrayidx7, align 4, !tbaa !4
  %add = fadd float %1, %2
  %add10 = fadd float %add, %0
  %mul = fmul float %add10, 0x3FD54FDF40000000
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %mul, float* %arrayidx12, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %idxprom6.1 = and i64 %indvars.iv, 4294967288
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.1
  %4 = load float, float* %arrayidx7.1, align 32, !tbaa !4
  %add.1 = fadd float %3, %4
  %add10.1 = fadd float %add.1, %2
  %mul.1 = fmul float %add10.1, 0x3FD54FDF40000000
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %mul.1, float* %arrayidx12.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %idxprom6.2 = and i64 %indvars.iv.next, 4294967289
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.2
  %6 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %add.2 = fadd float %5, %6
  %add10.2 = fadd float %add.2, %4
  %mul.2 = fmul float %add10.2, 0x3FD54FDF40000000
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %mul.2, float* %arrayidx12.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %idxprom6.3 = and i64 %indvars.iv.next.1, 4294967290
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.3
  %8 = load float, float* %arrayidx7.3, align 8, !tbaa !4
  %add.3 = fadd float %7, %8
  %add10.3 = fadd float %add.3, %6
  %mul.3 = fmul float %add10.3, 0x3FD54FDF40000000
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %mul.3, float* %arrayidx12.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %9 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %idxprom6.4 = and i64 %indvars.iv.next.2, 4294967291
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.4
  %10 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %add.4 = fadd float %9, %10
  %add10.4 = fadd float %add.4, %8
  %mul.4 = fmul float %add10.4, 0x3FD54FDF40000000
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %mul.4, float* %arrayidx12.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %idxprom6.5 = and i64 %indvars.iv.next.3, 4294967292
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.5
  %12 = load float, float* %arrayidx7.5, align 16, !tbaa !4
  %add.5 = fadd float %11, %12
  %add10.5 = fadd float %add.5, %10
  %mul.5 = fmul float %add10.5, 0x3FD54FDF40000000
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %mul.5, float* %arrayidx12.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %13 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %idxprom6.6 = and i64 %indvars.iv.next.4, 4294967293
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.6
  %14 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %add.6 = fadd float %13, %14
  %add10.6 = fadd float %add.6, %12
  %mul.6 = fmul float %add10.6, 0x3FD54FDF40000000
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %mul.6, float* %arrayidx12.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %idxprom6.7 = and i64 %indvars.iv.next.5, 4294967294
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6.7
  %16 = load float, float* %arrayidx7.7, align 8, !tbaa !4
  %add.7 = fadd float %15, %16
  %add10.7 = fadd float %add.7, %14
  %mul.7 = fmul float %add10.7, 0x3FD54FDF40000000
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %mul.7, float* %arrayidx12.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !250
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s293(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s293, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.019 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call10 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call11 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s293, i64 0, i64 0)) #11
  ret float %call11

for.cond.cleanup4:                                ; preds = %for.body5
  %call6 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc8 = add nuw nsw i32 %nl.019, 1
  %exitcond.not = icmp eq i32 %inc8, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !251

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %0 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %0, float* %arrayidx, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %1 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %1, float* %arrayidx.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %1, float* %arrayidx.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %2 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %2, float* %arrayidx.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %2, float* %arrayidx.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %3 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %3, float* %arrayidx.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %3, float* %arrayidx.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %4 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %4, float* %arrayidx.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !252
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s2101(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2101, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.034 = phi i32 [ 0, %entry ], [ %inc18, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call20 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call21 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2101, i64 0, i64 0)) #11
  ret float %call21

for.cond.cleanup4:                                ; preds = %for.body5
  %call16 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc18 = add nuw nsw i32 %nl.034, 1
  %exitcond.not = icmp eq i32 %inc18, 1000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !253

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvar, i64 %indvar
  %0 = load float, float* %arrayidx7, align 32, !tbaa !4
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 %indvar, i64 %indvar
  %1 = load float, float* %arrayidx11, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvar, i64 %indvar
  %2 = load float, float* %arrayidx15, align 32, !tbaa !4
  %add = fadd float %2, %mul
  store float %add, float* %arrayidx15, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 255
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !254
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s2102(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2102, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.038 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call23 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call24 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2102, i64 0, i64 0)) #11
  ret float %call24

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv39 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next40, %for.cond.cleanup8 ]
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call19 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc21 = add nuw nsw i32 %nl.038, 1
  %exitcond41.not = icmp eq i32 %inc21, 39000
  br i1 %exitcond41.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !255

for.cond.cleanup8:                                ; preds = %for.body9
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv39, i64 %indvars.iv39
  store float 1.000000e+00, float* %arrayidx15, align 4, !tbaa !4
  %indvars.iv.next40 = add nuw nsw i64 %indvars.iv39, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next40, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !256

for.body9:                                        ; preds = %for.body9, %for.cond6.preheader
  %indvar = phi i64 [ %indvar.next, %for.body9 ], [ 0, %for.cond6.preheader ]
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvar, i64 %indvars.iv39
  store float 0.000000e+00, float* %arrayidx11, align 4, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 255
  br i1 %exitcond, label %for.cond.cleanup8, label %for.body9, !llvm.loop !257
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s2111(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2111, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.046 = phi i32 [ 0, %entry ], [ %inc27, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call29 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call30 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s2111, i64 0, i64 0)) #11
  ret float %call30

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv48 = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next49, %for.cond.cleanup8 ]
  %0 = add nsw i64 %indvars.iv48, -1
  %arrayidx11.phi.trans.insert = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv48, i64 0
  %.pre = load float, float* %arrayidx11.phi.trans.insert, align 64, !tbaa !4
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call25 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc27 = add nuw nsw i32 %nl.046, 1
  %exitcond51.not = icmp eq i32 %inc27, 39000
  br i1 %exitcond51.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !258

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next49 = add nuw nsw i64 %indvars.iv48, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next49, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !259

for.body9:                                        ; preds = %for.body9.7, %for.cond6.preheader
  %1 = phi float [ %.pre, %for.cond6.preheader ], [ %conv17.7, %for.body9.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9.7 ]
  %arrayidx16 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv
  %2 = load float, float* %arrayidx16, align 4, !tbaa !4
  %add = fadd float %1, %2
  %conv = fpext float %add to double
  %div = fdiv double %conv, 1.900000e+00
  %conv17 = fptrunc double %div to float
  %arrayidx21 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv48, i64 %indvars.iv
  store float %conv17, float* %arrayidx21, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx16.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %add.1 = fadd float %3, %conv17
  %conv.1 = fpext float %add.1 to double
  %div.1 = fdiv double %conv.1, 1.900000e+00
  %conv17.1 = fptrunc double %div.1 to float
  %arrayidx21.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv48, i64 %indvars.iv.next
  store float %conv17.1, float* %arrayidx21.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx16.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.1
  %4 = load float, float* %arrayidx16.2, align 4, !tbaa !4
  %add.2 = fadd float %4, %conv17.1
  %conv.2 = fpext float %add.2 to double
  %div.2 = fdiv double %conv.2, 1.900000e+00
  %conv17.2 = fptrunc double %div.2 to float
  %arrayidx21.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv48, i64 %indvars.iv.next.1
  store float %conv17.2, float* %arrayidx21.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx16.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.2
  %5 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %add.3 = fadd float %5, %conv17.2
  %conv.3 = fpext float %add.3 to double
  %div.3 = fdiv double %conv.3, 1.900000e+00
  %conv17.3 = fptrunc double %div.3 to float
  %arrayidx21.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv48, i64 %indvars.iv.next.2
  store float %conv17.3, float* %arrayidx21.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx16.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.3
  %6 = load float, float* %arrayidx16.4, align 4, !tbaa !4
  %add.4 = fadd float %6, %conv17.3
  %conv.4 = fpext float %add.4 to double
  %div.4 = fdiv double %conv.4, 1.900000e+00
  %conv17.4 = fptrunc double %div.4 to float
  %arrayidx21.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv48, i64 %indvars.iv.next.3
  store float %conv17.4, float* %arrayidx21.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx16.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.4
  %7 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %add.5 = fadd float %7, %conv17.4
  %conv.5 = fpext float %add.5 to double
  %div.5 = fdiv double %conv.5, 1.900000e+00
  %conv17.5 = fptrunc double %div.5 to float
  %arrayidx21.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv48, i64 %indvars.iv.next.4
  store float %conv17.5, float* %arrayidx21.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx16.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.5
  %8 = load float, float* %arrayidx16.6, align 4, !tbaa !4
  %add.6 = fadd float %8, %conv17.5
  %conv.6 = fpext float %add.6 to double
  %div.6 = fdiv double %conv.6, 1.900000e+00
  %conv17.6 = fptrunc double %div.6 to float
  %arrayidx21.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv48, i64 %indvars.iv.next.5
  store float %conv17.6, float* %arrayidx21.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 256
  br i1 %exitcond.6.not, label %for.cond.cleanup8, label %for.body9.7, !llvm.loop !260

for.body9.7:                                      ; preds = %for.body9
  %arrayidx16.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %0, i64 %indvars.iv.next.6
  %9 = load float, float* %arrayidx16.7, align 4, !tbaa !4
  %add.7 = fadd float %9, %conv17.6
  %conv.7 = fpext float %add.7 to double
  %div.7 = fdiv double %conv.7, 1.900000e+00
  %conv17.7 = fptrunc double %div.7 to float
  %arrayidx21.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv48, i64 %indvars.iv.next.6
  store float %conv17.7, float* %arrayidx21.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body9, !llvm.loop !261
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s311(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s311, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.022 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call10 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call11 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s311, i64 0, i64 0)) #11
  ret float %call11

for.cond.cleanup4:                                ; preds = %for.body5
  %add.7.lcssa = phi float [ %add, %for.body5 ]
  %call6 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add.7.lcssa) #11
  %inc8 = add nuw nsw i32 %nl.022, 1
  %exitcond.not = icmp eq i32 %inc8, 1000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !262

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %sum.020 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %add = fadd float %sum.020, %0
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !263
}

; Function Attrs: norecurse nounwind optsize readonly uwtable
define dso_local float @test(float* nocapture readonly %A) local_unnamed_addr #5 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %add.lcssa = phi float [ %add, %for.body ]
  ret float %add.lcssa

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %s.06 = phi float [ 0.000000e+00, %entry ], [ %add, %for.body ]
  %arrayidx = getelementptr inbounds float, float* %A, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %add = fadd float %s.06, %0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !264
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s31111(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__.s31111, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.body.i.preheader

for.body.i.preheader:                             ; preds = %test.exit39, %entry
  %nl.088 = phi i32 [ 0, %entry ], [ %inc, %test.exit39 ]
  br label %for.body.i

for.cond.cleanup:                                 ; preds = %test.exit39
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call18 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call19 = tail call float @calc_checksum(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__.s31111, i64 0, i64 0)) #11
  ret float %call19

for.body.i:                                       ; preds = %for.body.i, %for.body.i.preheader
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0, %for.body.i.preheader ]
  %s.06.i = phi float [ %add.i, %for.body.i ], [ 0.000000e+00, %for.body.i.preheader ]
  %arrayidx.i = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.i
  %0 = load float, float* %arrayidx.i, align 4, !tbaa !4
  %add.i = fadd float %s.06.i, %0
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 4
  br i1 %exitcond.not.i, label %for.body.i86.preheader, label %for.body.i, !llvm.loop !264

for.body.i86.preheader:                           ; preds = %for.body.i
  %add.i.lcssa = phi float [ %add.i, %for.body.i ]
  br label %for.body.i86

for.body.i86:                                     ; preds = %for.body.i86.preheader, %for.body.i86
  %indvars.iv.i80 = phi i64 [ %indvars.iv.next.i84, %for.body.i86 ], [ 0, %for.body.i86.preheader ]
  %s.06.i81 = phi float [ %add.i83, %for.body.i86 ], [ 0.000000e+00, %for.body.i86.preheader ]
  %arrayidx.i82 = getelementptr inbounds float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 4), i64 %indvars.iv.i80
  %1 = load float, float* %arrayidx.i82, align 4, !tbaa !4
  %add.i83 = fadd float %s.06.i81, %1
  %indvars.iv.next.i84 = add nuw nsw i64 %indvars.iv.i80, 1
  %exitcond.not.i85 = icmp eq i64 %indvars.iv.next.i84, 4
  br i1 %exitcond.not.i85, label %test.exit87, label %for.body.i86, !llvm.loop !264

test.exit87:                                      ; preds = %for.body.i86
  %add.i83.lcssa = phi float [ %add.i83, %for.body.i86 ]
  %add = fadd float %add.i.lcssa, 0.000000e+00
  br label %for.body.i78

for.body.i78:                                     ; preds = %for.body.i78, %test.exit87
  %indvars.iv.i72 = phi i64 [ 0, %test.exit87 ], [ %indvars.iv.next.i76, %for.body.i78 ]
  %s.06.i73 = phi float [ 0.000000e+00, %test.exit87 ], [ %add.i75, %for.body.i78 ]
  %arrayidx.i74 = getelementptr inbounds float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 8), i64 %indvars.iv.i72
  %2 = load float, float* %arrayidx.i74, align 4, !tbaa !4
  %add.i75 = fadd float %s.06.i73, %2
  %indvars.iv.next.i76 = add nuw nsw i64 %indvars.iv.i72, 1
  %exitcond.not.i77 = icmp eq i64 %indvars.iv.next.i76, 4
  br i1 %exitcond.not.i77, label %test.exit79, label %for.body.i78, !llvm.loop !264

test.exit79:                                      ; preds = %for.body.i78
  %add.i75.lcssa = phi float [ %add.i75, %for.body.i78 ]
  %add4 = fadd float %add, %add.i83.lcssa
  br label %for.body.i70

for.body.i70:                                     ; preds = %for.body.i70, %test.exit79
  %indvars.iv.i64 = phi i64 [ 0, %test.exit79 ], [ %indvars.iv.next.i68, %for.body.i70 ]
  %s.06.i65 = phi float [ 0.000000e+00, %test.exit79 ], [ %add.i67, %for.body.i70 ]
  %arrayidx.i66 = getelementptr inbounds float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 12), i64 %indvars.iv.i64
  %3 = load float, float* %arrayidx.i66, align 4, !tbaa !4
  %add.i67 = fadd float %s.06.i65, %3
  %indvars.iv.next.i68 = add nuw nsw i64 %indvars.iv.i64, 1
  %exitcond.not.i69 = icmp eq i64 %indvars.iv.next.i68, 4
  br i1 %exitcond.not.i69, label %test.exit71, label %for.body.i70, !llvm.loop !264

test.exit71:                                      ; preds = %for.body.i70
  %add.i67.lcssa = phi float [ %add.i67, %for.body.i70 ]
  %add6 = fadd float %add4, %add.i75.lcssa
  br label %for.body.i62

for.body.i62:                                     ; preds = %for.body.i62, %test.exit71
  %indvars.iv.i56 = phi i64 [ 0, %test.exit71 ], [ %indvars.iv.next.i60, %for.body.i62 ]
  %s.06.i57 = phi float [ 0.000000e+00, %test.exit71 ], [ %add.i59, %for.body.i62 ]
  %arrayidx.i58 = getelementptr inbounds float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 16), i64 %indvars.iv.i56
  %4 = load float, float* %arrayidx.i58, align 4, !tbaa !4
  %add.i59 = fadd float %s.06.i57, %4
  %indvars.iv.next.i60 = add nuw nsw i64 %indvars.iv.i56, 1
  %exitcond.not.i61 = icmp eq i64 %indvars.iv.next.i60, 4
  br i1 %exitcond.not.i61, label %test.exit63, label %for.body.i62, !llvm.loop !264

test.exit63:                                      ; preds = %for.body.i62
  %add.i59.lcssa = phi float [ %add.i59, %for.body.i62 ]
  %add8 = fadd float %add6, %add.i67.lcssa
  br label %for.body.i54

for.body.i54:                                     ; preds = %for.body.i54, %test.exit63
  %indvars.iv.i48 = phi i64 [ 0, %test.exit63 ], [ %indvars.iv.next.i52, %for.body.i54 ]
  %s.06.i49 = phi float [ 0.000000e+00, %test.exit63 ], [ %add.i51, %for.body.i54 ]
  %arrayidx.i50 = getelementptr inbounds float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 20), i64 %indvars.iv.i48
  %5 = load float, float* %arrayidx.i50, align 4, !tbaa !4
  %add.i51 = fadd float %s.06.i49, %5
  %indvars.iv.next.i52 = add nuw nsw i64 %indvars.iv.i48, 1
  %exitcond.not.i53 = icmp eq i64 %indvars.iv.next.i52, 4
  br i1 %exitcond.not.i53, label %test.exit55, label %for.body.i54, !llvm.loop !264

test.exit55:                                      ; preds = %for.body.i54
  %add.i51.lcssa = phi float [ %add.i51, %for.body.i54 ]
  %add10 = fadd float %add8, %add.i59.lcssa
  br label %for.body.i46

for.body.i46:                                     ; preds = %for.body.i46, %test.exit55
  %indvars.iv.i40 = phi i64 [ 0, %test.exit55 ], [ %indvars.iv.next.i44, %for.body.i46 ]
  %s.06.i41 = phi float [ 0.000000e+00, %test.exit55 ], [ %add.i43, %for.body.i46 ]
  %arrayidx.i42 = getelementptr inbounds float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 24), i64 %indvars.iv.i40
  %6 = load float, float* %arrayidx.i42, align 4, !tbaa !4
  %add.i43 = fadd float %s.06.i41, %6
  %indvars.iv.next.i44 = add nuw nsw i64 %indvars.iv.i40, 1
  %exitcond.not.i45 = icmp eq i64 %indvars.iv.next.i44, 4
  br i1 %exitcond.not.i45, label %test.exit47, label %for.body.i46, !llvm.loop !264

test.exit47:                                      ; preds = %for.body.i46
  %add.i43.lcssa = phi float [ %add.i43, %for.body.i46 ]
  %add12 = fadd float %add10, %add.i51.lcssa
  br label %for.body.i38

for.body.i38:                                     ; preds = %for.body.i38, %test.exit47
  %indvars.iv.i32 = phi i64 [ 0, %test.exit47 ], [ %indvars.iv.next.i36, %for.body.i38 ]
  %s.06.i33 = phi float [ 0.000000e+00, %test.exit47 ], [ %add.i35, %for.body.i38 ]
  %arrayidx.i34 = getelementptr inbounds float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 28), i64 %indvars.iv.i32
  %7 = load float, float* %arrayidx.i34, align 4, !tbaa !4
  %add.i35 = fadd float %s.06.i33, %7
  %indvars.iv.next.i36 = add nuw nsw i64 %indvars.iv.i32, 1
  %exitcond.not.i37 = icmp eq i64 %indvars.iv.next.i36, 4
  br i1 %exitcond.not.i37, label %test.exit39, label %for.body.i38, !llvm.loop !264

test.exit39:                                      ; preds = %for.body.i38
  %add.i35.lcssa = phi float [ %add.i35, %for.body.i38 ]
  %add14 = fadd float %add12, %add.i43.lcssa
  %add16 = fadd float %add14, %add.i35.lcssa
  %call17 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add16) #11
  %inc = add nuw nsw i32 %nl.088, 1
  %exitcond.not = icmp eq i32 %inc, 200000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body.i.preheader, !llvm.loop !265
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s312(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s312, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.022 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %mul.7.lcssa.lcssa = phi float [ %mul.7.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call10 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %mul.7.lcssa.lcssa

for.cond.cleanup4:                                ; preds = %for.body5
  %mul.7.lcssa = phi float [ %mul, %for.body5 ]
  %call6 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %mul.7.lcssa) #11
  %inc8 = add nuw nsw i32 %nl.022, 1
  %exitcond.not = icmp eq i32 %inc8, 1000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !266

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %prod.120 = phi float [ 1.000000e+00, %for.cond2.preheader ], [ %mul, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %mul = fmul float %prod.120, %0
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !267
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s313(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s313, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.025 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %add.7.lcssa.lcssa = phi float [ %add.7.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call12 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %add.7.lcssa.lcssa

for.cond.cleanup4:                                ; preds = %for.body5
  %add.7.lcssa = phi float [ %add, %for.body5 ]
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add.7.lcssa) #11
  %inc10 = add nuw nsw i32 %nl.025, 1
  %exitcond.not = icmp eq i32 %inc10, 500000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !268

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %dot.123 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %add = fadd float %dot.123, %mul
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !269
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s314(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s314, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %x.2.7.lcssa.lcssa = phi float [ %x.2.7.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call13 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %x.2.7.lcssa.lcssa

for.body:                                         ; preds = %for.cond.cleanup4, %entry
  %nl.026 = phi i32 [ 0, %entry ], [ %inc11, %for.cond.cleanup4 ]
  %0 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup4:                                ; preds = %for.body5
  %x.2.7.lcssa = phi float [ %x.2.7, %for.body5 ]
  %call9 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %x.2.7.lcssa) #11
  %inc11 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc11, 500000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !270

for.body5:                                        ; preds = %for.body5.for.body5_crit_edge, %for.body
  %1 = phi float [ %0, %for.body ], [ %.pre, %for.body5.for.body5_crit_edge ]
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next.7, %for.body5.for.body5_crit_edge ]
  %x.124 = phi float [ %0, %for.body ], [ %x.2.7, %for.body5.for.body5_crit_edge ]
  %cmp6 = fcmp ogt float %1, %x.124
  %x.2 = select i1 %cmp6, float %1, float %x.124
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ogt float %2, %x.2
  %x.2.1 = select i1 %cmp6.1, float %2, float %x.2
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %3 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ogt float %3, %x.2.1
  %x.2.2 = select i1 %cmp6.2, float %3, float %x.2.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %4 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ogt float %4, %x.2.2
  %x.2.3 = select i1 %cmp6.3, float %4, float %x.2.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %5 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ogt float %5, %x.2.3
  %x.2.4 = select i1 %cmp6.4, float %5, float %x.2.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %6 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ogt float %6, %x.2.4
  %x.2.5 = select i1 %cmp6.5, float %6, float %x.2.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %7 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ogt float %7, %x.2.5
  %x.2.6 = select i1 %cmp6.6, float %7, float %x.2.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %8 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ogt float %8, %x.2.6
  %x.2.7 = select i1 %cmp6.7, float %8, float %x.2.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5.for.body5_crit_edge, !llvm.loop !271

for.body5.for.body5_crit_edge:                    ; preds = %for.body5
  %arrayidx.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  %.pre = load float, float* %arrayidx.phi.trans.insert, align 32, !tbaa !4
  br label %for.body5
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s315(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s315, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv54 = phi i64 [ 0, %entry ], [ %indvars.iv.next55, %for.body ]
  %0 = trunc i64 %indvars.iv54 to i32
  %1 = mul i32 %0, 7
  %rem = urem i32 %1, 32000
  %conv = sitofp i32 %rem to float
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv54
  store float %conv, float* %arrayidx, align 4, !tbaa !4
  %indvars.iv.next55 = add nuw nsw i64 %indvars.iv54, 1
  %exitcond57.not = icmp eq i64 %indvars.iv.next55, 32000
  br i1 %exitcond57.not, label %for.body6.preheader, label %for.body, !llvm.loop !272

for.body6.preheader:                              ; preds = %for.body
  br label %for.body6

for.cond.cleanup5:                                ; preds = %for.cond.cleanup11
  %add.lcssa = phi float [ %add, %for.cond.cleanup11 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call27 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %add30 = fadd float %add.lcssa, 1.000000e+00
  ret float %add30

for.body6:                                        ; preds = %for.body6.preheader, %for.cond.cleanup11
  %nl.052 = phi i32 [ %inc25, %for.cond.cleanup11 ], [ 0, %for.body6.preheader ]
  %2 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body12

for.cond.cleanup11:                               ; preds = %for.body12
  %x.2.7.lcssa = phi float [ %x.2.7, %for.body12 ]
  %index.2.7.lcssa = phi i32 [ %index.2.7, %for.body12 ]
  %conv22 = sitofp i32 %index.2.7.lcssa to float
  %add = fadd float %x.2.7.lcssa, %conv22
  %call23 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add) #11
  %inc25 = add nuw nsw i32 %nl.052, 1
  %exitcond.not = icmp eq i32 %inc25, 100000
  br i1 %exitcond.not, label %for.cond.cleanup5, label %for.body6, !llvm.loop !273

for.body12:                                       ; preds = %for.body12.for.body12_crit_edge, %for.body6
  %3 = phi float [ %2, %for.body6 ], [ %.pre, %for.body12.for.body12_crit_edge ]
  %indvars.iv = phi i64 [ 0, %for.body6 ], [ %indvars.iv.next.7, %for.body12.for.body12_crit_edge ]
  %index.150 = phi i32 [ 0, %for.body6 ], [ %index.2.7, %for.body12.for.body12_crit_edge ]
  %x.149 = phi float [ %2, %for.body6 ], [ %x.2.7, %for.body12.for.body12_crit_edge ]
  %cmp15 = fcmp ogt float %3, %x.149
  %x.2 = select i1 %cmp15, float %3, float %x.149
  %4 = trunc i64 %indvars.iv to i32
  %index.2 = select i1 %cmp15, i32 %4, i32 %index.150
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %cmp15.1 = fcmp ogt float %5, %x.2
  %x.2.1 = select i1 %cmp15.1, float %5, float %x.2
  %6 = trunc i64 %indvars.iv.next to i32
  %index.2.1 = select i1 %cmp15.1, i32 %6, i32 %index.2
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx14.2, align 8, !tbaa !4
  %cmp15.2 = fcmp ogt float %7, %x.2.1
  %x.2.2 = select i1 %cmp15.2, float %7, float %x.2.1
  %8 = trunc i64 %indvars.iv.next.1 to i32
  %index.2.2 = select i1 %cmp15.2, i32 %8, i32 %index.2.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %9 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %cmp15.3 = fcmp ogt float %9, %x.2.2
  %x.2.3 = select i1 %cmp15.3, float %9, float %x.2.2
  %10 = trunc i64 %indvars.iv.next.2 to i32
  %index.2.3 = select i1 %cmp15.3, i32 %10, i32 %index.2.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %11 = load float, float* %arrayidx14.4, align 16, !tbaa !4
  %cmp15.4 = fcmp ogt float %11, %x.2.3
  %x.2.4 = select i1 %cmp15.4, float %11, float %x.2.3
  %12 = trunc i64 %indvars.iv.next.3 to i32
  %index.2.4 = select i1 %cmp15.4, i32 %12, i32 %index.2.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %13 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %cmp15.5 = fcmp ogt float %13, %x.2.4
  %x.2.5 = select i1 %cmp15.5, float %13, float %x.2.4
  %14 = trunc i64 %indvars.iv.next.4 to i32
  %index.2.5 = select i1 %cmp15.5, i32 %14, i32 %index.2.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %15 = load float, float* %arrayidx14.6, align 8, !tbaa !4
  %cmp15.6 = fcmp ogt float %15, %x.2.5
  %x.2.6 = select i1 %cmp15.6, float %15, float %x.2.5
  %16 = trunc i64 %indvars.iv.next.5 to i32
  %index.2.6 = select i1 %cmp15.6, i32 %16, i32 %index.2.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %17 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %cmp15.7 = fcmp ogt float %17, %x.2.6
  %x.2.7 = select i1 %cmp15.7, float %17, float %x.2.6
  %18 = trunc i64 %indvars.iv.next.6 to i32
  %index.2.7 = select i1 %cmp15.7, i32 %18, i32 %index.2.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup11, label %for.body12.for.body12_crit_edge, !llvm.loop !274

for.body12.for.body12_crit_edge:                  ; preds = %for.body12
  %arrayidx14.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  %.pre = load float, float* %arrayidx14.phi.trans.insert, align 32, !tbaa !4
  br label %for.body12
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s316(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s316, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %x.2.6.lcssa.lcssa = phi float [ %x.2.6.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call13 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %x.2.6.lcssa.lcssa

for.body:                                         ; preds = %for.cond.cleanup4, %entry
  %nl.026 = phi i32 [ 0, %entry ], [ %inc11, %for.cond.cleanup4 ]
  %0 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup4:                                ; preds = %for.body5
  %x.2.6.lcssa = phi float [ %x.2.6, %for.body5 ]
  %call9 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %x.2.6.lcssa) #11
  %inc11 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc11, 500000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !275

for.body5:                                        ; preds = %for.body5.7, %for.body
  %indvars.iv = phi i64 [ 1, %for.body ], [ %indvars.iv.next.7, %for.body5.7 ]
  %x.124 = phi float [ %0, %for.body ], [ %x.2.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %cmp6 = fcmp olt float %1, %x.124
  %x.2 = select i1 %cmp6, float %1, float %x.124
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp olt float %2, %x.2
  %x.2.1 = select i1 %cmp6.1, float %2, float %x.2
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %3 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %cmp6.2 = fcmp olt float %3, %x.2.1
  %x.2.2 = select i1 %cmp6.2, float %3, float %x.2.1
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %4 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp olt float %4, %x.2.2
  %x.2.3 = select i1 %cmp6.3, float %4, float %x.2.2
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %5 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %cmp6.4 = fcmp olt float %5, %x.2.3
  %x.2.4 = select i1 %cmp6.4, float %5, float %x.2.3
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %6 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp olt float %6, %x.2.4
  %x.2.5 = select i1 %cmp6.5, float %6, float %x.2.4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %7 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %cmp6.6 = fcmp olt float %7, %x.2.5
  %x.2.6 = select i1 %cmp6.6, float %7, float %x.2.5
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 32000
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !276

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %8 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp olt float %8, %x.2.6
  %x.2.7 = select i1 %cmp6.7, float %8, float %x.2.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !277
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s317(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s317, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.021 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %mul.7.lcssa.lcssa = phi float [ %mul.7.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call10 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %mul.7.lcssa.lcssa

for.cond.cleanup4:                                ; preds = %for.body5
  %mul.7.lcssa = phi float [ %mul.7, %for.body5 ]
  %call6 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %mul.7.lcssa) #11
  %inc8 = add nuw nsw i32 %nl.021, 1
  %exitcond.not = icmp eq i32 %inc8, 500000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !278

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %i.020 = phi i32 [ 0, %for.cond2.preheader ], [ %inc.7, %for.body5 ]
  %q.119 = phi float [ 1.000000e+00, %for.cond2.preheader ], [ %mul.7, %for.body5 ]
  %mul = fmul float %q.119, 0x3FEFAE1480000000
  %mul.1 = fmul float %mul, 0x3FEFAE1480000000
  %mul.2 = fmul float %mul.1, 0x3FEFAE1480000000
  %mul.3 = fmul float %mul.2, 0x3FEFAE1480000000
  %mul.4 = fmul float %mul.3, 0x3FEFAE1480000000
  %mul.5 = fmul float %mul.4, 0x3FEFAE1480000000
  %mul.6 = fmul float %mul.5, 0x3FEFAE1480000000
  %mul.7 = fmul float %mul.6, 0x3FEFAE1480000000
  %inc.7 = add nuw nsw i32 %i.020, 8
  %exitcond.7.not = icmp eq i32 %inc.7, 16000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !279
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s318(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %2 = load i32, i32* %1, align 4, !tbaa !97
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s318, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %3 = sext i32 %2 to i64
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %add11.lcssa = phi float [ %add11, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call16 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %add19 = fadd float %add11.lcssa, 1.000000e+00
  ret float %add19

for.body:                                         ; preds = %for.cond.cleanup4, %entry
  %nl.043 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
  %4 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %5 = tail call float @llvm.fabs.f32(float %4)
  br label %for.body5

for.cond.cleanup4:                                ; preds = %for.body5
  %index.2.6.lcssa = phi i32 [ %index.2.6, %for.body5 ]
  %max.2.6.lcssa = phi float [ %max.2.6, %for.body5 ]
  %conv = sitofp i32 %index.2.6.lcssa to float
  %add11 = fadd float %max.2.6.lcssa, %conv
  %call12 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add11) #11
  %inc14 = add nuw nsw i32 %nl.043, 1
  %exitcond.not = icmp eq i32 %inc14, 50000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !280

for.body5:                                        ; preds = %for.body5.7, %for.body
  %indvars.iv = phi i64 [ %3, %for.body ], [ %indvars.iv.next.7, %for.body5.7 ]
  %i.042 = phi i32 [ 1, %for.body ], [ %inc10.7, %for.body5.7 ]
  %max.140 = phi float [ %5, %for.body ], [ %max.2.7, %for.body5.7 ]
  %index.139 = phi i32 [ 0, %for.body ], [ %index.2.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %6 = load float, float* %arrayidx, align 4, !tbaa !4
  %7 = tail call float @llvm.fabs.f32(float %6)
  %cmp6 = fcmp ugt float %7, %max.140
  %index.2 = select i1 %cmp6, i32 %i.042, i32 %index.139
  %max.2 = select i1 %cmp6, float %7, float %max.140
  %indvars.iv.next = add i64 %indvars.iv, %3
  %inc10 = add nuw nsw i32 %i.042, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %9 = tail call float @llvm.fabs.f32(float %8)
  %cmp6.1 = fcmp ugt float %9, %max.2
  %index.2.1 = select i1 %cmp6.1, i32 %inc10, i32 %index.2
  %max.2.1 = select i1 %cmp6.1, float %9, float %max.2
  %indvars.iv.next.1 = add i64 %indvars.iv.next, %3
  %inc10.1 = add nuw nsw i32 %i.042, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %11 = tail call float @llvm.fabs.f32(float %10)
  %cmp6.2 = fcmp ugt float %11, %max.2.1
  %index.2.2 = select i1 %cmp6.2, i32 %inc10.1, i32 %index.2.1
  %max.2.2 = select i1 %cmp6.2, float %11, float %max.2.1
  %indvars.iv.next.2 = add i64 %indvars.iv.next.1, %3
  %inc10.2 = add nuw nsw i32 %i.042, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %13 = tail call float @llvm.fabs.f32(float %12)
  %cmp6.3 = fcmp ugt float %13, %max.2.2
  %index.2.3 = select i1 %cmp6.3, i32 %inc10.2, i32 %index.2.2
  %max.2.3 = select i1 %cmp6.3, float %13, float %max.2.2
  %indvars.iv.next.3 = add i64 %indvars.iv.next.2, %3
  %inc10.3 = add nuw nsw i32 %i.042, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %15 = tail call float @llvm.fabs.f32(float %14)
  %cmp6.4 = fcmp ugt float %15, %max.2.3
  %index.2.4 = select i1 %cmp6.4, i32 %inc10.3, i32 %index.2.3
  %max.2.4 = select i1 %cmp6.4, float %15, float %max.2.3
  %indvars.iv.next.4 = add i64 %indvars.iv.next.3, %3
  %inc10.4 = add nuw nsw i32 %i.042, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %17 = tail call float @llvm.fabs.f32(float %16)
  %cmp6.5 = fcmp ugt float %17, %max.2.4
  %index.2.5 = select i1 %cmp6.5, i32 %inc10.4, i32 %index.2.4
  %max.2.5 = select i1 %cmp6.5, float %17, float %max.2.4
  %indvars.iv.next.5 = add i64 %indvars.iv.next.4, %3
  %inc10.5 = add nuw nsw i32 %i.042, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %18 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %19 = tail call float @llvm.fabs.f32(float %18)
  %cmp6.6 = fcmp ugt float %19, %max.2.5
  %index.2.6 = select i1 %cmp6.6, i32 %inc10.5, i32 %index.2.5
  %max.2.6 = select i1 %cmp6.6, float %19, float %max.2.5
  %indvars.iv.next.6 = add i64 %indvars.iv.next.5, %3
  %inc10.6 = add nuw nsw i32 %i.042, 7
  %exitcond.6.not = icmp eq i32 %inc10.6, 32000
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !281

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %20 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %21 = tail call float @llvm.fabs.f32(float %20)
  %cmp6.7 = fcmp ugt float %21, %max.2.6
  %index.2.7 = select i1 %cmp6.7, i32 %inc10.6, i32 %index.2.6
  %max.2.7 = select i1 %cmp6.7, float %21, float %max.2.6
  %indvars.iv.next.7 = add i64 %indvars.iv.next.6, %3
  %inc10.7 = add nuw nsw i32 %i.042, 8
  br label %for.body5, !llvm.loop !282
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #6

; Function Attrs: nounwind optsize uwtable
define dso_local float @s319(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s319, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.047 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %add22.7.lcssa.lcssa = phi float [ %add22.7.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call27 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %add22.7.lcssa.lcssa

for.cond.cleanup4:                                ; preds = %for.body5
  %add22.7.lcssa = phi float [ %add22, %for.body5 ]
  %call23 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add22.7.lcssa) #11
  %inc25 = add nuw nsw i32 %nl.047, 1
  %exitcond.not = icmp eq i32 %inc25, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !283

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %sum.145 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add22, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add = fadd float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  store float %add, float* %arrayidx9, align 32, !tbaa !4
  %add12 = fadd float %sum.145, %add
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx16, align 32, !tbaa !4
  %add17 = fadd float %0, %2
  %arrayidx19 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  store float %add17, float* %arrayidx19, align 32, !tbaa !4
  %add22 = fadd float %add12, %add17
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !284
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s3110(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s3110, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %add.lcssa = phi float [ %add, %for.cond.cleanup4 ]
  %conv20.lcssa = phi float [ %conv20, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call26 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %add29 = fadd float %add.lcssa, 1.000000e+00
  %add31 = fadd float %add29, %conv20.lcssa
  %add32 = fadd float %add31, 1.000000e+00
  ret float %add32

for.body:                                         ; preds = %for.cond.cleanup4, %entry
  %nl.062 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup4 ]
  %0 = load float, float* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 0), align 64, !tbaa !4
  br label %for.cond6.preheader

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.body
  %indvars.iv63 = phi i64 [ 0, %for.body ], [ %indvars.iv.next64, %for.cond.cleanup8 ]
  %xindex.160 = phi i32 [ 0, %for.body ], [ %xindex.3.7.lcssa, %for.cond.cleanup8 ]
  %max.159 = phi float [ %0, %for.body ], [ %max.3.7.lcssa, %for.cond.cleanup8 ]
  %yindex.158 = phi i32 [ 0, %for.body ], [ %yindex.3.7.lcssa, %for.cond.cleanup8 ]
  %1 = trunc i64 %indvars.iv63 to i32
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %yindex.3.7.lcssa.lcssa = phi i32 [ %yindex.3.7.lcssa, %for.cond.cleanup8 ]
  %max.3.7.lcssa.lcssa = phi float [ %max.3.7.lcssa, %for.cond.cleanup8 ]
  %xindex.3.7.lcssa.lcssa = phi i32 [ %xindex.3.7.lcssa, %for.cond.cleanup8 ]
  %conv = sitofp i32 %xindex.3.7.lcssa.lcssa to float
  %add = fadd float %max.3.7.lcssa.lcssa, %conv
  %conv20 = sitofp i32 %yindex.3.7.lcssa.lcssa to float
  %add21 = fadd float %add, %conv20
  %call22 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add21) #11
  %inc24 = add nuw nsw i32 %nl.062, 1
  %exitcond65.not = icmp eq i32 %inc24, 39000
  br i1 %exitcond65.not, label %for.cond.cleanup, label %for.body, !llvm.loop !285

for.cond.cleanup8:                                ; preds = %for.body9
  %yindex.3.7.lcssa = phi i32 [ %yindex.3.7, %for.body9 ]
  %max.3.7.lcssa = phi float [ %max.3.7, %for.body9 ]
  %xindex.3.7.lcssa = phi i32 [ %xindex.3.7, %for.body9 ]
  %indvars.iv.next64 = add nuw nsw i64 %indvars.iv63, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next64, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !286

for.body9:                                        ; preds = %for.body9, %for.cond6.preheader
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %xindex.256 = phi i32 [ %xindex.160, %for.cond6.preheader ], [ %xindex.3.7, %for.body9 ]
  %max.255 = phi float [ %max.159, %for.cond6.preheader ], [ %max.3.7, %for.body9 ]
  %yindex.254 = phi i32 [ %yindex.158, %for.cond6.preheader ], [ %yindex.3.7, %for.body9 ]
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv
  %2 = load float, float* %arrayidx11, align 32, !tbaa !4
  %cmp12 = fcmp ogt float %2, %max.255
  %3 = trunc i64 %indvars.iv to i32
  %yindex.3 = select i1 %cmp12, i32 %3, i32 %yindex.254
  %max.3 = select i1 %cmp12, float %2, float %max.255
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %cmp12.1 = fcmp ogt float %4, %max.3
  %5 = trunc i64 %indvars.iv.next to i32
  %yindex.3.1 = select i1 %cmp12.1, i32 %5, i32 %yindex.3
  %max.3.1 = select i1 %cmp12.1, float %4, float %max.3
  %6 = or i1 %cmp12.1, %cmp12
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx11.2, align 8, !tbaa !4
  %cmp12.2 = fcmp ogt float %7, %max.3.1
  %8 = trunc i64 %indvars.iv.next.1 to i32
  %yindex.3.2 = select i1 %cmp12.2, i32 %8, i32 %yindex.3.1
  %max.3.2 = select i1 %cmp12.2, float %7, float %max.3.1
  %9 = or i1 %cmp12.2, %6
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %cmp12.3 = fcmp ogt float %10, %max.3.2
  %11 = trunc i64 %indvars.iv.next.2 to i32
  %yindex.3.3 = select i1 %cmp12.3, i32 %11, i32 %yindex.3.2
  %max.3.3 = select i1 %cmp12.3, float %10, float %max.3.2
  %12 = or i1 %cmp12.3, %9
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx11.4, align 16, !tbaa !4
  %cmp12.4 = fcmp ogt float %13, %max.3.3
  %14 = trunc i64 %indvars.iv.next.3 to i32
  %yindex.3.4 = select i1 %cmp12.4, i32 %14, i32 %yindex.3.3
  %max.3.4 = select i1 %cmp12.4, float %13, float %max.3.3
  %15 = or i1 %cmp12.4, %12
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %cmp12.5 = fcmp ogt float %16, %max.3.4
  %17 = trunc i64 %indvars.iv.next.4 to i32
  %yindex.3.5 = select i1 %cmp12.5, i32 %17, i32 %yindex.3.4
  %max.3.5 = select i1 %cmp12.5, float %16, float %max.3.4
  %18 = or i1 %cmp12.5, %15
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx11.6, align 8, !tbaa !4
  %cmp12.6 = fcmp ogt float %19, %max.3.5
  %20 = trunc i64 %indvars.iv.next.5 to i32
  %yindex.3.6 = select i1 %cmp12.6, i32 %20, i32 %yindex.3.5
  %max.3.6 = select i1 %cmp12.6, float %19, float %max.3.5
  %21 = or i1 %cmp12.6, %18
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx11.7, align 4, !tbaa !4
  %cmp12.7 = fcmp ogt float %22, %max.3.6
  %23 = trunc i64 %indvars.iv.next.6 to i32
  %yindex.3.7 = select i1 %cmp12.7, i32 %23, i32 %yindex.3.6
  %max.3.7 = select i1 %cmp12.7, float %22, float %max.3.6
  %24 = or i1 %cmp12.7, %21
  %xindex.3.7 = select i1 %24, i32 %1, i32 %xindex.256
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 256
  br i1 %exitcond.7.not, label %for.cond.cleanup8, label %for.body9, !llvm.loop !287
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s13110(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__func__.s13110, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %add.lcssa = phi float [ %add, %for.cond.cleanup4 ]
  %conv20.lcssa = phi float [ %conv20, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call26 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %add29 = fadd float %add.lcssa, 1.000000e+00
  %add31 = fadd float %add29, %conv20.lcssa
  %add32 = fadd float %add31, 1.000000e+00
  ret float %add32

for.body:                                         ; preds = %for.cond.cleanup4, %entry
  %nl.062 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup4 ]
  %0 = load float, float* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 0), align 64, !tbaa !4
  br label %for.cond6.preheader

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.body
  %indvars.iv63 = phi i64 [ 0, %for.body ], [ %indvars.iv.next64, %for.cond.cleanup8 ]
  %xindex.160 = phi i32 [ 0, %for.body ], [ %xindex.3.7.lcssa, %for.cond.cleanup8 ]
  %max.159 = phi float [ %0, %for.body ], [ %max.3.7.lcssa, %for.cond.cleanup8 ]
  %yindex.158 = phi i32 [ 0, %for.body ], [ %yindex.3.7.lcssa, %for.cond.cleanup8 ]
  %1 = trunc i64 %indvars.iv63 to i32
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %yindex.3.7.lcssa.lcssa = phi i32 [ %yindex.3.7.lcssa, %for.cond.cleanup8 ]
  %max.3.7.lcssa.lcssa = phi float [ %max.3.7.lcssa, %for.cond.cleanup8 ]
  %xindex.3.7.lcssa.lcssa = phi i32 [ %xindex.3.7.lcssa, %for.cond.cleanup8 ]
  %conv = sitofp i32 %xindex.3.7.lcssa.lcssa to float
  %add = fadd float %max.3.7.lcssa.lcssa, %conv
  %conv20 = sitofp i32 %yindex.3.7.lcssa.lcssa to float
  %add21 = fadd float %add, %conv20
  %call22 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add21) #11
  %inc24 = add nuw nsw i32 %nl.062, 1
  %exitcond65.not = icmp eq i32 %inc24, 39000
  br i1 %exitcond65.not, label %for.cond.cleanup, label %for.body, !llvm.loop !288

for.cond.cleanup8:                                ; preds = %for.body9
  %yindex.3.7.lcssa = phi i32 [ %yindex.3.7, %for.body9 ]
  %max.3.7.lcssa = phi float [ %max.3.7, %for.body9 ]
  %xindex.3.7.lcssa = phi i32 [ %xindex.3.7, %for.body9 ]
  %indvars.iv.next64 = add nuw nsw i64 %indvars.iv63, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next64, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !289

for.body9:                                        ; preds = %for.body9, %for.cond6.preheader
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.body9 ]
  %xindex.256 = phi i32 [ %xindex.160, %for.cond6.preheader ], [ %xindex.3.7, %for.body9 ]
  %max.255 = phi float [ %max.159, %for.cond6.preheader ], [ %max.3.7, %for.body9 ]
  %yindex.254 = phi i32 [ %yindex.158, %for.cond6.preheader ], [ %yindex.3.7, %for.body9 ]
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv
  %2 = load float, float* %arrayidx11, align 32, !tbaa !4
  %cmp12 = fcmp ogt float %2, %max.255
  %3 = trunc i64 %indvars.iv to i32
  %yindex.3 = select i1 %cmp12, i32 %3, i32 %yindex.254
  %max.3 = select i1 %cmp12, float %2, float %max.255
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %cmp12.1 = fcmp ogt float %4, %max.3
  %5 = trunc i64 %indvars.iv.next to i32
  %yindex.3.1 = select i1 %cmp12.1, i32 %5, i32 %yindex.3
  %max.3.1 = select i1 %cmp12.1, float %4, float %max.3
  %6 = or i1 %cmp12.1, %cmp12
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx11.2, align 8, !tbaa !4
  %cmp12.2 = fcmp ogt float %7, %max.3.1
  %8 = trunc i64 %indvars.iv.next.1 to i32
  %yindex.3.2 = select i1 %cmp12.2, i32 %8, i32 %yindex.3.1
  %max.3.2 = select i1 %cmp12.2, float %7, float %max.3.1
  %9 = or i1 %cmp12.2, %6
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %cmp12.3 = fcmp ogt float %10, %max.3.2
  %11 = trunc i64 %indvars.iv.next.2 to i32
  %yindex.3.3 = select i1 %cmp12.3, i32 %11, i32 %yindex.3.2
  %max.3.3 = select i1 %cmp12.3, float %10, float %max.3.2
  %12 = or i1 %cmp12.3, %9
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx11.4, align 16, !tbaa !4
  %cmp12.4 = fcmp ogt float %13, %max.3.3
  %14 = trunc i64 %indvars.iv.next.3 to i32
  %yindex.3.4 = select i1 %cmp12.4, i32 %14, i32 %yindex.3.3
  %max.3.4 = select i1 %cmp12.4, float %13, float %max.3.3
  %15 = or i1 %cmp12.4, %12
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %cmp12.5 = fcmp ogt float %16, %max.3.4
  %17 = trunc i64 %indvars.iv.next.4 to i32
  %yindex.3.5 = select i1 %cmp12.5, i32 %17, i32 %yindex.3.4
  %max.3.5 = select i1 %cmp12.5, float %16, float %max.3.4
  %18 = or i1 %cmp12.5, %15
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx11.6, align 8, !tbaa !4
  %cmp12.6 = fcmp ogt float %19, %max.3.5
  %20 = trunc i64 %indvars.iv.next.5 to i32
  %yindex.3.6 = select i1 %cmp12.6, i32 %20, i32 %yindex.3.5
  %max.3.6 = select i1 %cmp12.6, float %19, float %max.3.5
  %21 = or i1 %cmp12.6, %18
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv63, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx11.7, align 4, !tbaa !4
  %cmp12.7 = fcmp ogt float %22, %max.3.6
  %23 = trunc i64 %indvars.iv.next.6 to i32
  %yindex.3.7 = select i1 %cmp12.7, i32 %23, i32 %yindex.3.6
  %max.3.7 = select i1 %cmp12.7, float %22, float %max.3.6
  %24 = or i1 %cmp12.7, %21
  %xindex.3.7 = select i1 %24, i32 %1, i32 %xindex.256
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 256
  br i1 %exitcond.7.not, label %for.cond.cleanup8, label %for.body9, !llvm.loop !290
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s3111(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s3111, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.026 = phi i32 [ 0, %entry ], [ %inc11, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %sum.2.7.lcssa.lcssa = phi float [ %sum.2.7.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call13 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %sum.2.7.lcssa.lcssa

for.cond.cleanup4:                                ; preds = %for.body5
  %sum.2.7.lcssa = phi float [ %sum.2.7, %for.body5 ]
  %call9 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %sum.2.7.lcssa) #11
  %inc11 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc11, 50000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !291

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %sum.124 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %sum.2.7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp ogt float %0, 0.000000e+00
  %add = fadd float %sum.124, %0
  %sum.2 = select i1 %cmp6, float %add, float %sum.124
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ogt float %1, 0.000000e+00
  %add.1 = fadd float %sum.2, %1
  %sum.2.1 = select i1 %cmp6.1, float %add.1, float %sum.2
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ogt float %2, 0.000000e+00
  %add.2 = fadd float %sum.2.1, %2
  %sum.2.2 = select i1 %cmp6.2, float %add.2, float %sum.2.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ogt float %3, 0.000000e+00
  %add.3 = fadd float %sum.2.2, %3
  %sum.2.3 = select i1 %cmp6.3, float %add.3, float %sum.2.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ogt float %4, 0.000000e+00
  %add.4 = fadd float %sum.2.3, %4
  %sum.2.4 = select i1 %cmp6.4, float %add.4, float %sum.2.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ogt float %5, 0.000000e+00
  %add.5 = fadd float %sum.2.4, %5
  %sum.2.5 = select i1 %cmp6.5, float %add.5, float %sum.2.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ogt float %6, 0.000000e+00
  %add.6 = fadd float %sum.2.5, %6
  %sum.2.6 = select i1 %cmp6.6, float %add.6, float %sum.2.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ogt float %7, 0.000000e+00
  %add.7 = fadd float %sum.2.6, %7
  %sum.2.7 = select i1 %cmp6.7, float %add.7, float %sum.2.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !292
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s3112(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s3112, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.026 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %add.7.lcssa.lcssa = phi float [ %add.7.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call12 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %add.7.lcssa.lcssa

for.cond.cleanup4:                                ; preds = %for.body5
  %add.7.lcssa = phi float [ %add.7, %for.body5 ]
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add.7.lcssa) #11
  %inc10 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc10, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !293

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %sum.124 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %add = fadd float %sum.124, %0
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %add.1 = fadd float %add, %1
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx7.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %add.2 = fadd float %add.1, %2
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx7.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %add.3 = fadd float %add.2, %3
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx7.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %add.4 = fadd float %add.3, %4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx7.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %add.5 = fadd float %add.4, %5
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx7.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %add.6 = fadd float %add.5, %6
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx7.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %add.7 = fadd float %add.6, %7
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx7.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !294
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s3113(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s3113, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %max.2.7.lcssa.lcssa = phi float [ %max.2.7.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call13 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %max.2.7.lcssa.lcssa

for.body:                                         ; preds = %for.cond.cleanup4, %entry
  %nl.026 = phi i32 [ 0, %entry ], [ %inc11, %for.cond.cleanup4 ]
  %0 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  %1 = tail call float @llvm.fabs.f32(float %0)
  br label %for.body5

for.cond.cleanup4:                                ; preds = %for.body5
  %max.2.7.lcssa = phi float [ %max.2.7, %for.body5 ]
  %call9 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %max.2.7.lcssa) #11
  %inc11 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc11, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !295

for.body5:                                        ; preds = %for.body5.for.body5_crit_edge, %for.body
  %2 = phi float [ %0, %for.body ], [ %.pre, %for.body5.for.body5_crit_edge ]
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next.7, %for.body5.for.body5_crit_edge ]
  %max.124 = phi float [ %1, %for.body ], [ %max.2.7, %for.body5.for.body5_crit_edge ]
  %3 = tail call float @llvm.fabs.f32(float %2)
  %cmp6 = fcmp ogt float %3, %max.124
  %max.2 = select i1 %cmp6, float %3, float %max.124
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %5 = tail call float @llvm.fabs.f32(float %4)
  %cmp6.1 = fcmp ogt float %5, %max.2
  %max.2.1 = select i1 %cmp6.1, float %5, float %max.2
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %7 = tail call float @llvm.fabs.f32(float %6)
  %cmp6.2 = fcmp ogt float %7, %max.2.1
  %max.2.2 = select i1 %cmp6.2, float %7, float %max.2.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %8 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %9 = tail call float @llvm.fabs.f32(float %8)
  %cmp6.3 = fcmp ogt float %9, %max.2.2
  %max.2.3 = select i1 %cmp6.3, float %9, float %max.2.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %10 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %11 = tail call float @llvm.fabs.f32(float %10)
  %cmp6.4 = fcmp ogt float %11, %max.2.3
  %max.2.4 = select i1 %cmp6.4, float %11, float %max.2.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %12 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %13 = tail call float @llvm.fabs.f32(float %12)
  %cmp6.5 = fcmp ogt float %13, %max.2.4
  %max.2.5 = select i1 %cmp6.5, float %13, float %max.2.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %14 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %15 = tail call float @llvm.fabs.f32(float %14)
  %cmp6.6 = fcmp ogt float %15, %max.2.5
  %max.2.6 = select i1 %cmp6.6, float %15, float %max.2.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %16 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %17 = tail call float @llvm.fabs.f32(float %16)
  %cmp6.7 = fcmp ogt float %17, %max.2.6
  %max.2.7 = select i1 %cmp6.7, float %17, float %max.2.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5.for.body5_crit_edge, !llvm.loop !296

for.body5.for.body5_crit_edge:                    ; preds = %for.body5
  %arrayidx.phi.trans.insert = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.7
  %.pre = load float, float* %arrayidx.phi.trans.insert, align 32, !tbaa !4
  br label %for.body5
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s321(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s321, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.025 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s321, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.025, 1
  %exitcond.not = icmp eq i32 %inc12, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !297

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 4, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx9, align 4, !tbaa !4
  %add = fadd float %2, %mul
  store float %add, float* %arrayidx9, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %mul.1 = fmul float %add, %3
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %add.1 = fadd float %4, %mul.1
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %mul.2 = fmul float %add.1, %5
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx9.2, align 4, !tbaa !4
  %add.2 = fadd float %6, %mul.2
  store float %add.2, float* %arrayidx9.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %7 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %mul.3 = fmul float %add.2, %7
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %8 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %add.3 = fadd float %8, %mul.3
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %9 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %mul.4 = fmul float %add.3, %9
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %10 = load float, float* %arrayidx9.4, align 4, !tbaa !4
  %add.4 = fadd float %10, %mul.4
  store float %add.4, float* %arrayidx9.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %11 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %mul.5 = fmul float %add.4, %11
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %12 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %add.5 = fadd float %12, %mul.5
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %13 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %mul.6 = fmul float %add.5, %13
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %14 = load float, float* %arrayidx9.6, align 4, !tbaa !4
  %add.6 = fadd float %14, %mul.6
  store float %add.6, float* %arrayidx9.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 32000
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !298

for.body5.7:                                      ; preds = %for.body5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %15 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %mul.7 = fmul float %add.6, %15
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %16 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %add.7 = fadd float %16, %mul.7
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !299
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s322(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s322, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.037 = phi i32 [ 0, %entry ], [ %inc21, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 1), align 4, !tbaa !4
  %.pre40 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call23 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call24 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s322, i64 0, i64 0)) #11
  ret float %call24

for.cond.cleanup4:                                ; preds = %for.body5
  %call19 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc21 = add nuw nsw i32 %nl.037, 1
  %exitcond.not = icmp eq i32 %inc21, 50000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !300

for.body5:                                        ; preds = %for.body5.6, %for.cond2.preheader
  %0 = phi float [ %.pre40, %for.cond2.preheader ], [ %add16.6, %for.body5.6 ]
  %1 = phi float [ %.pre, %for.cond2.preheader ], [ %add16.7, %for.body5.6 ]
  %indvars.iv = phi i64 [ 2, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.6 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx, align 8, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx9, align 8, !tbaa !4
  %mul = fmul float %1, %3
  %add = fadd float %2, %mul
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx14, align 8, !tbaa !4
  %mul15 = fmul float %0, %4
  %add16 = fadd float %add, %mul15
  store float %add16, float* %arrayidx, align 8, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %mul.1 = fmul float %add16, %6
  %add.1 = fadd float %5, %mul.1
  %7 = add nsw i64 %indvars.iv, -1
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %7
  %8 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %9 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %mul15.1 = fmul float %8, %9
  %add16.1 = fadd float %add.1, %mul15.1
  store float %add16.1, float* %arrayidx.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %mul.2 = fmul float %add16.1, %11
  %add.2 = fadd float %10, %mul.2
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %12 = load float, float* %arrayidx14.2, align 8, !tbaa !4
  %mul15.2 = fmul float %add16, %12
  %add16.2 = fadd float %add.2, %mul15.2
  store float %add16.2, float* %arrayidx.2, align 8, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %mul.3 = fmul float %add16.2, %14
  %add.3 = fadd float %13, %mul.3
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %mul15.3 = fmul float %add16.1, %15
  %add16.3 = fadd float %add.3, %mul15.3
  store float %add16.3, float* %arrayidx.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %16 = load float, float* %arrayidx.4, align 8, !tbaa !4
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx9.4, align 8, !tbaa !4
  %mul.4 = fmul float %add16.3, %17
  %add.4 = fadd float %16, %mul.4
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx14.4, align 8, !tbaa !4
  %mul15.4 = fmul float %add16.2, %18
  %add16.4 = fadd float %add.4, %mul15.4
  store float %add16.4, float* %arrayidx.4, align 8, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %19 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %20 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %mul.5 = fmul float %add16.4, %20
  %add.5 = fadd float %19, %mul.5
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %mul15.5 = fmul float %add16.3, %21
  %add16.5 = fadd float %add.5, %mul15.5
  store float %add16.5, float* %arrayidx.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %exitcond.5.not = icmp eq i64 %indvars.iv.next.5, 32000
  br i1 %exitcond.5.not, label %for.cond.cleanup4, label %for.body5.6, !llvm.loop !301

for.body5.6:                                      ; preds = %for.body5
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %22 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %23 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %mul.6 = fmul float %add16.5, %23
  %add.6 = fadd float %22, %mul.6
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %24 = load float, float* %arrayidx14.6, align 8, !tbaa !4
  %mul15.6 = fmul float %add16.4, %24
  %add16.6 = fadd float %add.6, %mul15.6
  store float %add16.6, float* %arrayidx.6, align 8, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %25 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %26 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %mul.7 = fmul float %add16.6, %26
  %add.7 = fadd float %25, %mul.7
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %27 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %mul15.7 = fmul float %add16.5, %27
  %add16.7 = fadd float %add.7, %mul15.7
  store float %add16.7, float* %arrayidx.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !302
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s323(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s323, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.042 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup4 ]
  %.pre = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), align 64, !tbaa !4
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call26 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call27 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s323, i64 0, i64 0)) #11
  ret float %call27

for.cond.cleanup4:                                ; preds = %for.body5
  %call22 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc24 = add nuw nsw i32 %nl.042, 1
  %exitcond.not = icmp eq i32 %inc24, 50000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !303

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %0 = phi float [ %.pre, %for.cond2.preheader ], [ %add19.7, %for.body5.7 ]
  %indvars.iv = phi i64 [ 1, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 4, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx9, align 4, !tbaa !4
  %mul = fmul float %1, %2
  %add = fadd float %0, %mul
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx11, align 4, !tbaa !4
  %arrayidx17 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx17, align 4, !tbaa !4
  %mul18 = fmul float %1, %3
  %add19 = fadd float %add, %mul18
  %arrayidx21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  store float %add19, float* %arrayidx21, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %mul.1 = fmul float %4, %5
  %add.1 = fadd float %add19, %mul.1
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  %arrayidx17.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx17.1, align 4, !tbaa !4
  %mul18.1 = fmul float %4, %6
  %add19.1 = fadd float %add.1, %mul18.1
  %arrayidx21.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  store float %add19.1, float* %arrayidx21.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx9.2, align 4, !tbaa !4
  %mul.2 = fmul float %7, %8
  %add.2 = fadd float %add19.1, %mul.2
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx11.2, align 4, !tbaa !4
  %arrayidx17.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx17.2, align 4, !tbaa !4
  %mul18.2 = fmul float %7, %9
  %add19.2 = fadd float %add.2, %mul18.2
  %arrayidx21.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  store float %add19.2, float* %arrayidx21.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %mul.3 = fmul float %10, %11
  %add.3 = fadd float %add19.2, %mul.3
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  %arrayidx17.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx17.3, align 4, !tbaa !4
  %mul18.3 = fmul float %10, %12
  %add19.3 = fadd float %add.3, %mul18.3
  %arrayidx21.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  store float %add19.3, float* %arrayidx21.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx9.4, align 4, !tbaa !4
  %mul.4 = fmul float %13, %14
  %add.4 = fadd float %add19.3, %mul.4
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx11.4, align 4, !tbaa !4
  %arrayidx17.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %15 = load float, float* %arrayidx17.4, align 4, !tbaa !4
  %mul18.4 = fmul float %13, %15
  %add19.4 = fadd float %add.4, %mul18.4
  %arrayidx21.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  store float %add19.4, float* %arrayidx21.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %mul.5 = fmul float %16, %17
  %add.5 = fadd float %add19.4, %mul.5
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  %arrayidx17.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %18 = load float, float* %arrayidx17.5, align 4, !tbaa !4
  %mul18.5 = fmul float %16, %18
  %add19.5 = fadd float %add.5, %mul18.5
  %arrayidx21.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  store float %add19.5, float* %arrayidx21.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv, 6
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %20 = load float, float* %arrayidx9.6, align 4, !tbaa !4
  %mul.6 = fmul float %19, %20
  %add.6 = fadd float %add19.5, %mul.6
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx11.6, align 4, !tbaa !4
  %arrayidx17.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %21 = load float, float* %arrayidx17.6, align 4, !tbaa !4
  %mul18.6 = fmul float %19, %21
  %add19.6 = fadd float %add.6, %mul18.6
  %arrayidx21.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  store float %add19.6, float* %arrayidx21.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 32000
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !304

for.body5.7:                                      ; preds = %for.body5
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %mul.7 = fmul float %22, %23
  %add.7 = fadd float %add19.6, %mul.7
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
  %arrayidx17.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %24 = load float, float* %arrayidx17.7, align 4, !tbaa !4
  %mul18.7 = fmul float %22, %24
  %add19.7 = fadd float %add.7, %mul18.7
  %arrayidx21.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  store float %add19.7, float* %arrayidx21.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !305
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s331(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s331, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.025 = phi i32 [ 0, %entry ], [ %inc9, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %j.2.7.lcssa.lcssa = phi i32 [ %j.2.7.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call11 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %add = add nsw i32 %j.2.7.lcssa.lcssa, 1
  %conv12 = sitofp i32 %add to float
  ret float %conv12

for.cond.cleanup4:                                ; preds = %for.body5
  %j.2.7.lcssa = phi i32 [ %j.2.7, %for.body5 ]
  %conv = sitofp i32 %j.2.7.lcssa to float
  %call7 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %conv) #11
  %inc9 = add nuw nsw i32 %nl.025, 1
  %exitcond.not = icmp eq i32 %inc9, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !306

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %j.123 = phi i32 [ -1, %for.cond2.preheader ], [ %j.2.7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp olt float %0, 0.000000e+00
  %1 = trunc i64 %indvars.iv to i32
  %j.2 = select i1 %cmp6, i32 %1, i32 %j.123
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp olt float %2, 0.000000e+00
  %3 = trunc i64 %indvars.iv.next to i32
  %j.2.1 = select i1 %cmp6.1, i32 %3, i32 %j.2
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp olt float %4, 0.000000e+00
  %5 = trunc i64 %indvars.iv.next.1 to i32
  %j.2.2 = select i1 %cmp6.2, i32 %5, i32 %j.2.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp olt float %6, 0.000000e+00
  %7 = trunc i64 %indvars.iv.next.2 to i32
  %j.2.3 = select i1 %cmp6.3, i32 %7, i32 %j.2.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp olt float %8, 0.000000e+00
  %9 = trunc i64 %indvars.iv.next.3 to i32
  %j.2.4 = select i1 %cmp6.4, i32 %9, i32 %j.2.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp olt float %10, 0.000000e+00
  %11 = trunc i64 %indvars.iv.next.4 to i32
  %j.2.5 = select i1 %cmp6.5, i32 %11, i32 %j.2.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp olt float %12, 0.000000e+00
  %13 = trunc i64 %indvars.iv.next.5 to i32
  %j.2.6 = select i1 %cmp6.6, i32 %13, i32 %j.2.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp olt float %14, 0.000000e+00
  %15 = trunc i64 %indvars.iv.next.6 to i32
  %j.2.7 = select i1 %cmp6.7, i32 %15, i32 %j.2.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !307
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s332(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %2 = load i32, i32* %1, align 4, !tbaa !97
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s332, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %conv = sitofp i32 %2 to float
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %L20, %entry
  %nl.036 = phi i32 [ 0, %entry ], [ %inc13, %L20 ]
  br label %for.body5

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp ogt float %3, %conv
  br i1 %cmp6, label %L20.split.loop.exit58, label %for.inc

for.inc:                                          ; preds = %for.body5
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ogt float %4, %conv
  br i1 %cmp6.1, label %L20.split.loop.exit55, label %for.inc.1

L20.split.loop.exit37:                            ; preds = %for.inc.6
  %indvars.iv.next.6.lcssa = phi i64 [ %indvars.iv.next.6, %for.inc.6 ]
  %.lcssa77 = phi float [ %18, %for.inc.6 ]
  %5 = trunc i64 %indvars.iv.next.6.lcssa to i32
  br label %L20

L20.split.loop.exit40:                            ; preds = %for.inc.5
  %indvars.iv.next.5.lcssa = phi i64 [ %indvars.iv.next.5, %for.inc.5 ]
  %.lcssa72 = phi float [ %17, %for.inc.5 ]
  %6 = trunc i64 %indvars.iv.next.5.lcssa to i32
  br label %L20

L20.split.loop.exit43:                            ; preds = %for.inc.4
  %indvars.iv.next.4.lcssa = phi i64 [ %indvars.iv.next.4, %for.inc.4 ]
  %.lcssa65 = phi float [ %16, %for.inc.4 ]
  %7 = trunc i64 %indvars.iv.next.4.lcssa to i32
  br label %L20

L20.split.loop.exit46:                            ; preds = %for.inc.3
  %indvars.iv.next.3.lcssa = phi i64 [ %indvars.iv.next.3, %for.inc.3 ]
  %.lcssa56 = phi float [ %15, %for.inc.3 ]
  %8 = trunc i64 %indvars.iv.next.3.lcssa to i32
  br label %L20

L20.split.loop.exit49:                            ; preds = %for.inc.2
  %indvars.iv.next.2.lcssa = phi i64 [ %indvars.iv.next.2, %for.inc.2 ]
  %.lcssa45 = phi float [ %14, %for.inc.2 ]
  %9 = trunc i64 %indvars.iv.next.2.lcssa to i32
  br label %L20

L20.split.loop.exit52:                            ; preds = %for.inc.1
  %indvars.iv.next.1.lcssa = phi i64 [ %indvars.iv.next.1, %for.inc.1 ]
  %.lcssa32 = phi float [ %13, %for.inc.1 ]
  %10 = trunc i64 %indvars.iv.next.1.lcssa to i32
  br label %L20

L20.split.loop.exit55:                            ; preds = %for.inc
  %indvars.iv.next.lcssa = phi i64 [ %indvars.iv.next, %for.inc ]
  %.lcssa17 = phi float [ %4, %for.inc ]
  %11 = trunc i64 %indvars.iv.next.lcssa to i32
  br label %L20

L20.split.loop.exit58:                            ; preds = %for.body5
  %indvars.iv.lcssa = phi i64 [ %indvars.iv, %for.body5 ]
  %.lcssa = phi float [ %3, %for.body5 ]
  %12 = trunc i64 %indvars.iv.lcssa to i32
  br label %L20

L20.loopexit:                                     ; preds = %for.inc.7
  br label %L20

L20:                                              ; preds = %L20.loopexit, %L20.split.loop.exit58, %L20.split.loop.exit55, %L20.split.loop.exit52, %L20.split.loop.exit49, %L20.split.loop.exit46, %L20.split.loop.exit43, %L20.split.loop.exit40, %L20.split.loop.exit37
  %value.1 = phi float [ %.lcssa77, %L20.split.loop.exit37 ], [ %.lcssa72, %L20.split.loop.exit40 ], [ %.lcssa65, %L20.split.loop.exit43 ], [ %.lcssa56, %L20.split.loop.exit46 ], [ %.lcssa45, %L20.split.loop.exit49 ], [ %.lcssa32, %L20.split.loop.exit52 ], [ %.lcssa17, %L20.split.loop.exit55 ], [ %.lcssa, %L20.split.loop.exit58 ], [ -1.000000e+00, %L20.loopexit ]
  %index.0 = phi i32 [ %5, %L20.split.loop.exit37 ], [ %6, %L20.split.loop.exit40 ], [ %7, %L20.split.loop.exit43 ], [ %8, %L20.split.loop.exit46 ], [ %9, %L20.split.loop.exit49 ], [ %10, %L20.split.loop.exit52 ], [ %11, %L20.split.loop.exit55 ], [ %12, %L20.split.loop.exit58 ], [ -2, %L20.loopexit ]
  %conv10 = sitofp i32 %index.0 to float
  %add = fadd float %value.1, %conv10
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add) #11
  %inc13 = add nuw nsw i32 %nl.036, 1
  %exitcond.not = icmp eq i32 %inc13, 100000
  br i1 %exitcond.not, label %cleanup14, label %for.cond2.preheader, !llvm.loop !308

cleanup14:                                        ; preds = %L20
  %value.1.lcssa = phi float [ %value.1, %L20 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call16 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %value.1.lcssa

for.inc.1:                                        ; preds = %for.inc
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %13 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ogt float %13, %conv
  br i1 %cmp6.2, label %L20.split.loop.exit52, label %for.inc.2

for.inc.2:                                        ; preds = %for.inc.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ogt float %14, %conv
  br i1 %cmp6.3, label %L20.split.loop.exit49, label %for.inc.3

for.inc.3:                                        ; preds = %for.inc.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %15 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ogt float %15, %conv
  br i1 %cmp6.4, label %L20.split.loop.exit46, label %for.inc.4

for.inc.4:                                        ; preds = %for.inc.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ogt float %16, %conv
  br i1 %cmp6.5, label %L20.split.loop.exit43, label %for.inc.5

for.inc.5:                                        ; preds = %for.inc.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %17 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ogt float %17, %conv
  br i1 %cmp6.6, label %L20.split.loop.exit40, label %for.inc.6

for.inc.6:                                        ; preds = %for.inc.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %18 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ogt float %18, %conv
  br i1 %cmp6.7, label %L20.split.loop.exit37, label %for.inc.7

for.inc.7:                                        ; preds = %for.inc.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %L20.loopexit, label %for.body5, !llvm.loop !309
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s341(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s341, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.029 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call16 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call17 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s341, i64 0, i64 0)) #11
  ret float %call17

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call12 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc14 = add nuw nsw i32 %nl.029, 1
  %exitcond.not = icmp eq i32 %inc14, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !310

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %j.027 = phi i32 [ -1, %for.cond2.preheader ], [ %j.1.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp ogt float %0, 0.000000e+00
  br i1 %cmp6, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body5
  %inc = add nsw i32 %j.027, 1
  %idxprom9 = sext i32 %inc to i64
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom9
  store float %0, float* %arrayidx10, align 4, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body5
  %j.1 = phi i32 [ %inc, %if.then ], [ %j.027, %for.body5 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ogt float %1, 0.000000e+00
  br i1 %cmp6.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %inc.1 = add nsw i32 %j.1, 1
  %idxprom9.1 = sext i32 %inc.1 to i64
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom9.1
  store float %1, float* %arrayidx10.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %j.1.1 = phi i32 [ %inc.1, %if.then.1 ], [ %j.1, %for.inc ]
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ogt float %2, 0.000000e+00
  br i1 %cmp6.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %inc.2 = add nsw i32 %j.1.1, 1
  %idxprom9.2 = sext i32 %inc.2 to i64
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom9.2
  store float %2, float* %arrayidx10.2, align 4, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %j.1.2 = phi i32 [ %inc.2, %if.then.2 ], [ %j.1.1, %for.inc.1 ]
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ogt float %3, 0.000000e+00
  br i1 %cmp6.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %inc.3 = add nsw i32 %j.1.2, 1
  %idxprom9.3 = sext i32 %inc.3 to i64
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom9.3
  store float %3, float* %arrayidx10.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  %j.1.3 = phi i32 [ %inc.3, %if.then.3 ], [ %j.1.2, %for.inc.2 ]
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ogt float %4, 0.000000e+00
  br i1 %cmp6.4, label %if.then.4, label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %inc.4 = add nsw i32 %j.1.3, 1
  %idxprom9.4 = sext i32 %inc.4 to i64
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom9.4
  store float %4, float* %arrayidx10.4, align 4, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %for.inc.3
  %j.1.4 = phi i32 [ %inc.4, %if.then.4 ], [ %j.1.3, %for.inc.3 ]
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ogt float %5, 0.000000e+00
  br i1 %cmp6.5, label %if.then.5, label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %inc.5 = add nsw i32 %j.1.4, 1
  %idxprom9.5 = sext i32 %inc.5 to i64
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom9.5
  store float %5, float* %arrayidx10.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %for.inc.4
  %j.1.5 = phi i32 [ %inc.5, %if.then.5 ], [ %j.1.4, %for.inc.4 ]
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ogt float %6, 0.000000e+00
  br i1 %cmp6.6, label %if.then.6, label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %inc.6 = add nsw i32 %j.1.5, 1
  %idxprom9.6 = sext i32 %inc.6 to i64
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom9.6
  store float %6, float* %arrayidx10.6, align 4, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %for.inc.5
  %j.1.6 = phi i32 [ %inc.6, %if.then.6 ], [ %j.1.5, %for.inc.5 ]
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ogt float %7, 0.000000e+00
  br i1 %cmp6.7, label %if.then.7, label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %inc.7 = add nsw i32 %j.1.6, 1
  %idxprom9.7 = sext i32 %inc.7 to i64
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom9.7
  store float %7, float* %arrayidx10.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %for.inc.6
  %j.1.7 = phi i32 [ %inc.7, %if.then.7 ], [ %j.1.6, %for.inc.6 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !311
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s342(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s342, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.029 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call16 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call17 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s342, i64 0, i64 0)) #11
  ret float %call17

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call12 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc14 = add nuw nsw i32 %nl.029, 1
  %exitcond.not = icmp eq i32 %inc14, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !312

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %j.027 = phi i32 [ -1, %for.cond2.preheader ], [ %j.1.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp ogt float %0, 0.000000e+00
  br i1 %cmp6, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body5
  %inc = add nsw i32 %j.027, 1
  %idxprom7 = sext i32 %inc to i64
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom7
  %1 = load float, float* %arrayidx8, align 4, !tbaa !4
  store float %1, float* %arrayidx, align 32, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body5
  %j.1 = phi i32 [ %inc, %if.then ], [ %j.027, %for.body5 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ogt float %2, 0.000000e+00
  br i1 %cmp6.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %inc.1 = add nsw i32 %j.1, 1
  %idxprom7.1 = sext i32 %inc.1 to i64
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom7.1
  %3 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  store float %3, float* %arrayidx.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %j.1.1 = phi i32 [ %inc.1, %if.then.1 ], [ %j.1, %for.inc ]
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ogt float %4, 0.000000e+00
  br i1 %cmp6.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %inc.2 = add nsw i32 %j.1.1, 1
  %idxprom7.2 = sext i32 %inc.2 to i64
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom7.2
  %5 = load float, float* %arrayidx8.2, align 4, !tbaa !4
  store float %5, float* %arrayidx.2, align 8, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %j.1.2 = phi i32 [ %inc.2, %if.then.2 ], [ %j.1.1, %for.inc.1 ]
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ogt float %6, 0.000000e+00
  br i1 %cmp6.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %inc.3 = add nsw i32 %j.1.2, 1
  %idxprom7.3 = sext i32 %inc.3 to i64
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom7.3
  %7 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  store float %7, float* %arrayidx.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  %j.1.3 = phi i32 [ %inc.3, %if.then.3 ], [ %j.1.2, %for.inc.2 ]
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ogt float %8, 0.000000e+00
  br i1 %cmp6.4, label %if.then.4, label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %inc.4 = add nsw i32 %j.1.3, 1
  %idxprom7.4 = sext i32 %inc.4 to i64
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom7.4
  %9 = load float, float* %arrayidx8.4, align 4, !tbaa !4
  store float %9, float* %arrayidx.4, align 16, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %for.inc.3
  %j.1.4 = phi i32 [ %inc.4, %if.then.4 ], [ %j.1.3, %for.inc.3 ]
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ogt float %10, 0.000000e+00
  br i1 %cmp6.5, label %if.then.5, label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %inc.5 = add nsw i32 %j.1.4, 1
  %idxprom7.5 = sext i32 %inc.5 to i64
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom7.5
  %11 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  store float %11, float* %arrayidx.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %for.inc.4
  %j.1.5 = phi i32 [ %inc.5, %if.then.5 ], [ %j.1.4, %for.inc.4 ]
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ogt float %12, 0.000000e+00
  br i1 %cmp6.6, label %if.then.6, label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %inc.6 = add nsw i32 %j.1.5, 1
  %idxprom7.6 = sext i32 %inc.6 to i64
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom7.6
  %13 = load float, float* %arrayidx8.6, align 4, !tbaa !4
  store float %13, float* %arrayidx.6, align 8, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %for.inc.5
  %j.1.6 = phi i32 [ %inc.6, %if.then.6 ], [ %j.1.5, %for.inc.5 ]
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ogt float %14, 0.000000e+00
  br i1 %cmp6.7, label %if.then.7, label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %inc.7 = add nsw i32 %j.1.6, 1
  %idxprom7.7 = sext i32 %inc.7 to i64
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom7.7
  %15 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  store float %15, float* %arrayidx.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %for.inc.6
  %j.1.7 = phi i32 [ %inc.7, %if.then.7 ], [ %j.1.6, %for.inc.6 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !313
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s343(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s343, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.046 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
  br label %for.cond6.preheader

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call27 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call28 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s343, i64 0, i64 0)) #11
  ret float %call28

for.cond6.preheader:                              ; preds = %for.cond.cleanup8, %for.cond2.preheader
  %indvars.iv47 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next48, %for.cond.cleanup8 ]
  %k.044 = phi i32 [ -1, %for.cond2.preheader ], [ %k.2.7.lcssa, %for.cond.cleanup8 ]
  br label %for.body9

for.cond.cleanup4:                                ; preds = %for.cond.cleanup8
  %call23 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc25 = add nuw nsw i32 %nl.046, 1
  %exitcond49.not = icmp eq i32 %inc25, 3900
  br i1 %exitcond49.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !314

for.cond.cleanup8:                                ; preds = %for.inc.7
  %k.2.7.lcssa = phi i32 [ %k.2.7, %for.inc.7 ]
  %indvars.iv.next48 = add nuw nsw i64 %indvars.iv47, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next48, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.cond6.preheader, !llvm.loop !315

for.body9:                                        ; preds = %for.inc.7, %for.cond6.preheader
  %indvars.iv = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %k.142 = phi i32 [ %k.044, %for.cond6.preheader ], [ %k.2.7, %for.inc.7 ]
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv, i64 %indvars.iv47
  %0 = load float, float* %arrayidx11, align 4, !tbaa !4
  %cmp12 = fcmp ogt float %0, 0.000000e+00
  br i1 %cmp12, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body9
  %inc = add nsw i32 %k.142, 1
  %arrayidx16 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv, i64 %indvars.iv47
  %1 = load float, float* %arrayidx16, align 4, !tbaa !4
  %idxprom17 = sext i32 %inc to i64
  %arrayidx18 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom17
  store float %1, float* %arrayidx18, align 4, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body9
  %k.2 = phi i32 [ %inc, %if.then ], [ %k.142, %for.body9 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next, i64 %indvars.iv47
  %2 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %cmp12.1 = fcmp ogt float %2, 0.000000e+00
  br i1 %cmp12.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %inc.1 = add nsw i32 %k.2, 1
  %arrayidx16.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next, i64 %indvars.iv47
  %3 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %idxprom17.1 = sext i32 %inc.1 to i64
  %arrayidx18.1 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom17.1
  store float %3, float* %arrayidx18.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %k.2.1 = phi i32 [ %inc.1, %if.then.1 ], [ %k.2, %for.inc ]
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv47
  %4 = load float, float* %arrayidx11.2, align 4, !tbaa !4
  %cmp12.2 = fcmp ogt float %4, 0.000000e+00
  br i1 %cmp12.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %inc.2 = add nsw i32 %k.2.1, 1
  %arrayidx16.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.1, i64 %indvars.iv47
  %5 = load float, float* %arrayidx16.2, align 4, !tbaa !4
  %idxprom17.2 = sext i32 %inc.2 to i64
  %arrayidx18.2 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom17.2
  store float %5, float* %arrayidx18.2, align 4, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %k.2.2 = phi i32 [ %inc.2, %if.then.2 ], [ %k.2.1, %for.inc.1 ]
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv47
  %6 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %cmp12.3 = fcmp ogt float %6, 0.000000e+00
  br i1 %cmp12.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %inc.3 = add nsw i32 %k.2.2, 1
  %arrayidx16.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.2, i64 %indvars.iv47
  %7 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %idxprom17.3 = sext i32 %inc.3 to i64
  %arrayidx18.3 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom17.3
  store float %7, float* %arrayidx18.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  %k.2.3 = phi i32 [ %inc.3, %if.then.3 ], [ %k.2.2, %for.inc.2 ]
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv47
  %8 = load float, float* %arrayidx11.4, align 4, !tbaa !4
  %cmp12.4 = fcmp ogt float %8, 0.000000e+00
  br i1 %cmp12.4, label %if.then.4, label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %inc.4 = add nsw i32 %k.2.3, 1
  %arrayidx16.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.3, i64 %indvars.iv47
  %9 = load float, float* %arrayidx16.4, align 4, !tbaa !4
  %idxprom17.4 = sext i32 %inc.4 to i64
  %arrayidx18.4 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom17.4
  store float %9, float* %arrayidx18.4, align 4, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %for.inc.3
  %k.2.4 = phi i32 [ %inc.4, %if.then.4 ], [ %k.2.3, %for.inc.3 ]
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv47
  %10 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %cmp12.5 = fcmp ogt float %10, 0.000000e+00
  br i1 %cmp12.5, label %if.then.5, label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %inc.5 = add nsw i32 %k.2.4, 1
  %arrayidx16.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.4, i64 %indvars.iv47
  %11 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %idxprom17.5 = sext i32 %inc.5 to i64
  %arrayidx18.5 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom17.5
  store float %11, float* %arrayidx18.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %for.inc.4
  %k.2.5 = phi i32 [ %inc.5, %if.then.5 ], [ %k.2.4, %for.inc.4 ]
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv47
  %12 = load float, float* %arrayidx11.6, align 4, !tbaa !4
  %cmp12.6 = fcmp ogt float %12, 0.000000e+00
  br i1 %cmp12.6, label %if.then.6, label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %inc.6 = add nsw i32 %k.2.5, 1
  %arrayidx16.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.5, i64 %indvars.iv47
  %13 = load float, float* %arrayidx16.6, align 4, !tbaa !4
  %idxprom17.6 = sext i32 %inc.6 to i64
  %arrayidx18.6 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom17.6
  store float %13, float* %arrayidx18.6, align 4, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %for.inc.5
  %k.2.6 = phi i32 [ %inc.6, %if.then.6 ], [ %k.2.5, %for.inc.5 ]
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv47
  %14 = load float, float* %arrayidx11.7, align 4, !tbaa !4
  %cmp12.7 = fcmp ogt float %14, 0.000000e+00
  br i1 %cmp12.7, label %if.then.7, label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %inc.7 = add nsw i32 %k.2.6, 1
  %arrayidx16.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %indvars.iv.next.6, i64 %indvars.iv47
  %15 = load float, float* %arrayidx16.7, align 4, !tbaa !4
  %idxprom17.7 = sext i32 %inc.7 to i64
  %arrayidx18.7 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %idxprom17.7
  store float %15, float* %arrayidx18.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %for.inc.6
  %k.2.7 = phi i32 [ %inc.7, %if.then.7 ], [ %k.2.6, %for.inc.6 ]
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 256
  br i1 %exitcond.7.not, label %for.cond.cleanup8, label %for.body9, !llvm.loop !316
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s351(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s351, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %0 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), align 64, !tbaa !4
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.067 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call44 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call45 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s351, i64 0, i64 0)) #11
  ret float %call45

for.cond.cleanup4:                                ; preds = %for.body5
  %call41 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc = add nuw nsw i32 %nl.067, 1
  %exitcond.not = icmp eq i32 %inc, 800000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !317

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx7, align 4, !tbaa !4
  %add = fadd float %2, %mul
  store float %add, float* %arrayidx7, align 4, !tbaa !4
  %3 = add nuw nsw i64 %indvars.iv, 1
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %3
  %4 = load float, float* %arrayidx10, align 4, !tbaa !4
  %mul11 = fmul float %0, %4
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %3
  %5 = load float, float* %arrayidx14, align 4, !tbaa !4
  %add15 = fadd float %5, %mul11
  store float %add15, float* %arrayidx14, align 4, !tbaa !4
  %6 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %6
  %7 = load float, float* %arrayidx18, align 4, !tbaa !4
  %mul19 = fmul float %0, %7
  %arrayidx22 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %6
  %8 = load float, float* %arrayidx22, align 4, !tbaa !4
  %add23 = fadd float %8, %mul19
  store float %add23, float* %arrayidx22, align 4, !tbaa !4
  %9 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx26 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %9
  %10 = load float, float* %arrayidx26, align 4, !tbaa !4
  %mul27 = fmul float %0, %10
  %arrayidx30 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %9
  %11 = load float, float* %arrayidx30, align 4, !tbaa !4
  %add31 = fadd float %11, %mul27
  store float %add31, float* %arrayidx30, align 4, !tbaa !4
  %12 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %12
  %13 = load float, float* %arrayidx34, align 4, !tbaa !4
  %mul35 = fmul float %0, %13
  %arrayidx38 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %12
  %14 = load float, float* %arrayidx38, align 4, !tbaa !4
  %add39 = fadd float %14, %mul35
  store float %add39, float* %arrayidx38, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 5
  %cmp3 = icmp ult i64 %indvars.iv, 31995
  br i1 %cmp3, label %for.body5, label %for.cond.cleanup4, !llvm.loop !318
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1351(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1351, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.029 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call12 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call13 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1351, i64 0, i64 0)) #11
  ret float %call13

for.cond.cleanup4:                                ; preds = %for.body5
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc10 = add nuw nsw i32 %nl.029, 1
  %exitcond.not = icmp eq i32 %inc10, 800000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !319

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %i.028 = phi i32 [ 0, %for.cond2.preheader ], [ %inc.7, %for.body5 ]
  %C.027 = phi float* [ getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), %for.cond2.preheader ], [ %incdec.ptr7.7, %for.body5 ]
  %B.026 = phi float* [ getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), %for.cond2.preheader ], [ %incdec.ptr6.7, %for.body5 ]
  %A.025 = phi float* [ getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), %for.cond2.preheader ], [ %incdec.ptr.7, %for.body5 ]
  %0 = load float, float* %B.026, align 4, !tbaa !4
  %1 = load float, float* %C.027, align 4, !tbaa !4
  %add = fadd float %0, %1
  store float %add, float* %A.025, align 4, !tbaa !4
  %incdec.ptr = getelementptr inbounds float, float* %A.025, i64 1
  %incdec.ptr6 = getelementptr inbounds float, float* %B.026, i64 1
  %incdec.ptr7 = getelementptr inbounds float, float* %C.027, i64 1
  %2 = load float, float* %incdec.ptr6, align 4, !tbaa !4
  %3 = load float, float* %incdec.ptr7, align 4, !tbaa !4
  %add.1 = fadd float %2, %3
  store float %add.1, float* %incdec.ptr, align 4, !tbaa !4
  %incdec.ptr.1 = getelementptr inbounds float, float* %A.025, i64 2
  %incdec.ptr6.1 = getelementptr inbounds float, float* %B.026, i64 2
  %incdec.ptr7.1 = getelementptr inbounds float, float* %C.027, i64 2
  %4 = load float, float* %incdec.ptr6.1, align 4, !tbaa !4
  %5 = load float, float* %incdec.ptr7.1, align 4, !tbaa !4
  %add.2 = fadd float %4, %5
  store float %add.2, float* %incdec.ptr.1, align 4, !tbaa !4
  %incdec.ptr.2 = getelementptr inbounds float, float* %A.025, i64 3
  %incdec.ptr6.2 = getelementptr inbounds float, float* %B.026, i64 3
  %incdec.ptr7.2 = getelementptr inbounds float, float* %C.027, i64 3
  %6 = load float, float* %incdec.ptr6.2, align 4, !tbaa !4
  %7 = load float, float* %incdec.ptr7.2, align 4, !tbaa !4
  %add.3 = fadd float %6, %7
  store float %add.3, float* %incdec.ptr.2, align 4, !tbaa !4
  %incdec.ptr.3 = getelementptr inbounds float, float* %A.025, i64 4
  %incdec.ptr6.3 = getelementptr inbounds float, float* %B.026, i64 4
  %incdec.ptr7.3 = getelementptr inbounds float, float* %C.027, i64 4
  %8 = load float, float* %incdec.ptr6.3, align 4, !tbaa !4
  %9 = load float, float* %incdec.ptr7.3, align 4, !tbaa !4
  %add.4 = fadd float %8, %9
  store float %add.4, float* %incdec.ptr.3, align 4, !tbaa !4
  %incdec.ptr.4 = getelementptr inbounds float, float* %A.025, i64 5
  %incdec.ptr6.4 = getelementptr inbounds float, float* %B.026, i64 5
  %incdec.ptr7.4 = getelementptr inbounds float, float* %C.027, i64 5
  %10 = load float, float* %incdec.ptr6.4, align 4, !tbaa !4
  %11 = load float, float* %incdec.ptr7.4, align 4, !tbaa !4
  %add.5 = fadd float %10, %11
  store float %add.5, float* %incdec.ptr.4, align 4, !tbaa !4
  %incdec.ptr.5 = getelementptr inbounds float, float* %A.025, i64 6
  %incdec.ptr6.5 = getelementptr inbounds float, float* %B.026, i64 6
  %incdec.ptr7.5 = getelementptr inbounds float, float* %C.027, i64 6
  %12 = load float, float* %incdec.ptr6.5, align 4, !tbaa !4
  %13 = load float, float* %incdec.ptr7.5, align 4, !tbaa !4
  %add.6 = fadd float %12, %13
  store float %add.6, float* %incdec.ptr.5, align 4, !tbaa !4
  %incdec.ptr.6 = getelementptr inbounds float, float* %A.025, i64 7
  %incdec.ptr6.6 = getelementptr inbounds float, float* %B.026, i64 7
  %incdec.ptr7.6 = getelementptr inbounds float, float* %C.027, i64 7
  %14 = load float, float* %incdec.ptr6.6, align 4, !tbaa !4
  %15 = load float, float* %incdec.ptr7.6, align 4, !tbaa !4
  %add.7 = fadd float %14, %15
  store float %add.7, float* %incdec.ptr.6, align 4, !tbaa !4
  %incdec.ptr.7 = getelementptr inbounds float, float* %A.025, i64 8
  %incdec.ptr6.7 = getelementptr inbounds float, float* %B.026, i64 8
  %incdec.ptr7.7 = getelementptr inbounds float, float* %C.027, i64 8
  %inc.7 = add nuw nsw i32 %i.028, 8
  %exitcond.7.not = icmp eq i32 %inc.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !320
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s352(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s352, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.065 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %add39.lcssa.lcssa = phi float [ %add39.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call44 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %add39.lcssa.lcssa

for.cond.cleanup4:                                ; preds = %for.body5
  %add39.lcssa = phi float [ %add39, %for.body5 ]
  %call41 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add39.lcssa) #11
  %inc = add nuw nsw i32 %nl.065, 1
  %exitcond.not = icmp eq i32 %inc, 800000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !321

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body5 ]
  %dot.163 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add39, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 4, !tbaa !4
  %mul = fmul float %0, %1
  %add = fadd float %dot.163, %mul
  %2 = add nuw nsw i64 %indvars.iv, 1
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %2
  %3 = load float, float* %arrayidx10, align 4, !tbaa !4
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %2
  %4 = load float, float* %arrayidx13, align 4, !tbaa !4
  %mul14 = fmul float %3, %4
  %add15 = fadd float %add, %mul14
  %5 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %5
  %6 = load float, float* %arrayidx18, align 4, !tbaa !4
  %arrayidx21 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %5
  %7 = load float, float* %arrayidx21, align 4, !tbaa !4
  %mul22 = fmul float %6, %7
  %add23 = fadd float %add15, %mul22
  %8 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx26 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %8
  %9 = load float, float* %arrayidx26, align 4, !tbaa !4
  %arrayidx29 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %8
  %10 = load float, float* %arrayidx29, align 4, !tbaa !4
  %mul30 = fmul float %9, %10
  %add31 = fadd float %add23, %mul30
  %11 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx34 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %11
  %12 = load float, float* %arrayidx34, align 4, !tbaa !4
  %arrayidx37 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %11
  %13 = load float, float* %arrayidx37, align 4, !tbaa !4
  %mul38 = fmul float %12, %13
  %add39 = fadd float %add31, %mul38
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 5
  %cmp3 = icmp ult i64 %indvars.iv, 31995
  br i1 %cmp3, label %for.body5, label %for.cond.cleanup4, !llvm.loop !322
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s353(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s353, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %2 = load float, float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), align 64, !tbaa !4
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.083 = phi i32 [ 0, %entry ], [ %inc, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call54 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call55 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s353, i64 0, i64 0)) #11
  ret float %call55

for.cond.cleanup4:                                ; preds = %for.body5
  %call51 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc = add nuw nsw i32 %nl.083, 1
  %exitcond.not = icmp eq i32 %inc, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !323

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body5 ]
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %indvars.iv
  %3 = load i32, i32* %arrayidx, align 4, !tbaa !97
  %idxprom6 = sext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6
  %4 = load float, float* %arrayidx7, align 4, !tbaa !4
  %mul = fmul float %2, %4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %5 = load float, float* %arrayidx9, align 4, !tbaa !4
  %add = fadd float %5, %mul
  store float %add, float* %arrayidx9, align 4, !tbaa !4
  %6 = add nuw nsw i64 %indvars.iv, 1
  %arrayidx12 = getelementptr inbounds i32, i32* %1, i64 %6
  %7 = load i32, i32* %arrayidx12, align 4, !tbaa !97
  %idxprom13 = sext i32 %7 to i64
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom13
  %8 = load float, float* %arrayidx14, align 4, !tbaa !4
  %mul15 = fmul float %2, %8
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %6
  %9 = load float, float* %arrayidx18, align 4, !tbaa !4
  %add19 = fadd float %9, %mul15
  store float %add19, float* %arrayidx18, align 4, !tbaa !4
  %10 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx22 = getelementptr inbounds i32, i32* %1, i64 %10
  %11 = load i32, i32* %arrayidx22, align 4, !tbaa !97
  %idxprom23 = sext i32 %11 to i64
  %arrayidx24 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom23
  %12 = load float, float* %arrayidx24, align 4, !tbaa !4
  %mul25 = fmul float %2, %12
  %arrayidx28 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
  %13 = load float, float* %arrayidx28, align 4, !tbaa !4
  %add29 = fadd float %13, %mul25
  store float %add29, float* %arrayidx28, align 4, !tbaa !4
  %14 = add nuw nsw i64 %indvars.iv, 3
  %arrayidx32 = getelementptr inbounds i32, i32* %1, i64 %14
  %15 = load i32, i32* %arrayidx32, align 4, !tbaa !97
  %idxprom33 = sext i32 %15 to i64
  %arrayidx34 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom33
  %16 = load float, float* %arrayidx34, align 4, !tbaa !4
  %mul35 = fmul float %2, %16
  %arrayidx38 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %14
  %17 = load float, float* %arrayidx38, align 4, !tbaa !4
  %add39 = fadd float %17, %mul35
  store float %add39, float* %arrayidx38, align 4, !tbaa !4
  %18 = add nuw nsw i64 %indvars.iv, 4
  %arrayidx42 = getelementptr inbounds i32, i32* %1, i64 %18
  %19 = load i32, i32* %arrayidx42, align 4, !tbaa !97
  %idxprom43 = sext i32 %19 to i64
  %arrayidx44 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom43
  %20 = load float, float* %arrayidx44, align 4, !tbaa !4
  %mul45 = fmul float %2, %20
  %arrayidx48 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
  %21 = load float, float* %arrayidx48, align 4, !tbaa !4
  %add49 = fadd float %21, %mul45
  store float %add49, float* %arrayidx48, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 5
  %cmp3 = icmp ult i64 %indvars.iv, 31995
  br i1 %cmp3, label %for.body5, label %for.cond.cleanup4, !llvm.loop !324
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s421(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s421, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  store float* getelementptr inbounds ([65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 0), float** @xx, align 8, !tbaa !325
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s421, i64 0, i64 0)) #11
  ret float %call16

for.body:                                         ; preds = %for.cond.cleanup4.for.body_crit_edge, %entry
  %0 = phi float* [ getelementptr inbounds ([65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 0), %entry ], [ %.pre, %for.cond.cleanup4.for.body_crit_edge ]
  %nl.026 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4.for.body_crit_edge ]
  store float* %0, float** @yy, align 8, !tbaa !325
  br label %for.body5

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 1.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc13, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond.cleanup4.for.body_crit_edge, !llvm.loop !326

for.cond.cleanup4.for.body_crit_edge:             ; preds = %for.cond.cleanup4
  %.pre = load float*, float** @xx, align 8, !tbaa !325
  br label %for.body

for.body5:                                        ; preds = %for.body5.7, %for.body
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next.7, %for.body5.7 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add8 = fadd float %1, %2
  %arrayidx10 = getelementptr inbounds float, float* %0, i64 %indvars.iv
  store float %add8, float* %arrayidx10, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.1 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add8.1 = fadd float %3, %4
  store float %add8.1, float* %arrayidx, align 4, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.2 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  %5 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %add8.2 = fadd float %5, %6
  store float %add8.2, float* %arrayidx.1, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.3 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.3
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add8.3 = fadd float %7, %8
  store float %add8.3, float* %arrayidx.2, align 4, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.4 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.4
  %9 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %10 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %add8.4 = fadd float %9, %10
  store float %add8.4, float* %arrayidx.3, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.5 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.5
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add8.5 = fadd float %11, %12
  store float %add8.5, float* %arrayidx.4, align 4, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.6 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.6
  %13 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %14 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %add8.6 = fadd float %13, %14
  store float %add8.6, float* %arrayidx.5, align 4, !tbaa !4
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !327

for.body5.7:                                      ; preds = %for.body5
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx.7 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.7
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %16 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add8.7 = fadd float %15, %16
  store float %add8.7, float* %arrayidx.6, align 4, !tbaa !4
  br label %for.body5, !llvm.loop !328
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s1421(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1421, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  store float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 16000), float** @xx, align 8, !tbaa !325
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4.for.cond2.preheader_crit_edge, %entry
  %0 = phi float* [ getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 16000), %entry ], [ %.pre, %for.cond.cleanup4.for.cond2.preheader_crit_edge ]
  %nl.025 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4.for.cond2.preheader_crit_edge ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s1421, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 1.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.025, 1
  %exitcond.not = icmp eq i32 %inc12, 800000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond.cleanup4.for.cond2.preheader_crit_edge, !llvm.loop !329

for.cond.cleanup4.for.cond2.preheader_crit_edge:  ; preds = %for.cond.cleanup4
  %.pre = load float*, float** @xx, align 8, !tbaa !325
  br label %for.cond2.preheader

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds float, float* %0, i64 %indvar
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add = fadd float %1, %2
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  store float %add, float* %arrayidx9, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 15999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !330
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s422(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s422, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  store float* getelementptr inbounds ([65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 4), float** @xx, align 8, !tbaa !325
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4.for.cond2.preheader_crit_edge, %entry
  %0 = phi float* [ getelementptr inbounds ([65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 4), %entry ], [ %.pre, %for.cond.cleanup4.for.cond2.preheader_crit_edge ]
  %nl.026 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4.for.cond2.preheader_crit_edge ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s422, i64 0, i64 0)) #11
  ret float %call16

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc13, 800000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond.cleanup4.for.cond2.preheader_crit_edge, !llvm.loop !331

for.cond.cleanup4.for.cond2.preheader_crit_edge:  ; preds = %for.cond.cleanup4
  %.pre = load float*, float** @xx, align 8, !tbaa !325
  br label %for.cond2.preheader

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %1 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %1
  %2 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add8 = fadd float %2, %3
  %arrayidx10 = getelementptr inbounds float, float* %0, i64 %indvars.iv
  store float %add8, float* %arrayidx10, align 4, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %4 = add nuw nsw i64 %indvars.iv, 9
  %arrayidx.1 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %4
  %5 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add8.1 = fadd float %5, %6
  %arrayidx10.1 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  store float %add8.1, float* %arrayidx10.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %7 = add nuw nsw i64 %indvars.iv, 10
  %arrayidx.2 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %7
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %add8.2 = fadd float %8, %9
  %arrayidx10.2 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  store float %add8.2, float* %arrayidx10.2, align 4, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %10 = add nuw nsw i64 %indvars.iv, 11
  %arrayidx.3 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %10
  %11 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add8.3 = fadd float %11, %12
  %arrayidx10.3 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  store float %add8.3, float* %arrayidx10.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %13 = add nuw nsw i64 %indvars.iv, 12
  %arrayidx.4 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %13
  %14 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %15 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %add8.4 = fadd float %14, %15
  %arrayidx10.4 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.3
  store float %add8.4, float* %arrayidx10.4, align 4, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %16 = add nuw nsw i64 %indvars.iv, 13
  %arrayidx.5 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %16
  %17 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %18 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add8.5 = fadd float %17, %18
  %arrayidx10.5 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.4
  store float %add8.5, float* %arrayidx10.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %19 = add nuw nsw i64 %indvars.iv, 14
  %arrayidx.6 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %19
  %20 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %21 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %add8.6 = fadd float %20, %21
  %arrayidx10.6 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.5
  store float %add8.6, float* %arrayidx10.6, align 4, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %22 = add nuw nsw i64 %indvars.iv, 15
  %arrayidx.7 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %22
  %23 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %24 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add8.7 = fadd float %23, %24
  %arrayidx10.7 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.6
  store float %add8.7, float* %arrayidx10.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !332
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s423(%struct.args_t* nocapture %func_args) #0 {
entry:
  store float* getelementptr inbounds ([65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 64), float** @xx, align 8, !tbaa !325
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s423, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.027 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
  %0 = load float*, float** @xx, align 8, !tbaa !325
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s423, i64 0, i64 0)) #11
  ret float %call16

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 1.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.027, 1
  %exitcond.not = icmp eq i32 %inc13, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !333

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds float, float* %0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add = fadd float %1, %2
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx10 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next
  store float %add, float* %arrayidx10, align 4, !tbaa !4
  %arrayidx.1 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add.1 = fadd float %3, %4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx10.1 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.1
  store float %add.1, float* %arrayidx10.1, align 8, !tbaa !4
  %arrayidx.2 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %add.2 = fadd float %5, %6
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx10.2 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.2
  store float %add.2, float* %arrayidx10.2, align 4, !tbaa !4
  %arrayidx.3 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add.3 = fadd float %7, %8
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx10.3 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.3
  store float %add.3, float* %arrayidx10.3, align 16, !tbaa !4
  %arrayidx.4 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.3
  %9 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %10 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %add.4 = fadd float %9, %10
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx10.4 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.4
  store float %add.4, float* %arrayidx10.4, align 4, !tbaa !4
  %arrayidx.5 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.4
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add.5 = fadd float %11, %12
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx10.5 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.5
  store float %add.5, float* %arrayidx10.5, align 8, !tbaa !4
  %arrayidx.6 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.5
  %13 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %14 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %add.6 = fadd float %13, %14
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx10.6 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.6
  store float %add.6, float* %arrayidx10.6, align 4, !tbaa !4
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !334

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.6
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %16 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add.7 = fadd float %15, %16
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx10.7 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.7
  store float %add.7, float* %arrayidx10.7, align 32, !tbaa !4
  br label %for.body5, !llvm.loop !335
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s424(%struct.args_t* nocapture %func_args) #0 {
entry:
  store float* getelementptr inbounds ([65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 63), float** @xx, align 8, !tbaa !325
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s424, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.027 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
  %0 = load float*, float** @xx, align 8, !tbaa !325
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s424, i64 0, i64 0)) #11
  ret float %call16

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 1.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.027, 1
  %exitcond.not = icmp eq i32 %inc13, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !336

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %arrayidx = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add = fadd float %1, %2
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx10 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  store float %add, float* %arrayidx10, align 4, !tbaa !4
  %arrayidx.1 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %add.1 = fadd float %3, %4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx10.1 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  store float %add.1, float* %arrayidx10.1, align 4, !tbaa !4
  %arrayidx.2 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %add.2 = fadd float %5, %6
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx10.2 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  store float %add.2, float* %arrayidx10.2, align 4, !tbaa !4
  %arrayidx.3 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.2
  %7 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %8 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %add.3 = fadd float %7, %8
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx10.3 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.3
  store float %add.3, float* %arrayidx10.3, align 4, !tbaa !4
  %arrayidx.4 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.3
  %9 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %10 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %add.4 = fadd float %9, %10
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx10.4 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.4
  store float %add.4, float* %arrayidx10.4, align 4, !tbaa !4
  %arrayidx.5 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.4
  %11 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %12 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %add.5 = fadd float %11, %12
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx10.5 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.5
  store float %add.5, float* %arrayidx10.5, align 4, !tbaa !4
  %arrayidx.6 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.5
  %13 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %14 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %add.6 = fadd float %13, %14
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx10.6 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.6
  store float %add.6, float* %arrayidx10.6, align 4, !tbaa !4
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 31999
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !337

for.body5.7:                                      ; preds = %for.body5
  %arrayidx.7 = getelementptr inbounds [65536 x float], [65536 x float]* @flat_2d_array, i64 0, i64 %indvars.iv.next.6
  %15 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %16 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %add.7 = fadd float %15, %16
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %arrayidx10.7 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.7
  store float %add.7, float* %arrayidx10.7, align 4, !tbaa !4
  br label %for.body5, !llvm.loop !338
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s431(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s431, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.029 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s431, i64 0, i64 0)) #11
  ret float %call16

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.029, 1
  %exitcond.not = icmp eq i32 %inc13, 1000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !339

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add8 = fadd float %0, %1
  store float %add8, float* %arrayidx, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !340
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s441(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s441, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.058 = phi i32 [ 0, %entry ], [ %inc37, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call39 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call40 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s441, i64 0, i64 0)) #11
  ret float %call40

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call35 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc37 = add nuw nsw i32 %nl.058, 1
  %exitcond.not = icmp eq i32 %inc37, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !341

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp olt float %0, 0.000000e+00
  br i1 %cmp6, label %if.then, label %if.else

if.then:                                          ; preds = %for.body5
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx8, align 32, !tbaa !4
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx10, align 32, !tbaa !4
  %mul = fmul float %1, %2
  br label %for.inc

if.else:                                          ; preds = %for.body5
  %cmp15 = fcmp oeq float %0, 0.000000e+00
  br i1 %cmp15, label %if.then16, label %if.else25

if.then16:                                        ; preds = %if.else
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx18, align 32, !tbaa !4
  %mul21 = fmul float %3, %3
  br label %for.inc

if.else25:                                        ; preds = %if.else
  %arrayidx27 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx27, align 32, !tbaa !4
  %mul30 = fmul float %4, %4
  br label %for.inc

for.inc:                                          ; preds = %if.else25, %if.then16, %if.then
  %mul.sink = phi float [ %mul, %if.then ], [ %mul30, %if.else25 ], [ %mul21, %if.then16 ]
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %5 = load float, float* %arrayidx12, align 32, !tbaa !4
  %add = fadd float %5, %mul.sink
  store float %add, float* %arrayidx12, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp olt float %6, 0.000000e+00
  br i1 %cmp6.1, label %if.then.1, label %if.else.1

if.else.1:                                        ; preds = %for.inc
  %cmp15.1 = fcmp oeq float %6, 0.000000e+00
  br i1 %cmp15.1, label %if.then16.1, label %if.else25.1

if.else25.1:                                      ; preds = %if.else.1
  %arrayidx27.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx27.1, align 4, !tbaa !4
  %mul30.1 = fmul float %7, %7
  br label %for.inc.1

if.then16.1:                                      ; preds = %if.else.1
  %arrayidx18.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx18.1, align 4, !tbaa !4
  %mul21.1 = fmul float %8, %8
  br label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %9 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %10 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %mul.1 = fmul float %9, %10
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %if.then16.1, %if.else25.1
  %mul.1.sink = phi float [ %mul.1, %if.then.1 ], [ %mul21.1, %if.then16.1 ], [ %mul30.1, %if.else25.1 ]
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %11 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %add.1 = fadd float %11, %mul.1.sink
  store float %add.1, float* %arrayidx12.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %12 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp olt float %12, 0.000000e+00
  br i1 %cmp6.2, label %if.then.2, label %if.else.2

if.else.2:                                        ; preds = %for.inc.1
  %cmp15.2 = fcmp oeq float %12, 0.000000e+00
  br i1 %cmp15.2, label %if.then16.2, label %if.else25.2

if.else25.2:                                      ; preds = %if.else.2
  %arrayidx27.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %13 = load float, float* %arrayidx27.2, align 8, !tbaa !4
  %mul30.2 = fmul float %13, %13
  br label %for.inc.2

if.then16.2:                                      ; preds = %if.else.2
  %arrayidx18.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %14 = load float, float* %arrayidx18.2, align 8, !tbaa !4
  %mul21.2 = fmul float %14, %14
  br label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %15 = load float, float* %arrayidx8.2, align 8, !tbaa !4
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %16 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %mul.2 = fmul float %15, %16
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %if.then16.2, %if.else25.2
  %mul.2.sink = phi float [ %mul.2, %if.then.2 ], [ %mul21.2, %if.then16.2 ], [ %mul30.2, %if.else25.2 ]
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %17 = load float, float* %arrayidx12.2, align 8, !tbaa !4
  %add.2 = fadd float %17, %mul.2.sink
  store float %add.2, float* %arrayidx12.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %18 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp olt float %18, 0.000000e+00
  br i1 %cmp6.3, label %if.then.3, label %if.else.3

if.else.3:                                        ; preds = %for.inc.2
  %cmp15.3 = fcmp oeq float %18, 0.000000e+00
  br i1 %cmp15.3, label %if.then16.3, label %if.else25.3

if.else25.3:                                      ; preds = %if.else.3
  %arrayidx27.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %19 = load float, float* %arrayidx27.3, align 4, !tbaa !4
  %mul30.3 = fmul float %19, %19
  br label %for.inc.3

if.then16.3:                                      ; preds = %if.else.3
  %arrayidx18.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %20 = load float, float* %arrayidx18.3, align 4, !tbaa !4
  %mul21.3 = fmul float %20, %20
  br label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %21 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %22 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %mul.3 = fmul float %21, %22
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %if.then16.3, %if.else25.3
  %mul.3.sink = phi float [ %mul.3, %if.then.3 ], [ %mul21.3, %if.then16.3 ], [ %mul30.3, %if.else25.3 ]
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %23 = load float, float* %arrayidx12.3, align 4, !tbaa !4
  %add.3 = fadd float %23, %mul.3.sink
  store float %add.3, float* %arrayidx12.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %24 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp olt float %24, 0.000000e+00
  br i1 %cmp6.4, label %if.then.4, label %if.else.4

if.else.4:                                        ; preds = %for.inc.3
  %cmp15.4 = fcmp oeq float %24, 0.000000e+00
  br i1 %cmp15.4, label %if.then16.4, label %if.else25.4

if.else25.4:                                      ; preds = %if.else.4
  %arrayidx27.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %25 = load float, float* %arrayidx27.4, align 16, !tbaa !4
  %mul30.4 = fmul float %25, %25
  br label %for.inc.4

if.then16.4:                                      ; preds = %if.else.4
  %arrayidx18.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %26 = load float, float* %arrayidx18.4, align 16, !tbaa !4
  %mul21.4 = fmul float %26, %26
  br label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %27 = load float, float* %arrayidx8.4, align 16, !tbaa !4
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %28 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %mul.4 = fmul float %27, %28
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %if.then16.4, %if.else25.4
  %mul.4.sink = phi float [ %mul.4, %if.then.4 ], [ %mul21.4, %if.then16.4 ], [ %mul30.4, %if.else25.4 ]
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %29 = load float, float* %arrayidx12.4, align 16, !tbaa !4
  %add.4 = fadd float %29, %mul.4.sink
  store float %add.4, float* %arrayidx12.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %30 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp olt float %30, 0.000000e+00
  br i1 %cmp6.5, label %if.then.5, label %if.else.5

if.else.5:                                        ; preds = %for.inc.4
  %cmp15.5 = fcmp oeq float %30, 0.000000e+00
  br i1 %cmp15.5, label %if.then16.5, label %if.else25.5

if.else25.5:                                      ; preds = %if.else.5
  %arrayidx27.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %31 = load float, float* %arrayidx27.5, align 4, !tbaa !4
  %mul30.5 = fmul float %31, %31
  br label %for.inc.5

if.then16.5:                                      ; preds = %if.else.5
  %arrayidx18.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %32 = load float, float* %arrayidx18.5, align 4, !tbaa !4
  %mul21.5 = fmul float %32, %32
  br label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %33 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %34 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %mul.5 = fmul float %33, %34
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %if.then16.5, %if.else25.5
  %mul.5.sink = phi float [ %mul.5, %if.then.5 ], [ %mul21.5, %if.then16.5 ], [ %mul30.5, %if.else25.5 ]
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %35 = load float, float* %arrayidx12.5, align 4, !tbaa !4
  %add.5 = fadd float %35, %mul.5.sink
  store float %add.5, float* %arrayidx12.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %36 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp olt float %36, 0.000000e+00
  br i1 %cmp6.6, label %if.then.6, label %if.else.6

if.else.6:                                        ; preds = %for.inc.5
  %cmp15.6 = fcmp oeq float %36, 0.000000e+00
  br i1 %cmp15.6, label %if.then16.6, label %if.else25.6

if.else25.6:                                      ; preds = %if.else.6
  %arrayidx27.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %37 = load float, float* %arrayidx27.6, align 8, !tbaa !4
  %mul30.6 = fmul float %37, %37
  br label %for.inc.6

if.then16.6:                                      ; preds = %if.else.6
  %arrayidx18.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %38 = load float, float* %arrayidx18.6, align 8, !tbaa !4
  %mul21.6 = fmul float %38, %38
  br label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %39 = load float, float* %arrayidx8.6, align 8, !tbaa !4
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %40 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %mul.6 = fmul float %39, %40
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %if.then16.6, %if.else25.6
  %mul.6.sink = phi float [ %mul.6, %if.then.6 ], [ %mul21.6, %if.then16.6 ], [ %mul30.6, %if.else25.6 ]
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %41 = load float, float* %arrayidx12.6, align 8, !tbaa !4
  %add.6 = fadd float %41, %mul.6.sink
  store float %add.6, float* %arrayidx12.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %42 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp olt float %42, 0.000000e+00
  br i1 %cmp6.7, label %if.then.7, label %if.else.7

if.else.7:                                        ; preds = %for.inc.6
  %cmp15.7 = fcmp oeq float %42, 0.000000e+00
  br i1 %cmp15.7, label %if.then16.7, label %if.else25.7

if.else25.7:                                      ; preds = %if.else.7
  %arrayidx27.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %43 = load float, float* %arrayidx27.7, align 4, !tbaa !4
  %mul30.7 = fmul float %43, %43
  br label %for.inc.7

if.then16.7:                                      ; preds = %if.else.7
  %arrayidx18.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %44 = load float, float* %arrayidx18.7, align 4, !tbaa !4
  %mul21.7 = fmul float %44, %44
  br label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %45 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %46 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %mul.7 = fmul float %45, %46
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %if.then16.7, %if.else25.7
  %mul.7.sink = phi float [ %mul.7, %if.then.7 ], [ %mul21.7, %if.then16.7 ], [ %mul30.7, %if.else25.7 ]
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %47 = load float, float* %arrayidx12.7, align 4, !tbaa !4
  %add.7 = fadd float %47, %mul.7.sink
  store float %add.7, float* %arrayidx12.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !342
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s442(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s442, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.064 = phi i32 [ 0, %entry ], [ %inc41, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call43 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call44 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s442, i64 0, i64 0)) #11
  ret float %call44

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call39 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc41 = add nuw nsw i32 %nl.064, 1
  %exitcond.not = icmp eq i32 %inc41, 50000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !343

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x i32], [32000 x i32]* @indx, i64 0, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 32, !tbaa !97
  switch i32 %0, label %L15 [
    i32 4, label %L40
    i32 2, label %L20
    i32 3, label %L30
  ]

L15:                                              ; preds = %for.body5
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx10, align 32, !tbaa !4
  %mul = fmul float %1, %1
  br label %for.inc

L20:                                              ; preds = %for.body5
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx16, align 32, !tbaa !4
  %mul19 = fmul float %2, %2
  br label %for.inc

L30:                                              ; preds = %for.body5
  %arrayidx24 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx24, align 32, !tbaa !4
  %mul27 = fmul float %3, %3
  br label %for.inc

L40:                                              ; preds = %for.body5
  %arrayidx32 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx32, align 32, !tbaa !4
  %mul35 = fmul float %4, %4
  br label %for.inc

for.inc:                                          ; preds = %L40, %L30, %L20, %L15
  %mul.sink = phi float [ %mul, %L15 ], [ %mul19, %L20 ], [ %mul27, %L30 ], [ %mul35, %L40 ]
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %5 = load float, float* %arrayidx14, align 32, !tbaa !4
  %add = fadd float %5, %mul.sink
  store float %add, float* %arrayidx14, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x i32], [32000 x i32]* @indx, i64 0, i64 %indvars.iv.next
  %6 = load i32, i32* %arrayidx.1, align 4, !tbaa !97
  switch i32 %6, label %L15.1 [
    i32 4, label %L40.1
    i32 2, label %L20.1
    i32 3, label %L30.1
  ]

L30.1:                                            ; preds = %for.inc
  %arrayidx24.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx24.1, align 4, !tbaa !4
  %mul27.1 = fmul float %7, %7
  br label %for.inc.1

L20.1:                                            ; preds = %for.inc
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %8 = load float, float* %arrayidx16.1, align 4, !tbaa !4
  %mul19.1 = fmul float %8, %8
  br label %for.inc.1

L40.1:                                            ; preds = %for.inc
  %arrayidx32.1 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next
  %9 = load float, float* %arrayidx32.1, align 4, !tbaa !4
  %mul35.1 = fmul float %9, %9
  br label %for.inc.1

L15.1:                                            ; preds = %for.inc
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %10 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %mul.1 = fmul float %10, %10
  br label %for.inc.1

for.inc.1:                                        ; preds = %L15.1, %L40.1, %L20.1, %L30.1
  %mul.1.sink = phi float [ %mul.1, %L15.1 ], [ %mul35.1, %L40.1 ], [ %mul19.1, %L20.1 ], [ %mul27.1, %L30.1 ]
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %11 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  %add.1 = fadd float %11, %mul.1.sink
  store float %add.1, float* %arrayidx14.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x i32], [32000 x i32]* @indx, i64 0, i64 %indvars.iv.next.1
  %12 = load i32, i32* %arrayidx.2, align 8, !tbaa !97
  switch i32 %12, label %L15.2 [
    i32 4, label %L40.2
    i32 2, label %L20.2
    i32 3, label %L30.2
  ]

L30.2:                                            ; preds = %for.inc.1
  %arrayidx24.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %13 = load float, float* %arrayidx24.2, align 8, !tbaa !4
  %mul27.2 = fmul float %13, %13
  br label %for.inc.2

L20.2:                                            ; preds = %for.inc.1
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %14 = load float, float* %arrayidx16.2, align 8, !tbaa !4
  %mul19.2 = fmul float %14, %14
  br label %for.inc.2

L40.2:                                            ; preds = %for.inc.1
  %arrayidx32.2 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.1
  %15 = load float, float* %arrayidx32.2, align 8, !tbaa !4
  %mul35.2 = fmul float %15, %15
  br label %for.inc.2

L15.2:                                            ; preds = %for.inc.1
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %16 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %mul.2 = fmul float %16, %16
  br label %for.inc.2

for.inc.2:                                        ; preds = %L15.2, %L40.2, %L20.2, %L30.2
  %mul.2.sink = phi float [ %mul.2, %L15.2 ], [ %mul35.2, %L40.2 ], [ %mul19.2, %L20.2 ], [ %mul27.2, %L30.2 ]
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %17 = load float, float* %arrayidx14.2, align 8, !tbaa !4
  %add.2 = fadd float %17, %mul.2.sink
  store float %add.2, float* %arrayidx14.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x i32], [32000 x i32]* @indx, i64 0, i64 %indvars.iv.next.2
  %18 = load i32, i32* %arrayidx.3, align 4, !tbaa !97
  switch i32 %18, label %L15.3 [
    i32 4, label %L40.3
    i32 2, label %L20.3
    i32 3, label %L30.3
  ]

L30.3:                                            ; preds = %for.inc.2
  %arrayidx24.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %19 = load float, float* %arrayidx24.3, align 4, !tbaa !4
  %mul27.3 = fmul float %19, %19
  br label %for.inc.3

L20.3:                                            ; preds = %for.inc.2
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %20 = load float, float* %arrayidx16.3, align 4, !tbaa !4
  %mul19.3 = fmul float %20, %20
  br label %for.inc.3

L40.3:                                            ; preds = %for.inc.2
  %arrayidx32.3 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.2
  %21 = load float, float* %arrayidx32.3, align 4, !tbaa !4
  %mul35.3 = fmul float %21, %21
  br label %for.inc.3

L15.3:                                            ; preds = %for.inc.2
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %22 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %mul.3 = fmul float %22, %22
  br label %for.inc.3

for.inc.3:                                        ; preds = %L15.3, %L40.3, %L20.3, %L30.3
  %mul.3.sink = phi float [ %mul.3, %L15.3 ], [ %mul35.3, %L40.3 ], [ %mul19.3, %L20.3 ], [ %mul27.3, %L30.3 ]
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %23 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  %add.3 = fadd float %23, %mul.3.sink
  store float %add.3, float* %arrayidx14.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x i32], [32000 x i32]* @indx, i64 0, i64 %indvars.iv.next.3
  %24 = load i32, i32* %arrayidx.4, align 16, !tbaa !97
  switch i32 %24, label %L15.4 [
    i32 4, label %L40.4
    i32 2, label %L20.4
    i32 3, label %L30.4
  ]

L30.4:                                            ; preds = %for.inc.3
  %arrayidx24.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %25 = load float, float* %arrayidx24.4, align 16, !tbaa !4
  %mul27.4 = fmul float %25, %25
  br label %for.inc.4

L20.4:                                            ; preds = %for.inc.3
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %26 = load float, float* %arrayidx16.4, align 16, !tbaa !4
  %mul19.4 = fmul float %26, %26
  br label %for.inc.4

L40.4:                                            ; preds = %for.inc.3
  %arrayidx32.4 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.3
  %27 = load float, float* %arrayidx32.4, align 16, !tbaa !4
  %mul35.4 = fmul float %27, %27
  br label %for.inc.4

L15.4:                                            ; preds = %for.inc.3
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %28 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %mul.4 = fmul float %28, %28
  br label %for.inc.4

for.inc.4:                                        ; preds = %L15.4, %L40.4, %L20.4, %L30.4
  %mul.4.sink = phi float [ %mul.4, %L15.4 ], [ %mul35.4, %L40.4 ], [ %mul19.4, %L20.4 ], [ %mul27.4, %L30.4 ]
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %29 = load float, float* %arrayidx14.4, align 16, !tbaa !4
  %add.4 = fadd float %29, %mul.4.sink
  store float %add.4, float* %arrayidx14.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x i32], [32000 x i32]* @indx, i64 0, i64 %indvars.iv.next.4
  %30 = load i32, i32* %arrayidx.5, align 4, !tbaa !97
  switch i32 %30, label %L15.5 [
    i32 4, label %L40.5
    i32 2, label %L20.5
    i32 3, label %L30.5
  ]

L30.5:                                            ; preds = %for.inc.4
  %arrayidx24.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %31 = load float, float* %arrayidx24.5, align 4, !tbaa !4
  %mul27.5 = fmul float %31, %31
  br label %for.inc.5

L20.5:                                            ; preds = %for.inc.4
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %32 = load float, float* %arrayidx16.5, align 4, !tbaa !4
  %mul19.5 = fmul float %32, %32
  br label %for.inc.5

L40.5:                                            ; preds = %for.inc.4
  %arrayidx32.5 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.4
  %33 = load float, float* %arrayidx32.5, align 4, !tbaa !4
  %mul35.5 = fmul float %33, %33
  br label %for.inc.5

L15.5:                                            ; preds = %for.inc.4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %34 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %mul.5 = fmul float %34, %34
  br label %for.inc.5

for.inc.5:                                        ; preds = %L15.5, %L40.5, %L20.5, %L30.5
  %mul.5.sink = phi float [ %mul.5, %L15.5 ], [ %mul35.5, %L40.5 ], [ %mul19.5, %L20.5 ], [ %mul27.5, %L30.5 ]
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %35 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  %add.5 = fadd float %35, %mul.5.sink
  store float %add.5, float* %arrayidx14.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x i32], [32000 x i32]* @indx, i64 0, i64 %indvars.iv.next.5
  %36 = load i32, i32* %arrayidx.6, align 8, !tbaa !97
  switch i32 %36, label %L15.6 [
    i32 4, label %L40.6
    i32 2, label %L20.6
    i32 3, label %L30.6
  ]

L30.6:                                            ; preds = %for.inc.5
  %arrayidx24.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %37 = load float, float* %arrayidx24.6, align 8, !tbaa !4
  %mul27.6 = fmul float %37, %37
  br label %for.inc.6

L20.6:                                            ; preds = %for.inc.5
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %38 = load float, float* %arrayidx16.6, align 8, !tbaa !4
  %mul19.6 = fmul float %38, %38
  br label %for.inc.6

L40.6:                                            ; preds = %for.inc.5
  %arrayidx32.6 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.5
  %39 = load float, float* %arrayidx32.6, align 8, !tbaa !4
  %mul35.6 = fmul float %39, %39
  br label %for.inc.6

L15.6:                                            ; preds = %for.inc.5
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %40 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %mul.6 = fmul float %40, %40
  br label %for.inc.6

for.inc.6:                                        ; preds = %L15.6, %L40.6, %L20.6, %L30.6
  %mul.6.sink = phi float [ %mul.6, %L15.6 ], [ %mul35.6, %L40.6 ], [ %mul19.6, %L20.6 ], [ %mul27.6, %L30.6 ]
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %41 = load float, float* %arrayidx14.6, align 8, !tbaa !4
  %add.6 = fadd float %41, %mul.6.sink
  store float %add.6, float* %arrayidx14.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x i32], [32000 x i32]* @indx, i64 0, i64 %indvars.iv.next.6
  %42 = load i32, i32* %arrayidx.7, align 4, !tbaa !97
  switch i32 %42, label %L15.7 [
    i32 4, label %L40.7
    i32 2, label %L20.7
    i32 3, label %L30.7
  ]

L30.7:                                            ; preds = %for.inc.6
  %arrayidx24.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %43 = load float, float* %arrayidx24.7, align 4, !tbaa !4
  %mul27.7 = fmul float %43, %43
  br label %for.inc.7

L20.7:                                            ; preds = %for.inc.6
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %44 = load float, float* %arrayidx16.7, align 4, !tbaa !4
  %mul19.7 = fmul float %44, %44
  br label %for.inc.7

L40.7:                                            ; preds = %for.inc.6
  %arrayidx32.7 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv.next.6
  %45 = load float, float* %arrayidx32.7, align 4, !tbaa !4
  %mul35.7 = fmul float %45, %45
  br label %for.inc.7

L15.7:                                            ; preds = %for.inc.6
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %46 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %mul.7 = fmul float %46, %46
  br label %for.inc.7

for.inc.7:                                        ; preds = %L15.7, %L40.7, %L20.7, %L30.7
  %mul.7.sink = phi float [ %mul.7, %L15.7 ], [ %mul35.7, %L40.7 ], [ %mul19.7, %L20.7 ], [ %mul27.7, %L30.7 ]
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %47 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  %add.7 = fadd float %47, %mul.7.sink
  store float %add.7, float* %arrayidx14.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !344
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s443(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s443, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.040 = phi i32 [ 0, %entry ], [ %inc23, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call25 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call26 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s443, i64 0, i64 0)) #11
  ret float %call26

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call21 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc23 = add nuw nsw i32 %nl.040, 1
  %exitcond.not = icmp eq i32 %inc23, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !345

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp ugt float %0, 0.000000e+00
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx14, align 32, !tbaa !4
  br i1 %cmp6, label %for.inc, label %L20

L20:                                              ; preds = %for.body5
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx10, align 32, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %L20, %for.body5
  %.sink = phi float [ %2, %L20 ], [ %1, %for.body5 ]
  %mul = fmul float %1, %.sink
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx12, align 32, !tbaa !4
  %add = fadd float %3, %mul
  store float %add, float* %arrayidx12, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ugt float %4, 0.000000e+00
  %arrayidx14.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx14.1, align 4, !tbaa !4
  br i1 %cmp6.1, label %for.inc.1, label %L20.1

L20.1:                                            ; preds = %for.inc
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %L20.1, %for.inc
  %.sink44 = phi float [ %6, %L20.1 ], [ %5, %for.inc ]
  %mul17.1 = fmul float %5, %.sink44
  %arrayidx19.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx19.1, align 4, !tbaa !4
  %add20.1 = fadd float %7, %mul17.1
  store float %add20.1, float* %arrayidx19.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ugt float %8, 0.000000e+00
  %arrayidx14.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx14.2, align 8, !tbaa !4
  br i1 %cmp6.2, label %for.inc.2, label %L20.2

L20.2:                                            ; preds = %for.inc.1
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %L20.2, %for.inc.1
  %.sink47 = phi float [ %10, %L20.2 ], [ %9, %for.inc.1 ]
  %mul17.2 = fmul float %9, %.sink47
  %arrayidx19.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx19.2, align 8, !tbaa !4
  %add20.2 = fadd float %11, %mul17.2
  store float %add20.2, float* %arrayidx19.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ugt float %12, 0.000000e+00
  %arrayidx14.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx14.3, align 4, !tbaa !4
  br i1 %cmp6.3, label %for.inc.3, label %L20.3

L20.3:                                            ; preds = %for.inc.2
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %L20.3, %for.inc.2
  %.sink50 = phi float [ %14, %L20.3 ], [ %13, %for.inc.2 ]
  %mul17.3 = fmul float %13, %.sink50
  %arrayidx19.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx19.3, align 4, !tbaa !4
  %add20.3 = fadd float %15, %mul17.3
  store float %add20.3, float* %arrayidx19.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ugt float %16, 0.000000e+00
  %arrayidx14.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx14.4, align 16, !tbaa !4
  br i1 %cmp6.4, label %for.inc.4, label %L20.4

L20.4:                                            ; preds = %for.inc.3
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %L20.4, %for.inc.3
  %.sink53 = phi float [ %18, %L20.4 ], [ %17, %for.inc.3 ]
  %mul17.4 = fmul float %17, %.sink53
  %arrayidx19.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx19.4, align 16, !tbaa !4
  %add20.4 = fadd float %19, %mul17.4
  store float %add20.4, float* %arrayidx19.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ugt float %20, 0.000000e+00
  %arrayidx14.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx14.5, align 4, !tbaa !4
  br i1 %cmp6.5, label %for.inc.5, label %L20.5

L20.5:                                            ; preds = %for.inc.4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %L20.5, %for.inc.4
  %.sink56 = phi float [ %22, %L20.5 ], [ %21, %for.inc.4 ]
  %mul17.5 = fmul float %21, %.sink56
  %arrayidx19.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %23 = load float, float* %arrayidx19.5, align 4, !tbaa !4
  %add20.5 = fadd float %23, %mul17.5
  store float %add20.5, float* %arrayidx19.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ugt float %24, 0.000000e+00
  %arrayidx14.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx14.6, align 8, !tbaa !4
  br i1 %cmp6.6, label %for.inc.6, label %L20.6

L20.6:                                            ; preds = %for.inc.5
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %L20.6, %for.inc.5
  %.sink59 = phi float [ %26, %L20.6 ], [ %25, %for.inc.5 ]
  %mul17.6 = fmul float %25, %.sink59
  %arrayidx19.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %27 = load float, float* %arrayidx19.6, align 8, !tbaa !4
  %add20.6 = fadd float %27, %mul17.6
  store float %add20.6, float* %arrayidx19.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ugt float %28, 0.000000e+00
  %arrayidx14.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %29 = load float, float* %arrayidx14.7, align 4, !tbaa !4
  br i1 %cmp6.7, label %for.inc.7, label %L20.7

L20.7:                                            ; preds = %for.inc.6
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %L20.7, %for.inc.6
  %.sink62 = phi float [ %30, %L20.7 ], [ %29, %for.inc.6 ]
  %mul17.7 = fmul float %29, %.sink62
  %arrayidx19.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %31 = load float, float* %arrayidx19.7, align 4, !tbaa !4
  %add20.7 = fadd float %31, %mul17.7
  store float %add20.7, float* %arrayidx19.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !346
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s451(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s451, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.027 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call16 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call17 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s451, i64 0, i64 0)) #11
  ret float %call17

for.cond.cleanup4:                                ; preds = %for.body5
  %call12 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc14 = add nuw nsw i32 %nl.027, 1
  %exitcond.not = icmp eq i32 %inc14, 20000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !347

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %call6 = tail call float @sinf(float %0) #11
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx8, align 32, !tbaa !4
  %call9 = tail call float @cosf(float %1) #11
  %add = fadd float %call6, %call9
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx11, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %call6.1 = tail call float @sinf(float %2) #11
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %call9.1 = tail call float @cosf(float %3) #11
  %add.1 = fadd float %call6.1, %call9.1
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %4 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %call6.2 = tail call float @sinf(float %4) #11
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %5 = load float, float* %arrayidx8.2, align 8, !tbaa !4
  %call9.2 = tail call float @cosf(float %5) #11
  %add.2 = fadd float %call6.2, %call9.2
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %6 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %call6.3 = tail call float @sinf(float %6) #11
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %7 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %call9.3 = tail call float @cosf(float %7) #11
  %add.3 = fadd float %call6.3, %call9.3
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %8 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %call6.4 = tail call float @sinf(float %8) #11
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %9 = load float, float* %arrayidx8.4, align 16, !tbaa !4
  %call9.4 = tail call float @cosf(float %9) #11
  %add.4 = fadd float %call6.4, %call9.4
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %10 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %call6.5 = tail call float @sinf(float %10) #11
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %11 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %call9.5 = tail call float @cosf(float %11) #11
  %add.5 = fadd float %call6.5, %call9.5
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %12 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %call6.6 = tail call float @sinf(float %12) #11
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %13 = load float, float* %arrayidx8.6, align 8, !tbaa !4
  %call9.6 = tail call float @cosf(float %13) #11
  %add.6 = fadd float %call6.6, %call9.6
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %14 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %call6.7 = tail call float @sinf(float %14) #11
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %15 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %call9.7 = tail call float @cosf(float %15) #11
  %add.7 = fadd float %call6.7, %call9.7
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !348
}

; Function Attrs: nofree nounwind optsize
declare dso_local float @sinf(float) local_unnamed_addr #2

; Function Attrs: nofree nounwind optsize
declare dso_local float @cosf(float) local_unnamed_addr #2

; Function Attrs: nounwind optsize uwtable
define dso_local float @s452(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s452, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.027 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s452, i64 0, i64 0)) #11
  ret float %call16

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.027, 1
  %exitcond.not = icmp eq i32 %inc13, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !349

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %2 = trunc i64 %indvars.iv.next to i32
  %conv = sitofp i32 %2 to float
  %mul = fmul float %1, %conv
  %add8 = fadd float %0, %mul
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add8, float* %arrayidx10, align 32, !tbaa !4
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %5 = trunc i64 %indvars.iv.next.1 to i32
  %conv.1 = sitofp i32 %5 to float
  %mul.1 = fmul float %4, %conv.1
  %add8.1 = fadd float %3, %mul.1
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add8.1, float* %arrayidx10.1, align 4, !tbaa !4
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %8 = trunc i64 %indvars.iv.next.2 to i32
  %conv.2 = sitofp i32 %8 to float
  %mul.2 = fmul float %7, %conv.2
  %add8.2 = fadd float %6, %mul.2
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add8.2, float* %arrayidx10.2, align 8, !tbaa !4
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %11 = trunc i64 %indvars.iv.next.3 to i32
  %conv.3 = sitofp i32 %11 to float
  %mul.3 = fmul float %10, %conv.3
  %add8.3 = fadd float %9, %mul.3
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add8.3, float* %arrayidx10.3, align 4, !tbaa !4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %14 = trunc i64 %indvars.iv.next.4 to i32
  %conv.4 = sitofp i32 %14 to float
  %mul.4 = fmul float %13, %conv.4
  %add8.4 = fadd float %12, %mul.4
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add8.4, float* %arrayidx10.4, align 16, !tbaa !4
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %17 = trunc i64 %indvars.iv.next.5 to i32
  %conv.5 = sitofp i32 %17 to float
  %mul.5 = fmul float %16, %conv.5
  %add8.5 = fadd float %15, %mul.5
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add8.5, float* %arrayidx10.5, align 4, !tbaa !4
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %20 = trunc i64 %indvars.iv.next.6 to i32
  %conv.6 = sitofp i32 %20 to float
  %mul.6 = fmul float %19, %conv.6
  %add8.6 = fadd float %18, %mul.6
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add8.6, float* %arrayidx10.6, align 8, !tbaa !4
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %23 = trunc i64 %indvars.iv.next.7 to i32
  %conv.7 = sitofp i32 %23 to float
  %mul.7 = fmul float %22, %conv.7
  %add8.7 = fadd float %21, %mul.7
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add8.7, float* %arrayidx10.7, align 4, !tbaa !4
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !350
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s453(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s453, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.025 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call12 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call13 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s453, i64 0, i64 0)) #11
  ret float %call13

for.cond.cleanup4:                                ; preds = %for.body5
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc10 = add nuw nsw i32 %nl.025, 1
  %exitcond.not = icmp eq i32 %inc10, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !351

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %s.023 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add.7, %for.body5 ]
  %add = fadd float %s.023, 2.000000e+00
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %mul = fmul float %add, %0
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %mul, float* %arrayidx7, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %add.1 = fadd float %add, 2.000000e+00
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %mul.1 = fmul float %add.1, %1
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %mul.1, float* %arrayidx7.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %add.2 = fadd float %add.1, 2.000000e+00
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %mul.2 = fmul float %add.2, %2
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %mul.2, float* %arrayidx7.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %add.3 = fadd float %add.2, 2.000000e+00
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %mul.3 = fmul float %add.3, %3
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %mul.3, float* %arrayidx7.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %add.4 = fadd float %add.3, 2.000000e+00
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %mul.4 = fmul float %add.4, %4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %mul.4, float* %arrayidx7.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %add.5 = fadd float %add.4, 2.000000e+00
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %mul.5 = fmul float %add.5, %5
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %mul.5, float* %arrayidx7.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %add.6 = fadd float %add.5, 2.000000e+00
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %mul.6 = fmul float %add.6, %6
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %mul.6, float* %arrayidx7.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %add.7 = fadd float %add.6, 2.000000e+00
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %mul.7 = fmul float %add.7, %7
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %mul.7, float* %arrayidx7.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !352
}

; Function Attrs: norecurse nounwind optsize readnone uwtable
define dso_local i32 @s471s() local_unnamed_addr #7 {
entry:
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s471(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s471, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.044 = phi i32 [ 0, %entry ], [ %inc25, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call27 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call28 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s471, i64 0, i64 0)) #11
  ret float %call28

for.cond.cleanup4:                                ; preds = %for.body5
  %call23 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc25 = add nuw nsw i32 %nl.044, 1
  %exitcond.not = icmp eq i32 %inc25, 50000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !353

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %1, %1
  %add = fadd float %0, %mul
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @x, i64 0, i64 %indvar
  store float %add, float* %arrayidx11, align 32, !tbaa !4
  %arrayidx14 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx14, align 32, !tbaa !4
  %arrayidx18 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvar
  %3 = load float, float* %arrayidx18, align 32, !tbaa !4
  %mul19 = fmul float %1, %3
  %add20 = fadd float %2, %mul19
  store float %add20, float* %arrayidx, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !354
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s481(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s481, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.029 = phi i32 [ 0, %entry ], [ %inc15, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call17 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call18 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s481, i64 0, i64 0)) #11
  ret float %call18

for.cond.cleanup4:                                ; preds = %if.end.7
  %call13 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc15 = add nuw nsw i32 %nl.029, 1
  %exitcond.not = icmp eq i32 %inc15, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !355

for.body5:                                        ; preds = %if.end.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %if.end.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp olt float %0, 0.000000e+00
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %if.end.6, %if.end.5, %if.end.4, %if.end.3, %if.end.2, %if.end.1, %if.end, %for.body5
  tail call void @exit(i32 0) #13
  unreachable

if.end:                                           ; preds = %for.body5
  %arrayidx8 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx8, align 32, !tbaa !4
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx10, align 32, !tbaa !4
  %mul = fmul float %1, %2
  %arrayidx12 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx12, align 32, !tbaa !4
  %add = fadd float %3, %mul
  store float %add, float* %arrayidx12, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %4 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp olt float %4, 0.000000e+00
  br i1 %cmp6.1, label %if.then, label %if.end.1

if.end.1:                                         ; preds = %if.end
  %arrayidx8.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx8.1, align 4, !tbaa !4
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %6 = load float, float* %arrayidx10.1, align 4, !tbaa !4
  %mul.1 = fmul float %5, %6
  %arrayidx12.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %7 = load float, float* %arrayidx12.1, align 4, !tbaa !4
  %add.1 = fadd float %7, %mul.1
  store float %add.1, float* %arrayidx12.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp olt float %8, 0.000000e+00
  br i1 %cmp6.2, label %if.then, label %if.end.2

if.end.2:                                         ; preds = %if.end.1
  %arrayidx8.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %9 = load float, float* %arrayidx8.2, align 8, !tbaa !4
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %10 = load float, float* %arrayidx10.2, align 8, !tbaa !4
  %mul.2 = fmul float %9, %10
  %arrayidx12.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %11 = load float, float* %arrayidx12.2, align 8, !tbaa !4
  %add.2 = fadd float %11, %mul.2
  store float %add.2, float* %arrayidx12.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %12 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp olt float %12, 0.000000e+00
  br i1 %cmp6.3, label %if.then, label %if.end.3

if.end.3:                                         ; preds = %if.end.2
  %arrayidx8.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %13 = load float, float* %arrayidx8.3, align 4, !tbaa !4
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %14 = load float, float* %arrayidx10.3, align 4, !tbaa !4
  %mul.3 = fmul float %13, %14
  %arrayidx12.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %15 = load float, float* %arrayidx12.3, align 4, !tbaa !4
  %add.3 = fadd float %15, %mul.3
  store float %add.3, float* %arrayidx12.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %16 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp olt float %16, 0.000000e+00
  br i1 %cmp6.4, label %if.then, label %if.end.4

if.end.4:                                         ; preds = %if.end.3
  %arrayidx8.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %17 = load float, float* %arrayidx8.4, align 16, !tbaa !4
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %18 = load float, float* %arrayidx10.4, align 16, !tbaa !4
  %mul.4 = fmul float %17, %18
  %arrayidx12.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %19 = load float, float* %arrayidx12.4, align 16, !tbaa !4
  %add.4 = fadd float %19, %mul.4
  store float %add.4, float* %arrayidx12.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %20 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp olt float %20, 0.000000e+00
  br i1 %cmp6.5, label %if.then, label %if.end.5

if.end.5:                                         ; preds = %if.end.4
  %arrayidx8.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %21 = load float, float* %arrayidx8.5, align 4, !tbaa !4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %22 = load float, float* %arrayidx10.5, align 4, !tbaa !4
  %mul.5 = fmul float %21, %22
  %arrayidx12.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %23 = load float, float* %arrayidx12.5, align 4, !tbaa !4
  %add.5 = fadd float %23, %mul.5
  store float %add.5, float* %arrayidx12.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %24 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp olt float %24, 0.000000e+00
  br i1 %cmp6.6, label %if.then, label %if.end.6

if.end.6:                                         ; preds = %if.end.5
  %arrayidx8.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %25 = load float, float* %arrayidx8.6, align 8, !tbaa !4
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %26 = load float, float* %arrayidx10.6, align 8, !tbaa !4
  %mul.6 = fmul float %25, %26
  %arrayidx12.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %27 = load float, float* %arrayidx12.6, align 8, !tbaa !4
  %add.6 = fadd float %27, %mul.6
  store float %add.6, float* %arrayidx12.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %28 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp olt float %28, 0.000000e+00
  br i1 %cmp6.7, label %if.then, label %if.end.7

if.end.7:                                         ; preds = %if.end.6
  %arrayidx8.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %29 = load float, float* %arrayidx8.7, align 4, !tbaa !4
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %30 = load float, float* %arrayidx10.7, align 4, !tbaa !4
  %mul.7 = fmul float %29, %30
  %arrayidx12.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %31 = load float, float* %arrayidx12.7, align 4, !tbaa !4
  %add.7 = fadd float %31, %mul.7
  store float %add.7, float* %arrayidx12.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !356
}

; Function Attrs: noreturn nounwind optsize
declare dso_local void @exit(i32) local_unnamed_addr #8

; Function Attrs: nounwind optsize uwtable
define dso_local float @s482(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s482, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %cleanup, %entry
  %nl.033 = phi i32 [ 0, %entry ], [ %inc17, %cleanup ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %cleanup
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call20 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call21 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s482, i64 0, i64 0)) #11
  ret float %call21

for.cond2:                                        ; preds = %for.body5
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %0 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next
  %1 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %mul.1 = fmul float %0, %1
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  %2 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %add.1 = fadd float %2, %mul.1
  store float %add.1, float* %arrayidx9.1, align 4, !tbaa !4
  %cmp14.1 = fcmp ogt float %1, %0
  br i1 %cmp14.1, label %cleanup, label %for.cond2.1

for.body5:                                        ; preds = %for.cond2.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.cond2.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %3, %4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %5 = load float, float* %arrayidx9, align 32, !tbaa !4
  %add = fadd float %5, %mul
  store float %add, float* %arrayidx9, align 32, !tbaa !4
  %cmp14 = fcmp ogt float %4, %3
  br i1 %cmp14, label %cleanup, label %for.cond2

cleanup:                                          ; preds = %for.cond2.7, %for.cond2.6, %for.cond2.5, %for.cond2.4, %for.cond2.3, %for.cond2.2, %for.cond2.1, %for.body5, %for.cond2
  %call15 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc17 = add nuw nsw i32 %nl.033, 1
  %exitcond.not = icmp eq i32 %inc17, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !357

for.cond2.1:                                      ; preds = %for.cond2
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.1
  %7 = load float, float* %arrayidx7.2, align 8, !tbaa !4
  %mul.2 = fmul float %6, %7
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %add.2 = fadd float %8, %mul.2
  store float %add.2, float* %arrayidx9.2, align 8, !tbaa !4
  %cmp14.2 = fcmp ogt float %7, %6
  br i1 %cmp14.2, label %cleanup, label %for.cond2.2

for.cond2.2:                                      ; preds = %for.cond2.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.2
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %mul.3 = fmul float %9, %10
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %add.3 = fadd float %11, %mul.3
  store float %add.3, float* %arrayidx9.3, align 4, !tbaa !4
  %cmp14.3 = fcmp ogt float %10, %9
  br i1 %cmp14.3, label %cleanup, label %for.cond2.3

for.cond2.3:                                      ; preds = %for.cond2.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.3
  %13 = load float, float* %arrayidx7.4, align 16, !tbaa !4
  %mul.4 = fmul float %12, %13
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %add.4 = fadd float %14, %mul.4
  store float %add.4, float* %arrayidx9.4, align 16, !tbaa !4
  %cmp14.4 = fcmp ogt float %13, %12
  br i1 %cmp14.4, label %cleanup, label %for.cond2.4

for.cond2.4:                                      ; preds = %for.cond2.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.4
  %16 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %mul.5 = fmul float %15, %16
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %add.5 = fadd float %17, %mul.5
  store float %add.5, float* %arrayidx9.5, align 4, !tbaa !4
  %cmp14.5 = fcmp ogt float %16, %15
  br i1 %cmp14.5, label %cleanup, label %for.cond2.5

for.cond2.5:                                      ; preds = %for.cond2.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.5
  %19 = load float, float* %arrayidx7.6, align 8, !tbaa !4
  %mul.6 = fmul float %18, %19
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %add.6 = fadd float %20, %mul.6
  store float %add.6, float* %arrayidx9.6, align 8, !tbaa !4
  %cmp14.6 = fcmp ogt float %19, %18
  br i1 %cmp14.6, label %cleanup, label %for.cond2.6

for.cond2.6:                                      ; preds = %for.cond2.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv.next.6
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %mul.7 = fmul float %21, %22
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %add.7 = fadd float %23, %mul.7
  store float %add.7, float* %arrayidx9.7, align 4, !tbaa !4
  %cmp14.7 = fcmp ogt float %22, %21
  br i1 %cmp14.7, label %cleanup, label %for.cond2.7

for.cond2.7:                                      ; preds = %for.cond2.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %cleanup, label %for.body5, !llvm.loop !358
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s491(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s491, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.032 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call18 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call19 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.s491, i64 0, i64 0)) #11
  ret float %call19

for.cond.cleanup4:                                ; preds = %for.body5
  %call14 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc16 = add nuw nsw i32 %nl.032, 1
  %exitcond.not = icmp eq i32 %inc16, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !359

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %3 = load float, float* %arrayidx7, align 32, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvar
  %4 = load float, float* %arrayidx9, align 32, !tbaa !4
  %mul = fmul float %3, %4
  %add = fadd float %2, %mul
  %arrayidx11 = getelementptr inbounds i32, i32* %1, i64 %indvar
  %5 = load i32, i32* %arrayidx11, align 4, !tbaa !97
  %idxprom12 = sext i32 %5 to i64
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom12
  store float %add, float* %arrayidx13, align 4, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !360
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s4112(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to %struct.anon.2**
  %1 = load %struct.anon.2*, %struct.anon.2** %0, align 8, !tbaa !49
  %a = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1, i64 0, i32 0
  %2 = load i32*, i32** %a, align 8, !tbaa !361
  %b = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1, i64 0, i32 1
  %3 = load float, float* %b, align 8, !tbaa !363
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s4112, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.029 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s4112, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.029, 1
  %exitcond.not = icmp eq i32 %inc12, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !364

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %indvar
  %4 = load i32, i32* %arrayidx, align 4, !tbaa !97
  %idxprom6 = sext i32 %4 to i64
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6
  %5 = load float, float* %arrayidx7, align 4, !tbaa !4
  %mul = fmul float %3, %5
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %6 = load float, float* %arrayidx9, align 32, !tbaa !4
  %add = fadd float %6, %mul
  store float %add, float* %arrayidx9, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !365
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s4113(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s4113, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.032 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call18 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call19 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s4113, i64 0, i64 0)) #11
  ret float %call19

for.cond.cleanup4:                                ; preds = %for.body5
  %call14 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc16 = add nuw nsw i32 %nl.032, 1
  %exitcond.not = icmp eq i32 %inc16, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !366

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %indvar
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !97
  %idxprom6 = sext i32 %2 to i64
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6
  %3 = load float, float* %arrayidx7, align 4, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %4 = load float, float* %arrayidx9, align 32, !tbaa !4
  %add = fadd float %3, %4
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom6
  store float %add, float* %arrayidx13, align 4, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !367
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s4114(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to %struct.anon.3**
  %1 = load %struct.anon.3*, %struct.anon.3** %0, align 8, !tbaa !49
  %a = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1, i64 0, i32 0
  %2 = load i32*, i32** %a, align 8, !tbaa !368
  %b = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1, i64 0, i32 1
  %3 = load i32, i32* %b, align 8, !tbaa !370
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s4114, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %cmp340 = icmp slt i32 %3, 32001
  %4 = add i32 %3, -1
  %5 = sext i32 %4 to i64
  %6 = icmp sgt i32 %4, 31999
  %smax = select i1 %6, i32 %4, i32 31999
  %7 = add nuw i32 %smax, 2
  %8 = sub i32 %7, %3
  %9 = add nuw i32 %smax, 1
  %10 = sub i32 %9, %3
  %xtraiter = and i32 %8, 7
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  %11 = icmp ult i32 %10, 7
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call22 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call23 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s4114, i64 0, i64 0)) #11
  ret float %call23

for.body:                                         ; preds = %for.cond.cleanup4, %entry
  %nl.042 = phi i32 [ 0, %entry ], [ %inc20, %for.cond.cleanup4 ]
  br i1 %cmp340, label %for.body5.preheader, label %for.cond.cleanup4

for.body5.preheader:                              ; preds = %for.body
  br i1 %lcmp.mod.not, label %for.body5.prol.loopexit, label %for.body5.prol.preheader

for.body5.prol.preheader:                         ; preds = %for.body5.preheader
  br label %for.body5.prol

for.body5.prol:                                   ; preds = %for.body5.prol.preheader, %for.body5.prol
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %for.body5.prol ], [ %5, %for.body5.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body5.prol ], [ %xtraiter, %for.body5.prol.preheader ]
  %arrayidx.prol = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.prol
  %12 = load i32, i32* %arrayidx.prol, align 4, !tbaa !97
  %arrayidx7.prol = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.prol
  %13 = load float, float* %arrayidx7.prol, align 4, !tbaa !4
  %sub9.prol = sub i32 31999, %12
  %idxprom10.prol = sext i32 %sub9.prol to i64
  %arrayidx11.prol = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.prol
  %14 = load float, float* %arrayidx11.prol, align 4, !tbaa !4
  %arrayidx13.prol = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.prol
  %15 = load float, float* %arrayidx13.prol, align 4, !tbaa !4
  %mul.prol = fmul float %14, %15
  %add14.prol = fadd float %13, %mul.prol
  %arrayidx16.prol = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.prol
  store float %add14.prol, float* %arrayidx16.prol, align 4, !tbaa !4
  %indvars.iv.next.prol = add nsw i64 %indvars.iv.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body5.prol.loopexit.loopexit, label %for.body5.prol, !llvm.loop !371

for.body5.prol.loopexit.loopexit:                 ; preds = %for.body5.prol
  %indvars.iv.next.prol.lcssa = phi i64 [ %indvars.iv.next.prol, %for.body5.prol ]
  br label %for.body5.prol.loopexit

for.body5.prol.loopexit:                          ; preds = %for.body5.prol.loopexit.loopexit, %for.body5.preheader
  %indvars.iv.unr = phi i64 [ %5, %for.body5.preheader ], [ %indvars.iv.next.prol.lcssa, %for.body5.prol.loopexit.loopexit ]
  br i1 %11, label %for.cond.cleanup4, label %for.body5.preheader1

for.body5.preheader1:                             ; preds = %for.body5.prol.loopexit
  br label %for.body5

for.cond.cleanup4.loopexit:                       ; preds = %for.body5
  br label %for.cond.cleanup4

for.cond.cleanup4:                                ; preds = %for.cond.cleanup4.loopexit, %for.body5.prol.loopexit, %for.body
  %call18 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc20 = add nuw nsw i32 %nl.042, 1
  %exitcond.not = icmp eq i32 %inc20, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !372

for.body5:                                        ; preds = %for.body5.preheader1, %for.body5
  %indvars.iv = phi i64 [ %indvars.iv.next.7, %for.body5 ], [ %indvars.iv.unr, %for.body5.preheader1 ]
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %indvars.iv
  %16 = load i32, i32* %arrayidx, align 4, !tbaa !97
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %17 = load float, float* %arrayidx7, align 4, !tbaa !4
  %sub9 = sub i32 31999, %16
  %idxprom10 = sext i32 %sub9 to i64
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10
  %18 = load float, float* %arrayidx11, align 4, !tbaa !4
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %19 = load float, float* %arrayidx13, align 4, !tbaa !4
  %mul = fmul float %18, %19
  %add14 = fadd float %17, %mul
  %arrayidx16 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add14, float* %arrayidx16, align 4, !tbaa !4
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next
  %20 = load i32, i32* %arrayidx.1, align 4, !tbaa !97
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %21 = load float, float* %arrayidx7.1, align 4, !tbaa !4
  %sub9.1 = sub i32 31999, %20
  %idxprom10.1 = sext i32 %sub9.1 to i64
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.1
  %22 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %arrayidx13.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %23 = load float, float* %arrayidx13.1, align 4, !tbaa !4
  %mul.1 = fmul float %22, %23
  %add14.1 = fadd float %21, %mul.1
  %arrayidx16.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add14.1, float* %arrayidx16.1, align 4, !tbaa !4
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.1
  %24 = load i32, i32* %arrayidx.2, align 4, !tbaa !97
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %25 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %sub9.2 = sub i32 31999, %24
  %idxprom10.2 = sext i32 %sub9.2 to i64
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.2
  %26 = load float, float* %arrayidx11.2, align 4, !tbaa !4
  %arrayidx13.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %27 = load float, float* %arrayidx13.2, align 4, !tbaa !4
  %mul.2 = fmul float %26, %27
  %add14.2 = fadd float %25, %mul.2
  %arrayidx16.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add14.2, float* %arrayidx16.2, align 4, !tbaa !4
  %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.2
  %28 = load i32, i32* %arrayidx.3, align 4, !tbaa !97
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %29 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %sub9.3 = sub i32 31999, %28
  %idxprom10.3 = sext i32 %sub9.3 to i64
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.3
  %30 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %arrayidx13.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %31 = load float, float* %arrayidx13.3, align 4, !tbaa !4
  %mul.3 = fmul float %30, %31
  %add14.3 = fadd float %29, %mul.3
  %arrayidx16.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add14.3, float* %arrayidx16.3, align 4, !tbaa !4
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.3
  %32 = load i32, i32* %arrayidx.4, align 4, !tbaa !97
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %33 = load float, float* %arrayidx7.4, align 4, !tbaa !4
  %sub9.4 = sub i32 31999, %32
  %idxprom10.4 = sext i32 %sub9.4 to i64
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.4
  %34 = load float, float* %arrayidx11.4, align 4, !tbaa !4
  %arrayidx13.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %35 = load float, float* %arrayidx13.4, align 4, !tbaa !4
  %mul.4 = fmul float %34, %35
  %add14.4 = fadd float %33, %mul.4
  %arrayidx16.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add14.4, float* %arrayidx16.4, align 4, !tbaa !4
  %indvars.iv.next.4 = add nsw i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.4
  %36 = load i32, i32* %arrayidx.5, align 4, !tbaa !97
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %37 = load float, float* %arrayidx7.5, align 4, !tbaa !4
  %sub9.5 = sub i32 31999, %36
  %idxprom10.5 = sext i32 %sub9.5 to i64
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.5
  %38 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %arrayidx13.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %39 = load float, float* %arrayidx13.5, align 4, !tbaa !4
  %mul.5 = fmul float %38, %39
  %add14.5 = fadd float %37, %mul.5
  %arrayidx16.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add14.5, float* %arrayidx16.5, align 4, !tbaa !4
  %indvars.iv.next.5 = add nsw i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.5
  %40 = load i32, i32* %arrayidx.6, align 4, !tbaa !97
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %41 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %sub9.6 = sub i32 31999, %40
  %idxprom10.6 = sext i32 %sub9.6 to i64
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.6
  %42 = load float, float* %arrayidx11.6, align 4, !tbaa !4
  %arrayidx13.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %43 = load float, float* %arrayidx13.6, align 4, !tbaa !4
  %mul.6 = fmul float %42, %43
  %add14.6 = fadd float %41, %mul.6
  %arrayidx16.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add14.6, float* %arrayidx16.6, align 4, !tbaa !4
  %indvars.iv.next.6 = add nsw i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.6
  %44 = load i32, i32* %arrayidx.7, align 4, !tbaa !97
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %45 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %sub9.7 = sub i32 31999, %44
  %idxprom10.7 = sext i32 %sub9.7 to i64
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom10.7
  %46 = load float, float* %arrayidx11.7, align 4, !tbaa !4
  %arrayidx13.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %47 = load float, float* %arrayidx13.7, align 4, !tbaa !4
  %mul.7 = fmul float %46, %47
  %add14.7 = fadd float %45, %mul.7
  %arrayidx16.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add14.7, float* %arrayidx16.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nsw i64 %indvars.iv, 8
  %cmp3.7 = icmp slt i64 %indvars.iv, 31992
  br i1 %cmp3.7, label %for.body5, label %for.cond.cleanup4.loopexit, !llvm.loop !373
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s4115(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s4115, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.028 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %add.7.lcssa.lcssa = phi float [ %add.7.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %add.7.lcssa.lcssa

for.cond.cleanup4:                                ; preds = %for.body5
  %add.7.lcssa = phi float [ %add, %for.body5 ]
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.028, 1
  %exitcond.not = icmp eq i32 %inc12, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !374

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %sum.126 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds i32, i32* %1, i64 %indvar
  %3 = load i32, i32* %arrayidx7, align 4, !tbaa !97
  %idxprom8 = sext i32 %3 to i64
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom8
  %4 = load float, float* %arrayidx9, align 4, !tbaa !4
  %mul = fmul float %2, %4
  %add = fadd float %sum.126, %mul
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !375
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s4116(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to %struct.anon.4**
  %1 = load %struct.anon.4*, %struct.anon.4** %0, align 8, !tbaa !49
  %a = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1, i64 0, i32 0
  %2 = load i32*, i32** %a, align 8, !tbaa !376
  %b = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1, i64 0, i32 1
  %3 = load i32, i32* %b, align 8, !tbaa !378
  %c = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1, i64 0, i32 2
  %4 = load i32, i32* %c, align 4, !tbaa !379
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s4116, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  %sub = add nsw i32 %3, -1
  %idxprom6 = sext i32 %sub to i64
  %5 = sext i32 %4 to i64
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.038 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %add12.6.lcssa.lcssa = phi float [ %add12.6.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call18 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %add12.6.lcssa.lcssa

for.cond.cleanup4:                                ; preds = %for.body5
  %add12.6.lcssa = phi float [ %add12.6, %for.body5 ]
  %call14 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc16 = add nuw nsw i32 %nl.038, 1
  %exitcond.not = icmp eq i32 %inc16, 10000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !380

for.body5:                                        ; preds = %for.body5.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5.7 ]
  %sum.136 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add12.7, %for.body5.7 ]
  %6 = add nsw i64 %indvars.iv, %5
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %6
  %7 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx9 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv
  %8 = load i32, i32* %arrayidx9, align 4, !tbaa !97
  %idxprom10 = sext i32 %8 to i64
  %arrayidx11 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10
  %9 = load float, float* %arrayidx11, align 4, !tbaa !4
  %mul = fmul float %7, %9
  %add12 = fadd float %sum.136, %mul
  %indvars.iv.next = or i64 %indvars.iv, 1
  %10 = add nsw i64 %indvars.iv.next, %5
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %10
  %11 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %arrayidx9.1 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next
  %12 = load i32, i32* %arrayidx9.1, align 4, !tbaa !97
  %idxprom10.1 = sext i32 %12 to i64
  %arrayidx11.1 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.1
  %13 = load float, float* %arrayidx11.1, align 4, !tbaa !4
  %mul.1 = fmul float %11, %13
  %add12.1 = fadd float %add12, %mul.1
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %14 = add nsw i64 %indvars.iv.next.1, %5
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %14
  %15 = load float, float* %arrayidx.2, align 4, !tbaa !4
  %arrayidx9.2 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.1
  %16 = load i32, i32* %arrayidx9.2, align 4, !tbaa !97
  %idxprom10.2 = sext i32 %16 to i64
  %arrayidx11.2 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.2
  %17 = load float, float* %arrayidx11.2, align 4, !tbaa !4
  %mul.2 = fmul float %15, %17
  %add12.2 = fadd float %add12.1, %mul.2
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %18 = add nsw i64 %indvars.iv.next.2, %5
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %18
  %19 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %arrayidx9.3 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.2
  %20 = load i32, i32* %arrayidx9.3, align 4, !tbaa !97
  %idxprom10.3 = sext i32 %20 to i64
  %arrayidx11.3 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.3
  %21 = load float, float* %arrayidx11.3, align 4, !tbaa !4
  %mul.3 = fmul float %19, %21
  %add12.3 = fadd float %add12.2, %mul.3
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %22 = add nsw i64 %indvars.iv.next.3, %5
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %22
  %23 = load float, float* %arrayidx.4, align 4, !tbaa !4
  %arrayidx9.4 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.3
  %24 = load i32, i32* %arrayidx9.4, align 4, !tbaa !97
  %idxprom10.4 = sext i32 %24 to i64
  %arrayidx11.4 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.4
  %25 = load float, float* %arrayidx11.4, align 4, !tbaa !4
  %mul.4 = fmul float %23, %25
  %add12.4 = fadd float %add12.3, %mul.4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %26 = add nsw i64 %indvars.iv.next.4, %5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %26
  %27 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %arrayidx9.5 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.4
  %28 = load i32, i32* %arrayidx9.5, align 4, !tbaa !97
  %idxprom10.5 = sext i32 %28 to i64
  %arrayidx11.5 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.5
  %29 = load float, float* %arrayidx11.5, align 4, !tbaa !4
  %mul.5 = fmul float %27, %29
  %add12.5 = fadd float %add12.4, %mul.5
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %30 = add nsw i64 %indvars.iv.next.5, %5
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %30
  %31 = load float, float* %arrayidx.6, align 4, !tbaa !4
  %arrayidx9.6 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.5
  %32 = load i32, i32* %arrayidx9.6, align 4, !tbaa !97
  %idxprom10.6 = sext i32 %32 to i64
  %arrayidx11.6 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.6
  %33 = load float, float* %arrayidx11.6, align 4, !tbaa !4
  %mul.6 = fmul float %31, %33
  %add12.6 = fadd float %add12.5, %mul.6
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %exitcond.6.not = icmp eq i64 %indvars.iv.next.6, 255
  br i1 %exitcond.6.not, label %for.cond.cleanup4, label %for.body5.7, !llvm.loop !381

for.body5.7:                                      ; preds = %for.body5
  %34 = add nsw i64 %indvars.iv.next.6, %5
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %34
  %35 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %arrayidx9.7 = getelementptr inbounds i32, i32* %2, i64 %indvars.iv.next.6
  %36 = load i32, i32* %arrayidx9.7, align 4, !tbaa !97
  %idxprom10.7 = sext i32 %36 to i64
  %arrayidx11.7 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 %idxprom6, i64 %idxprom10.7
  %37 = load float, float* %arrayidx11.7, align 4, !tbaa !4
  %mul.7 = fmul float %35, %37
  %add12.7 = fadd float %add12.6, %mul.7
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  br label %for.body5, !llvm.loop !382
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s4117(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s4117, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.028 = phi i32 [ 0, %entry ], [ %inc14, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call16 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call17 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s4117, i64 0, i64 0)) #11
  ret float %call17

for.cond.cleanup4:                                ; preds = %for.body5
  %call12 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc14 = add nuw nsw i32 %nl.028, 1
  %exitcond.not = icmp eq i32 %inc14, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !383

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %div = lshr exact i64 %indvars.iv, 1
  %idxprom6 = and i64 %div, 2147483644
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6
  %1 = load float, float* %arrayidx7, align 16, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %mul = fmul float %1, %2
  %add = fadd float %0, %mul
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %add, float* %arrayidx11, align 32, !tbaa !4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %3 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %div.1 = lshr exact i64 %indvars.iv, 1
  %idxprom6.1 = and i64 %div.1, 2147483644
  %arrayidx7.1 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.1
  %4 = load float, float* %arrayidx7.1, align 16, !tbaa !4
  %arrayidx9.1 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next
  %5 = load float, float* %arrayidx9.1, align 4, !tbaa !4
  %mul.1 = fmul float %4, %5
  %add.1 = fadd float %3, %mul.1
  %arrayidx11.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %add.1, float* %arrayidx11.1, align 4, !tbaa !4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %6 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %div.2 = lshr exact i64 %indvars.iv.next.1, 1
  %idxprom6.2 = and i64 %div.2, 2147483645
  %arrayidx7.2 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.2
  %7 = load float, float* %arrayidx7.2, align 4, !tbaa !4
  %arrayidx9.2 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.1
  %8 = load float, float* %arrayidx9.2, align 8, !tbaa !4
  %mul.2 = fmul float %7, %8
  %add.2 = fadd float %6, %mul.2
  %arrayidx11.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %add.2, float* %arrayidx11.2, align 8, !tbaa !4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %9 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %div.3 = lshr i64 %indvars.iv.next.2, 1
  %idxprom6.3 = and i64 %div.3, 2147483645
  %arrayidx7.3 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.3
  %10 = load float, float* %arrayidx7.3, align 4, !tbaa !4
  %arrayidx9.3 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.2
  %11 = load float, float* %arrayidx9.3, align 4, !tbaa !4
  %mul.3 = fmul float %10, %11
  %add.3 = fadd float %9, %mul.3
  %arrayidx11.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %add.3, float* %arrayidx11.3, align 4, !tbaa !4
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %12 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %div.4 = lshr exact i64 %indvars.iv.next.3, 1
  %idxprom6.4 = and i64 %div.4, 2147483646
  %arrayidx7.4 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.4
  %13 = load float, float* %arrayidx7.4, align 8, !tbaa !4
  %arrayidx9.4 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.3
  %14 = load float, float* %arrayidx9.4, align 16, !tbaa !4
  %mul.4 = fmul float %13, %14
  %add.4 = fadd float %12, %mul.4
  %arrayidx11.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %add.4, float* %arrayidx11.4, align 16, !tbaa !4
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %15 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %div.5 = lshr i64 %indvars.iv.next.4, 1
  %idxprom6.5 = and i64 %div.5, 2147483646
  %arrayidx7.5 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.5
  %16 = load float, float* %arrayidx7.5, align 8, !tbaa !4
  %arrayidx9.5 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.4
  %17 = load float, float* %arrayidx9.5, align 4, !tbaa !4
  %mul.5 = fmul float %16, %17
  %add.5 = fadd float %15, %mul.5
  %arrayidx11.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %add.5, float* %arrayidx11.5, align 4, !tbaa !4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %18 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %div.6 = lshr exact i64 %indvars.iv.next.5, 1
  %idxprom6.6 = and i64 %div.6, 2147483647
  %arrayidx7.6 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.6
  %19 = load float, float* %arrayidx7.6, align 4, !tbaa !4
  %arrayidx9.6 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.5
  %20 = load float, float* %arrayidx9.6, align 8, !tbaa !4
  %mul.6 = fmul float %19, %20
  %add.6 = fadd float %18, %mul.6
  %arrayidx11.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %add.6, float* %arrayidx11.6, align 8, !tbaa !4
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %21 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %div.7 = lshr i64 %indvars.iv.next.6, 1
  %idxprom6.7 = and i64 %div.7, 2147483647
  %arrayidx7.7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %idxprom6.7
  %22 = load float, float* %arrayidx7.7, align 4, !tbaa !4
  %arrayidx9.7 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv.next.6
  %23 = load float, float* %arrayidx9.7, align 4, !tbaa !4
  %mul.7 = fmul float %22, %23
  %add.7 = fadd float %21, %mul.7
  %arrayidx11.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %add.7, float* %arrayidx11.7, align 4, !tbaa !4
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !384
}

; Function Attrs: norecurse nounwind optsize readnone uwtable
define dso_local float @f(float %a, float %b) local_unnamed_addr #7 {
entry:
  %mul = fmul float %a, %b
  ret float %mul
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @s4121(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s4121, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.026 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.s4121, i64 0, i64 0)) #11
  ret float %call16

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc13, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !385

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul.i = fmul float %0, %1
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx10, align 32, !tbaa !4
  %add = fadd float %2, %mul.i
  store float %add, float* %arrayidx10, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !386
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @va(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__func__.va, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond2.preheader, %entry
  %nl.022 = phi i32 [ 0, %entry ], [ %inc10, %for.cond2.preheader ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 64 dereferenceable(128000) bitcast ([32000 x float]* @a to i8*), i8* nonnull align 64 dereferenceable(128000) bitcast ([32000 x float]* @b to i8*), i64 128000, i1 false)
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc10 = add nuw nsw i32 %nl.022, 1
  %exitcond.not = icmp eq i32 %inc10, 1000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !387

for.cond.cleanup:                                 ; preds = %for.cond2.preheader
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call12 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call13 = tail call float @calc_checksum(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__func__.va, i64 0, i64 0)) #11
  ret float %call13
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @vag(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__.vag, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.026 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__.vag, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc12, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !388

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %indvar
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !97
  %idxprom6 = sext i32 %2 to i64
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %idxprom6
  %3 = load float, float* %arrayidx7, align 4, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  store float %3, float* %arrayidx9, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !389
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @vas(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__.vas, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.026 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__.vas, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc12, 200000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !390

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds i32, i32* %1, i64 %indvar
  %3 = load i32, i32* %arrayidx7, align 4, !tbaa !97
  %idxprom8 = sext i32 %3 to i64
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %idxprom8
  store float %2, float* %arrayidx9, align 4, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !391
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @vif(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__.vif, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.026 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__.vif, i64 0, i64 0)) #11
  ret float %call16

for.cond.cleanup4:                                ; preds = %for.inc.7
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc13, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !392

for.body5:                                        ; preds = %for.inc.7, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next.7, %for.inc.7 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %cmp6 = fcmp ogt float %0, 0.000000e+00
  br i1 %cmp6, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body5
  %arrayidx10 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  store float %0, float* %arrayidx10, align 32, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body5
  %indvars.iv.next = or i64 %indvars.iv, 1
  %arrayidx.1 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next
  %1 = load float, float* %arrayidx.1, align 4, !tbaa !4
  %cmp6.1 = fcmp ogt float %1, 0.000000e+00
  br i1 %cmp6.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %arrayidx10.1 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next
  store float %1, float* %arrayidx10.1, align 4, !tbaa !4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %arrayidx.2 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.1
  %2 = load float, float* %arrayidx.2, align 8, !tbaa !4
  %cmp6.2 = fcmp ogt float %2, 0.000000e+00
  br i1 %cmp6.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %arrayidx10.2 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.1
  store float %2, float* %arrayidx10.2, align 8, !tbaa !4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %arrayidx.3 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.2
  %3 = load float, float* %arrayidx.3, align 4, !tbaa !4
  %cmp6.3 = fcmp ogt float %3, 0.000000e+00
  br i1 %cmp6.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %arrayidx10.3 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.2
  store float %3, float* %arrayidx10.3, align 4, !tbaa !4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  %indvars.iv.next.3 = or i64 %indvars.iv, 4
  %arrayidx.4 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.3
  %4 = load float, float* %arrayidx.4, align 16, !tbaa !4
  %cmp6.4 = fcmp ogt float %4, 0.000000e+00
  br i1 %cmp6.4, label %if.then.4, label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %arrayidx10.4 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.3
  store float %4, float* %arrayidx10.4, align 16, !tbaa !4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %for.inc.3
  %indvars.iv.next.4 = or i64 %indvars.iv, 5
  %arrayidx.5 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.4
  %5 = load float, float* %arrayidx.5, align 4, !tbaa !4
  %cmp6.5 = fcmp ogt float %5, 0.000000e+00
  br i1 %cmp6.5, label %if.then.5, label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %arrayidx10.5 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.4
  store float %5, float* %arrayidx10.5, align 4, !tbaa !4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %for.inc.4
  %indvars.iv.next.5 = or i64 %indvars.iv, 6
  %arrayidx.6 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.5
  %6 = load float, float* %arrayidx.6, align 8, !tbaa !4
  %cmp6.6 = fcmp ogt float %6, 0.000000e+00
  br i1 %cmp6.6, label %if.then.6, label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %arrayidx10.6 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.5
  store float %6, float* %arrayidx10.6, align 8, !tbaa !4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %for.inc.5
  %indvars.iv.next.6 = or i64 %indvars.iv, 7
  %arrayidx.7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv.next.6
  %7 = load float, float* %arrayidx.7, align 4, !tbaa !4
  %cmp6.7 = fcmp ogt float %7, 0.000000e+00
  br i1 %cmp6.7, label %if.then.7, label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %arrayidx10.7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv.next.6
  store float %7, float* %arrayidx10.7, align 4, !tbaa !4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %for.inc.6
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8
  %exitcond.7.not = icmp eq i64 %indvars.iv.next.7, 32000
  br i1 %exitcond.7.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !393
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @vpv(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__.vpv, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.022 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call12 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call13 = tail call float @calc_checksum(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__.vpv, i64 0, i64 0)) #11
  ret float %call13

for.cond.cleanup4:                                ; preds = %for.body5
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc10 = add nuw nsw i32 %nl.022, 1
  %exitcond.not = icmp eq i32 %inc10, 1000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !394

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add = fadd float %0, %1
  store float %add, float* %arrayidx7, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !395
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @vtv(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__.vtv, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.022 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call12 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call13 = tail call float @calc_checksum(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__func__.vtv, i64 0, i64 0)) #11
  ret float %call13

for.cond.cleanup4:                                ; preds = %for.body5
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc10 = add nuw nsw i32 %nl.022, 1
  %exitcond.not = icmp eq i32 %inc10, 1000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !396

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %0, %1
  store float %mul, float* %arrayidx7, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !397
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @vpvtv(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.vpvtv, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.025 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.vpvtv, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup4:                                ; preds = %for.body5
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.025, 1
  %exitcond.not = icmp eq i32 %inc12, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !398

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %add = fadd float %2, %mul
  store float %add, float* %arrayidx9, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !399
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @vpvts(%struct.args_t* nocapture %func_args) #0 {
entry:
  %arg_info = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  %0 = bitcast i8** %arg_info to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !49
  %2 = load i32, i32* %1, align 4, !tbaa !97
  %conv = sitofp i32 %2 to float
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.vpvts, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond3.preheader

for.cond3.preheader:                              ; preds = %for.cond.cleanup6, %entry
  %nl.026 = phi i32 [ 0, %entry ], [ %inc12, %for.cond.cleanup6 ]
  br label %for.body7

for.cond.cleanup:                                 ; preds = %for.cond.cleanup6
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call14 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call15 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.vpvts, i64 0, i64 0)) #11
  ret float %call15

for.cond.cleanup6:                                ; preds = %for.body7
  %call10 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc12 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc12, 100000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond3.preheader, !llvm.loop !400

for.body7:                                        ; preds = %for.body7, %for.cond3.preheader
  %indvar = phi i64 [ %indvar.next, %for.body7 ], [ 0, %for.cond3.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %3 = load float, float* %arrayidx, align 32, !tbaa !4
  %mul = fmul float %3, %conv
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %4 = load float, float* %arrayidx9, align 32, !tbaa !4
  %add = fadd float %4, %mul
  store float %add, float* %arrayidx9, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup6, label %for.body7, !llvm.loop !401
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @vpvpv(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.vpvpv, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.026 = phi i32 [ 0, %entry ], [ %inc13, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call15 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call16 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.vpvpv, i64 0, i64 0)) #11
  ret float %call16

for.cond.cleanup4:                                ; preds = %for.body5
  %call11 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc13 = add nuw nsw i32 %nl.026, 1
  %exitcond.not = icmp eq i32 %inc13, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !402

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %add = fadd float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %add10 = fadd float %2, %add
  store float %add10, float* %arrayidx9, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !403
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @vtvtv(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.vtvtv, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.029 = phi i32 [ 0, %entry ], [ %inc15, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call17 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call18 = tail call float @calc_checksum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.vtvtv, i64 0, i64 0)) #11
  ret float %call18

for.cond.cleanup4:                                ; preds = %for.body5
  %call13 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc15 = add nuw nsw i32 %nl.029, 1
  %exitcond.not = icmp eq i32 %inc15, 400000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !404

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvar
  %2 = load float, float* %arrayidx9, align 32, !tbaa !4
  %mul10 = fmul float %mul, %2
  store float %mul10, float* %arrayidx, align 32, !tbaa !4
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !405
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @vsumr(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.vsumr, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.022 = phi i32 [ 0, %entry ], [ %inc8, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %add.7.lcssa.lcssa = phi float [ %add.7.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call10 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %add.7.lcssa.lcssa

for.cond.cleanup4:                                ; preds = %for.body5
  %add.7.lcssa = phi float [ %add, %for.body5 ]
  %call6 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add.7.lcssa) #11
  %inc8 = add nuw nsw i32 %nl.022, 1
  %exitcond.not = icmp eq i32 %inc8, 1000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !406

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %sum.120 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %add = fadd float %sum.120, %0
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !407
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @vdotr(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__func__.vdotr, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.025 = phi i32 [ 0, %entry ], [ %inc10, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %add.7.lcssa.lcssa = phi float [ %add.7.lcssa, %for.cond.cleanup4 ]
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call12 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  ret float %add.7.lcssa.lcssa

for.cond.cleanup4:                                ; preds = %for.body5
  %add.7.lcssa = phi float [ %add, %for.body5 ]
  %call8 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float %add.7.lcssa) #11
  %inc10 = add nuw nsw i32 %nl.025, 1
  %exitcond.not = icmp eq i32 %inc10, 1000000
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !408

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvar = phi i64 [ %indvar.next, %for.body5 ], [ 0, %for.cond2.preheader ]
  %dot.123 = phi float [ 0.000000e+00, %for.cond2.preheader ], [ %add, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvar
  %0 = load float, float* %arrayidx, align 32, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvar
  %1 = load float, float* %arrayidx7, align 32, !tbaa !4
  %mul = fmul float %0, %1
  %add = fadd float %dot.123, %mul
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar, 31999
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5, !llvm.loop !409
}

; Function Attrs: nounwind optsize uwtable
define dso_local float @vbor(%struct.args_t* nocapture %func_args) #0 {
entry:
  %call = tail call i32 @initialise_arrays(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.vbor, i64 0, i64 0)) #11
  %t1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0
  %call1 = tail call i32 @gettimeofday(%struct.timeval* %t1, i8* null) #11
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.cond.cleanup4, %entry
  %nl.0158 = phi i32 [ 0, %entry ], [ %inc77, %for.cond.cleanup4 ]
  br label %for.body5

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4
  %t2 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1
  %call79 = tail call i32 @gettimeofday(%struct.timeval* nonnull %t2, i8* null) #11
  %call80 = tail call float @calc_checksum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.vbor, i64 0, i64 0)) #11
  ret float %call80

for.cond.cleanup4:                                ; preds = %for.body5
  %call75 = tail call i32 @dummy(float* getelementptr inbounds ([32000 x float], [32000 x float]* @a, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @b, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @c, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @d, i64 0, i64 0), float* getelementptr inbounds ([32000 x float], [32000 x float]* @e, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @bb, i64 0, i64 0), [256 x float]* getelementptr inbounds ([256 x [256 x float]], [256 x [256 x float]]* @cc, i64 0, i64 0), float 0.000000e+00) #11
  %inc77 = add nuw nsw i32 %nl.0158, 1
  %exitcond159.not = icmp eq i32 %inc77, 1000000
  br i1 %exitcond159.not, label %for.cond.cleanup, label %for.cond2.preheader, !llvm.loop !410

for.body5:                                        ; preds = %for.body5, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body5 ]
  %arrayidx = getelementptr inbounds [32000 x float], [32000 x float]* @a, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 4, !tbaa !4
  %arrayidx7 = getelementptr inbounds [32000 x float], [32000 x float]* @b, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx7, align 4, !tbaa !4
  %arrayidx9 = getelementptr inbounds [32000 x float], [32000 x float]* @c, i64 0, i64 %indvars.iv
  %2 = load float, float* %arrayidx9, align 4, !tbaa !4
  %arrayidx11 = getelementptr inbounds [32000 x float], [32000 x float]* @d, i64 0, i64 %indvars.iv
  %3 = load float, float* %arrayidx11, align 4, !tbaa !4
  %arrayidx13 = getelementptr inbounds [32000 x float], [32000 x float]* @e, i64 0, i64 %indvars.iv
  %4 = load float, float* %arrayidx13, align 4, !tbaa !4
  %arrayidx15 = getelementptr inbounds [256 x [256 x float]], [256 x [256 x float]]* @aa, i64 0, i64 0, i64 %indvars.iv
  %5 = load float, float* %arrayidx15, align 4, !tbaa !4
  %mul = fmul float %0, %1
  %mul16 = fmul float %mul, %2
  %mul18 = fmul float %mul, %3
  %add = fadd float %mul16, %mul18
  %mul20 = fmul float %mul, %4
  %add21 = fadd float %add, %mul20
  %mul23 = fmul float %mul, %5
  %add24 = fadd float %add21, %mul23
  %mul25 = fmul float %0, %2
  %mul26 = fmul float %mul25, %3
  %add27 = fadd float %mul26, %add24
  %mul29 = fmul float %mul25, %4
  %add30 = fadd float %mul29, %add27
  %mul32 = fmul float %mul25, %5
  %add33 = fadd float %mul32, %add30
  %mul34 = fmul float %0, %3
  %mul35 = fmul float %mul34, %4
  %add36 = fadd float %mul35, %add33
  %mul38 = fmul float %mul34, %5
  %add39 = fadd float %mul38, %add36
  %mul40 = fmul float %0, %4
  %mul41 = fmul float %mul40, %5
  %add42 = fadd float %mul41, %add39
  %mul43 = fmul float %1, %2
  %mul44 = fmul float %mul43, %3
  %mul46 = fmul float %mul43, %4
  %add47 = fadd float %mul44, %mul46
  %mul49 = fmul float %mul43, %5
  %add50 = fadd float %add47, %mul49
  %mul51 = fmul float %1, %3
  %mul52 = fmul float %mul51, %4
  %add53 = fadd float %mul52, %add50
  %mul55 = fmul float %mul51, %5
  %add56 = fadd float %mul55, %add53
  %mul57 = fmul float %1, %4
  %mul58 = fmul float %mul57, %5
  %add59 = fadd float %mul58, %add56
  %mul60 = fmul float %2, %3
  %mul61 = fmul float %mul60, %4
  %mul63 = fmul float %mul60, %5
  %add64 = fadd float %mul61, %mul63
  %mul65 = fmul float %2, %4
  %mul66 = fmul float %mul65, %5
  %add67 = fadd float %mul66, %add64
  %mul68 = fmul float %3, %4
  %mul69 = fmul float %mul68, %5
  %mul70 = fmul float %add59, %add42
  %mul71 = fmul float %add67, %mul70
  %mul72 = fmul float %mul69, %mul71
  %arrayidx74 = getelementptr inbounds [32000 x float], [32000 x float]* @x, i64 0, i64 %indvars.iv
  store float %mul72, float* %arrayidx74, align 4, !tbaa !4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond.not, label %for.cond.cleanup4, label %for.body5, !llvm.loop !411
}

; Function Attrs: nounwind optsize uwtable
define dso_local void @time_function(float (%struct.args_t*)* nocapture %vector_func, i8* %arg_info) local_unnamed_addr #0 {
entry:
  %func_args = alloca %struct.args_t, align 8
  %0 = bitcast %struct.args_t* %func_args to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %0, i8 0, i64 32, i1 false)
  %arg_info1 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 2
  store i8* %arg_info, i8** %arg_info1, align 8, !tbaa !49
  %call = call float %vector_func(%struct.args_t* nonnull %func_args) #11
  %conv = fpext float %call to double
  %tv_sec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8, !tbaa !412
  %conv2 = sitofp i64 %1 to double
  %tv_usec = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !413
  %conv4 = sitofp i64 %2 to double
  %div = fdiv double %conv4, 1.000000e+06
  %add = fadd double %div, %conv2
  %tv_sec5 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 0
  %3 = load i64, i64* %tv_sec5, align 8, !tbaa !414
  %conv6 = sitofp i64 %3 to double
  %tv_usec8 = getelementptr inbounds %struct.args_t, %struct.args_t* %func_args, i64 0, i32 1, i32 1
  %4 = load i64, i64* %tv_usec8, align 8, !tbaa !415
  %conv9 = sitofp i64 %4 to double
  %div10 = fdiv double %conv9, 1.000000e+06
  %add11 = fadd double %div10, %conv6
  %sub = fsub double %add11, %add
  %call12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %sub, double %conv) #12
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #14
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9

; Function Attrs: nofree nounwind optsize
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind optsize uwtable
define dso_local i32 @main(i32 %argc, i8** nocapture readnone %argv) local_unnamed_addr #0 {
entry:
  %n1 = alloca i32, align 4
  %ip = alloca i32*, align 8
  %s1 = alloca float, align 4
  %s2 = alloca float, align 4
  %.compoundliteral = alloca %struct.anon.5, align 4
  %.compoundliteral1 = alloca %struct.anon.6, align 4
  %.compoundliteral4 = alloca %struct.anon.7, align 4
  %.compoundliteral6 = alloca %struct.anon.8, align 4
  %.compoundliteral9 = alloca %struct.anon.9, align 8
  %.compoundliteral12 = alloca %struct.anon.10, align 8
  %.compoundliteral15 = alloca %struct.anon.11, align 8
  %0 = bitcast i32* %n1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #14
  store i32 1, i32* %n1, align 4, !tbaa !97
  %1 = bitcast i32** %ip to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #14
  %2 = bitcast float* %s1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #14
  %3 = bitcast float* %s2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #14
  call void @init(i32** nonnull %ip, float* nonnull %s1, float* nonnull %s2) #11
  %puts = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([26 x i8], [26 x i8]* @str, i64 0, i64 0))
  call void @time_function(float (%struct.args_t*)* nonnull @s000, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s111, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1111, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s112, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1112, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s113, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1113, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s114, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s115, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1115, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s116, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s118, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s119, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1119, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s121, i8* null) #12
  %a = getelementptr inbounds %struct.anon.5, %struct.anon.5* %.compoundliteral, i64 0, i32 0
  store i32 1, i32* %a, align 4, !tbaa !54
  %b = getelementptr inbounds %struct.anon.5, %struct.anon.5* %.compoundliteral, i64 0, i32 1
  store i32 1, i32* %b, align 4, !tbaa !57
  %4 = bitcast %struct.anon.5* %.compoundliteral to i8*
  call void @time_function(float (%struct.args_t*)* nonnull @s122, i8* nonnull %4) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s123, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s124, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s125, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s126, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s127, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s128, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s131, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s132, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s141, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s151, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s152, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s161, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1161, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s162, i8* nonnull %0) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s171, i8* nonnull %0) #12
  %a2 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %.compoundliteral1, i64 0, i32 0
  %5 = load i32, i32* %n1, align 4, !tbaa !97
  store i32 %5, i32* %a2, align 4, !tbaa !54
  %b3 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %.compoundliteral1, i64 0, i32 1
  store i32 1, i32* %b3, align 4, !tbaa !57
  %6 = bitcast %struct.anon.6* %.compoundliteral1 to i8*
  call void @time_function(float (%struct.args_t*)* nonnull @s172, i8* nonnull %6) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s173, i8* null) #12
  %a5 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %.compoundliteral4, i64 0, i32 0
  store i32 16000, i32* %a5, align 4, !tbaa !416
  %7 = bitcast %struct.anon.7* %.compoundliteral4 to i8*
  call void @time_function(float (%struct.args_t*)* nonnull @s174, i8* nonnull %7) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s175, i8* nonnull %0) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s176, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s211, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s212, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1213, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s221, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1221, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s222, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s231, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s232, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1232, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s233, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s2233, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s235, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s241, i8* null) #12
  %a7 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %.compoundliteral6, i64 0, i32 0
  %8 = load float, float* %s1, align 4, !tbaa !4
  store float %8, float* %a7, align 4, !tbaa !164
  %b8 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %.compoundliteral6, i64 0, i32 1
  %9 = load float, float* %s2, align 4, !tbaa !4
  store float %9, float* %b8, align 4, !tbaa !166
  %10 = bitcast %struct.anon.8* %.compoundliteral6 to i8*
  call void @time_function(float (%struct.args_t*)* nonnull @s242, i8* nonnull %10) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s243, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s244, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1244, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s2244, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s251, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1251, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s2251, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s3251, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s252, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s253, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s254, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s255, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s256, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s257, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s258, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s261, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s271, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s272, i8* nonnull %2) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s273, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s274, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s275, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s2275, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s276, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s277, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s278, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s279, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1279, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s2710, i8* nonnull %2) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s2711, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s2712, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s281, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1281, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s291, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s292, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s293, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s2101, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s2102, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s2111, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s311, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s31111, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s312, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s313, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s314, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s315, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s316, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s317, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s318, i8* nonnull %0) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s319, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s3110, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s13110, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s3111, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s3112, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s3113, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s321, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s322, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s323, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s331, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s332, i8* nonnull %2) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s341, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s342, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s343, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s351, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1351, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s352, i8* null) #12
  %11 = bitcast i32** %ip to i8**
  %12 = load i8*, i8** %11, align 8, !tbaa !325
  call void @time_function(float (%struct.args_t*)* nonnull @s353, i8* %12) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s421, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s1421, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s422, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s423, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s424, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s431, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s441, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s442, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s443, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s451, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s452, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s453, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s471, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s481, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s482, i8* null) #12
  %13 = load i8*, i8** %11, align 8, !tbaa !325
  call void @time_function(float (%struct.args_t*)* nonnull @s491, i8* %13) #12
  %a10 = getelementptr inbounds %struct.anon.9, %struct.anon.9* %.compoundliteral9, i64 0, i32 0
  %14 = load i32*, i32** %ip, align 8, !tbaa !325
  store i32* %14, i32** %a10, align 8, !tbaa !361
  %b11 = getelementptr inbounds %struct.anon.9, %struct.anon.9* %.compoundliteral9, i64 0, i32 1
  %15 = load float, float* %s1, align 4, !tbaa !4
  store float %15, float* %b11, align 8, !tbaa !363
  %16 = bitcast %struct.anon.9* %.compoundliteral9 to i8*
  call void @time_function(float (%struct.args_t*)* nonnull @s4112, i8* nonnull %16) #12
  %17 = load i8*, i8** %11, align 8, !tbaa !325
  call void @time_function(float (%struct.args_t*)* nonnull @s4113, i8* %17) #12
  %a13 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %.compoundliteral12, i64 0, i32 0
  %18 = load i32*, i32** %ip, align 8, !tbaa !325
  store i32* %18, i32** %a13, align 8, !tbaa !368
  %b14 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %.compoundliteral12, i64 0, i32 1
  %19 = load i32, i32* %n1, align 4, !tbaa !97
  store i32 %19, i32* %b14, align 8, !tbaa !370
  %20 = bitcast %struct.anon.10* %.compoundliteral12 to i8*
  call void @time_function(float (%struct.args_t*)* nonnull @s4114, i8* nonnull %20) #12
  %21 = load i8*, i8** %11, align 8, !tbaa !325
  call void @time_function(float (%struct.args_t*)* nonnull @s4115, i8* %21) #12
  %a16 = getelementptr inbounds %struct.anon.11, %struct.anon.11* %.compoundliteral15, i64 0, i32 0
  %22 = load i32*, i32** %ip, align 8, !tbaa !325
  store i32* %22, i32** %a16, align 8, !tbaa !376
  %b17 = getelementptr inbounds %struct.anon.11, %struct.anon.11* %.compoundliteral15, i64 0, i32 1
  store i32 128, i32* %b17, align 8, !tbaa !378
  %c = getelementptr inbounds %struct.anon.11, %struct.anon.11* %.compoundliteral15, i64 0, i32 2
  %23 = load i32, i32* %n1, align 4, !tbaa !97
  store i32 %23, i32* %c, align 4, !tbaa !379
  %24 = bitcast %struct.anon.11* %.compoundliteral15 to i8*
  call void @time_function(float (%struct.args_t*)* nonnull @s4116, i8* nonnull %24) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s4117, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @s4121, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @va, i8* null) #12
  %25 = load i8*, i8** %11, align 8, !tbaa !325
  call void @time_function(float (%struct.args_t*)* nonnull @vag, i8* %25) #12
  %26 = load i8*, i8** %11, align 8, !tbaa !325
  call void @time_function(float (%struct.args_t*)* nonnull @vas, i8* %26) #12
  call void @time_function(float (%struct.args_t*)* nonnull @vif, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @vpv, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @vtv, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @vpvtv, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @vpvts, i8* nonnull %2) #12
  call void @time_function(float (%struct.args_t*)* nonnull @vpvpv, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @vtvtv, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @vsumr, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @vdotr, i8* null) #12
  call void @time_function(float (%struct.args_t*)* nonnull @vbor, i8* null) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #14
  ret i32 0
}

; Function Attrs: optsize
declare dso_local void @init(i32**, float*, float*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #10

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

attributes #0 = { nounwind optsize uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { optsize "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind optsize "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nofree norecurse nounwind optsize uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind optsize readonly uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #7 = { norecurse nounwind optsize readnone uwtable "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind optsize "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #10 = { nofree nounwind }
attributes #11 = { nounwind optsize }
attributes #12 = { optsize }
attributes #13 = { noreturn nounwind optsize }
attributes #14 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0 (https://github.com/rcorcs/llvm-project.git 119a5ecb40119a87b443629d5136121ab0df5bcb)"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5, !5, i64 0}
!5 = !{!"float", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.count", i32 8}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !15}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !3}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !3}
!29 = distinct !{!29, !3}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !3}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !3}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !3}
!36 = distinct !{!36, !3}
!37 = distinct !{!37, !3}
!38 = distinct !{!38, !3}
!39 = distinct !{!39, !3}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !15}
!42 = distinct !{!42, !3}
!43 = distinct !{!43, !3}
!44 = distinct !{!44, !3}
!45 = distinct !{!45, !3}
!46 = distinct !{!46, !3}
!47 = distinct !{!47, !15}
!48 = distinct !{!48, !3}
!49 = !{!50, !53, i64 32}
!50 = !{!"args_t", !51, i64 0, !51, i64 16, !53, i64 32}
!51 = !{!"timeval", !52, i64 0, !52, i64 8}
!52 = !{!"long", !6, i64 0}
!53 = !{!"any pointer", !6, i64 0}
!54 = !{!55, !56, i64 0}
!55 = !{!"", !56, i64 0, !56, i64 4}
!56 = !{!"int", !6, i64 0}
!57 = !{!55, !56, i64 4}
!58 = distinct !{!58, !3}
!59 = distinct !{!59, !3}
!60 = distinct !{!60, !3}
!61 = distinct !{!61, !3}
!62 = distinct !{!62, !3}
!63 = distinct !{!63, !3}
!64 = distinct !{!64, !3}
!65 = distinct !{!65, !3}
!66 = distinct !{!66, !3}
!67 = distinct !{!67, !3}
!68 = distinct !{!68, !3}
!69 = distinct !{!69, !3}
!70 = distinct !{!70, !15}
!71 = distinct !{!71, !3}
!72 = distinct !{!72, !3}
!73 = distinct !{!73, !3}
!74 = distinct !{!74, !3}
!75 = distinct !{!75, !3}
!76 = distinct !{!76, !3}
!77 = distinct !{!77, !15}
!78 = distinct !{!78, !3}
!79 = distinct !{!79, !3}
!80 = distinct !{!80, !15}
!81 = distinct !{!81, !3}
!82 = distinct !{!82, !3}
!83 = distinct !{!83, !3}
!84 = distinct !{!84, !3}
!85 = distinct !{!85, !3}
!86 = distinct !{!86, !15}
!87 = distinct !{!87, !3}
!88 = distinct !{!88, !3}
!89 = distinct !{!89, !3}
!90 = distinct !{!90, !3}
!91 = distinct !{!91, !3}
!92 = distinct !{!92, !15}
!93 = distinct !{!93, !3}
!94 = distinct !{!94, !3}
!95 = distinct !{!95, !15}
!96 = distinct !{!96, !3}
!97 = !{!56, !56, i64 0}
!98 = distinct !{!98, !15}
!99 = distinct !{!99, !3}
!100 = distinct !{!100, !3}
!101 = distinct !{!101, !3}
!102 = distinct !{!102, !3}
!103 = distinct !{!103, !3}
!104 = distinct !{!104, !3}
!105 = distinct !{!105, !3}
!106 = distinct !{!106, !3}
!107 = distinct !{!107, !3}
!108 = distinct !{!108, !3}
!109 = distinct !{!109, !3}
!110 = distinct !{!110, !3}
!111 = distinct !{!111, !3}
!112 = distinct !{!112, !3}
!113 = distinct !{!113, !3}
!114 = distinct !{!114, !3}
!115 = distinct !{!115, !3}
!116 = distinct !{!116, !3}
!117 = distinct !{!117, !15}
!118 = distinct !{!118, !3}
!119 = distinct !{!119, !3}
!120 = distinct !{!120, !15}
!121 = distinct !{!121, !3}
!122 = distinct !{!122, !3}
!123 = distinct !{!123, !15}
!124 = distinct !{!124, !3}
!125 = distinct !{!125, !3}
!126 = distinct !{!126, !15}
!127 = distinct !{!127, !3}
!128 = distinct !{!128, !3}
!129 = distinct !{!129, !15}
!130 = distinct !{!130, !3}
!131 = distinct !{!131, !3}
!132 = distinct !{!132, !15}
!133 = distinct !{!133, !3}
!134 = distinct !{!134, !3}
!135 = distinct !{!135, !3}
!136 = distinct !{!136, !15}
!137 = distinct !{!137, !3}
!138 = distinct !{!138, !3}
!139 = distinct !{!139, !3}
!140 = distinct !{!140, !3}
!141 = distinct !{!141, !3}
!142 = distinct !{!142, !3}
!143 = distinct !{!143, !3}
!144 = distinct !{!144, !3}
!145 = distinct !{!145, !3}
!146 = distinct !{!146, !15}
!147 = distinct !{!147, !3}
!148 = distinct !{!148, !15}
!149 = distinct !{!149, !3}
!150 = distinct !{!150, !3}
!151 = distinct !{!151, !3}
!152 = distinct !{!152, !15}
!153 = distinct !{!153, !3}
!154 = distinct !{!154, !15}
!155 = distinct !{!155, !3}
!156 = distinct !{!156, !3}
!157 = distinct !{!157, !3}
!158 = distinct !{!158, !3}
!159 = distinct !{!159, !15}
!160 = distinct !{!160, !3}
!161 = distinct !{!161, !3}
!162 = distinct !{!162, !15}
!163 = distinct !{!163, !3}
!164 = !{!165, !5, i64 0}
!165 = !{!"", !5, i64 0, !5, i64 4}
!166 = !{!165, !5, i64 4}
!167 = distinct !{!167, !3}
!168 = distinct !{!168, !15}
!169 = distinct !{!169, !3}
!170 = distinct !{!170, !3}
!171 = distinct !{!171, !15}
!172 = distinct !{!172, !3}
!173 = distinct !{!173, !3}
!174 = distinct !{!174, !15}
!175 = distinct !{!175, !3}
!176 = distinct !{!176, !3}
!177 = distinct !{!177, !15}
!178 = distinct !{!178, !3}
!179 = distinct !{!179, !3}
!180 = distinct !{!180, !15}
!181 = distinct !{!181, !3}
!182 = distinct !{!182, !3}
!183 = distinct !{!183, !3}
!184 = distinct !{!184, !3}
!185 = distinct !{!185, !3}
!186 = distinct !{!186, !3}
!187 = distinct !{!187, !3}
!188 = distinct !{!188, !3}
!189 = distinct !{!189, !15}
!190 = distinct !{!190, !3}
!191 = distinct !{!191, !3}
!192 = distinct !{!192, !3}
!193 = distinct !{!193, !3}
!194 = distinct !{!194, !3}
!195 = distinct !{!195, !3}
!196 = distinct !{!196, !3}
!197 = distinct !{!197, !3}
!198 = distinct !{!198, !3}
!199 = distinct !{!199, !3}
!200 = distinct !{!200, !3}
!201 = distinct !{!201, !15}
!202 = distinct !{!202, !3}
!203 = distinct !{!203, !3}
!204 = distinct !{!204, !3}
!205 = distinct !{!205, !3}
!206 = distinct !{!206, !3}
!207 = distinct !{!207, !3}
!208 = distinct !{!208, !3}
!209 = distinct !{!209, !15}
!210 = distinct !{!210, !3}
!211 = distinct !{!211, !3}
!212 = distinct !{!212, !3}
!213 = distinct !{!213, !3}
!214 = distinct !{!214, !3}
!215 = distinct !{!215, !3}
!216 = distinct !{!216, !3}
!217 = distinct !{!217, !3}
!218 = distinct !{!218, !3}
!219 = distinct !{!219, !3}
!220 = distinct !{!220, !15}
!221 = distinct !{!221, !3}
!222 = distinct !{!222, !3}
!223 = distinct !{!223, !3}
!224 = distinct !{!224, !3}
!225 = distinct !{!225, !3}
!226 = distinct !{!226, !3}
!227 = distinct !{!227, !3}
!228 = distinct !{!228, !3}
!229 = distinct !{!229, !15}
!230 = distinct !{!230, !3}
!231 = distinct !{!231, !3}
!232 = distinct !{!232, !3}
!233 = distinct !{!233, !3}
!234 = distinct !{!234, !3}
!235 = distinct !{!235, !3}
!236 = distinct !{!236, !3}
!237 = distinct !{!237, !3}
!238 = distinct !{!238, !3}
!239 = distinct !{!239, !3}
!240 = distinct !{!240, !3}
!241 = distinct !{!241, !3}
!242 = distinct !{!242, !3}
!243 = distinct !{!243, !3}
!244 = distinct !{!244, !3}
!245 = distinct !{!245, !3}
!246 = distinct !{!246, !3}
!247 = distinct !{!247, !3}
!248 = distinct !{!248, !3}
!249 = distinct !{!249, !3}
!250 = distinct !{!250, !3}
!251 = distinct !{!251, !3}
!252 = distinct !{!252, !3}
!253 = distinct !{!253, !3}
!254 = distinct !{!254, !3}
!255 = distinct !{!255, !3}
!256 = distinct !{!256, !3}
!257 = distinct !{!257, !3}
!258 = distinct !{!258, !3}
!259 = distinct !{!259, !3}
!260 = distinct !{!260, !15}
!261 = distinct !{!261, !3}
!262 = distinct !{!262, !3}
!263 = distinct !{!263, !3}
!264 = distinct !{!264, !3}
!265 = distinct !{!265, !3}
!266 = distinct !{!266, !3}
!267 = distinct !{!267, !3}
!268 = distinct !{!268, !3}
!269 = distinct !{!269, !3}
!270 = distinct !{!270, !3}
!271 = distinct !{!271, !3}
!272 = distinct !{!272, !3}
!273 = distinct !{!273, !3}
!274 = distinct !{!274, !3}
!275 = distinct !{!275, !3}
!276 = distinct !{!276, !15}
!277 = distinct !{!277, !3}
!278 = distinct !{!278, !3}
!279 = distinct !{!279, !3}
!280 = distinct !{!280, !3}
!281 = distinct !{!281, !15}
!282 = distinct !{!282, !3}
!283 = distinct !{!283, !3}
!284 = distinct !{!284, !3}
!285 = distinct !{!285, !3}
!286 = distinct !{!286, !3}
!287 = distinct !{!287, !3}
!288 = distinct !{!288, !3}
!289 = distinct !{!289, !3}
!290 = distinct !{!290, !3}
!291 = distinct !{!291, !3}
!292 = distinct !{!292, !3}
!293 = distinct !{!293, !3}
!294 = distinct !{!294, !3}
!295 = distinct !{!295, !3}
!296 = distinct !{!296, !3}
!297 = distinct !{!297, !3}
!298 = distinct !{!298, !15}
!299 = distinct !{!299, !3}
!300 = distinct !{!300, !3}
!301 = distinct !{!301, !15}
!302 = distinct !{!302, !3}
!303 = distinct !{!303, !3}
!304 = distinct !{!304, !15}
!305 = distinct !{!305, !3}
!306 = distinct !{!306, !3}
!307 = distinct !{!307, !3}
!308 = distinct !{!308, !3}
!309 = distinct !{!309, !3}
!310 = distinct !{!310, !3}
!311 = distinct !{!311, !3}
!312 = distinct !{!312, !3}
!313 = distinct !{!313, !3}
!314 = distinct !{!314, !3}
!315 = distinct !{!315, !3}
!316 = distinct !{!316, !3}
!317 = distinct !{!317, !3}
!318 = distinct !{!318, !3}
!319 = distinct !{!319, !3}
!320 = distinct !{!320, !3}
!321 = distinct !{!321, !3}
!322 = distinct !{!322, !3}
!323 = distinct !{!323, !3}
!324 = distinct !{!324, !3}
!325 = !{!53, !53, i64 0}
!326 = distinct !{!326, !3}
!327 = distinct !{!327, !15}
!328 = distinct !{!328, !3}
!329 = distinct !{!329, !3}
!330 = distinct !{!330, !3}
!331 = distinct !{!331, !3}
!332 = distinct !{!332, !3}
!333 = distinct !{!333, !3}
!334 = distinct !{!334, !15}
!335 = distinct !{!335, !3}
!336 = distinct !{!336, !3}
!337 = distinct !{!337, !15}
!338 = distinct !{!338, !3}
!339 = distinct !{!339, !3}
!340 = distinct !{!340, !3}
!341 = distinct !{!341, !3}
!342 = distinct !{!342, !3}
!343 = distinct !{!343, !3}
!344 = distinct !{!344, !3}
!345 = distinct !{!345, !3}
!346 = distinct !{!346, !3}
!347 = distinct !{!347, !3}
!348 = distinct !{!348, !3}
!349 = distinct !{!349, !3}
!350 = distinct !{!350, !3}
!351 = distinct !{!351, !3}
!352 = distinct !{!352, !3}
!353 = distinct !{!353, !3}
!354 = distinct !{!354, !3}
!355 = distinct !{!355, !3}
!356 = distinct !{!356, !3}
!357 = distinct !{!357, !3}
!358 = distinct !{!358, !3}
!359 = distinct !{!359, !3}
!360 = distinct !{!360, !3}
!361 = !{!362, !53, i64 0}
!362 = !{!"", !53, i64 0, !5, i64 8}
!363 = !{!362, !5, i64 8}
!364 = distinct !{!364, !3}
!365 = distinct !{!365, !3}
!366 = distinct !{!366, !3}
!367 = distinct !{!367, !3}
!368 = !{!369, !53, i64 0}
!369 = !{!"", !53, i64 0, !56, i64 8}
!370 = !{!369, !56, i64 8}
!371 = distinct !{!371, !3}
!372 = distinct !{!372, !3}
!373 = distinct !{!373, !3}
!374 = distinct !{!374, !3}
!375 = distinct !{!375, !3}
!376 = !{!377, !53, i64 0}
!377 = !{!"", !53, i64 0, !56, i64 8, !56, i64 12}
!378 = !{!377, !56, i64 8}
!379 = !{!377, !56, i64 12}
!380 = distinct !{!380, !3}
!381 = distinct !{!381, !15}
!382 = distinct !{!382, !3}
!383 = distinct !{!383, !3}
!384 = distinct !{!384, !3}
!385 = distinct !{!385, !3}
!386 = distinct !{!386, !3}
!387 = distinct !{!387, !3}
!388 = distinct !{!388, !3}
!389 = distinct !{!389, !3}
!390 = distinct !{!390, !3}
!391 = distinct !{!391, !3}
!392 = distinct !{!392, !3}
!393 = distinct !{!393, !3}
!394 = distinct !{!394, !3}
!395 = distinct !{!395, !3}
!396 = distinct !{!396, !3}
!397 = distinct !{!397, !3}
!398 = distinct !{!398, !3}
!399 = distinct !{!399, !3}
!400 = distinct !{!400, !3}
!401 = distinct !{!401, !3}
!402 = distinct !{!402, !3}
!403 = distinct !{!403, !3}
!404 = distinct !{!404, !3}
!405 = distinct !{!405, !3}
!406 = distinct !{!406, !3}
!407 = distinct !{!407, !3}
!408 = distinct !{!408, !3}
!409 = distinct !{!409, !3}
!410 = distinct !{!410, !3}
!411 = distinct !{!411, !3}
!412 = !{!50, !52, i64 0}
!413 = !{!50, !52, i64 8}
!414 = !{!50, !52, i64 16}
!415 = !{!50, !52, i64 24}
!416 = !{!417, !56, i64 0}
!417 = !{!"", !56, i64 0}
